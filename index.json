[{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks 1 2 3 4 5 class Solution { public int trap(int[] height) { } } List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://volyx.in/posts/test/","summary":"\u003cp\u003eThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\u003c/p\u003e","title":"Markdown Syntax Guide For L2"},{"content":"\u0026mdash; Day 8: Treetop Tree House \u0026mdash; The expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they\u0026rsquo;re curious if this would be a good location for a tree house.\nFirst, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.\nThe Elves have already launched a quadcopter to generate a map with the height of each tree (your puzzle input). For example:\n1 2 3 4 5 6 30373 25512 65332 33549 35390 Each tree is represented as a single digit whose value is its height, where 0 is the shortest and 9 is the tallest. A tree is visible if all of the other trees between it and an edge of the grid are shorter than it. Only consider trees in the same row or column; that is, only look up, down, left, or right from any given tree.\nAll of the trees around the edge of the grid are visible - since they are already on the edge, there are no trees to block the view. In this example, that only leaves the interior nine trees to consider:\nThe top-left 5 is visible from the left and top. (It isn\u0026rsquo;t visible from the right or bottom since other trees of height 5 are in the way.) The top-middle 5 is visible from the top and right. The top-right 1 is not visible from any direction; for it to be visible, there would need to only be trees of height 0 between it and an edge. The left-middle 5 is visible, but only from the right. The center 3 is not visible from any direction; for it to be visible, there would need to be only trees of at most height 2 between it and an edge. The right-middle 3 is visible from the right. In the bottom row, the middle 5 is visible, but the 3 and 4 are not. With 16 trees visible on the edge and another 5 visible in the interior, a total of 21 trees are visible in this arrangement.\nConsider your map; how many trees are visible from outside the grid?\n\u0026mdash; Part Two \u0026mdash; Content with the amount of tree cover available, the Elves just need to know the best spot to build their tree house: they would like to be able to see a lot of trees.\nTo measure the viewing distance from a given tree, look up, down, left, and right from that tree; stop if you reach an edge or at the first tree that is the same height or taller than the tree under consideration. (If a tree is right on the edge, at least one of its viewing distances will be zero.)\nThe Elves don\u0026rsquo;t care about distant trees taller than those found by the rules above; the proposed tree house has large eaves to keep it dry, so they wouldn\u0026rsquo;t be able to see higher than the tree house anyway.\nIn the example above, consider the middle 5 in the second row:\n1 2 3 4 5 6 7 8 9 10 30373 25512 65332 33549 35390 Looking up, its view is not blocked; it can see 1 tree (of height 3). Looking left, its view is blocked immediately; it can see only 1 tree (of height 5, right next to it). Looking right, its view is not blocked; it can see 2 trees. Looking down, its view is blocked eventually; it can see 2 trees (one of height 3, then the tree of height 5 that blocks its view). A tree\u0026#39;s scenic score is found by multiplying together its viewing distance in each of the four directions. For this tree, this is 4 (found by multiplying 1 * 1 * 2 * 2). However, you can do even better: consider the tree of height 5 in the middle of the fourth row:\n1 2 3 4 5 6 7 8 9 10 30373 25512 65332 33549 35390 Looking up, its view is blocked at 2 trees (by another tree with a height of 5). Looking left, its view is not blocked; it can see 2 trees. Looking down, its view is also not blocked; it can see 1 tree. Looking right, its view is blocked at 2 trees (by a massive tree of height 9). This tree\u0026#39;s scenic score is 8 (2 * 2 * 1 * 2); this is the ideal spot for the tree house. Consider each tree on your map. What is the highest scenic score possible for any tree?\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) type Node struct { name string parent *Node child []*Node size int isDir bool } func main() { readFile, err := os.Open(\u0026#34;input.txt\u0026#34;) if err != nil { fmt.Println(err) } defer readFile.Close() fileScanner := bufio.NewScanner(readFile) fileScanner.Split(bufio.ScanLines) line := \u0026#34;\u0026#34; var rows int = 0 var cols int = 0 forest := [][]int{} var bottomUp, topDown, left, right, score [][]int for fileScanner.Scan() { line = fileScanner.Text() rows++ if cols == 0 { cols = len(line) } println(line) forest = append(forest, bytesToInts(line)) bottomUp = append(bottomUp, bytesToInts(line)) topDown = append(topDown, bytesToInts(line)) left = append(left, bytesToInts(line)) right = append(right, bytesToInts(line)) score = append(score, bytesToInts(line)) } total := 0 initUp(\u0026amp;bottomUp) initDown(\u0026amp;topDown) initLeft(\u0026amp;left) initRight(\u0026amp;right) println(\u0026#34;down\u0026#34;) // printForest(\u0026amp;down) println(\u0026#34;left\u0026#34;) // printForest(\u0026amp;left) println(\u0026#34;right\u0026#34;) // printForest(\u0026amp;right) println(\u0026#34;forest\u0026#34;) // printForest(\u0026amp;forest) for i := 0; i \u0026lt; rows; i++ { for j := 0; j \u0026lt; cols; j++ { if i == 0 || j == 0 || i == rows-1 || j == cols-1 { total++ continue } if forest[i][j] \u0026gt; bottomUp[i+1][j] || forest[i][j] \u0026gt; right[i][j-1] || forest[i][j] \u0026gt; topDown[i-1][j] || forest[i][j] \u0026gt; left[i][j+1] { println(\u0026#34;i=\u0026#34;, i, \u0026#34;j=\u0026#34;, j, \u0026#34;val=\u0026#34;, forest[i][j]) total++ } } } println(\u0026#34;total\u0026#34;, total) maxScore := 0 for i := 0; i \u0026lt; rows; i++ { for j := 0; j \u0026lt; cols; j++ { // up upScore := 0 for k := i - 1; k \u0026gt;= 0; k-- { if forest[k][j] \u0026lt; forest[i][j] { upScore++ } else { upScore++ break } } // right rightScore := 0 for k := j + 1; k \u0026lt; cols; k++ { if forest[i][k] \u0026lt; forest[i][j] { rightScore++ } else { rightScore++ break } } // down downScore := 0 for k := i + 1; k \u0026lt; rows; k++ { if forest[k][j] \u0026lt; forest[i][j] { downScore++ } else { downScore++ break } } // left leftScore := 0 for k := j - 1; k \u0026gt;= 0; k-- { if forest[i][k] \u0026lt; forest[i][j] { leftScore++ } else { leftScore++ break } } // println(\u0026#34;i=\u0026#34;, i, \u0026#34;j=\u0026#34;, j) // println(\u0026#34;upScore\u0026#34;, upScore, \u0026#34;downScore\u0026#34;, downScore, \u0026#34;leftScore\u0026#34;, leftScore, \u0026#34;rightScore\u0026#34;, rightScore) score[i][j] = upScore * downScore * leftScore * rightScore maxScore = max(maxScore, score[i][j]) } } println(\u0026#34;score\u0026#34;) printForest(\u0026amp;score) println(\u0026#34;maxScore\u0026#34;, maxScore) } func printForest(f *[][]int) { for i := 0; i \u0026lt; len(*f); i++ { fmt.Printf(\u0026#34;%v\\n\u0026#34;, (*f)[i]) } } func bytesToInts(line string) []int { res := []int{} for i := 0; i \u0026lt; len(line); i++ { res = append(res, int(line[i]-48)) } return res } func initUp(up *[][]int) { // 2 // 1 // 0 rows := len(*up) cols := len((*up)[0]) for j := 0; j \u0026lt; cols; j++ { for i := rows - 2; i \u0026gt;= 0; i-- { (*up)[i][j] = max((*up)[i][j], (*up)[i+1][j]) } } } func initDown(down *[][]int) { rows := len(*down) cols := len((*down)[0]) for j := 0; j \u0026lt; cols; j++ { for i := 1; i \u0026lt; rows; i++ { (*down)[i][j] = max((*down)[i][j], (*down)[i-1][j]) } } } func initLeft(left *[][]int) { rows := len(*left) cols := len((*left)[0]) for i := 0; i \u0026lt; rows; i++ { for j := cols - 2; j \u0026gt;= 0; j-- { (*left)[i][j] = max((*left)[i][j], (*left)[i][j+1]) } } } func initRight(right *[][]int) { rows := len(*right) cols := len((*right)[0]) for i := 0; i \u0026lt; rows; i++ { for j := 1; j \u0026lt; cols; j++ { (*right)[i][j] = max((*right)[i][j], (*right)[i][j-1]) } } } func max(a, b int) int { if a \u0026gt; b { return a } else { return b } } ","permalink":"https://volyx.in/posts/2022-12-06-day-8-treetop-tree-house/","summary":"\u003cp\u003e\u0026mdash; Day 8: Treetop Tree House \u0026mdash;\nThe expedition comes across a peculiar patch of tall trees all planted carefully in a grid. The Elves explain that a previous expedition planted these trees as a reforestation effort. Now, they\u0026rsquo;re curious if this would be a good location for a tree house.\u003c/p\u003e\n\u003cp\u003eFirst, determine whether there is enough tree cover here to keep a tree house hidden. To do this, you need to count the number of trees that are visible from outside the grid when looking directly along a row or column.\u003c/p\u003e","title":"AOC 2022. Day 8: Treetop Tree House"},{"content":"\u0026mdash; Day 7: No Space Left On Device \u0026mdash; You can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?\nThe device the Elves gave you has problems with more than just its communication system. You try to run a system update:\n$ system-update \u0026ndash;please \u0026ndash;pretty-please-with-sugar-on-top Error: No space left on device Perhaps you can delete some files to make space for the update?\nYou browse around the filesystem to assess the situation and save the resulting terminal output (your puzzle input). For example:\n$ cd / $ ls dir a 14848514 b.txt 8504156 c.dat dir d $ cd a $ ls dir e 29116 f 2557 g 62596 h.lst $ cd e $ ls 584 i $ cd .. $ cd .. $ cd d $ ls 4060174 j 8033020 d.log 5626152 d.ext 7214296 k The filesystem consists of a tree of files (plain data) and directories (which can contain other directories or files). The outermost directory is called /. You can navigate around the filesystem, moving into or out of directories and listing the contents of the directory you\u0026rsquo;re currently in.\nWithin the terminal output, lines that begin with $ are commands you executed, very much like some modern computers:\ncd means change directory. This changes which directory is the current directory, but the specific result depends on the argument: cd x moves in one level: it looks in the current directory for the directory named x and makes it the current directory. cd .. moves out one level: it finds the directory that contains the current directory, then makes that directory the current directory. cd / switches the current directory to the outermost directory, /. ls means list. It prints out all of the files and directories immediately contained by the current directory: 123 abc means that the current directory contains a file named abc with size 123. dir xyz means that the current directory contains a directory named xyz. Given the commands and output in the example above, you can determine that the filesystem looks visually like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 - / (dir) - a (dir) - e (dir) - i (file, size=584) - f (file, size=29116) - g (file, size=2557) - h.lst (file, size=62596) - b.txt (file, size=14848514) - c.dat (file, size=8504156) - d (dir) - j (file, size=4060174) - d.log (file, size=8033020) - d.ext (file, size=5626152) - k (file, size=7214296) Here, there are four directories: / (the outermost directory), a and d (which are in /), and e (which is in a). These directories also contain files of various sizes. Since the disk is full, your first step should probably be to find directories that are good candidates for deletion. To do this, you need to determine the total size of each directory. The total size of a directory is the sum of the sizes of the files it contains, directly or indirectly. (Directories themselves do not count as having any intrinsic size.)\nThe total sizes of the directories above can be found as follows:\nThe total size of directory e is 584 because it contains a single file i of size 584 and no other directories. The directory a has total size 94853 because it contains files f (size 29116), g (size 2557), and h.lst (size 62596), plus file i indirectly (a contains e which contains i). Directory d has total size 24933642. As the outermost directory, / contains every file. Its total size is 48381165, the sum of the size of every file. To begin, find all of the directories with a total size of at most 100000, then calculate the sum of their total sizes. In the example above, these directories are a and e; the sum of their total sizes is 95437 (94853 + 584). (As in this example, this process can count files more than once!)\nFind all of the directories with a total size of at most 100000. What is the sum of the total sizes of those directories?\n\u0026mdash; Part Two \u0026mdash; Now, you\u0026rsquo;re ready to choose a directory to delete.\nThe total disk space available to the filesystem is 70000000. To run the update, you need unused space of at least 30000000. You need to find a directory you can delete that will free up enough space to run the update.\nIn the example above, the total size of the outermost directory (and thus the total amount of used space) is 48381165; this means that the size of the unused space must currently be 21618835, which isn\u0026rsquo;t quite the 30000000 required by the update. Therefore, the update still requires a directory with total size of at least 8381165 to be deleted before it can run.\nTo achieve this, you have the following options:\nDelete directory e, which would increase unused space by 584. Delete directory a, which would increase unused space by 94853. Delete directory d, which would increase unused space by 24933642. Delete directory /, which would increase unused space by 48381165. Directories e and a are both too small; deleting them would not free up enough space. However, directories d and / are both big enough! Between these, choose the smallest: d, increasing unused space by 24933642.\nFind the smallest directory that, if deleted, would free up enough space on the filesystem to run the update. What is the total size of that directory?\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; ) type Node struct { name string parent *Node child []*Node size int isDir bool } func main() { readFile, err := os.Open(\u0026#34;input.txt\u0026#34;) if err != nil { fmt.Println(err) } defer readFile.Close() fileScanner := bufio.NewScanner(readFile) fileScanner.Split(bufio.ScanLines) var sum int64 = 0 line := \u0026#34;\u0026#34; cmd := \u0026#34;\u0026#34; arg := \u0026#34;\u0026#34; var root *Node = nil var curr *Node = nil for fileScanner.Scan() { line = fileScanner.Text() println(line) if strings.HasPrefix(line, \u0026#34;$\u0026#34;) { parts := strings.Split(line, \u0026#34; \u0026#34;) cmd = parts[1] switch cmd { case \u0026#34;cd\u0026#34;: arg = parts[2] if arg == \u0026#34;/\u0026#34; { root = \u0026amp;Node{ parent: nil, name: \u0026#34;/\u0026#34;, child: []*Node{}, isDir: true, size: 0, } curr = root } else if arg == \u0026#34;..\u0026#34; { if curr.parent != nil { curr = curr.parent } } else { for _, c := range curr.child { if (*c).name == arg \u0026amp;\u0026amp; *\u0026amp;c.isDir { curr = c break } } } case \u0026#34;ls\u0026#34;: } } else { // we are reading ls output parts := strings.Split(line, \u0026#34; \u0026#34;) isDir := false size := 0 if parts[0] == \u0026#34;dir\u0026#34; { isDir = true } else { size, _ = strconv.Atoi(parts[0]) } newNode := \u0026amp;Node{ parent: curr, name: parts[1], child: []*Node{}, isDir: isDir, size: size, } curr.child = append(curr.child, newNode) } } printNode(root, 0) updateDirSize(root) printNode(root, 0) fmt.Println(\u0026#34;\\ntotalSum\u0026#34;, totalSum) fmt.Println(\u0026#34;\\nroot.size\u0026#34;, root.size) fmt.Println(\u0026#34;\\nsum\u0026#34;, sum) freeSpace := 70_000_000 - root.size fmt.Println(\u0026#34;\\nfreeSpace\u0026#34;, freeSpace) spaceToFree := 30_000_000 - freeSpace fmt.Println(\u0026#34;\\nspaceToFree\u0026#34;, spaceToFree) bfs(root, spaceToFree) fmt.Println(\u0026#34;\\nmin\u0026#34;, min) } var min = 100_000_000 func bfs(node *Node, cond int) { if node == nil { return } for _, c := range (*node).child { if (*c).isDir \u0026amp;\u0026amp; (*c).size \u0026gt;= cond { if (*c).size \u0026lt; min { min = (*c).size } } bfs(c, cond) } } var totalSum = 0 func updateDirSize(node *Node) { if node == nil { return } if (*node).isDir == false { return } size := 0 for _, c := range (*node).child { if (*c).isDir { updateDirSize(c) } size = size + (*c).size // println(\u0026#34;\\tcalc size \u0026#34;, (*c).name, size) } // println(\u0026#34;calc size \u0026#34;, (*node).name, size) (*node).size = size if (*node).isDir \u0026amp;\u0026amp; (*node).size \u0026lt; 100_000 { println(\u0026#34;Node \u0026#34;, (*node).name) totalSum = totalSum + (*node).size } } func printNode(node *Node, level int) { if node == nil { return } println(strings.Repeat(\u0026#34;\\t\u0026#34;, level), (*node).name, (*node).size) for _, c := range (*node).child { printNode(c, level+1) } } ","permalink":"https://volyx.in/posts/2022-12-06-day-7-no-space-left-on-device/","summary":"\u003cp\u003e\u0026mdash; Day 7: No Space Left On Device \u0026mdash;\nYou can hear birds chirping and raindrops hitting leaves as the expedition proceeds. Occasionally, you can even hear much louder sounds in the distance; how big do the animals get out here, anyway?\u003c/p\u003e\n\u003cp\u003eThe device the Elves gave you has problems with more than just its communication system. You try to run a system update:\u003c/p\u003e\n\u003cp\u003e$ system-update \u0026ndash;please \u0026ndash;pretty-please-with-sugar-on-top\nError: No space left on device\nPerhaps you can delete some files to make space for the update?\u003c/p\u003e","title":"AOC 2022. Day 7: No Space Left On Device"},{"content":"\u0026mdash; Day 6: Tuning Trouble \u0026mdash; The preparations are finally complete; you and the Elves leave camp on foot and begin to make your way toward the star fruit grove.\nAs you move through the dense undergrowth, one of the Elves gives you a handheld device. He says that it has many fancy features, but the most important one to set up right now is the communication system.\nHowever, because he\u0026rsquo;s heard you have significant experience dealing with signal-based systems, he convinced the other Elves that it would be okay to give you their one malfunctioning device - surely you\u0026rsquo;ll have no problem fixing it.\nAs if inspired by comedic timing, the device emits a few colorful sparks.\nTo be able to communicate with the Elves, the device needs to lock on to their signal. The signal is a series of seemingly-random characters that the device receives one at a time.\nTo fix the communication system, you need to add a subroutine to the device that detects a start-of-packet marker in the datastream. In the protocol being used by the Elves, the start of a packet is indicated by a sequence of four characters that are all different.\nThe device will send your subroutine a datastream buffer (your puzzle input); your subroutine needs to identify the first position where the four most recently received characters were all different. Specifically, it needs to report the number of characters from the beginning of the buffer to the end of the first such four-character marker.\nFor example, suppose you receive the following datastream buffer:\nmjqjpqmgbljsphdztnvjfqwrcgsmlb After the first three characters (mjq) have been received, there haven\u0026rsquo;t been enough characters received yet to find the marker. The first time a marker could occur is after the fourth character is received, making the most recent four characters mjqj. Because j is repeated, this isn\u0026rsquo;t a marker.\nThe first time a marker appears is after the seventh character arrives. Once it does, the last four characters received are jpqm, which are all different. In this case, your subroutine should report the value 7, because the first start-of-packet marker is complete after 7 characters have been processed.\nHere are a few more examples:\n1 2 3 4 bvwbjplbgvbhsrlpgdmjqwftvncz: first marker after character 5 nppdvjthqldpwncqszvftbrmjlhg: first marker after character 6 nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg: first marker after character 10 zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw: first marker after character 11 How many characters need to be processed before the first start-of-packet marker is detected?\n\u0026mdash; Part Two \u0026mdash; Your device\u0026rsquo;s communication system is correctly detecting packets, but still isn\u0026rsquo;t working. It looks like it also needs to look for messages.\nA start-of-message marker is just like a start-of-packet marker, except it consists of 14 distinct characters rather than 4.\nHere are the first positions of start-of-message markers for all of the above examples:\n1 2 3 4 5 mjqjpqmgbljsphdztnvjfqwrcgsmlb: first marker after character 19 bvwbjplbgvbhsrlpgdmjqwftvncz: first marker after character 23 nppdvjthqldpwncqszvftbrmjlhg: first marker after character 23 nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg: first marker after character 29 zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw: first marker after character 26 How many characters need to be processed before the first start-of-message marker is detected?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 package main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) func main() { readFile, err := os.Open(\u0026#34;input.txt\u0026#34;) if err != nil { fmt.Println(err) } defer readFile.Close() fileScanner := bufio.NewScanner(readFile) fileScanner.Split(bufio.ScanLines) var sum int64 = 0 line := \u0026#34;\u0026#34; /* buffer count = 3 set(mjq) = 3 i, j aaaa mjqjpqmgbljsphdztnvjfqwrcgsmlb 01 2 */ for fileScanner.Scan() { line = fileScanner.Text() // fmt.Println(line) n := getMarker(line) println(n) } fmt.Println(\u0026#34;\\n\u0026#34;, sum) } func getMarker(line string) int { buffer := [26]byte{} count := 0 j := 0 for i, c := range line { // mjqjpqmgbljsphdztnvjfqwrcgsmlb // m = 1 count 1 // j = 1 count 2 // q = 1 count 3 // j = 2 count 3 // clean buffer // m = 0 count 2 // j = 1 // p = 1 count 3 // q = 2 c = c - 97 // println(i, c) buffer[c]++ // bvwbjplbgvbhsrlpgdmjqwftvncz // fmt.Println(buffer, count) if buffer[c] == 1 { count++ if count == 14 { // println(\u0026#34;i = \u0026#34;, i, \u0026#34; j = \u0026#34;, line[j+1:i+1]) return i + 1 } } else if buffer[c] == 2 { for j \u0026lt; i { p := line[j] j++ // j++ p = p - 97 buffer[p]-- // println(\u0026#34;j = \u0026#34;, j) // fmt.Println(buffer) if buffer[p] == 1 { break } else if buffer[p] == 0 { count-- } } } } return 0 } ","permalink":"https://volyx.in/posts/2022-12-06-day-6-tuning-trouble/","summary":"\u003cp\u003e\u0026mdash; Day 6: Tuning Trouble \u0026mdash;\nThe preparations are finally complete; you and the Elves leave camp on foot and begin to make your way toward the star fruit grove.\u003c/p\u003e\n\u003cp\u003eAs you move through the dense undergrowth, one of the Elves gives you a handheld device. He says that it has many fancy features, but the most important one to set up right now is the communication system.\u003c/p\u003e\n\u003cp\u003eHowever, because he\u0026rsquo;s heard you have significant experience dealing with signal-based systems, he convinced the other Elves that it would be okay to give you their one malfunctioning device - surely you\u0026rsquo;ll have no problem fixing it.\u003c/p\u003e","title":"AOC 2022. Day 6: Tuning Trouble"},{"content":"https://adventofcode.com/2022/day/5\n\u0026mdash; Day 5: Supply Stacks \u0026mdash; The expedition can depart as soon as the final supplies have been unloaded from the ships. Supplies are stored in stacks of marked crates, but because the needed supplies are buried under many other crates, the crates need to be rearranged.\nThe ship has a giant cargo crane capable of moving crates between stacks. To ensure none of the crates get crushed or fall over, the crane operator will rearrange them in a series of carefully-planned steps. After the crates are rearranged, the desired crates will be at the top of each stack.\nThe Elves don\u0026rsquo;t want to interrupt the crane operator during this delicate procedure, but they forgot to ask her which crate will end up where, and they want to be ready to unload them as soon as possible so they can embark.\nThey do, however, have a drawing of the starting stacks of crates and the rearrangement procedure (your puzzle input). For example:\n1 2 3 4 5 6 7 8 9 [D] [N] [C] [Z] [M] [P] 1 2 3 move 1 from 2 to 1 move 3 from 1 to 3 move 2 from 2 to 1 move 1 from 1 to 2 In this example, there are three stacks of crates. Stack 1 contains two crates: crate Z is on the bottom, and crate N is on top. Stack 2 contains three crates; from bottom to top, they are crates M, C, and D. Finally, stack 3 contains a single crate, P.\nThen, the rearrangement procedure is given. In each step of the procedure, a quantity of crates is moved from one stack to a different stack. In the first step of the above rearrangement procedure, one crate is moved from stack 2 to stack 1, resulting in this configuration:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 [D] [N] [C] [Z] [M] [P] 1 2 3 In the second step, three crates are moved from stack 1 to stack 3. Crates are moved one at a time, so the first crate to be moved (D) ends up below the second and third crates: [Z] [N] [C] [D] [M] [P] 1 2 3 Then, both crates are moved from stack 2 to stack 1. Again, because crates are moved one at a time, crate C ends up below crate M: [Z] [N] [M] [D] [C] [P] 1 2 3 Finally, one crate is moved from stack 1 to stack 2: [Z] [N] [D] [C] [M] [P] 1 2 3 The Elves just need to know which crate will end up on top of each stack; in this example, the top crates are C in stack 1, M in stack 2, and Z in stack 3, so you should combine these together and give the Elves the message CMZ. After the rearrangement procedure completes, what crate ends up on top of each stack?\n\u0026mdash; Part Two \u0026mdash; As you watch the crane operator expertly rearrange the crates, you notice the process isn\u0026rsquo;t following your prediction.\nSome mud was covering the writing on the side of the crane, and you quickly wipe it away. The crane isn\u0026rsquo;t a CrateMover 9000 - it\u0026rsquo;s a CrateMover 9001.\nThe CrateMover 9001 is notable for many new and exciting features: air conditioning, leather seats, an extra cup holder, and the ability to pick up and move multiple crates at once.\nAgain considering the example above, the crates begin in the same configuration:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 [D] [N] [C] [Z] [M] [P] 1 2 3 Moving a single crate from stack 2 to stack 1 behaves the same as before: [D] [N] [C] [Z] [M] [P] 1 2 3 However, the action of moving three crates from stack 1 to stack 3 means that those three moved crates stay in the same order, resulting in this new configuration: [D] [N] [C] [Z] [M] [P] 1 2 3 Next, as both crates are moved from stack 2 to stack 1, they retain their order as well: [D] [N] [C] [Z] [M] [P] 1 2 3 Finally, a single crate is still moved from stack 1 to stack 2, but now it\u0026#39;s crate C that gets moved: [D] [N] [Z] [M] [C] [P] 1 2 3 In this example, the CrateMover 9001 has put the crates in a totally different order: MCD. Before the rearrangement process finishes, update your simulation so that the Elves know where they should stand to be ready to unload the final supplies. After the rearrangement procedure completes, what crate ends up on top of each stack?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 package main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; ) func main() { readFile, err := os.Open(\u0026#34;input.txt\u0026#34;) if err != nil { fmt.Println(err) } defer readFile.Close() fileScanner := bufio.NewScanner(readFile) fileScanner.Split(bufio.ScanLines) var sum int64 = 0 i := 0 var n int = 0 line := \u0026#34;\u0026#34; isMove := false var arr [][]byte for fileScanner.Scan() { line = fileScanner.Text() if i == 0 { n = len(line) / 3 fmt.Println(\u0026#34;n=\u0026#34;, n) for k := 0; k \u0026lt; n; k++ { arr = append(arr, []byte{}) } } if !isMove { for j := 0; j \u0026lt; len(line); j++ { c := line[j] if c == \u0026#39;[\u0026#39; { index := j / 4 fmt.Printf(\u0026#34;c=%c byte=%d j=%d, index=%d\\n\u0026#34;, c, line[j+1], j, index) // prepend arr[index] = append([]byte{line[j+1]}, arr[index]...) } } } else { // move lines // move 1 from 2 to 1 parts := strings.Split(line, \u0026#34; \u0026#34;) var moveIdx, fromIdx, toIdx int j := 0 for _, part := range parts { val, err := strconv.Atoi(part) if err == nil { if j == 0 { moveIdx = val } if j == 1 { fromIdx = val } if j == 2 { toIdx = val } j++ } } // fmt.Println(line, moveIdx, fromIdx, toIdx) move(moveIdx, fromIdx, toIdx, \u0026amp;arr) } if len(line) == 0 { // print for x := 0; x \u0026lt; len(arr); x++ { fmt.Println(arr[x]) } isMove = true } /* [78 90] [68 67 77] [80] */ fmt.Println() // fmt.Println(line, len(line)) i++ } /* [D] [N] [C] [Z] [M] [P] 1 2 3 1 ZN 2 MCD 3 P 1 2 3 */ fmt.Println(\u0026#34;\\n\u0026#34;, sum) for x := 0; x \u0026lt; len(arr); x++ { if len(arr[x]) \u0026gt; 0 { fmt.Printf(\u0026#34;%c\u0026#34;, arr[x][len(arr[x])-1]) } } } func move(count int, from int, to int, arr *[][]byte) { if count == 1 { moveOne(from-1, to-1, arr) } else { var temp []byte fromStack := (*arr)[from-1] for i := 0; i \u0026lt; count; i++ { fromLen := len(fromStack) el := fromStack[fromLen-1] fromStack = fromStack[:fromLen-1] // moveOne(from-1, to-1, arr) temp = append(temp, el) } (*arr)[from-1] = fromStack toStack := (*arr)[to-1] for i := 0; i \u0026lt; count; i++ { toStack = append(toStack, temp[count-i-1]) } (*arr)[to-1] = toStack } } func moveOne(from int, to int, arr *[][]byte) { fromStack := (*arr)[from] fromLen := len(fromStack) el := fromStack[fromLen-1] fromStack = fromStack[:fromLen-1] // reslice it toStack := (*arr)[to] toStack = append(toStack, el) (*arr)[from] = fromStack (*arr)[to] = toStack } /* if len(slice) \u0026gt; 0 { slice = slice[:len(slice)-1] } */ ","permalink":"https://volyx.in/posts/2022-12-06-day-5-supply-stacks/","summary":"\u003cp\u003e\u003ca href=\"https://adventofcode.com/2022/day/5\"\u003ehttps://adventofcode.com/2022/day/5\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u0026mdash; Day 5: Supply Stacks \u0026mdash;\nThe expedition can depart as soon as the final supplies have been unloaded from the ships. Supplies are stored in stacks of marked crates, but because the needed supplies are buried under many other crates, the crates need to be rearranged.\u003c/p\u003e\n\u003cp\u003eThe ship has a giant cargo crane capable of moving crates between stacks. To ensure none of the crates get crushed or fall over, the crane operator will rearrange them in a series of carefully-planned steps. After the crates are rearranged, the desired crates will be at the top of each stack.\u003c/p\u003e","title":"AOC 2022. Day 5: Supply Stacks  "},{"content":"\u0026mdash; Day 4: Camp Cleanup \u0026mdash;\nhttps://adventofcode.com/2022/day/4\nSpace needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\nHowever, as some of the Elves compare their section assignments with each other, they\u0026rsquo;ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\nFor example, consider the following list of section assignment pairs:\n2-4,6-8 2-3,4-5 5-7,7-9 2-8,3-7 6-6,4-6 2-6,4-8 For the first few pairs, this list means:\nWithin the first pair of Elves, the first Elf was assigned sections 2-4 (sections 2, 3, and 4), while the second Elf was assigned sections 6-8 (sections 6, 7, 8). The Elves in the second pair were each assigned two sections. The Elves in the third pair were each assigned three sections: one got sections 5, 6, and 7, while the other also got 7, plus 8 and 9. This example list uses single-digit section IDs to make it easier to draw; your actual list might contain larger numbers. Visually, these pairs of section assignments look like this:\n.234\u0026hellip;.. 2-4 \u0026hellip;..678. 6-8\n.23\u0026hellip;\u0026hellip; 2-3 \u0026hellip;45\u0026hellip;. 4-5\n\u0026hellip;.567.. 5-7 \u0026hellip;\u0026hellip;789 7-9\n.2345678. 2-8 ..34567.. 3-7\n\u0026hellip;..6\u0026hellip; 6-6 \u0026hellip;456\u0026hellip; 4-6\n.23456\u0026hellip; 2-6 \u0026hellip;45678. 4-8 Some of the pairs have noticed that one of their assignments fully contains the other. For example, 2-8 fully contains 3-7, and 6-6 is fully contained by 4-6. In pairs where one assignment fully contains the other, one Elf in the pair would be exclusively cleaning sections their partner will already be cleaning, so these seem like the most in need of reconsideration. In this example, there are 2 such pairs.\nIn how many assignment pairs does one range fully contain the other?\n\u0026mdash; Part Two \u0026mdash; It seems like there is still quite a bit of duplicate work planned. Instead, the Elves would like to know the number of pairs that overlap at all.\nIn the above example, the first two pairs (2-4,6-8 and 2-3,4-5) don\u0026rsquo;t overlap, while the remaining four pairs (5-7,7-9, 2-8,3-7, 6-6,4-6, and 2-6,4-8) do overlap:\n5-7,7-9 overlaps in a single section, 7. 2-8,3-7 overlaps all of the sections 3 through 7. 6-6,4-6 overlaps in a single section, 6. 2-6,4-8 overlaps in sections 4, 5, and 6. So, in this example, the number of overlapping assignment pairs is 4.\nIn how many assignment pairs do the ranges overlap?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 package main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; ) func main() { readFile, err := os.Open(\u0026#34;input.txt\u0026#34;) if err != nil { fmt.Println(err) } defer readFile.Close() fileScanner := bufio.NewScanner(readFile) fileScanner.Split(bufio.ScanLines) var sum int64 = 0 i := 0 /* FULLY OVERLAPPING ......x1*******y1...... ........x2**y2......... x1 \u0026lt;= x2 \u0026amp;\u0026amp; y2 \u0026lt;= y1 .........x1**y1........ ....x2*********y2...... x2 \u0026lt;= x1 \u0026amp;\u0026amp; y1 \u0026lt;= y2 max(x) \u0026lt;= min(y) ......x1*******y1...... ........x2**y2......... x2 \u0026lt;= y2 true .........x1**y1........ ....x2*********y2...... x1 \u0026lt;= y1 true .........x1********y1........ ....x2*********y2...... x1 \u0026lt;= y2 true ...x1**y1....... ............x2****y2..... x2 \u0026lt; y1 false */ for fileScanner.Scan() { line := fileScanner.Text() // fmt.Println(line) elves := strings.Split(line, \u0026#34;,\u0026#34;) elf1 := strings.Split(elves[0], \u0026#34;-\u0026#34;) x1, _ := strconv.Atoi(elf1[0]) y1, _ := strconv.Atoi(elf1[1]) elf2 := strings.Split(elves[1], \u0026#34;-\u0026#34;) x2, _ := strconv.Atoi(elf2[0]) y2, _ := strconv.Atoi(elf2[1]) if isOverllaped(x1, y1, x2, y2) { sum++ } i++ } fmt.Println(\u0026#34;\\n\u0026#34;, sum) } func isOverllaped(x1 int, y1 int, x2 int, y2 int) bool { return Max(x1, x2) \u0026lt;= Min(y1, y2) } // Max returns the larger of x or y. func Max(x, y int) int { if x \u0026lt; y { return y } return x } // Min returns the smaller of x or y. func Min(x, y int) int { if x \u0026gt; y { return y } return x } func isFullyOverlapped(x1 int, y1 int, x2 int, y2 int) bool { if x1 \u0026lt;= x2 \u0026amp;\u0026amp; y2 \u0026lt;= y1 { return true } else if x2 \u0026lt;= x1 \u0026amp;\u0026amp; y1 \u0026lt;= y2 { return true } return false } ","permalink":"https://volyx.in/posts/2022-12-05-day-4-camp-cleanup/","summary":"\u003cp\u003e\u0026mdash; Day 4: Camp Cleanup \u0026mdash;\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://adventofcode.com/2022/day/4\"\u003ehttps://adventofcode.com/2022/day/4\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eSpace needs to be cleared before the last supplies can be unloaded from the ships, and so several Elves have been assigned the job of cleaning up sections of the camp. Every section has a unique ID number, and each Elf is assigned a range of section IDs.\u003c/p\u003e\n\u003cp\u003eHowever, as some of the Elves compare their section assignments with each other, they\u0026rsquo;ve noticed that many of the assignments overlap. To try to quickly find overlaps and reduce duplicated effort, the Elves pair up and make a big list of the section assignments for each pair (your puzzle input).\u003c/p\u003e","title":"AOC 2022. Day 4: Camp Cleanup"},{"content":"# Day 3: Rucksack Reorganization\n\u0026mdash; Day 3: Rucksack Reorganization \u0026mdash;\nOne Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn\u0026rsquo;t quite follow the packing instructions, and so a few items now need to be rearranged.\nEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\nThe Elves have made a list of all of the items currently in each rucksack (your puzzle input), but they need your help finding the errors. Every item type is identified by a single lowercase or uppercase letter (that is, a and A refer to different types of items).\nThe list of items for each rucksack is given as characters all on a single line. A given rucksack always has the same number of items in each of its two compartments, so the first half of the characters represent items in the first compartment, while the second half of the characters represent items in the second compartment.\nFor example, suppose you have the following list of contents from six rucksacks:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 vJrwpWtwJgWrhcsFMMfFFhFp jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL PmmdzqPrVvPwwTWBwg wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn ttgJtRGJQctTZtZT CrZsJsPPZsGzwwsLwLmpwMDw ``` - The first rucksack contains the items vJrwpWtwJgWrhcsFMMfFFhFp, which means its first compartment contains the items vJrwpWtwJgWr, while the second compartment contains the items hcsFMMfFFhFp. The only item type that appears in both compartments is lowercase p. - The second rucksack\u0026#39;s compartments contain jqHRNqRjqzjGDLGL and rsFMfFZSrLrFZsSL. The only item type that appears in both compartments is uppercase L. - The third rucksack\u0026#39;s compartments contain PmmdzqPrV and vPwwTWBwg; the only common item type is uppercase P. - The fourth rucksack\u0026#39;s compartments only share item type v. - The fifth rucksack\u0026#39;s compartments only share item type t. - The sixth rucksack\u0026#39;s compartments only share item type s. To help prioritize item rearrangement, every item type can be converted to a priority: - Lowercase item types a through z have priorities 1 through 26. - Uppercase item types A through Z have priorities 27 through 52. In the above example, the priority of the item type that appears in both compartments of each rucksack is 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s); the sum of these is 157. Find the item type that appears in both compartments of each rucksack. What is the sum of the priorities of those item types? ```go package main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) /* vJrwpWtwJgWrhcsFMMfFFhFp jqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL PmmdzqPrVvPwwTWBwg abcbde 3 wMqvLMZHhHMvwLHjbvcjnnSBnvTQFn ttgJtRGJQctTZtZT CrZsJsPPZsGzwwsLwLmpwMDw 16 (p), 38 (L), 42 (P), 22 (v), 20 (t), and 19 (s) */ func main() { readFile, err := os.Open(\u0026#34;input.txt\u0026#34;) if err != nil { fmt.Println(err) } defer readFile.Close() fileScanner := bufio.NewScanner(readFile) fileScanner.Split(bufio.ScanLines) var sum int64 = 0 i := 0 comp := [3][256]byte{} // 0 10 // 1 10 // 2 10 for fileScanner.Scan() { rucksack := fileScanner.Text() index := i % 3 for i := 0; i \u0026lt; len(rucksack); i++ { letter := rucksack[i] comp[index][letter]++ } if index == 2 { for i := 0; i \u0026lt; 256; i++ { if comp[0][i] \u0026gt; 0 \u0026amp;\u0026amp; comp[1][i] \u0026gt; 0 \u0026amp;\u0026amp; comp[2][i] \u0026gt; 0 { letter := byte(i) priority := calcPriority(letter) // fmt.Println(\u0026#34;priority\u0026#34;, priority) sum = sum + priority } comp[0][i] = 0 comp[1][i] = 0 comp[2][i] = 0 } } i++ } fmt.Println(\u0026#34;\\n\u0026#34;, sum) } func calcPriority(letter byte) int64 { priority := letter - byte(\u0026#39;a\u0026#39;) + 1 if priority \u0026lt; 27 { // lowercase } else { // uppercase priority = letter - byte(\u0026#39;A\u0026#39;) + 27 } return int64(priority) } // part 1 func calcCompartment(rucksack string) int64 { var sum int64 = 0 comp := make(map[byte]int) visited := make(map[byte]int) fmt.Println() for i := 0; i \u0026lt; len(rucksack); i++ { letter := rucksack[i] if i \u0026lt; len(rucksack)/2 { fmt.Printf(\u0026#34;%d - %c\\n\u0026#34;, i, letter) comp[letter] = 1 } else { _, ok := comp[letter] // Lowercase item types a through z have priorities 1 through 26. // Uppercase item types A through Z have priorities 27 through 52. if !ok { // have in compartment, skip continue } _, ok = visited[letter] if ok { // already visited continue } visited[letter] = 1 priority := calcPriority(letter) fmt.Println(priority) sum = sum + priority } } return sum } ``` ","permalink":"https://volyx.in/posts/2022-12-04-day-3-rucksack-reorganization/","summary":"\u003cp\u003e\u003ca href=\"https://adventofcode.com/2022/day/3\"\u003e# Day 3: Rucksack Reorganization\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u0026mdash; Day 3: Rucksack Reorganization \u0026mdash;\u003c/p\u003e\n\u003cp\u003eOne Elf has the important job of loading all of the rucksacks with supplies for the jungle journey. Unfortunately, that Elf didn\u0026rsquo;t quite follow the packing instructions, and so a few items now need to be rearranged.\u003c/p\u003e\n\u003cp\u003eEach rucksack has two large compartments. All items of a given type are meant to go into exactly one of the two compartments. The Elf that did the packing failed to follow this rule for exactly one item type per rucksack.\u003c/p\u003e","title":"AOC 2022. Day 3: Rucksack Reorganization "},{"content":"\nSanta\u0026rsquo;s reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\nTo supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\nCollect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\nThe jungle must be too overgrown and difficult to navigate in vehicles or access from the air; the Elves\u0026rsquo; expedition traditionally goes on foot. As your boats approach land, the Elves begin taking inventory of their supplies. One important consideration is food - in particular, the number of Calories each Elf is carrying (your puzzle input).\nThe Elves take turns writing down the number of Calories contained by the various meals, snacks, rations, etc. that they\u0026rsquo;ve brought with them, one item per line. Each Elf separates their own inventory from the previous Elf\u0026rsquo;s inventory (if any) by a blank line.\nFor example, suppose the Elves finish writing their items\u0026rsquo; Calories and end up with the following list:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 This list represents the Calories of the food carried by five Elves:\nThe first Elf is carrying food with 1000, 2000, and 3000 Calories, a total of 6000 Calories. The second Elf is carrying one food item with 4000 Calories. The third Elf is carrying food with 5000 and 6000 Calories, a total of 11000 Calories. The fourth Elf is carrying food with 7000, 8000, and 9000 Calories, a total of 24000 Calories. The fifth Elf is carrying one food item with 10000 Calories. In case the Elves get hungry and need extra snacks, they need to know which Elf to ask: they\u0026rsquo;d like to know how many Calories are being carried by the Elf carrying the most Calories. In the example above, this is 24000 (carried by the fourth Elf).\nFind the Elf carrying the most Calories. How many total Calories is that Elf carrying?\nYour puzzle answer was 75501. \u0026mdash; Part Two \u0026mdash;\nBy the time you calculate the answer to the Elves\u0026rsquo; question, they\u0026rsquo;ve already realized that the Elf carrying the most Calories of food might eventually run out of snacks.\nTo avoid this unacceptable situation, the Elves would instead like to know the total Calories carried by the top three Elves carrying the most Calories. That way, even if one of those Elves runs out of snacks, they still have two backups.\nIn the example above, the top three Elves are the fourth Elf (with 24000 Calories), then the third Elf (with 11000 Calories), then the fifth Elf (with 10000 Calories). The sum of the Calories carried by these three elves is 45000.\nFind the top three Elves carrying the most Calories. How many Calories are those Elves carrying in total?\nSolution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package main import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; ) func main() { path := \u0026#34;input.txt\u0026#34; inFile, err := os.Open(path) if err != nil { fmt.Println(err.Error() + `: ` + path) return } defer inFile.Close() max := []int64{0, 0, 0, 0} var currMax int64 = 0 scanner := bufio.NewScanner(inFile) i := 0 line := \u0026#34;\u0026#34; for scanner.Scan() { line = scanner.Text() if len(line) == 0 { if currMax \u0026gt; max[0] { max[0] = currMax for i := 0; i \u0026lt; 3; i++ { if max[i] \u0026gt; max[i+1] { t := max[i] max[i] = max[i+1] max[i+1] = t } else { break } } } currMax = 0 } num, _ := strconv.ParseInt(line, 10, 64) currMax = currMax + num i++ } var sum int64 = max[1] + max[2] + max[3] fmt.Println(max) fmt.Println(sum) } ","permalink":"https://volyx.in/posts/2022-12-02-day-1-calorie-counting/","summary":"\u003cp\u003e\u003cimg alt=\"Day 1: Calorie Counting \" loading=\"lazy\" src=\"https://adventofcode.com/2022/day/1\"\u003e\u003c/p\u003e\n\u003cp\u003eSanta\u0026rsquo;s reindeer typically eat regular reindeer food, but they need a lot of magical energy to deliver presents on Christmas. For that, their favorite snack is a special type of star fruit that only grows deep in the jungle. The Elves have brought you on their annual expedition to the grove where the fruit grows.\u003c/p\u003e\n\u003cp\u003eTo supply enough magical energy, the expedition needs to retrieve a minimum of fifty stars by December 25th. Although the Elves assure you that the grove has plenty of fruit, you decide to grab any fruit you see along the way, just in case.\u003c/p\u003e","title":"AOC 2022. Day 1: Calorie Counting "},{"content":"\nA linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random \u0026ndash;\u0026gt; Y, then for the corresponding two nodes x and y in the copied list, x.random \u0026ndash;\u0026gt; y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\nval: an integer representing Node.val random_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node. Your code will only be given the head of the original linked list.\n1 2 3 4 Example 1: Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]] Output: [[7,null],[13,0],[11,4],[10,2],[1,0]] 1 2 3 4 Example 2: Input: head = [[1,1],[2,1]] Output: [[1,1],[2,1]] 1 2 3 4 Example 3: Input: head = [[3,null],[3,0],[3,null]] Output: [[3,null],[3,0],[3,null]] Constraints:\n0 \u0026lt;= n \u0026lt;= 1000 -10^4 \u0026lt;= Node.val \u0026lt;= 10^4 Node.random is null or is pointing to some node in the linked list. Solution Iterative + Recursive 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* // Definition for a Node. class Node { int val; Node next; Node random; public Node(int val) { this.val = val; this.next = null; this.random = null; } } */ class Solution { Map\u0026lt;Node, Node\u0026gt; visited = new HashMap\u0026lt;\u0026gt;(); public Node copyRandomList(Node head) { if (head == null) return null; if (visited.containsKey(head)) { return visited.get(head); } Node newNode = new Node(head.val); visited.put(head, newNode); newNode.next = copyRandomList(head.next); newNode.random = copyRandomList(head.random); return newNode; } public Node copyRandomListIterative(Node head) { if (head == null) return null; Node oldNode = head; Node newNode = new Node(oldNode.val); visited.put(oldNode, newNode); while (oldNode != null) { newNode.next = cloneNode(oldNode.next); newNode.random = cloneNode(oldNode.random); oldNode = oldNode.next; newNode = newNode.next; } return visited.get(head); } Node cloneNode(Node node) { if (node == null) return null; if (visited.containsKey(node)) { return visited.get(node); } Node newNode = new Node(node.val); visited.put(node, newNode); return newNode; } } ","permalink":"https://volyx.in/posts/2022-01-31-copy-list-with-random-pointer/","summary":"\u003cp\u003e\u003cimg alt=\"138. Copy List with Random Pointer\" loading=\"lazy\" src=\"https://leetcode.com/problems/copy-list-with-random-pointer/\"\u003e\u003c/p\u003e\n\u003cp\u003eA linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\u003c/p\u003e\n\u003cp\u003eConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\u003c/p\u003e","title":"138. Copy List with Random Pointer"},{"content":"\nA string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.\nFor example, a string such as \u0026ldquo;substitution\u0026rdquo; could be abbreviated as (but not limited to):\n\u0026ldquo;s10n\u0026rdquo; (\u0026ldquo;s ubstitutio n\u0026rdquo;) \u0026ldquo;sub4u4\u0026rdquo; (\u0026ldquo;sub stit u tion\u0026rdquo;) \u0026ldquo;12\u0026rdquo; (\u0026ldquo;substitution\u0026rdquo;) \u0026ldquo;su3i1u2on\u0026rdquo; (\u0026ldquo;su bst i t u ti on\u0026rdquo;) \u0026ldquo;substitution\u0026rdquo; (no substrings replaced) The following are not valid abbreviations:\n\u0026ldquo;s55n\u0026rdquo; (\u0026ldquo;s ubsti tutio n\u0026rdquo;, the replaced substrings are adjacent) \u0026ldquo;s010n\u0026rdquo; (has leading zeros) \u0026ldquo;s0ubstitution\u0026rdquo; (replaces an empty substring) Given a string word and an abbreviation abbr, return whether the string matches the given abbreviation.\nA substring is a contiguous non-empty sequence of characters within a string.\n1 2 3 4 5 Example 1: Input: word = \u0026#34;internationalization\u0026#34;, abbr = \u0026#34;i12iz4n\u0026#34; Output: true Explanation: The word \u0026#34;internationalization\u0026#34; can be abbreviated as \u0026#34;i12iz4n\u0026#34; (\u0026#34;i nternational iz atio n\u0026#34;). 1 2 3 4 5 Example 2: Input: word = \u0026#34;apple\u0026#34;, abbr = \u0026#34;a2e\u0026#34; Output: false Explanation: The word \u0026#34;apple\u0026#34; cannot be abbreviated as \u0026#34;a2e\u0026#34;. Constraints:\n1 \u0026lt;= word.length \u0026lt;= 20 word consists of only lowercase English letters. 1 \u0026lt;= abbr.length \u0026lt;= 10 abbr consists of lowercase English letters and digits. All the integers in abbr will fit in a 32-bit integer. Solution Iterative + Recursive 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public boolean validWordAbbreviation(String word, String abbr) { int i = 0; int j = 0; while (i \u0026lt; word.length() \u0026amp;\u0026amp; j \u0026lt; abbr.length()) { if (word.charAt(i) == abbr.charAt(j)) { i++; j++; continue; } if (!Character.isDigit(abbr.charAt(j))) { return false; } int start = j; while (j \u0026lt; abbr.length() \u0026amp;\u0026amp; Character.isDigit(abbr.charAt(j))) { j++; } int num = Integer.parseInt(abbr.substring(start, j)); i += num; } return i == word.length() \u0026amp;\u0026amp; j == abbr.length(); } } ","permalink":"https://volyx.in/posts/2022-01-31-valid-word-abbreviation/","summary":"\u003cp\u003e\u003cimg alt=\"408. Valid Word Abbreviation\" loading=\"lazy\" src=\"https://leetcode.com/problems/valid-word-abbreviation/\"\u003e\u003c/p\u003e\n\u003cp\u003eA string can be abbreviated by replacing any number of non-adjacent, non-empty substrings with their lengths. The lengths should not have leading zeros.\u003c/p\u003e\n\u003cp\u003eFor example, a string such as \u0026ldquo;substitution\u0026rdquo; could be abbreviated as (but not limited to):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;s10n\u0026rdquo; (\u0026ldquo;s ubstitutio n\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;sub4u4\u0026rdquo; (\u0026ldquo;sub stit u tion\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;12\u0026rdquo; (\u0026ldquo;substitution\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;su3i1u2on\u0026rdquo; (\u0026ldquo;su bst i t u ti on\u0026rdquo;)\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;substitution\u0026rdquo; (no substrings replaced)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following are not valid abbreviations:\u003c/p\u003e","title":"408. Valid Word Abbreviation"},{"content":"\nAn integer has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.\n1 2 3 4 Example 1: Input: low = 100, high = 300 Output: [123,234] 1 2 3 4 Example 2: Input: low = 1000, high = 13000 Output: [1234,2345,3456,4567,5678,6789,12345] Constraints:\n10 \u0026lt;= low \u0026lt;= high \u0026lt;= 10^9 Solution Sliding Window 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public List\u0026lt;Integer\u0026gt; sequentialDigits(int lo, int hi) { int lenLo = getLen(lo); int lenHi = getLen(hi); int i = lenLo; List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (i \u0026lt;= lenHi) { res.addAll(buildSeqNums(i, lo, hi)); i++; } return res; } int getLen(int n) { return Integer.toString(n).length(); } String SAMPLE = \u0026#34;123456789\u0026#34;; List\u0026lt;Integer\u0026gt; buildSeqNums(int n, int lo, int hi) { if (n == 0) return Collections.emptyList(); int start = 0; List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (start + n \u0026lt; SAMPLE.length() + 1) { int val = Integer.parseInt(SAMPLE.substring(start, start + n)); if (val \u0026gt;= lo \u0026amp;\u0026amp; val \u0026lt;= hi) { res.add(val); } start++; } return res; } } ","permalink":"https://volyx.in/posts/2022-01-30-sequential-digits/","summary":"\u003cp\u003e\u003cimg alt=\"752. Open the Lock\" loading=\"lazy\" src=\"https://leetcode.com/problems/sequential-digits/\"\u003e\u003c/p\u003e\n\u003cp\u003eAn integer has sequential digits if and only if each digit in the number is one more than the previous digit.\u003c/p\u003e\n\u003cp\u003eReturn a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: low = 100, high = 300\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [123,234]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: low = 1000, high = 13000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1234,2345,3456,4567,5678,6789,12345]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1291. Sequential Digits"},{"content":"\nYou are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.\nThe depth of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer\u0026rsquo;s value set to its depth.\nReturn the sum of each integer in nestedList multiplied by its depth.\n1 2 3 4 5 Example 1: Input: nestedList = [[1,1],2,[1,1]] Output: 10 Explanation: Four 1\u0026#39;s at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10. 1 2 3 4 5 Example 2: Input: nestedList = [1,[4,[6]]] Output: 27 Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27. 1 2 3 4 Example 3: Input: nestedList = [0] Output: 0 Constraints:\n1 \u0026lt;= nestedList.length \u0026lt;= 50 The values of the integers in the nested list is in the range [-100, 100]. The maximum depth of any integer is less than or equal to 50. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * public interface NestedInteger { * // Constructor initializes an empty nested list. * public NestedInteger(); * * // Constructor initializes a single integer. * public NestedInteger(int value); * * // @return true if this NestedInteger holds a single integer, rather than a nested list. * public boolean isInteger(); * * // @return the single integer that this NestedInteger holds, if it holds a single integer * // Return null if this NestedInteger holds a nested list * public Integer getInteger(); * * // Set this NestedInteger to hold a single integer. * public void setInteger(int value); * * // Set this NestedInteger to hold a nested list and adds a nested integer to it. * public void add(NestedInteger ni); * * // @return the nested list that this NestedInteger holds, if it holds a nested list * // Return empty list if this NestedInteger holds a single integer * public List\u0026lt;NestedInteger\u0026gt; getList(); * } */ class Solution { public int depthSum(List\u0026lt;NestedInteger\u0026gt; nestedList) { return dfs(nestedList, 1); } int dfs(List\u0026lt;NestedInteger\u0026gt; nestedList, int depth) { int total = 0; for (NestedInteger nested: nestedList) { if (nested.isInteger()) { total += nested.getInteger() * depth; } else { total += dfs(nested.getList(), depth + 1); } } return total; } } ","permalink":"https://volyx.in/posts/2022-01-30-nested-list-weight-sum/","summary":"\u003cp\u003e\u003cimg alt=\"339. Nested List Weight Sum\" loading=\"lazy\" src=\"https://leetcode.com/problems/nested-list-weight-sum/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.\u003c/p\u003e\n\u003cp\u003eThe depth of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer\u0026rsquo;s value set to its depth.\u003c/p\u003e\n\u003cp\u003eReturn the sum of each integer in nestedList multiplied by its depth.\u003c/p\u003e","title":"339. Nested List Weight Sum"},{"content":"\nOn a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\nYou are given a list logs, where logs[i] represents the ith log message formatted as a string \u0026ldquo;{function_id}:{\u0026ldquo;start\u0026rdquo; | \u0026ldquo;end\u0026rdquo;}:{timestamp}\u0026rdquo;. For example, \u0026ldquo;0:start:3\u0026rdquo; means a function call with function ID 0 started at the beginning of timestamp 3, and \u0026ldquo;1:end:2\u0026rdquo; means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\nA function\u0026rsquo;s exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\nReturn the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 Example 1: Input: n = 2, logs = [\u0026#34;0:start:0\u0026#34;,\u0026#34;1:start:2\u0026#34;,\u0026#34;1:end:5\u0026#34;,\u0026#34;0:end:6\u0026#34;] Output: [3,4] Explanation: Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. ```txt Example 2: Input: n = 1, logs = [\u0026#34;0:start:0\u0026#34;,\u0026#34;0:start:2\u0026#34;,\u0026#34;0:end:5\u0026#34;,\u0026#34;0:start:6\u0026#34;,\u0026#34;0:end:6\u0026#34;,\u0026#34;0:end:7\u0026#34;] Output: [8] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls itself again. Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. Example 3: Input: n = 2, logs = [\u0026#34;0:start:0\u0026#34;,\u0026#34;0:start:2\u0026#34;,\u0026#34;0:end:5\u0026#34;,\u0026#34;1:start:6\u0026#34;,\u0026#34;1:end:6\u0026#34;,\u0026#34;0:end:7\u0026#34;] Output: [7,1] Explanation: Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. Function 0 (initial call) resumes execution then immediately calls function 1. Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6. Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time. So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing. Constraints:\n1 \u0026lt;= n \u0026lt;= 100 1 \u0026lt;= logs.length \u0026lt;= 500 0 \u0026lt;= function_id \u0026lt; n 0 \u0026lt;= timestamp \u0026lt;= 109 No two start events will happen at the same timestamp. No two end events will happen at the same timestamp. Each function has an \u0026ldquo;end\u0026rdquo; log for each \u0026ldquo;start\u0026rdquo; log. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution { /* [\u0026#34;0:start:0\u0026#34;,\u0026#34;0:start:2\u0026#34;,\u0026#34;0:end:5\u0026#34;,\u0026#34;0:start:6\u0026#34;,\u0026#34;0:end:6\u0026#34;,\u0026#34;0:end:7\u0026#34;] 0-----| ---| 0 |--------| 0 |--| 0--1--2--3--4--5--6--7--8 2 [\u0026#34;0:start:0\u0026#34;,\u0026#34;1:start:2\u0026#34;,\u0026#34;1:end:5\u0026#34;,\u0026#34;0:end:6\u0026#34;] 0-----| |--| 1 |--------| 0--1--2--3--4--5--6--7--8 */ public int[] exclusiveTime(int n, List\u0026lt;String\u0026gt; logs) { int[] res = new int[n]; Deque\u0026lt;Integer\u0026gt; stack = new ArrayDeque\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; logs.size(); i++) { String[] log = logs.get(i).split(\u0026#34;:\u0026#34;); int id = Integer.parseInt(log[0]); int time = Integer.parseInt(log[2]); if (\u0026#34;start\u0026#34;.equals(log[1])) { stack.push(i); } else { String[] prevLog = logs.get(stack.pop()).split(\u0026#34;:\u0026#34;); int prevId = Integer.parseInt(prevLog[0]); int prevTime = Integer.parseInt(prevLog[2]); int amount = time - prevTime + 1; res[id]+= amount; if (stack.size() \u0026gt; 0) { int topId = Integer.parseInt(logs.get(stack.peek()).split(\u0026#34;:\u0026#34;)[0]); res[topId] -= amount; } } // System.out.println(\u0026#34;s = \u0026#34; + stack + \u0026#34; res = \u0026#34; + Arrays.toString(res)); } return res; } } ","permalink":"https://volyx.in/posts/2022-01-30-exclusive-time-of-functions/","summary":"\u003cp\u003e\u003cimg alt=\"636. Exclusive Time of Functions\" loading=\"lazy\" src=\"https://leetcode.com/problems/exclusive-time-of-functions/\"\u003e\u003c/p\u003e\n\u003cp\u003eOn a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\u003c/p\u003e\n\u003cp\u003eFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\u003c/p\u003e","title":"636. Exclusive Time of Functions"},{"content":"\nThere is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\nYou are given a list of strings words from the alien language\u0026rsquo;s dictionary, where the strings in words are sorted lexicographically by the rules of this new language.\nReturn a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language\u0026rsquo;s rules. If there is no solution, return \u0026ldquo;\u0026rdquo;. If there are multiple solutions, return any of them.\nA string s is lexicographically smaller than a string t if at the first letter where they differ, the letter in s comes before the letter in t in the alien language. If the first min(s.length, t.length) letters are the same, then s is smaller if and only if s.length \u0026lt; t.length.\n1 2 3 4 Example 1: Input: words = [\u0026#34;wrt\u0026#34;,\u0026#34;wrf\u0026#34;,\u0026#34;er\u0026#34;,\u0026#34;ett\u0026#34;,\u0026#34;rftt\u0026#34;] Output: \u0026#34;wertf\u0026#34; 1 2 3 4 Example 2: Input: words = [\u0026#34;z\u0026#34;,\u0026#34;x\u0026#34;] Output: \u0026#34;zx\u0026#34; 1 2 3 4 5 Example 3: Input: words = [\u0026#34;z\u0026#34;,\u0026#34;x\u0026#34;,\u0026#34;z\u0026#34;] Output: \u0026#34;\u0026#34; Explanation: The order is invalid, so return \u0026#34;\u0026#34;. Constraints:\n1 \u0026lt;= words.length \u0026lt;= 100 1 \u0026lt;= words[i].length \u0026lt;= 100 words[i] consists of only lowercase English letters. Solution BFS + Topological Sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Solution { public String alienOrder(String[] words) { Map\u0026lt;Character, List\u0026lt;Character\u0026gt;\u0026gt; g = new HashMap\u0026lt;\u0026gt;(); Map\u0026lt;Character, Integer\u0026gt; inDegree = new HashMap(); for (String word: words) { for (char c : word.toCharArray()) { g.put(c, new ArrayList\u0026lt;\u0026gt;()); inDegree.put(c, 0); } } for (int i = 1; i \u0026lt; words.length; i++) { String w1 = words[i-1]; String w2 = words[i]; if (w1.startsWith(w2) \u0026amp;\u0026amp; w1.length() \u0026gt; w2.length()) { return \u0026#34;\u0026#34;; } for (int j = 0; j \u0026lt; Math.min(w1.length(), w2.length()); j++) { char c1 = w1.charAt(j); char c2 = w2.charAt(j); if (c1 == c2) { continue; } else { g.get(c1).add(c2); inDegree.put(c2, inDegree.getOrDefault(c2, 0) + 1); break; } } } StringBuilder sb = new StringBuilder(); Queue\u0026lt;Character\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); for (Character c: inDegree.keySet()) { if (inDegree.get(c).equals(0)) { q.add(c); } } while (q.size() \u0026gt; 0) { Character c = q.poll(); sb.append(c); for (Character nei: g.get(c)) { inDegree.put(nei, inDegree.get(nei) - 1); if (inDegree.get(nei).equals(0)) { q.add(nei); } } } if (sb.length() \u0026lt; inDegree.size()) return \u0026#34;\u0026#34;; return sb.toString(); } } ","permalink":"https://volyx.in/posts/2022-01-29-alien-dictionary/","summary":"\u003cp\u003e\u003cimg alt=\"269. Alien Dictionary\" loading=\"lazy\" src=\"https://leetcode.com/problems/alien-dictionary/\"\u003e\u003c/p\u003e\n\u003cp\u003eThere is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.\u003c/p\u003e\n\u003cp\u003eYou are given a list of strings words from the alien language\u0026rsquo;s dictionary, where the strings in words are sorted lexicographically by the rules of this new language.\u003c/p\u003e\n\u003cp\u003eReturn a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language\u0026rsquo;s rules. If there is no solution, return \u0026ldquo;\u0026rdquo;. If there are multiple solutions, return any of them.\u003c/p\u003e","title":"269. Alien Dictionary"},{"content":"\nYou have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: \u0026lsquo;0\u0026rsquo;, \u0026lsquo;1\u0026rsquo;, \u0026lsquo;2\u0026rsquo;, \u0026lsquo;3\u0026rsquo;, \u0026lsquo;4\u0026rsquo;, \u0026lsquo;5\u0026rsquo;, \u0026lsquo;6\u0026rsquo;, \u0026lsquo;7\u0026rsquo;, \u0026lsquo;8\u0026rsquo;, \u0026lsquo;9\u0026rsquo;. The wheels can rotate freely and wrap around: for example we can turn \u0026lsquo;9\u0026rsquo; to be \u0026lsquo;0\u0026rsquo;, or \u0026lsquo;0\u0026rsquo; to be \u0026lsquo;9\u0026rsquo;. Each move consists of turning one wheel one slot.\nThe lock initially starts at \u0026lsquo;0000\u0026rsquo;, a string representing the state of the 4 wheels.\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\n1 2 3 4 5 6 7 8 Example 1: Input: deadends = [\u0026#34;0201\u0026#34;,\u0026#34;0101\u0026#34;,\u0026#34;0102\u0026#34;,\u0026#34;1212\u0026#34;,\u0026#34;2002\u0026#34;], target = \u0026#34;0202\u0026#34; Output: 6 Explanation: A sequence of valid moves would be \u0026#34;0000\u0026#34; -\u0026gt; \u0026#34;1000\u0026#34; -\u0026gt; \u0026#34;1100\u0026#34; -\u0026gt; \u0026#34;1200\u0026#34; -\u0026gt; \u0026#34;1201\u0026#34; -\u0026gt; \u0026#34;1202\u0026#34; -\u0026gt; \u0026#34;0202\u0026#34;. Note that a sequence like \u0026#34;0000\u0026#34; -\u0026gt; \u0026#34;0001\u0026#34; -\u0026gt; \u0026#34;0002\u0026#34; -\u0026gt; \u0026#34;0102\u0026#34; -\u0026gt; \u0026#34;0202\u0026#34; would be invalid, because the wheels of the lock become stuck after the display becomes the dead end \u0026#34;0102\u0026#34;. 1 2 3 4 5 Example 2: Input: deadends = [\u0026#34;8888\u0026#34;], target = \u0026#34;0009\u0026#34; Output: 1 Explanation: We can turn the last wheel in reverse to move from \u0026#34;0000\u0026#34; -\u0026gt; \u0026#34;0009\u0026#34;. 1 2 3 4 5 Example 3: Input: deadends = [\u0026#34;8887\u0026#34;,\u0026#34;8889\u0026#34;,\u0026#34;8878\u0026#34;,\u0026#34;8898\u0026#34;,\u0026#34;8788\u0026#34;,\u0026#34;8988\u0026#34;,\u0026#34;7888\u0026#34;,\u0026#34;9888\u0026#34;], target = \u0026#34;8888\u0026#34; Output: -1 Explanation: We cannot reach the target without getting stuck. Constraints:\n1 \u0026lt;= deadends.length \u0026lt;= 500 deadends[i].length == 4 target.length == 4 target will not be in the list deadends. target and deadends[i] consist of digits only. Solution BFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int openLock(String[] deadends, String target) { Set\u0026lt;String\u0026gt; deadSet = new HashSet\u0026lt;\u0026gt;(Arrays.asList(deadends)); Queue\u0026lt;String\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(\u0026#34;0000\u0026#34;); int level = 0; while (q.size() \u0026gt; 0) { int qSize = q.size(); for (int i = 0; i \u0026lt; qSize; i++) { String code = q.poll(); if (code.equals(target)) { return level; } if (deadSet.contains(code)) { continue; } deadSet.add(code); List\u0026lt;String\u0026gt; nextCodes = generateNextCodes(code); q.addAll(nextCodes); } level++; } return -1; } List\u0026lt;String\u0026gt; generateNextCodes(String code) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; code.length(); i++) { int digit = (int) (code.charAt(i) - \u0026#39;0\u0026#39;); res.add(code.substring(0, i) + ((digit + 1) % 10) + code.substring(i + 1)); res.add(code.substring(0, i) + ((digit + 10 - 1) % 10) + code.substring(i + 1)); } return res; } } ","permalink":"https://volyx.in/posts/2022-01-29-open-the-lock/","summary":"\u003cp\u003e\u003cimg alt=\"752. Open the Lock\" loading=\"lazy\" src=\"https://leetcode.com/problems/open-the-lock/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: \u0026lsquo;0\u0026rsquo;, \u0026lsquo;1\u0026rsquo;, \u0026lsquo;2\u0026rsquo;, \u0026lsquo;3\u0026rsquo;, \u0026lsquo;4\u0026rsquo;, \u0026lsquo;5\u0026rsquo;, \u0026lsquo;6\u0026rsquo;, \u0026lsquo;7\u0026rsquo;, \u0026lsquo;8\u0026rsquo;, \u0026lsquo;9\u0026rsquo;. The wheels can rotate freely and wrap around: for example we can turn \u0026lsquo;9\u0026rsquo; to be \u0026lsquo;0\u0026rsquo;, or \u0026lsquo;0\u0026rsquo; to be \u0026lsquo;9\u0026rsquo;. Each move consists of turning one wheel one slot.\u003c/p\u003e\n\u003cp\u003eThe lock initially starts at \u0026lsquo;0000\u0026rsquo;, a string representing the state of the 4 wheels.\u003c/p\u003e","title":"752. Open the Lock"},{"content":"\nGiven an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\n1 2 3 4 Example 1: Input: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCCED\u0026#34; Output: true 1 2 3 4 Example 2: Input: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;SEE\u0026#34; Output: true 1 2 3 4 Example 3: Input: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCB\u0026#34; Output: false Constraints:\nm == board.length n = board[i].length 1 \u0026lt;= m, n \u0026lt;= 6 1 \u0026lt;= word.length \u0026lt;= 15 board and word consists of only lowercase and uppercase English letters. Follow up: Could you use search pruning to make your solution faster with a larger board?\nConstraints:\nThe number of nodes in the tree is in the range [0, 2000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 All the values of the tree are unique. Time Complexity\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { public boolean exist(char[][] board, String word) { int n = board.length; int m = board[0].length; int[][] visited = new int[n][m]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (dfs(0, word, board, i, j, visited)) { return true; } } } return false; } int[][] DIRS = new int[][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, }; boolean dfs(int index, String word, char[][] board, int i, int j, int[][] visited) { if (index == word.length()) { return true; } int n = board.length; int m = board[0].length; if (i == -1 || i == n || j == -1 || j == m || visited[i][j] == 1 || word.charAt(index) != board[i][j]) { return false; } visited[i][j] = 1; for (int[] dir: DIRS) { if (dfs(index + 1, word, board, i + dir[0], j + dir[1], visited)) { return true; } } visited[i][j] = 0; return false; } } ","permalink":"https://volyx.in/posts/2022-01-28-word-search/","summary":"\u003cp\u003e\u003cimg alt=\"1937. Maximum Number of Points with Cost\" loading=\"lazy\" src=\"https://leetcode.com/problems/word-search/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an m x n grid of characters board and a string word, return true if word exists in the grid.\u003c/p\u003e\n\u003cp\u003eThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2022-01-28-word-search-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: board = [[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;E\u0026#34;],[\u0026#34;S\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;S\u0026#34;],[\u0026#34;A\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;E\u0026#34;]], word = \u0026#34;ABCCED\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2022-01-28-word-search-ex2.jpg\"\u003e\u003c/p\u003e","title":"79. Word Search"},{"content":"\nConvert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.\nYou can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.\nWe want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.\nExample 1:\nInput: root = [4,2,5,1,3]\nOutput: [1,2,3,4,5]\nExplanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.\nExample 2:\nInput: root = [2,1,3] Output: [1,2,3]\nConstraints:\nThe number of nodes in the tree is in the range [0, 2000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 All the values of the tree are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public long maxPoints(int[][] points) { int n = points.length; int m = points[0].length; int[] dp = new int[n]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { dp[j] += points[i][j]; } for (int j = 1; j \u0026lt; m; j++) { dp[j] = Math.max(dp[j], dp[j - 1] - 1); } for (int j = m - 2; j \u0026gt;= 0; j--) { dp[j] = Math.max(dp[j], dp[j + 1] - 1); } } int max = 0; for (int i = 0; i \u0026lt; n; i++) { max = Math.max(dp[i], max); } return max; } } ","permalink":"https://volyx.in/posts/2022-01-27-convert-binary-search-tree-to-sorted-doubly-linked-list/","summary":"\u003cp\u003e\u003cimg alt=\"1937. Maximum Number of Points with Cost\" loading=\"lazy\" src=\"https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/\"\u003e\u003c/p\u003e\n\u003cp\u003eConvert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.\u003c/p\u003e\n\u003cp\u003eYou can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.\u003c/p\u003e\n\u003cp\u003eWe want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.\u003c/p\u003e","title":"426. Convert Binary Search Tree to Sorted Doubly Linked List"},{"content":"\nYou are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.\nTo gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 \u0026lt;= r \u0026lt; m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.\nReturn the maximum number of points you can achieve.\nabs(x) is defined as:\nx for x \u0026gt;= 0. -x for x \u0026lt; 0. 1 2 3 4 5 6 7 8 9 Example 1: Input: points = [[1,2,3],[1,5,1],[3,1,1]] Output: 9 Explanation: The blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0). You add 3 + 5 + 3 = 11 to your score. However, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score. Your final score is 11 - 2 = 9. 1 2 3 4 5 6 7 8 9 Example 2: Input: points = [[1,5],[2,3],[4,2]] Output: 11 Explanation: The blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0). You add 5 + 3 + 4 = 12 to your score. However, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score. Your final score is 12 - 1 = 11. Constraints:\nm == points.length n == points[r].length 1 \u0026lt;= m, n \u0026lt;= 105 1 \u0026lt;= m * n \u0026lt;= 105 0 \u0026lt;= points[r][c] \u0026lt;= 105 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public long maxPoints(int[][] points) { int n = points.length; int m = points[0].length; int[] dp = new int[n]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { dp[j] += points[i][j]; } for (int j = 1; j \u0026lt; m; j++) { dp[j] = Math.max(dp[j], dp[j - 1] - 1); } for (int j = m - 2; j \u0026gt;= 0; j--) { dp[j] = Math.max(dp[j], dp[j + 1] - 1); } } int max = 0; for (int i = 0; i \u0026lt; n; i++) { max = Math.max(dp[i], max); } return max; } } ","permalink":"https://volyx.in/posts/2022-01-23-maximum-number-of-points-with-cost/","summary":"\u003cp\u003e\u003cimg alt=\"1937. Maximum Number of Points with Cost\" loading=\"lazy\" src=\"https://leetcode.com/problems/maximum-number-of-points-with-cost/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.\u003c/p\u003e\n\u003cp\u003eTo gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.\u003c/p\u003e\n\u003cp\u003eHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 \u0026lt;= r \u0026lt; m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.\u003c/p\u003e","title":"1937. Maximum Number of Points with Cost"},{"content":"\nDetermine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\nEach row must contain the digits 1-9 without repetition. Each column must contain the digits 1-9 without repetition. Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition. Note:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable. Only the filled cells need to be validated according to the mentioned rules. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: board = [[\u0026#34;5\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;] ,[\u0026#34;4\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;] ,[\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;5\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;9\u0026#34;]] Output: true 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 2: Input: board = [[\u0026#34;8\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;5\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;] ,[\u0026#34;4\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;1\u0026#34;] ,[\u0026#34;7\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;6\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;5\u0026#34;] ,[\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;8\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;7\u0026#34;,\u0026#34;9\u0026#34;]] Output: false Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8\u0026#39;s in the top left 3x3 sub-box, it is invalid. Constraints:\nboard.length == 9 board[i].length == 9 board[i][j] is a digit 1-9 or \u0026lsquo;.\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Solution { public boolean isValidSudoku(char[][] board) { for (int i = 0; i \u0026lt; 9; i++) { if (!isValidRow(i, board)) { return false; } if (!isValidCol(i, board)) { return false; } } for (int i = 0; i \u0026lt; 9; i++) { for (int j = 0; j \u0026lt; 9; j++) { if (i % 3 == 0 \u0026amp;\u0026amp; j % 3 == 0) { if (!isValidBox(i, j, board)) { return false; } } } } return true; } boolean isValidRow(int i, char[][] board) { Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (int j = 0; j \u0026lt; 9; j++) { if (board[i][j] == \u0026#39;.\u0026#39;) { continue; } int val = board[i][j] - \u0026#39;0\u0026#39;; if (!set.add(val)) { return false; } } return true; } boolean isValidCol(int j, char[][] board) { Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 9; i++) { if (board[i][j] == \u0026#39;.\u0026#39;) { continue; } int val = board[i][j] - \u0026#39;0\u0026#39;; if (!set.add(val)) { return false; } } return true; } boolean isValidBox(int i, int j, char[][] board) { Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (int x = i; x \u0026lt; i + 3; x++) { for (int y = j; y \u0026lt; j + 3; y++) { if (board[x][y] == \u0026#39;.\u0026#39;) { continue; } int val = board[x][y] - \u0026#39;0\u0026#39;; if (!set.add(val)) { return false; } } } return true; } } ","permalink":"https://volyx.in/posts/2022-01-14-valid-sudoku/","summary":"\u003cp\u003e\u003cimg alt=\"36. Valid Sudoku\" loading=\"lazy\" src=\"https://leetcode.com/problems/valid-sudoku/\"\u003e\u003c/p\u003e\n\u003cp\u003eDetermine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach row must contain the digits 1-9 without repetition.\u003c/li\u003e\n\u003cli\u003eEach column must contain the digits 1-9 without repetition.\u003c/li\u003e\n\u003cli\u003eEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA Sudoku board (partially filled) could be valid but is not necessarily solvable.\u003c/li\u003e\n\u003cli\u003eOnly the filled cells need to be validated according to the mentioned rules.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2022-01-15-sudoku-ex1.png\"\u003e\u003c/p\u003e","title":"36. Valid Sudoku"},{"content":"\nGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node\u0026rsquo;s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes\u0026rsquo; value in the whole tree.\nIf no such second minimum value exists, output -1 instead.\n1 2 3 4 5 Example 1: Input: root = [2,2,5,null,null,5,7] Output: 5 Explanation: The smallest value is 2, the second smallest value is 5. 1 2 3 4 5 Example 2: Input: root = [2,2,2] Output: -1 Explanation: The smallest value is 2, but there isn\u0026#39;t any second smallest value. Constraints:\nThe number of nodes in the tree is in the range [1, 25]. 1 \u0026lt;= Node.val \u0026lt;= 231 - 1 root.val == min(root.left.val, root.right.val) for each internal node of the tree. Solution BFS traversal 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int findSecondMinimumValue(TreeNode root) { Queue\u0026lt;TreeNode\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(root); int min = root.val; long min2 = Long.MAX_VALUE; // 2 2 5 5 7 while (q.size() \u0026gt; 0) { TreeNode node = q.poll(); if (node.val \u0026gt; min \u0026amp;\u0026amp; node.val \u0026lt; min2) { min2 = node.val; } if (node.left != null) { // both are not null q.add(node.left); q.add(node.right); } } return min2 == Long.MAX_VALUE? -1: (int) min2; } } ","permalink":"https://volyx.in/posts/2022-01-13-second-minimum-node-in-a-binary-tree/","summary":"\u003cp\u003e\u003cimg alt=\"671. Second Minimum Node In a Binary Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node\u0026rsquo;s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\u003c/p\u003e\n\u003cp\u003eGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes\u0026rsquo; value in the whole tree.\u003c/p\u003e","title":"671. Second Minimum Node In a Binary Treer"},{"content":"\nYou are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators [\u0026rsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;/\u0026rsquo;] and the parentheses \u0026lsquo;(\u0026rsquo; and \u0026lsquo;)\u0026rsquo; to get the value 24.\nYou are restricted with the following rules:\nThe division operator \u0026lsquo;/\u0026rsquo; represents real division, not integer division. For example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12. Every operation done is between two numbers. In particular, we cannot use \u0026lsquo;-\u0026rsquo; as a unary operator. For example, if cards = [1, 1, 1, 1], the expression \u0026ldquo;-1 - 1 - 1 - 1\u0026rdquo; is not allowed. You cannot concatenate numbers together For example, if cards = [1, 2, 1, 2], the expression \u0026ldquo;12 + 12\u0026rdquo; is not valid. Return true if you can get such expression that evaluates to 24, and false otherwise.\n1 2 3 4 5 Example 1: Input: cards = [4,1,8,7] Output: true Explanation: (8-4) * (7-1) = 24 1 2 3 4 Example 2: Input: cards = [1,2,1,2] Output: false Constraints:\ncards.length == 4 1 \u0026lt;= cards[i] \u0026lt;= 9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public boolean judgePoint24(int[] cards) { return back(new double[] {cards[0], cards[1], cards[2], cards[3]}); } boolean back(double[] a) { if (a.length == 1) { return Math.abs(a[0] - 24.0) \u0026lt; 0.00001; } for (int i = 0; i \u0026lt; a.length; i++) { for (int j = i + 1; j \u0026lt; a.length; j++) { double[] b = new double[a.length - 1]; int l = 0; for (int k = 0; k \u0026lt; a.length; k++) { if (k != i \u0026amp;\u0026amp; k != j) { b[l++] = a[k]; } } for (double k: compute(a[i], a[j])) { b[b.length - 1] = k; if (back(b)) { return true; } } } } return false; } double[] compute(double a, double b) { return new double[] {a + b, a - b, b - a, a * b, a / b, b / a}; } } ","permalink":"https://volyx.in/posts/2022-01-13-24-game/","summary":"\u003cp\u003e\u003cimg alt=\"679. 24 Game\" loading=\"lazy\" src=\"https://leetcode.com/problems/24-game/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators [\u0026rsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;/\u0026rsquo;] and the parentheses \u0026lsquo;(\u0026rsquo; and \u0026lsquo;)\u0026rsquo; to get the value 24.\u003c/p\u003e\n\u003cp\u003eYou are restricted with the following rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe division operator \u0026lsquo;/\u0026rsquo; represents real division, not integer division.\nFor example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\u003c/li\u003e\n\u003cli\u003eEvery operation done is between two numbers. In particular, we cannot use \u0026lsquo;-\u0026rsquo; as a unary operator.\nFor example, if cards = [1, 1, 1, 1], the expression \u0026ldquo;-1 - 1 - 1 - 1\u0026rdquo; is not allowed.\u003c/li\u003e\n\u003cli\u003eYou cannot concatenate numbers together\nFor example, if cards = [1, 2, 1, 2], the expression \u0026ldquo;12 + 12\u0026rdquo; is not valid.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn true if you can get such expression that evaluates to 24, and false otherwise.\u003c/p\u003e","title":"679. 24 Game"},{"content":"\nThe complement of an integer is the integer you get when you flip all the 0\u0026rsquo;s to 1\u0026rsquo;s and all the 1\u0026rsquo;s to 0\u0026rsquo;s in its binary representation.\nFor example, The integer 5 is \u0026ldquo;101\u0026rdquo; in binary and its complement is \u0026ldquo;010\u0026rdquo; which is the integer 2. Given an integer n, return its complement.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: n = 5 Output: 2 Explanation: 5 is \u0026#34;101\u0026#34; in binary, with complement \u0026#34;010\u0026#34; in binary, which is 2 in base-10. Example 2: Input: n = 7 Output: 0 Explanation: 7 is \u0026#34;111\u0026#34; in binary, with complement \u0026#34;000\u0026#34; in binary, which is 0 in base-10. Example 3: Input: n = 10 Output: 5 Explanation: 10 is \u0026#34;1010\u0026#34; in binary, with complement \u0026#34;0101\u0026#34; in binary, which is 5 in base-10. Constraints:\n0 \u0026lt;= n \u0026lt; 109 Note: This question is the same as 476: https://leetcode.com/problems/number-complement/\nSolution 1 2 3 4 5 6 7 8 9 10 11 class Solution { public int bitwiseComplement(int n) { if (n == 0) return 1; int c = 0; int sum = 1; while (sum - n \u0026lt;= 0) { sum = sum * 2; } return sum - n - 1; } } ","permalink":"https://volyx.in/posts/2022-01-06-complement-of-base-10-integer/","summary":"\u003cp\u003e\u003cimg alt=\"1009. Complement of Base 10 Integer\" loading=\"lazy\" src=\"https://leetcode.com/problems/complement-of-base-10-integer/\"\u003e\u003c/p\u003e\n\u003cp\u003eThe complement of an integer is the integer you get when you flip all the 0\u0026rsquo;s to 1\u0026rsquo;s and all the 1\u0026rsquo;s to 0\u0026rsquo;s in its binary representation.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, The integer 5 is \u0026ldquo;101\u0026rdquo; in binary and its complement is \u0026ldquo;010\u0026rdquo; which is the integer 2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven an integer n, return its complement.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 5 is \u0026#34;101\u0026#34; in binary, with complement \u0026#34;010\u0026#34; in binary, which is 2 in base-10.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 7 is \u0026#34;111\u0026#34; in binary, with complement \u0026#34;000\u0026#34; in binary, which is 0 in base-10.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 10 is \u0026#34;1010\u0026#34; in binary, with complement \u0026#34;0101\u0026#34; in binary, which is 5 in base-10.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1009. Complement of Base 10 Integer"},{"content":"\nImplement a basic calculator to evaluate a simple expression string.\nThe expression string contains only non-negative integers, \u0026lsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;/\u0026rsquo; operators, and open \u0026lsquo;(\u0026rsquo; and closing parentheses \u0026lsquo;)\u0026rsquo;. The integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: s = \u0026#34;1+1\u0026#34; Output: 2 Example 2: Input: s = \u0026#34;6-4/2\u0026#34; Output: 4 Example 3: Input: s = \u0026#34;2*(5+5*2)/3+(6/2+8)\u0026#34; Output: 21 Example 4: Input: s = \u0026#34;(2+6*3+5-(3*14/7+2)*5)+3\u0026#34; Output: -12 Example 5: Input: s = \u0026#34;0\u0026#34; Output: 0 Constraints:\n1 \u0026lt;= s \u0026lt;= 104 s consists of digits, \u0026lsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;/\u0026rsquo;, \u0026lsquo;(\u0026rsquo;, and \u0026lsquo;)\u0026rsquo;. s is a valid expression. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int calculate(String s) { int l1 = 0; int o1 = 1; // 1 ? + : - int l2 = 1; int o2 = 1; // 1 ? * : / for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); if (Character.isDigit(c)) { int num = c - \u0026#39;0\u0026#39;; while (i + 1 \u0026lt; s.length() \u0026amp;\u0026amp; Character.isDigit(s.charAt(i + 1))) { i++; num = 10 * num + (s.charAt(i) - \u0026#39;0\u0026#39;); } l2 = (o2 == 1) ? l2 * num : l2 / num; } else if (c == \u0026#39;(\u0026#39;) { int count = 0; int j = i; while (i \u0026lt; s.length()) { if (s.charAt(i) == \u0026#39;(\u0026#39;) count++; if (s.charAt(i) == \u0026#39;)\u0026#39;) count--; if (count == 0) break; i++; } int num = calculate(s.substring(j + 1, i)); l2 = (o2 == 1) ? l2 * num : l2 / num; } else if (c == \u0026#39;*\u0026#39; || c == \u0026#39;/\u0026#39;) { o2 = (c == \u0026#39;*\u0026#39;) ? 1 : -1; } else if (c == \u0026#39;+\u0026#39; || c == \u0026#39;-\u0026#39;) { l1 = l1 + l2 * o1; o1 = (c == \u0026#39;+\u0026#39;) ? 1 : -1; l2 = 1; o2 = 1; } // System.out.println(String.format(\u0026#34;%s l1=%d o1=%d l2=%d o2=%d\u0026#34;, c, l1, o1, l2, o2)); } return l1 + (l2 * o1); } } ","permalink":"https://volyx.in/posts/2021-12-12-basic-calculator-iii/","summary":"\u003cp\u003e\u003cimg alt=\"772. Basic Calculator III\" loading=\"lazy\" src=\"https://leetcode.com/problems/basic-calculator-iii/\"\u003e\u003c/p\u003e\n\u003cp\u003eImplement a basic calculator to evaluate a simple expression string.\u003c/p\u003e\n\u003cp\u003eThe expression string contains only non-negative integers, \u0026lsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;/\u0026rsquo; operators, and open \u0026lsquo;(\u0026rsquo; and closing parentheses \u0026lsquo;)\u0026rsquo;. The integer division should truncate toward zero.\u003c/p\u003e\n\u003cp\u003eYou may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].\u003c/p\u003e\n\u003cp\u003eNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().\u003c/p\u003e","title":"772. Basic Calculator III"},{"content":"\nYou are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\n1 2 3 4 Example 1: Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]] Output: 4 1 2 3 4 Example 2: Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]] Output: 2 Constraints:\n1 \u0026lt;= points.length \u0026lt;= 500 points[i].length == 2 0 \u0026lt;= xi, yi \u0026lt;= 4 * 10^4 All the given points are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int minAreaRect(int[][] points) { Map\u0026lt;Integer, Set\u0026lt;Integer\u0026gt;\u0026gt; xMap = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; points.length; i++) { if (!xMap.containsKey(points[i][0])) { xMap.put(points[i][0], new HashSet\u0026lt;\u0026gt;()); } xMap.get(points[i][0]).add(points[i][1]); } int min = Integer.MAX_VALUE; for (int i = 0; i \u0026lt; points.length; i++) { for (int j = i + 1; j \u0026lt; points.length; j++) { int x1 = points[i][0]; int y1 = points[i][1]; int x2 = points[j][0]; int y2 = points[j][1]; if (x1 != x2 \u0026amp;\u0026amp; y1 != y2) { if (xMap.get(x1).contains(y2) \u0026amp;\u0026amp; xMap.get(x2).contains(y1)) { min = Math.min(min ,(int) Math.abs( (x2 - x1) * (y2 - y1))); } } } } return min == Integer.MAX_VALUE ? 0: min; } } ","permalink":"https://volyx.in/posts/2021-12-12-minimum-area-rectangle/","summary":"\u003cp\u003e\u003cimg alt=\"939. Minimum Area Rectangle\" loading=\"lazy\" src=\"https://leetcode.com/problems/minimum-area-rectangle/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array of points in the X-Y plane points where points[i] = [xi, yi].\u003c/p\u003e\n\u003cp\u003eReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-12-12-min-rectange-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-12-12-min-rectange-ex2.jpg\"\u003e\u003c/p\u003e","title":"939. Minimum Area Rectangle"},{"content":"\nYou are given a string expression representing a Lisp-like expression to return the integer value of.\nThe syntax for these expressions is given as follows.\n-An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n(An integer could be positive or negative.) A let expression takes the form \u0026ldquo;(let v1 e1 v2 e2 \u0026hellip; vn en expr)\u0026rdquo;, where let is always the string \u0026ldquo;let\u0026rdquo;, then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr. An add expression takes the form \u0026ldquo;(add e1 e2)\u0026rdquo; where add is always the string \u0026ldquo;add\u0026rdquo;, there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2. A mult expression takes the form \u0026ldquo;(mult e1 e2)\u0026rdquo; where mult is always the string \u0026ldquo;mult\u0026rdquo;, there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2. For this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \u0026ldquo;add\u0026rdquo;, \u0026ldquo;let\u0026rdquo;, and \u0026ldquo;mult\u0026rdquo; are protected and will never be used as variable names. Finally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Example 1: Input: expression = \u0026#34;(let x 2 (mult x (let x 3 y 4 (add x y))))\u0026#34; Output: 14 Explanation: In the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. Since x = 3 is found first, the value of x is 3. Example 2: Input: expression = \u0026#34;(let x 3 x 2 x)\u0026#34; Output: 2 Explanation: Assignment in let statements is processed sequentially. Example 3: Input: expression = \u0026#34;(let x 1 y 2 x (add x y) (add x y))\u0026#34; Output: 5 Explanation: The first (add x y) evaluates as 3, and is assigned to x. The second (add x y) evaluates as 3+2 = 5. Example 4: Input: expression = \u0026#34;(let x 2 (add (let x 3 (let x 4 x)) x))\u0026#34; Output: 6 Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context of the final x in the add-expression. That final x will equal 2. Example 5: Input: expression = \u0026#34;(let a1 3 b2 (add a1 1) b2)\u0026#34; Output: 4 Explanation: Variable names can contain digits after the first character. Constraints:\n1 \u0026lt;= expression.length \u0026lt;= 2000 There are no leading or trailing spaces in exprssion. All tokens are separated by a single space in expressoin. The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer. The expression is guaranteed to be legal and evaluate to an integer. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class Solution { public int evaluate(String expression) { return eval(expression, new HashMap\u0026lt;\u0026gt;()); } int eval(String exp, Map\u0026lt;String, Integer\u0026gt; parent) { if (exp.charAt(0) != \u0026#39;(\u0026#39;) { // number or symbol if (Character.isDigit(exp.charAt(0)) || exp.charAt(0) == \u0026#39;-\u0026#39;) { return Integer.parseInt(exp); } return parent.get(exp); } Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.putAll(parent); List\u0026lt;String\u0026gt; tokens = split(exp.substring(exp.indexOf(\u0026#34; \u0026#34;) + 1, exp.length() - 1)); if (exp.startsWith(\u0026#34;(a\u0026#34;)) { return eval(tokens.get(0), map) + eval(tokens.get(1), map); } else if (exp.startsWith(\u0026#34;(m\u0026#34;)) { return eval(tokens.get(0), map) * eval(tokens.get(1), map); } else if (exp.startsWith(\u0026#34;(l\u0026#34;)) { for (int i = 0; i \u0026lt; tokens.size() - 1; i = i + 2) { map.put(tokens.get(i), eval(tokens.get(i + 1), map)); } return eval(tokens.get(tokens.size() - 1), map); } return -1; } List\u0026lt;String\u0026gt; split(String exp) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int count = 0; StringBuilder sb = new StringBuilder(); for (char c: exp.toCharArray()) { if (c == \u0026#39;(\u0026#39;) { count++; } else if (c == \u0026#39;)\u0026#39;) { count--; } if (count == 0 \u0026amp;\u0026amp; c == \u0026#39; \u0026#39;) { res.add(sb.toString()); sb.delete(0, sb.length()); } else { sb.append(c); } } if (sb.length() \u0026gt; 0) res.add(sb.toString()); return res; } } ","permalink":"https://volyx.in/posts/2021-12-11-parse-lisp-expression/","summary":"\u003cp\u003e\u003cimg alt=\"736. Parse Lisp Expression\" loading=\"lazy\" src=\"https://leetcode.com/problems/parse-lisp-expression/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a string expression representing a Lisp-like expression to return the integer value of.\u003c/p\u003e\n\u003cp\u003eThe syntax for these expressions is given as follows.\u003c/p\u003e\n\u003cp\u003e-An expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e(An integer could be positive or negative.)\u003c/li\u003e\n\u003cli\u003eA let expression takes the form \u0026ldquo;(let v1 e1 v2 e2 \u0026hellip; vn en expr)\u0026rdquo;, where let is always the string \u0026ldquo;let\u0026rdquo;, then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\u003c/li\u003e\n\u003cli\u003eAn add expression takes the form \u0026ldquo;(add e1 e2)\u0026rdquo; where add is always the string \u0026ldquo;add\u0026rdquo;, there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\u003c/li\u003e\n\u003cli\u003eA mult expression takes the form \u0026ldquo;(mult e1 e2)\u0026rdquo; where mult is always the string \u0026ldquo;mult\u0026rdquo;, there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\u003c/li\u003e\n\u003cli\u003eFor this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \u0026ldquo;add\u0026rdquo;, \u0026ldquo;let\u0026rdquo;, and \u0026ldquo;mult\u0026rdquo; are protected and will never be used as variable names.\u003c/li\u003e\n\u003cli\u003eFinally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: expression = \u0026#34;(let x 2 (mult x (let x 3 y 4 (add x y))))\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 14\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: In the expression (add x y), when checking for the value of the variable x,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince x = 3 is found first, the value of x is 3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: expression = \u0026#34;(let x 3 x 2 x)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Assignment in let statements is processed sequentially.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: expression = \u0026#34;(let x 1 y 2 x (add x y) (add x y))\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The first (add x y) evaluates as 3, and is assigned to x.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe second (add x y) evaluates as 3+2 = 5.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: expression = \u0026#34;(let x 2 (add (let x 3 (let x 4 x)) x))\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Even though (let x 4 x) has a deeper scope, it is outside the context\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eof the final x in the add-expression.  That final x will equal 2.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: expression = \u0026#34;(let a1 3 b2 (add a1 1) b2)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Variable names can contain digits after the first character.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"736. Parse Lisp Expression"},{"content":"\nGiven an array of strings words (without duplicates), return all the concatenated words in the given list of words.\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: words = [\u0026#34;cat\u0026#34;,\u0026#34;cats\u0026#34;,\u0026#34;catsdogcats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;hippopotamuses\u0026#34;,\u0026#34;rat\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;] Output: [\u0026#34;catsdogcats\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;] Explanation: \u0026#34;catsdogcats\u0026#34; can be concatenated by \u0026#34;cats\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cats\u0026#34;; \u0026#34;dogcatsdog\u0026#34; can be concatenated by \u0026#34;dog\u0026#34;, \u0026#34;cats\u0026#34; and \u0026#34;dog\u0026#34;; \u0026#34;ratcatdogcat\u0026#34; can be concatenated by \u0026#34;rat\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cat\u0026#34;. Example 2: Input: words = [\u0026#34;cat\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;catdog\u0026#34;] Output: [\u0026#34;catdog\u0026#34;] Constraints:\n1 \u0026lt;= words.length \u0026lt;= 10^4 0 \u0026lt;= words[i].length \u0026lt;= 1000 words[i] consists of only lowercase English letters. 0 \u0026lt;= sum(words[i].length) \u0026lt;= 10^5 Solution DFS + Cache 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public List\u0026lt;String\u0026gt; findAllConcatenatedWordsInADict(String[] words) { Map\u0026lt;String, Boolean\u0026gt; cache = new HashMap\u0026lt;\u0026gt;(); Set\u0026lt;String\u0026gt; wordSet = new HashSet\u0026lt;\u0026gt;(Arrays.asList(words)); List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (String word: words) { if (dfs(word, wordSet, cache)) { res.add(word); } } return res; } boolean dfs(String word, Set\u0026lt;String\u0026gt; words, Map\u0026lt;String, Boolean\u0026gt; cache) { if (cache.containsKey(word)) { return cache.get(word); } for (int i = 1; i \u0026lt; word.length(); i++) { String prefix = word.substring(0, i); if (words.contains(prefix)) { String suffix = word.substring(i); if (cache.containsKey(suffix) || dfs(suffix, words, cache)) { cache.put(word, true); return true; } } } cache.put(word, false); return false; } } Solution DFS + WordSet as Cache 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public List\u0026lt;String\u0026gt; findAllConcatenatedWordsInADict(String[] words) { Set\u0026lt;String\u0026gt; wordSet = new HashSet\u0026lt;\u0026gt;(Arrays.asList(words)); List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (String word: words) { if (dfs(word, wordSet)) { res.add(word); } } return res; } boolean dfs(String word, Set\u0026lt;String\u0026gt; words) { for (int i = 1; i \u0026lt; word.length(); i++) { String prefix = word.substring(0, i); if (words.contains(prefix)) { String suffix = word.substring(i); if (words.contains(suffix) || dfs(suffix, words)) { words.add(word); return true; } } } return false; } } Solution[TLE on 43 test] DFS + Trie 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class Solution { public List\u0026lt;String\u0026gt; findAllConcatenatedWordsInADict(String[] words) { Set\u0026lt;String\u0026gt; wordSet = new HashSet\u0026lt;\u0026gt;(Arrays.asList(words)); TrieNode root = new TrieNode(\u0026#39;#\u0026#39;); List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (String word: words) { TrieNode node = root; for (int i = 0; i \u0026lt; word.length(); i++) { char c = word.charAt(i); if (node.children[c - \u0026#39;a\u0026#39;] == null) { node.children[c - \u0026#39;a\u0026#39;] = new TrieNode(c); } node = node.children[c - \u0026#39;a\u0026#39;]; } if (node != root) { node.isWord = true; } } for (String word: words) { if (dfs(root, word.toCharArray(), 0, word.length())) { res.add(word); } } print(root, 0); return res; } boolean isWord(TrieNode root, char[] chars, int left, int right) { TrieNode node = root; for (int i = left; i \u0026lt; right; i++) { char c = chars[i]; if (node.children[c - \u0026#39;a\u0026#39;] != null) { node = node.children[c - \u0026#39;a\u0026#39;]; } else { return false; } } if (node.isWord) { // System.out.println(\u0026#34;\\t \u0026#34; + new String(Arrays.copyOfRange(chars, left, right)) + \u0026#34; is word\u0026#34;); } return node.isWord; } boolean dfs(TrieNode node, char[] chars, int left, int right) { // System.out.println(\u0026#34;word = \u0026#34; + new String(Arrays.copyOfRange(chars, left, right))); for (int i = left; i \u0026lt; right; i++) { // System.out.println(\u0026#34;\\t prefix = \u0026#34; + new String(Arrays.copyOfRange(chars, left, i))); if (isWord(node, chars, left, i)) { // System.out.println(\u0026#34;\\t suffix = \u0026#34; + new String(Arrays.copyOfRange(chars, i, right))); if (isWord(node, chars, i, right) || dfs(node, chars, i, right)) { markWord(node, chars, i, right); return true; } } } return false; } void print(TrieNode node, int begin) { System.out.println(\u0026#34; \u0026#34;.repeat(begin) + node.val + (node.isWord ? \u0026#34;*\u0026#34;: \u0026#34;\u0026#34;)); for(TrieNode child: node.children) { if (child != null) print(child, begin + 2); } } void markWord(TrieNode root, char[] chars, int left, int right) { TrieNode node = root; for (int i = left; i \u0026lt; right; i++) { char c = chars[i]; if (node.children[c - \u0026#39;a\u0026#39;] != null) { node = node.children[c - \u0026#39;a\u0026#39;]; } else { return; } } node.isWord = true; // System.out.println(\u0026#34;\\t mark word = \u0026#34; + new String(Arrays.copyOfRange(chars, left, right))); } } class TrieNode { char val; TrieNode[] children = new TrieNode[26]; boolean isWord; public TrieNode(char val) { this.val = val; } } ","permalink":"https://volyx.in/posts/2021-12-10-concatenated-words/","summary":"\u003cp\u003e\u003cimg alt=\"472. Concatenated Words\" loading=\"lazy\" src=\"https://leetcode.com/problems/concatenated-words/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of strings words (without duplicates), return all the concatenated words in the given list of words.\u003c/p\u003e\n\u003cp\u003eA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;cat\u0026#34;,\u0026#34;cats\u0026#34;,\u0026#34;catsdogcats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;hippopotamuses\u0026#34;,\u0026#34;rat\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;catsdogcats\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;catsdogcats\u0026#34; can be concatenated by \u0026#34;cats\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cats\u0026#34;; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;dogcatsdog\u0026#34; can be concatenated by \u0026#34;dog\u0026#34;, \u0026#34;cats\u0026#34; and \u0026#34;dog\u0026#34;; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;ratcatdogcat\u0026#34; can be concatenated by \u0026#34;rat\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cat\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;cat\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;catdog\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;catdog\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"472. Concatenated Words"},{"content":"\nThere are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Example 1: Input: cardPoints = [1,2,3,4,5,6,1], k = 3 Output: 12 Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12. Example 2: Input: cardPoints = [2,2,2], k = 2 Output: 4 Explanation: Regardless of which two cards you take, your score will always be 4. Example 3: Input: cardPoints = [9,7,7,9,7,7,9], k = 7 Output: 55 Explanation: You have to take all the cards. Your score is the sum of points of all cards. Example 4: Input: cardPoints = [1,1000,1], k = 1 Output: 1 Explanation: You cannot take the card in the middle. Your best score is 1. Example 5: Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3 Output: 202 Constraints:\n1 \u0026lt;= cardPoints.length \u0026lt;= 10^5 1 \u0026lt;= cardPoints[i] \u0026lt;= 10^4 1 \u0026lt;= k \u0026lt;= cardPoints.length Solution Left/Right Prefix Sum 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { // Left PrefixSum and Right PrefixSum public int maxScore(int[] cardPoints, int k) { int n = cardPoints.length; int[] leftPrefix = new int[k + 1]; int[] rightPrefix = new int[k + 1]; for (int i = 1; i \u0026lt; k + 1; i++) { leftPrefix[i] = leftPrefix[i - 1] + cardPoints[i - 1]; rightPrefix[i] = rightPrefix[i - 1] + cardPoints[n - i]; } int max = 0; for (int i = 0; i \u0026lt; k + 1; i++) { max = Math.max(max, leftPrefix[i] + rightPrefix[k - i]); } return max; } } Solution Sliding Window 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public int maxScore2(int[] cardPoints, int k) { int total = 0; for (int p: cardPoints) { total += p; } int ans = 0; int windowSum = 0; int windowSize = cardPoints.length - k; int j = 0; for (int i = 0; i \u0026lt; cardPoints.length; i++) { windowSum += cardPoints[i]; j++; if (j \u0026lt; windowSize) { continue; } if (j \u0026gt; windowSize) { windowSum -= cardPoints[i - windowSize]; } ans = Math.max(ans, total - windowSum); } return ans; } } ","permalink":"https://volyx.in/posts/2021-12-06-maximum-points-you-can-obtain-from-cards/","summary":"\u003cp\u003e\u003cimg alt=\"1423. Maximum Points You Can Obtain from Cards\" loading=\"lazy\" src=\"https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards/\"\u003e\u003c/p\u003e\n\u003cp\u003eThere are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.\u003c/p\u003e\n\u003cp\u003eIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\u003c/p\u003e\n\u003cp\u003eYour score is the sum of the points of the cards you have taken.\u003c/p\u003e","title":"1423. Maximum Points You Can Obtain from Cards"},{"content":"Зима!.. Крестьянин, торжествуя, На дровнях обновляет путь; Его лошадка, снег почуя, Плетется рысью как-нибудь; Бразды пушистые взрывая, Летит кибитка удалая; Ямщик сидит на облучке В тулупе, в красном кушаке. Вот бегает дворовый мальчик, В салазки жучку посадив, Себя в коня преобразив; Шалун уж заморозил пальчик: Ему и больно и смешно, А мать грозит ему в окно…\n","permalink":"https://volyx.in/posts/2014-12-01-poem/","summary":"\u003cp\u003eЗима!.. Крестьянин, торжествуя,\nНа дровнях обновляет путь;\nЕго лошадка, снег почуя,\nПлетется рысью как-нибудь;\nБразды пушистые взрывая,\nЛетит кибитка удалая;\nЯмщик сидит на облучке\nВ тулупе, в красном кушаке.\nВот бегает дворовый мальчик,\nВ салазки жучку посадив,\nСебя в коня преобразив;\nШалун уж заморозил пальчик:\nЕму и больно и смешно,\nА мать грозит ему в окно…\u003c/p\u003e","title":"Береза — Есенин Сергей Александрович"},{"content":"\nYou are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei.\nIn one semester, you can take any number of courses as long as you have taken all the prerequisites in the previous semester for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses. If there is no way to take all the courses, return -1.\n1 2 3 4 5 6 7 Example 1: Input: n = 3, relations = [[1,3],[2,3]] Output: 2 Explanation: The figure above represents the given graph. In the first semester, you can take courses 1 and 2. In the second semester, you can take course 3. 1 2 3 4 5 Example 2: Input: n = 3, relations = [[1,2],[2,3],[3,1]] Output: -1 Explanation: No course can be studied because they are prerequisites of each other. Constraints:\n1 \u0026lt;= n \u0026lt;= 5000 1 \u0026lt;= relations.length \u0026lt;= 5000 relations[i].length == 2 1 \u0026lt;= prevCourse_i, nextCourse_i \u0026lt;= n prevCoursei != nextCoursei All the pairs [prevCoursei, nextCoursei] are unique. Solution BFS (cut inDegree edges) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public int minimumSemesters(int n, int[][] relations) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; graph = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n + 1; i++) { graph.add(new ArrayList\u0026lt;\u0026gt;()); } int[] inDegree = new int[n + 1]; for (int[] rel: relations) { int from = rel[0]; int to = rel[1]; graph.get(from).add(to); inDegree[to]++; } List\u0026lt;Integer\u0026gt; q = new ArrayList\u0026lt;\u0026gt;(); for (int i = 1; i \u0026lt; n + 1; i++) { if (inDegree[i] == 0) { q.add(i); } } int step = 0; int studiedCount = 0; while (q.size() \u0026gt; 0) { step++; List\u0026lt;Integer\u0026gt; nextQ = new ArrayList\u0026lt;\u0026gt;(); for (int node: q) { studiedCount++; for (int end : graph.get(node)) { inDegree[end]--; if (inDegree[end] == 0) { nextQ.add(end); } } q = nextQ; } } return studiedCount == n? step: -1; } } Solution DFS + Cycle Detection 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int minimumSemesters(int n, int[][] relations) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; graph = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n + 1; i++) { graph.add(new ArrayList\u0026lt;\u0026gt;()); } for (int[] rel: relations) { graph.get(rel[0]).add(rel[1]); } int[] visited = new int[n + 1]; int maxLength = 1; for (int node = 1; node \u0026lt; n + 1; node++) { int length = dfs(node, graph, visited); if (length == -1) return -1; maxLength = Math.max(length, maxLength); } return maxLength; } int dfs(int node, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; graph, int[] visited) { if (visited[node] != 0) { return visited[node]; } visited[node] = -1; int maxLength = 1; for (int end: graph.get(node)) { int length = dfs(end, graph, visited); if (length == -1) return -1; maxLength = Math.max(length + 1, maxLength); } visited[node] = maxLength; return maxLength; } } ","permalink":"https://volyx.in/posts/2021-11-30-parallel-courses/","summary":"\u003cp\u003e\u003cimg alt=\"1136. Parallel Courses\" loading=\"lazy\" src=\"https://leetcode.com/problems/parallel-courses/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei.\u003c/p\u003e\n\u003cp\u003eIn one semester, you can take any number of courses as long as you have taken all the prerequisites in the previous semester for the courses you are taking.\u003c/p\u003e","title":"1136. Parallel Courses"},{"content":"\nGiven a n * n matrix grid of 0\u0026rsquo;s and 1\u0026rsquo;s only. We want to represent the grid with a Quad-Tree.\nReturn the root of the Quad-Tree representing the grid.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\nval: True if the node represents a grid of 1\u0026rsquo;s or False if the node represents a grid of 0\u0026rsquo;s. isLeaf: True if the node is leaf node on the tree or False if the node has the four children. 1 2 3 4 5 6 7 8 class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; } We can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all 1\u0026rsquo;s or all 0\u0026rsquo;s) set isLeaf True and set val to the value of the grid and set the four children to Null and stop. If the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo. Recurse for each of the children with the proper sub-grid. If you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nThe output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.\n1 2 3 4 5 6 Example 1: Input: grid = [[0,1],[1,0]] Output: [[0,1],[1,0],[1,1],[1,1],[1,0]] Explanation: The explanation of this example is shown below: Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree. 1 2 3 4 5 6 7 8 Example 2: Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]] Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] Explanation: All values in the grid are not the same. We divide the grid into four sub-grids. The topLeft, bottomLeft and bottomRight each has the same value. The topRight have different values so we divide it into 4 sub-grids where each has the same value. Explanation is shown in the photo below: 1 2 3 4 Example 3: Input: grid = [[1,1],[1,1]] Output: [[1,1]] 1 2 3 4 Example 4: Input: grid = [[0]] Output: [[1,0]] 1 2 3 4 Example 5: Input: grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]] Output: [[0,1],[1,1],[1,0],[1,0],[1,1]] Constraints:\nn == grid.length == grid[i].length n == 2^x where 0 \u0026lt;= x \u0026lt;= 6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 /* // Definition for a QuadTree node. class Node { public boolean val; public boolean isLeaf; public Node topLeft; public Node topRight; public Node bottomLeft; public Node bottomRight; public Node() { this.val = false; this.isLeaf = false; this.topLeft = null; this.topRight = null; this.bottomLeft = null; this.bottomRight = null; } public Node(boolean val, boolean isLeaf) { this.val = val; this.isLeaf = isLeaf; this.topLeft = null; this.topRight = null; this.bottomLeft = null; this.bottomRight = null; } public Node(boolean val, boolean isLeaf, Node topLeft, Node topRight, Node bottomLeft, Node bottomRight) { this.val = val; this.isLeaf = isLeaf; this.topLeft = topLeft; this.topRight = topRight; this.bottomLeft = bottomLeft; this.bottomRight = bottomRight; } }; */ class Solution { public Node construct(int[][] grid) { return buildTree(0, 0, grid, grid.length); // 4 // 2 // 1 } Node buildTree(int row, int col, int[][] array, int size) { if (size == 1) { return new Node(array[row][col] == 1, true); } /* 00 01 02 03 10 11 12 13 20 21 22 23 30 31 32 33 */ // 00 Node leftTop = buildTree(row, col, array, size / 2); // 02 Node rightTop = buildTree(row, col + size / 2, array, size / 2); // 22 Node rightDown = buildTree(row + size / 2, col + size/ 2, array, size / 2); // 20 Node leftDown = buildTree(row + size / 2, col, array, size / 2); Node node = new Node(array[row][col] == 1, false); // function if (leftTop.isLeaf \u0026amp;\u0026amp; rightTop.isLeaf \u0026amp;\u0026amp; leftDown.isLeaf \u0026amp;\u0026amp; rightDown.isLeaf \u0026amp;\u0026amp; leftTop.val == rightTop.val \u0026amp;\u0026amp; leftTop.val == leftDown.val \u0026amp;\u0026amp; leftTop.val == rightDown.val) { node.isLeaf = true; node.val = leftTop.val; } else { node.topLeft = leftTop; node.topRight = rightTop; node.bottomRight = rightDown; node.bottomLeft = leftDown; } return node; } } ","permalink":"https://volyx.in/posts/2021-11-30-construct-quad-tree/","summary":"\u003cp\u003e\u003cimg alt=\"427. Construct Quad Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/construct-quad-tree/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a n * n matrix grid of 0\u0026rsquo;s and 1\u0026rsquo;s only. We want to represent the grid with a Quad-Tree.\u003c/p\u003e\n\u003cp\u003eReturn the root of the Quad-Tree representing the grid.\u003c/p\u003e\n\u003cp\u003eNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\u003c/p\u003e\n\u003cp\u003eA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\u003c/p\u003e","title":"427. Construct Quad Tree"},{"content":"\nYou are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\n1 2 3 4 Example 1: Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[7,4,1],[8,5,2],[9,6,3]] 1 2 3 4 Example 2: Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] 1 2 3 4 Example 3: Input: matrix = [[1]] Output: [[1]] 1 2 3 4 Example 4: Input: matrix = [[1,2],[3,4]] Output: [[3,1],[4,2]] Constraints:\nmatrix.length == n matrix[i].length == n 1 \u0026lt;= n \u0026lt;= 20 -1000 \u0026lt;= matrix[i][j] \u0026lt;= 1000 Solution BFS (cut inDegree edges) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public void rotate(int[][] matrix) { int n = matrix.length; int m = matrix[0].length; for (int i = 0; i \u0026lt; n; i++) { // transpose (i,j) -\u0026gt; (j,i) for (int j = 0; j \u0026lt; m; j++) { if (i \u0026gt; j) { swap(i, j, j, i, matrix); } } } for (int i = 0; i \u0026lt; n; i++) { // reflect left -\u0026gt; right for (int j = 0; j \u0026lt; m / 2; j++) { swap(i, j, i, m - j - 1, matrix); } } } void swap(int i1, int j1, int i2, int j2, int[][] matrix) { int t = matrix[i1][j1]; matrix[i1][j1] = matrix[i2][j2]; matrix[i2][j2] = t; } } ","permalink":"https://volyx.in/posts/2021-11-30-rotate-image/","summary":"\u003cp\u003e\u003cimg alt=\"48. Rotate Image\" loading=\"lazy\" src=\"https://leetcode.com/problems/rotate-image/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\u003c/p\u003e\n\u003cp\u003eYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-11-30-rotate-image-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[7,4,1],[8,5,2],[9,6,3]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-11-30-rotate-image-ex2.jpg\"\u003e\u003c/p\u003e","title":"48. Rotate Image"},{"content":"\nYou are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \u0026ldquo;JFK\u0026rdquo;, thus, the itinerary must begin with \u0026ldquo;JFK\u0026rdquo;. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\nFor example, the itinerary [\u0026ldquo;JFK\u0026rdquo;, \u0026ldquo;LGA\u0026rdquo;] has a smaller lexical order than [\u0026ldquo;JFK\u0026rdquo;, \u0026ldquo;LGB\u0026rdquo;]. You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.\n1 2 3 4 Example 1: Input: tickets = [[\u0026#34;MUC\u0026#34;,\u0026#34;LHR\u0026#34;],[\u0026#34;JFK\u0026#34;,\u0026#34;MUC\u0026#34;],[\u0026#34;SFO\u0026#34;,\u0026#34;SJC\u0026#34;],[\u0026#34;LHR\u0026#34;,\u0026#34;SFO\u0026#34;]] Output: [\u0026#34;JFK\u0026#34;,\u0026#34;MUC\u0026#34;,\u0026#34;LHR\u0026#34;,\u0026#34;SFO\u0026#34;,\u0026#34;SJC\u0026#34;] 1 2 3 4 5 Example 2: Input: tickets = [[\u0026#34;JFK\u0026#34;,\u0026#34;SFO\u0026#34;],[\u0026#34;JFK\u0026#34;,\u0026#34;ATL\u0026#34;],[\u0026#34;SFO\u0026#34;,\u0026#34;ATL\u0026#34;],[\u0026#34;ATL\u0026#34;,\u0026#34;JFK\u0026#34;],[\u0026#34;ATL\u0026#34;,\u0026#34;SFO\u0026#34;]] Output: [\u0026#34;JFK\u0026#34;,\u0026#34;ATL\u0026#34;,\u0026#34;JFK\u0026#34;,\u0026#34;SFO\u0026#34;,\u0026#34;ATL\u0026#34;,\u0026#34;SFO\u0026#34;] Explanation: Another possible reconstruction is [\u0026#34;JFK\u0026#34;,\u0026#34;SFO\u0026#34;,\u0026#34;ATL\u0026#34;,\u0026#34;JFK\u0026#34;,\u0026#34;ATL\u0026#34;,\u0026#34;SFO\u0026#34;] but it is larger in lexical order. Constraints:\n1 \u0026lt;= tickets.length \u0026lt;= 300 tickets[i].length == 2 from_i.length == 3 to_i.length == 3 from_i and to_i consist of uppercase English letters. from_i != to_i Solution DFS + Backtracking 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class Solution { public List\u0026lt;String\u0026gt; findItinerary(List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; tickets) { Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; g = new TreeMap\u0026lt;\u0026gt;(); for (List\u0026lt;String\u0026gt; ticket: tickets) { String start = ticket.get(0); String end = ticket.get(1); g.putIfAbsent(start, new ArrayList\u0026lt;\u0026gt;()); g.get(start).add(end); g.putIfAbsent(end, new ArrayList\u0026lt;\u0026gt;()); } for (String key: g.keySet()) { List\u0026lt;String\u0026gt; t = g.get(key); Collections.sort(t); g.put(key, t); } List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); findItenary(\u0026#34;JFK\u0026#34;, g, tickets.size(), res); return res; } boolean findItenary(String start, Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; g, int edgeCount, List\u0026lt;String\u0026gt; res) { List\u0026lt;String\u0026gt; list = g.get(start); res.add(start); if (list.size() == 0) { if (edgeCount == 0) { return true; } return false; } else { for (int i = 0; i \u0026lt; list.size(); i++) { String next = list.remove(i); boolean find = findItenary(next, g, edgeCount - 1, res); if (find) return true; list.add(i, next); res.remove(res.size() - 1); } } return false; } } Short Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public List\u0026lt;String\u0026gt; findItinerary(List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; tickets) { Map\u0026lt;String, PriorityQueue\u0026lt;String\u0026gt;\u0026gt; g = new TreeMap\u0026lt;\u0026gt;(); for (List\u0026lt;String\u0026gt; ticket: tickets) { String start = ticket.get(0); String end = ticket.get(1); g.computeIfAbsent(start, k -\u0026gt; new PriorityQueue\u0026lt;\u0026gt;()).add(end); } List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); visit(\u0026#34;JFK\u0026#34;, g, res); return res; } void visit(String start, Map\u0026lt;String, PriorityQueue\u0026lt;String\u0026gt;\u0026gt; g, List\u0026lt;String\u0026gt; res) { while (g.containsKey(start) \u0026amp;\u0026amp; g.get(start).size() \u0026gt; 0) { visit(g.get(start).poll(), g, res); } res.add(0, start); } } ","permalink":"https://volyx.in/posts/2021-11-29-reconstruct-itinerary/","summary":"\u003cp\u003e\u003cimg alt=\"332. Reconstruct Itinerary\" loading=\"lazy\" src=\"https://leetcode.com/problems/reconstruct-itinerary/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\u003c/p\u003e\n\u003cp\u003eAll of the tickets belong to a man who departs from \u0026ldquo;JFK\u0026rdquo;, thus, the itinerary must begin with \u0026ldquo;JFK\u0026rdquo;. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\u003c/p\u003e","title":"332. Reconstruct Itinerary"},{"content":"\nGiven the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\nThe height of the tree is height and the number of rows m should be equal to height + 1. The number of columns n should be equal to 2height+1 - 1. Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]). For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1]. Continue this process until all the nodes in the tree have been placed. Any empty cells should contain the empty string \u0026ldquo;\u0026rdquo;. Return the constructed matrix res.\n1 2 3 4 5 6 Example 1: Input: root = [1,2] Output: [[\u0026#34;\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;\u0026#34;], [\u0026#34;2\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;]] 1 2 3 4 5 6 7 Example 2: Input: root = [1,2,3,null,4] Output: [[\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;], [\u0026#34;\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;\u0026#34;], [\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;,\u0026#34;\u0026#34;]] Constraints:\nThe number of nodes in the tree is in the range [1, 210]. -99 \u0026lt;= Node.val \u0026lt;= 99 The depth of the tree will be in the range [1, 10]. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; printTree(TreeNode root) { int maxLevel = level(root); List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; maxLevel; i++) { res.add(new ArrayList\u0026lt;\u0026gt;()); for (int j = 0; j \u0026lt; (int) Math.pow(2, maxLevel) - 1; j++) { res.get(i).add(\u0026#34;\u0026#34;); } } int cols = res.get(0).size(); dfs(0, 0, cols, root, res); return res; } int level(TreeNode node) { if (node == null) return 0; return Math.max(level(node.left), level(node.right)) + 1; } void dfs(int row, int lo, int hi, TreeNode node, List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res) { if (node == null) return; int col = lo + (hi - lo) / 2; res.get(row).set(col, node.val + \u0026#34;\u0026#34;); dfs(row + 1, lo, col - 1, node.left, res); dfs(row + 1, col + 1, hi, node.right, res); } } ","permalink":"https://volyx.in/posts/2021-11-29-print-binary-tree/","summary":"\u003cp\u003e\u003cimg alt=\"655. Print Binary Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/print-binary-tree/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe height of the tree is height and the number of rows m should be equal to height + 1.\u003c/li\u003e\n\u003cli\u003eThe number of columns n should be equal to 2height+1 - 1.\u003c/li\u003e\n\u003cli\u003ePlace the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).\u003c/li\u003e\n\u003cli\u003eFor each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].\u003c/li\u003e\n\u003cli\u003eContinue this process until all the nodes in the tree have been placed.\u003c/li\u003e\n\u003cli\u003eAny empty cells should contain the empty string \u0026ldquo;\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the constructed matrix res.\u003c/p\u003e","title":"655. Print Binary Tree"},{"content":"\nGiven a string s, return all the palindromic permutations (without duplicates) of it.\nYou may return the answer in any order. If s has no palindromic permutation, return an empty list.\n1 2 3 4 5 6 7 8 9 Example 1: Input: s = \u0026#34;aabb\u0026#34; Output: [\u0026#34;abba\u0026#34;,\u0026#34;baab\u0026#34;] Example 2: Input: s = \u0026#34;abc\u0026#34; Output: [] Constraints:\n1 \u0026lt;= s.length \u0026lt;= 16 s consists of only lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class Solution { public List\u0026lt;String\u0026gt; generatePalindromes(String s) { Set\u0026lt;String\u0026gt; res = new HashSet\u0026lt;\u0026gt;(); int[] freq = new int[256]; int count = 0; for (char c : s.toCharArray()) { freq[c]++; } if (!canPermute(freq)) { return Collections.emptyList(); } char mid = \u0026#39; \u0026#39;; int k = 0; char[] st = new char[s.length() / 2]; for (int i = 0; i \u0026lt; freq.length; i++) { if (freq[i] % 2 == 1) { mid = (char) i; } for (int j = 0; j \u0026lt; freq[i] / 2; j++) { st[k++] = (char) i; } } permute(0, st, mid, res); return new ArrayList\u0026lt;\u0026gt;(res); } void permute(int i, char[] st, char mid, Set\u0026lt;String\u0026gt; res) { if (i == st.length) { String m = ((mid == \u0026#39; \u0026#39;) ? \u0026#34;\u0026#34;: \u0026#34;\u0026#34; + mid); String val = new String(st) + m + new StringBuilder(new String(st)).reverse().toString(); res.add(val); } else { for (int j = i; j \u0026lt; st.length; j++) { swap(i, j, st); permute(i + 1, st, mid, res); swap(i, j, st); } } } boolean canPermute(int[] freq) { int count = 0; for (int f: freq) { count += f % 2; } return count \u0026lt;= 1; } void swap(int i, int j, char[] st) { char t = st[i]; st[i] = st[j]; st[j] = t; } } ","permalink":"https://volyx.in/posts/2021-11-28-palindrome-permutation-ii/","summary":"\u003cp\u003e\u003cimg alt=\"267. Palindrome Permutation II\" loading=\"lazy\" src=\"https://leetcode.com/problems/palindrome-permutation-ii/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, return all the palindromic permutations (without duplicates) of it.\u003c/p\u003e\n\u003cp\u003eYou may return the answer in any order. If s has no palindromic permutation, return an empty list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aabb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;abba\u0026#34;,\u0026#34;baab\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"267. Palindrome Permutation II"},{"content":"\nGiven a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\nLetters are case sensitive, for example, \u0026ldquo;Aa\u0026rdquo; is not considered a palindrome here.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: s = \u0026#34;abccccdd\u0026#34; Output: 7 Explanation: One longest palindrome that can be built is \u0026#34;dccaccd\u0026#34;, whose length is 7. Example 2: Input: s = \u0026#34;a\u0026#34; Output: 1 Example 3: Input: s = \u0026#34;bb\u0026#34; Output: 2 Constraints:\n1 \u0026lt;= s.length \u0026lt;= 2000 s consists of lowercase and/or uppercase English letters only. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int longestPalindrome(String s) { int[] freq = new int[256]; for (char c: s.toCharArray()) { freq[c]++; } int maxOdd = 0; int count = 0; for (int f: freq) { count += f / 2 * 2; if (count % 2 == 0 \u0026amp;\u0026amp; f % 2 == 1) { count++; } } return count; } } ","permalink":"https://volyx.in/posts/2021-11-28-longest-palindrome/","summary":"\u003cp\u003e\u003cimg alt=\"409. Longest Palindrome\" loading=\"lazy\" src=\"https://leetcode.com/problems/longest-palindrome//\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.\u003c/p\u003e\n\u003cp\u003eLetters are case sensitive, for example, \u0026ldquo;Aa\u0026rdquo; is not considered a palindrome here.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abccccdd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOne longest palindrome that can be built is \u0026#34;dccaccd\u0026#34;, whose length is 7.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;bb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"409. Longest Palindrome"},{"content":"\nGiven a string s, return true if a permutation of the string could form a palindrome.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: s = \u0026#34;code\u0026#34; Output: false Example 2: Input: s = \u0026#34;aab\u0026#34; Output: true Example 3: Input: s = \u0026#34;carerac\u0026#34; Output: true Constraints:\n1 \u0026lt;= s.length \u0026lt;= 5000 s consists of only lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public boolean canPermutePalindrome(String s) { int[] freq = new int[256]; for (char c: s.toCharArray()) { freq[c]++; } int count = 0; for (int f: freq) { count += f % 2; } return count \u0026lt;= 1; } } ","permalink":"https://volyx.in/posts/2021-11-27-palindrome-permutation/","summary":"\u003cp\u003e\u003cimg alt=\"266. Palindrome Permutation\" loading=\"lazy\" src=\"https://leetcode.com/problems/palindrome-permutation/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, return true if a permutation of the string could form a palindrome.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;code\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aab\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;carerac\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"266. Palindrome Permutation"},{"content":"\nYou are given an m x n grid rooms initialized with these three possible values.\n-1 A wall or an obstacle. 0 A gate. INF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647. Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.\n1 2 3 4 Example 1: Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]] Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 2: Input: rooms = [[-1]] Output: [[-1]] Example 3: Input: rooms = [[2147483647]] Output: [[2147483647]] Example 4: Input: rooms = [[0]] Output: [[0]] Constraints:\nm == rooms.length n == rooms[i].length 1 \u0026lt;= m, n \u0026lt;= 250 rooms[i][j] is -1, 0, or 2^31 - 1. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { int[] DIRS = new int[] {0, 1, 0, -1, 0}; public void wallsAndGates(int[][] rooms) { int m = rooms.length; int n = rooms[0].length; Queue\u0026lt;int[]\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; m; i++) { for (int j = 0; j \u0026lt; n; j++) { if (rooms[i][j] == 0) { q.add(new int[] {i, j}); } } } while (q.size() \u0026gt; 0) { int[] point = q.poll(); int row = point[0]; int col = point[1]; for (int i = 0; i \u0026lt; DIRS.length - 1; i++) { int x = row + DIRS[i]; int y = col + DIRS[i + 1]; if (x \u0026lt; 0 || x \u0026gt;= m || y \u0026lt; 0 || y \u0026gt;= n || rooms[x][y] != Integer.MAX_VALUE) { continue; } rooms[x][y] = rooms[row][col] + 1; q.add(new int[] {x, y}); } } } } ","permalink":"https://volyx.in/posts/2021-11-27-walls-and-gates/","summary":"\u003cp\u003e\u003cimg alt=\"286. Walls and Gates\" loading=\"lazy\" src=\"https://leetcode.com/problems/walls-and-gates/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an m x n grid rooms initialized with these three possible values.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e-1 A wall or an obstacle.\u003c/li\u003e\n\u003cli\u003e0 A gate.\u003c/li\u003e\n\u003cli\u003eINF Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.\u003c/p\u003e","title":"286. Walls and Gates"},{"content":"\nGiven an integer array nums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [1,3,5,4,7] Output: 2 Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. Example 2: Input: nums = [2,2,2,2,2] Output: 5 Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences\u0026#39; length is 1, so output 5. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 2000 -10^6 \u0026lt;= nums[i] \u0026lt;= 10^6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public int findNumberOfLIS(int[] nums) { int n = nums.length; int[] len = new int[n]; int[] count = new int[n]; int res = 0; int max = 0; for (int i = 0; i \u0026lt; n; i++) { len[i] = count[i] = 1; for (int j = 0; j \u0026lt; i; j++) { if (nums[i] \u0026gt; nums[j]) { if (len[i] == len[j] + 1) { count[i] += count[j]; } else if (len[i] \u0026lt; len[j] + 1) { // the same as in longest subsequence len[i] = len[j] + 1; // len[i] = Math.max(len[i], len[j] + 1) count[i] = count[j]; } } } if (len[i] \u0026gt; max) { max = len[i]; res = count[i]; } else if (len[i] == max) { res += count[i]; } } return res; } } ","permalink":"https://volyx.in/posts/2021-11-26-number-of-longest-increasing-subsequence/","summary":"\u003cp\u003e\u003cimg alt=\"673. Number of Longest Increasing Subsequence\" loading=\"lazy\" src=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, return the number of longest increasing subsequences.\u003c/p\u003e\n\u003cp\u003eNotice that the sequence has to be strictly increasing.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,3,5,4,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,2,2,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences\u0026#39; length is 1, so output 5.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"673. Number of Longest Increasing Subsequence"},{"content":"\nA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -\u0026gt; s1 -\u0026gt; s2 -\u0026gt; \u0026hellip; -\u0026gt; sk such that:\nEvery adjacent pair of words differs by a single letter. Every si for 1 \u0026lt;= i \u0026lt;= k is in wordList. Note that beginWord does not need to be in wordList. sk == endWord Given two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, \u0026hellip;, sk].\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: beginWord = \u0026#34;hit\u0026#34;, endWord = \u0026#34;cog\u0026#34;, wordList = [\u0026#34;hot\u0026#34;,\u0026#34;dot\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;lot\u0026#34;,\u0026#34;log\u0026#34;,\u0026#34;cog\u0026#34;] Output: [[\u0026#34;hit\u0026#34;,\u0026#34;hot\u0026#34;,\u0026#34;dot\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;cog\u0026#34;],[\u0026#34;hit\u0026#34;,\u0026#34;hot\u0026#34;,\u0026#34;lot\u0026#34;,\u0026#34;log\u0026#34;,\u0026#34;cog\u0026#34;]] Explanation: There are 2 shortest transformation sequences: \u0026#34;hit\u0026#34; -\u0026gt; \u0026#34;hot\u0026#34; -\u0026gt; \u0026#34;dot\u0026#34; -\u0026gt; \u0026#34;dog\u0026#34; -\u0026gt; \u0026#34;cog\u0026#34; \u0026#34;hit\u0026#34; -\u0026gt; \u0026#34;hot\u0026#34; -\u0026gt; \u0026#34;lot\u0026#34; -\u0026gt; \u0026#34;log\u0026#34; -\u0026gt; \u0026#34;cog\u0026#34; Example 2: Input: beginWord = \u0026#34;hit\u0026#34;, endWord = \u0026#34;cog\u0026#34;, wordList = [\u0026#34;hot\u0026#34;,\u0026#34;dot\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;lot\u0026#34;,\u0026#34;log\u0026#34;] Output: [] Explanation: The endWord \u0026#34;cog\u0026#34; is not in wordList, therefore there is no valid transformation sequence. Constraints:\n1 \u0026lt;= beginWord.length \u0026lt;= 5 endWord.length == beginWord.length 1 \u0026lt;= wordList.length \u0026lt;= 1000 wordList[i].length == beginWord.length beginWord, endWord, and wordList[i] consist of lowercase English letters. beginWord != endWord All the words in wordList are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; findLadders(String beginWord, String endWord, List\u0026lt;String\u0026gt; wordList) { wordList.add(0, beginWord); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; g = buildGraph(wordList); List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int min = Integer.MAX_VALUE; int target = wordList.indexOf(endWord); int source = wordList.indexOf(beginWord); Queue\u0026lt;Pair\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(new Pair\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt;(source, new ArrayList\u0026lt;\u0026gt;())); int[] visited = new int[wordList.size()]; while (q.size() \u0026gt; 0) { int size = q.size(); for (int i = 0; i \u0026lt; size; i++) { Pair\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; node = q.poll(); Integer index = node.getKey(); visited[index] = 1; String word = wordList.get(index); List\u0026lt;String\u0026gt; path = node.getValue(); path.add(word); if (path.size() \u0026gt; min) continue; if (index == target) { if (path.size() \u0026lt; min) { min = path.size(); res.clear(); res.add(path); } else if (path.size() == min) { res.add(path); } } else { for (Integer nei: g.get(index)) { String neiWord = wordList.get(nei); if (visited[nei] == 0) { q.add(new Pair\u0026lt;\u0026gt;(nei, new ArrayList\u0026lt;\u0026gt;(path))); } } } } } return res; } boolean intersects(String a, String b) { int i = 0; int count = 0; while (i \u0026lt; a.length()) { if (a.charAt(i) != b.charAt(i)) { count++; } if (count \u0026gt; 1) { return false; } i++; } return count == 1; } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; buildGraph(List\u0026lt;String\u0026gt; wordList) { int n = wordList.size(); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; g = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { g.add(new ArrayList\u0026lt;\u0026gt;()); } for (int i = 0; i \u0026lt; n; i++) { for (int j = i + 1; j \u0026lt; n; j++) { if (intersects(wordList.get(i), wordList.get(j))) { g.get(i).add(j); g.get(j).add(i); } } } return g; } } ","permalink":"https://volyx.in/posts/2021-11-25-word-ladder-ii/","summary":"\u003cp\u003e\u003cimg alt=\"126. Word Ladder II\" loading=\"lazy\" src=\"https://leetcode.com/problems/https://leetcode.com/problems/bus-routes/\"\u003e\u003c/p\u003e\n\u003cp\u003eA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -\u0026gt; s1 -\u0026gt; s2 -\u0026gt; \u0026hellip; -\u0026gt; sk such that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEvery adjacent pair of words differs by a single letter.\u003c/li\u003e\n\u003cli\u003eEvery si for 1 \u0026lt;= i \u0026lt;= k is in wordList. Note that beginWord does not need to be in wordList.\u003c/li\u003e\n\u003cli\u003esk == endWord\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, \u0026hellip;, sk].\u003c/p\u003e","title":"126. Word Ladder II"},{"content":"\nGiven a pattern and a string s, return true if s matches the pattern.\nA string s matches a pattern if there is some bijective mapping of single characters to strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Example 1: Input: pattern = \u0026#34;abab\u0026#34;, s = \u0026#34;redblueredblue\u0026#34; Output: true Explanation: One possible mapping is as follows: \u0026#39;a\u0026#39; -\u0026gt; \u0026#34;red\u0026#34; \u0026#39;b\u0026#39; -\u0026gt; \u0026#34;blue\u0026#34; Example 2: Input: pattern = \u0026#34;aaaa\u0026#34;, s = \u0026#34;asdasdasdasd\u0026#34; Output: true Explanation: One possible mapping is as follows: \u0026#39;a\u0026#39; -\u0026gt; \u0026#34;asd\u0026#34; Example 3: Input: pattern = \u0026#34;abab\u0026#34;, s = \u0026#34;asdasdasdasd\u0026#34; Output: true Explanation: One possible mapping is as follows: \u0026#39;a\u0026#39; -\u0026gt; \u0026#34;a\u0026#34; \u0026#39;b\u0026#39; -\u0026gt; \u0026#34;sdasd\u0026#34; Note that \u0026#39;a\u0026#39; and \u0026#39;b\u0026#39; cannot both map to \u0026#34;asd\u0026#34; since the mapping is a bijection. Example 4: Input: pattern = \u0026#34;aabb\u0026#34;, s = \u0026#34;xyzabcxzyabc\u0026#34; Output: false Constraints:\n1 \u0026lt;= pattern.length, s.length \u0026lt;= 20 pattern and s consist of only lower-case English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public boolean wordPatternMatch(String pattern, String s) { Map\u0026lt;Character, String\u0026gt; mapping = new HashMap\u0026lt;\u0026gt;(); Set\u0026lt;String\u0026gt; seen = new HashSet\u0026lt;\u0026gt;(); return isMatch(0, s, 0, pattern, seen, mapping); } boolean isMatch(int si, String s, int pi, String pattern, Set\u0026lt;String\u0026gt; seen, Map\u0026lt;Character, String\u0026gt; mapping) { if (si == s.length() \u0026amp;\u0026amp; pi == pattern.length()) return true; if (si == s.length() || pi == pattern.length()) return false; char c = pattern.charAt(pi); String mappingPattern = mapping.get(c); if (mappingPattern == null) { boolean ans = false; for (int i = si + 1; i \u0026lt;= s.length(); i++) { String newMapping = s.substring(si, i); if (seen.add(newMapping)) { mapping.put(c, newMapping); // System.out.println(c + \u0026#34; \u0026#34; + newMapping); ans |= isMatch(i, s, pi + 1, pattern, seen, mapping); if (ans) return true; seen.remove(newMapping); mapping.remove(c); } } } else { if (s.startsWith(mappingPattern, si)) { return isMatch(si + mappingPattern.length(), s, pi + 1, pattern, seen, mapping); } } return false; } } ","permalink":"https://volyx.in/posts/2021-11-25-word-pattern-ii/","summary":"\u003cp\u003e\u003cimg alt=\"291. Word Pattern II\" loading=\"lazy\" src=\"https://leetcode.com/problems/word-pattern-ii/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a pattern and a string s, return true if s matches the pattern.\u003c/p\u003e\n\u003cp\u003eA string s matches a pattern if there is some bijective mapping of single characters to strings such that if each character in pattern is replaced by the string it maps to, then the resulting string is s. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.\u003c/p\u003e","title":"291. Word Pattern II"},{"content":"\nYou are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\nFor example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -\u0026gt; 5 -\u0026gt; 7 -\u0026gt; 1 -\u0026gt; 5 -\u0026gt; 7 -\u0026gt; 1 -\u0026gt; \u0026hellip; forever. You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6 Output: 2 Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6. Example 2: Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12 Output: -1 Constraints:\n1 \u0026lt;= routes.length \u0026lt;= 500. 1 \u0026lt;= routes[i].length \u0026lt;= 10^5 All the values of routes[i] are unique. sum(routes[i].length) \u0026lt;= 10^5 0 \u0026lt;= routes[i][j] \u0026lt; 10^6 0 \u0026lt;= source, target \u0026lt; 10^6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; stationToBus = new HashMap\u0026lt;\u0026gt;(); public int numBusesToDestination(int[][] routes, int source, int target) { for (int i = 0; i \u0026lt; routes.length; i++) { for (int j = 0; j \u0026lt; routes[i].length; j++) { List\u0026lt;Integer\u0026gt; parents = stationToBus.getOrDefault(routes[i][j], new ArrayList\u0026lt;\u0026gt;()); if (!parents.contains(i)) { parents.add(i); } stationToBus.put(routes[i][j], parents); } } if (source == target) return 0; Queue\u0026lt;int[]\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(new int[] {source, 0}); Set\u0026lt;Integer\u0026gt; seenBuses = new HashSet\u0026lt;\u0026gt;(); Set\u0026lt;Integer\u0026gt; seenRoutes = new HashSet\u0026lt;\u0026gt;(); while (q.size() \u0026gt; 0) { int[] stopBus = q.poll(); int stop = stopBus[0]; int bus = stopBus[1]; if (stop == target) return bus; for (int nextBus: stationToBus.get(stop)) { if (seenBuses.add(nextBus)) { for (int newRoute: routes[nextBus]) { if (seenRoutes.add(newRoute)) { q.offer(new int[] {newRoute, bus + 1}); } } } } } return -1; } } ","permalink":"https://volyx.in/posts/2021-11-24-bus-routes/","summary":"\u003cp\u003e\u003cimg alt=\"815. Bus Routes\" loading=\"lazy\" src=\"https://leetcode.com/problems/https://leetcode.com/problems/word-ladder-ii/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -\u0026gt; 5 -\u0026gt; 7 -\u0026gt; 1 -\u0026gt; 5 -\u0026gt; 7 -\u0026gt; 1 -\u0026gt; \u0026hellip; forever.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\u003c/p\u003e","title":"815. Bus Routes"},{"content":"\nWe can shift a string by shifting each of its letters to its successive letter.\nFor example, \u0026ldquo;abc\u0026rdquo; can be shifted to be \u0026ldquo;bcd\u0026rdquo;. We can keep shifting the string to form a sequence.\nFor example, we can keep shifting \u0026ldquo;abc\u0026rdquo; to form the sequence: \u0026ldquo;abc\u0026rdquo; -\u0026gt; \u0026ldquo;bcd\u0026rdquo; -\u0026gt; \u0026hellip; -\u0026gt; \u0026ldquo;xyz\u0026rdquo;. Given an array of strings strings, group all strings[i] that belong to the same shifting sequence. You may return the answer in any order.\n1 2 3 4 5 6 7 8 9 Example 1: Input: strings = [\u0026#34;abc\u0026#34;,\u0026#34;bcd\u0026#34;,\u0026#34;acef\u0026#34;,\u0026#34;xyz\u0026#34;,\u0026#34;az\u0026#34;,\u0026#34;ba\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;z\u0026#34;] Output: [[\u0026#34;acef\u0026#34;],[\u0026#34;a\u0026#34;,\u0026#34;z\u0026#34;],[\u0026#34;abc\u0026#34;,\u0026#34;bcd\u0026#34;,\u0026#34;xyz\u0026#34;],[\u0026#34;az\u0026#34;,\u0026#34;ba\u0026#34;]] Example 2: Input: strings = [\u0026#34;a\u0026#34;] Output: [[\u0026#34;a\u0026#34;]] Constraints:\n1 \u0026lt;= strings.length \u0026lt;= 200 1 \u0026lt;= strings[i].length \u0026lt;= 50 strings[i] consists of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; groupStrings(String[] strings) { Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); for (String str: strings) { String offsets = buildOffset(str); // 012 List\u0026lt;String\u0026gt; words = map.getOrDefault(offsets, new ArrayList\u0026lt;\u0026gt;()); words.add(str); map.put(offsets, words); } return new ArrayList\u0026lt;\u0026gt;(map.values()); } String buildOffset(String str) { StringBuilder sb = new StringBuilder(); for (int i = 0; i \u0026lt; str.length(); i++) { int val = str.charAt(i) - str.charAt(0); sb.append((val + 26) % 26); sb.append(\u0026#39;#\u0026#39;); } return sb.toString(); } } Solution 2022-01-28 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; groupStrings(String[] strings) { if (strings.length == 0) { return Collections.emptyList(); } Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; encodingMap = new HashMap\u0026lt;\u0026gt;(); for (String str: strings) { String encodingKey = encode(str); List\u0026lt;String\u0026gt; encodingValues = encodingMap.getOrDefault(encodingKey, new ArrayList\u0026lt;\u0026gt;()); encodingValues.add(str); encodingMap.put(encodingKey, encodingValues); } List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (List\u0026lt;String\u0026gt; encodingValues: encodingMap.values()) { res.add(encodingValues); } return res; } String encode(String input) { List\u0026lt;String\u0026gt; numbers = new ArrayList(); for (int i = 0; i \u0026lt; input.length(); i++) { char c = input.charAt(i); if (i == 0) { numbers.add(\u0026#34;0\u0026#34;); } else { int shiftedIndex = (int) (c - input.charAt(0)); if (shiftedIndex \u0026lt; 0) { shiftedIndex += 26; // -26 - 0 } numbers.add(shiftedIndex + \u0026#34;\u0026#34;); } } return String.join(\u0026#34;-\u0026#34;, numbers); } } ","permalink":"https://volyx.in/posts/2021-11-23-group-shifted-strings/","summary":"\u003cp\u003e\u003cimg alt=\"249. Group Shifted Strings\" loading=\"lazy\" src=\"hhttps://leetcode.com/problems/group-shifted-strings/\"\u003e\u003c/p\u003e\n\u003cp\u003eWe can shift a string by shifting each of its letters to its successive letter.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, \u0026ldquo;abc\u0026rdquo; can be shifted to be \u0026ldquo;bcd\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWe can keep shifting the string to form a sequence.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, we can keep shifting \u0026ldquo;abc\u0026rdquo; to form the sequence: \u0026ldquo;abc\u0026rdquo; -\u0026gt; \u0026ldquo;bcd\u0026rdquo; -\u0026gt; \u0026hellip; -\u0026gt; \u0026ldquo;xyz\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven an array of strings strings, group all strings[i] that belong to the same shifting sequence. You may return the answer in any order.\u003c/p\u003e","title":"249. Group Shifted Strings"},{"content":"\nGiven two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \u0026ldquo;\u0026rdquo;.\nThe testcases will be generated such that the answer is unique.\nA substring is a contiguous sequence of characters within the string.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input: s = \u0026#34;ADOBECODEBANC\u0026#34;, t = \u0026#34;ABC\u0026#34; Output: \u0026#34;BANC\u0026#34; Explanation: The minimum window substring \u0026#34;BANC\u0026#34; includes \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, and \u0026#39;C\u0026#39; from string t. Example 2: Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;a\u0026#34; Output: \u0026#34;a\u0026#34; Explanation: The entire string s is the minimum window. Example 3: Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34; Output: \u0026#34;\u0026#34; Explanation: Both \u0026#39;a\u0026#39;s from t must be included in the window. Since the largest window of s only has one \u0026#39;a\u0026#39;, return empty string. Constraints:\nm == s.length n == t.length 1 \u0026lt;= m, n \u0026lt;= 10^5 s and t consist of uppercase and lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Solution { public String minWindow(String s, String t) { int[] freqT = new int[256]; int[] freqS = new int[256]; for (int i = 0; i \u0026lt; t.length(); i++) { freqT[t.charAt(i)]++; } int lo = 0; int hi = 0; String res = \u0026#34;\u0026#34;; int min = Integer.MAX_VALUE; while (hi \u0026lt; s.length()) { freqS[s.charAt(hi)]++; hi++; while (moreThanEnough(freqT, freqS)) { freqS[s.charAt(lo)]--; lo++; if (hi - lo \u0026lt; min) { res = s.substring(lo - 1, hi); min = hi - lo; } } } return res; } boolean moreThanEnough(int[] freqT, int[] freqS) { for (int i = 0; i \u0026lt; freqS.length; i++) { if (freqT[i] == 0) continue; if (freqS[i] \u0026lt; freqT[i]) { return false; } } return true; } } ","permalink":"https://volyx.in/posts/2021-11-23-minimum-window-substring/","summary":"\u003cp\u003e\u003cimg alt=\"76. Minimum Window Substring\" loading=\"lazy\" src=\"https://leetcode.com/problems/minimum-window-substring/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \u0026ldquo;\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThe testcases will be generated such that the answer is unique.\u003c/p\u003e\n\u003cp\u003eA substring is a contiguous sequence of characters within the string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ADOBECODEBANC\u0026#34;, t = \u0026#34;ABC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;BANC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The minimum window substring \u0026#34;BANC\u0026#34; includes \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, and \u0026#39;C\u0026#39; from string t.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;, t = \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The entire string s is the minimum window.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both \u0026#39;a\u0026#39;s from t must be included in the window.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince the largest window of s only has one \u0026#39;a\u0026#39;, return empty string.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"76. Minimum Window Substring"},{"content":"\nA parentheses string is valid if and only if:\nIt is the empty string, It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string. You are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\nFor example, if s = \u0026ldquo;()))\u0026rdquo;, you can insert an opening parenthesis to be \u0026ldquo;(()))\u0026rdquo; or a closing parenthesis to be \u0026ldquo;())))\u0026rdquo;. Return the minimum number of moves required to make s valid.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: s = \u0026#34;())\u0026#34; Output: 1 Example 2: Input: s = \u0026#34;(((\u0026#34; Output: 3 Example 3: Input: s = \u0026#34;()\u0026#34; Output: 0 Example 4: Input: s = \u0026#34;()))((\u0026#34; Output: 4 Constraints:\n1 \u0026lt;= s.length \u0026lt;= 1000 s[i] is either \u0026lsquo;(\u0026rsquo; or \u0026lsquo;)\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int minAddToMakeValid(String s) { int opened = 0; int closed = 0; for (int i = 0; i \u0026lt; s.length(); i++) { if (s.charAt(i) == \u0026#39;(\u0026#39;) { closed++; } else if (s.charAt(i) == \u0026#39;)\u0026#39;) { if (closed \u0026gt; 0) { closed--; } else { opened++; } } } return closed + opened; } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int minAddToMakeValid(String s) { int opened = 0; int closed = 0; for (char c: s.toCharArray()) { if (c == \u0026#39;(\u0026#39;) { opened++; } else if (c == \u0026#39;)\u0026#39;) { if (opened \u0026gt; 0) { opened--; } else { closed++; } } } return opened + closed; } } ","permalink":"https://volyx.in/posts/2021-11-23-minimum-add-to-make-parentheses-valid/","summary":"\u003cp\u003e\u003cimg alt=\"921. Minimum Add to Make Parentheses Valid\" loading=\"lazy\" src=\"hhttps://leetcode.com/problems/minimum-add-to-make-parentheses-valid/\"\u003e\u003c/p\u003e\n\u003cp\u003eA parentheses string is valid if and only if:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt is the empty string,\u003c/li\u003e\n\u003cli\u003eIt can be written as AB (A concatenated with B), where A and B are valid strings, or\u003c/li\u003e\n\u003cli\u003eIt can be written as (A), where A is a valid string.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\u003c/p\u003e","title":"921. Minimum Add to Make Parentheses Valid"},{"content":"\nGiven the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.\n1 2 3 4 5 6 7 8 9 Example 1: Input: root = [1,2,3,null,5] Output: [\u0026#34;1-\u0026gt;2-\u0026gt;5\u0026#34;,\u0026#34;1-\u0026gt;3\u0026#34;] Example 2: Input: root = [1] Output: [\u0026#34;1\u0026#34;] Constraints:\nThe number of nodes in the tree is in the range [1, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;String\u0026gt; binaryTreePaths(TreeNode root) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); dfs(root, res, \u0026#34;\u0026#34;); return res; } void dfs(TreeNode node, List\u0026lt;String\u0026gt; res, String s) { if (node == null) { return; } if (s.length() == 0) { s += \u0026#34;\u0026#34; + node.val; } else { s += \u0026#34;-\u0026gt;\u0026#34; + node.val; } if (node.left == null \u0026amp;\u0026amp; node.right == null) { res.add(s); return; } dfs(node.left, res, s); dfs(node.right, res, s); } } ","permalink":"https://volyx.in/posts/2021-11-22-binary-tree-paths/","summary":"\u003cp\u003e\u003cimg alt=\"257. Binary Tree Paths\" loading=\"lazy\" src=\"hhttps://leetcode.com/problems/binary-tree-paths/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return all root-to-leaf paths in any order.\u003c/p\u003e\n\u003cp\u003eA leaf is a node with no children.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-11-22-binary-tree-paths.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,3,null,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;1-\u0026gt;2-\u0026gt;5\u0026#34;,\u0026#34;1-\u0026gt;3\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;1\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"257. Binary Tree Paths"},{"content":"\nGiven a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: nums = [1,1,2] Output: [[1,1,2], [1,2,1], [2,1,1]] Example 2: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 8 -10 \u0026lt;= nums[i] \u0026lt;= 10 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permuteUnique(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); permuteAt(0, nums, res); return res; } void permuteAt(int i, int[] nums, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { if (i == nums.length) { res.add(toList(nums)); return; } Set\u0026lt;Integer\u0026gt; seen = new HashSet\u0026lt;\u0026gt;(); for (int j = i; j \u0026lt; nums.length; j++) { if (seen.add(nums[j])) { swap(i, j, nums); permuteAt(i + 1, nums, res); swap(i, j, nums); } } } void swap(int i, int j, int[] arr) { int t = arr[i]; arr[i] = arr[j]; arr[j] = t; } List\u0026lt;Integer\u0026gt; toList(int[] values) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(values.length); for (int val : values) { res.add(val); } return res; } } ","permalink":"https://volyx.in/posts/2021-11-22-permutations-ii/","summary":"\u003cp\u003e\u003cimg alt=\"47. Permutations II\" loading=\"lazy\" src=\"hhttps://leetcode.com/problems/permutations-ii/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[1,1,2],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [1,2,1],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [2,1,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"47. Permutations II"},{"content":"\nGiven two strings s and t, return true if they are both one edit distance apart, otherwise return false.\nA string s is said to be one distance apart from a string t if you can:\nInsert exactly one character into s to get t. Delete exactly one character from s to get t. Replace exactly one character of s with a different character to get t. 1 2 3 4 5 Example 1: Input: s = \u0026#34;ab\u0026#34;, t = \u0026#34;acb\u0026#34; Output: true Explanation: We can insert \u0026#39;c\u0026#39; into s to get t. 1 2 3 4 5 Example 2: Input: s = \u0026#34;\u0026#34;, t = \u0026#34;\u0026#34; Output: false Explanation: We cannot get t from s by only one step. 1 2 3 4 Example 3: Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;\u0026#34; Output: true 1 2 3 4 Example 4: Input: s = \u0026#34;\u0026#34;, t = \u0026#34;A\u0026#34; Output: true Constraints:\n0 \u0026lt;= s.length \u0026lt;= 10^4 0 \u0026lt;= t.length \u0026lt;= 10^4 s and t consist of lower-case letters, upper-case letters and/or digits. Solution DFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public boolean isOneEditDistance(String s, String t) { return dfs(0, 0, s, t, 1); } boolean dfs(int i1, int i2, String s, String t, int editCount) { if (i1 == s.length() \u0026amp;\u0026amp; i2 == t.length()) { return editCount == 0; } else if (i1 == s.length() || i2 == t.length()) { return editCount == 1 \u0026amp;\u0026amp; Math.abs(s.length() - t.length()) == 1; } if (s.charAt(i1) == t.charAt(i2)) { return dfs(i1 + 1, i2 + 1, s, t, editCount); } else { if (editCount == 0) { return false; } return dfs(i1, i2 + 1, s, t, 0) || dfs(i1 + 1, i2, s, t, 0) || dfs(i1 + 1, i2 + 1, s, t, 0); } } } Solution Linear 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public boolean isOneEditDistance(String s, String t) { if (s.length() \u0026gt; t.length()) { return isOneEditDistance(t, s); } for (int i = 0; i \u0026lt; s.length(); i++) { if (s.charAt(i) != t.charAt(i)) { return s.substring(i + 1).equals(t.substring(i + 1)) || s.substring(i).equals(t.substring(i + 1)); } } return Math.abs(s.length() - t.length()) == 1; } } ","permalink":"https://volyx.in/posts/2021-11-21-one-edit-distance/","summary":"\u003cp\u003e\u003cimg alt=\"161. One Edit Distance\" loading=\"lazy\" src=\"https://leetcode.com/problems/one-edit-distance/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings s and t, return true if they are both one edit distance apart, otherwise return false.\u003c/p\u003e\n\u003cp\u003eA string s is said to be one distance apart from a string t if you can:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInsert exactly one character into s to get t.\u003c/li\u003e\n\u003cli\u003eDelete exactly one character from s to get t.\u003c/li\u003e\n\u003cli\u003eReplace exactly one character of s with a different character to get t.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ab\u0026#34;, t = \u0026#34;acb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: We can insert \u0026#39;c\u0026#39; into s to get t.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;\u0026#34;, t = \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: We cannot get t from s by only one step.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;, t = \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;\u0026#34;, t = \u0026#34;A\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"161. One Edit Distance"},{"content":"\nGiven a string queryIP, return \u0026ldquo;IPv4\u0026rdquo; if IP is a valid IPv4 address, \u0026ldquo;IPv6\u0026rdquo; if IP is a valid IPv6 address or \u0026ldquo;Neither\u0026rdquo; if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \u0026ldquo;x1.x2.x3.x4\u0026rdquo; where 0 \u0026lt;= xi \u0026lt;= 255 and xi cannot contain leading zeros. For example, \u0026ldquo;192.168.1.1\u0026rdquo; and \u0026ldquo;192.168.1.0\u0026rdquo; are valid IPv4 addresses but \u0026ldquo;192.168.01.1\u0026rdquo;, while \u0026ldquo;192.168.1.00\u0026rdquo; and \u0026ldquo;192.168@1.1\u0026rdquo; are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \u0026ldquo;x1:x2:x3:x4:x5:x6:x7:x8\u0026rdquo; where:\n1 \u0026lt;= xi.length \u0026lt;= 4 x_i is a hexadecimal string which may contain digits, lower-case English letter (\u0026lsquo;a\u0026rsquo; to \u0026lsquo;f\u0026rsquo;) and upper-case English letters (\u0026lsquo;A\u0026rsquo; to \u0026lsquo;F\u0026rsquo;). Leading zeros are allowed in xi. For example, \u0026ldquo;2001:0db8:85a3:0000:0000:8a2e:0370:7334\u0026rdquo; and \u0026ldquo;2001:db8:85a3:0:0:8A2E:0370:7334\u0026rdquo; are valid IPv6 addresses, while \u0026ldquo;2001:0db8:85a3::8A2E:037j:7334\u0026rdquo; and \u0026ldquo;02001:0db8:85a3:0000:0000:8a2e:0370:7334\u0026rdquo; are invalid IPv6 addresses.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Example 1: Input: queryIP = \u0026#34;172.16.254.1\u0026#34; Output: \u0026#34;IPv4\u0026#34; Explanation: This is a valid IPv4 address, return \u0026#34;IPv4\u0026#34;. Example 2: Input: queryIP = \u0026#34;2001:0db8:85a3:0:0:8A2E:0370:7334\u0026#34; Output: \u0026#34;IPv6\u0026#34; Explanation: This is a valid IPv6 address, return \u0026#34;IPv6\u0026#34;. Example 3: Input: queryIP = \u0026#34;256.256.256.256\u0026#34; Output: \u0026#34;Neither\u0026#34; Explanation: This is neither a IPv4 address nor a IPv6 address. Example 4: Input: queryIP = \u0026#34;2001:0db8:85a3:0:0:8A2E:0370:7334:\u0026#34; Output: \u0026#34;Neither\u0026#34; Example 5: Input: queryIP = \u0026#34;1e1.4.5.6\u0026#34; Output: \u0026#34;Neither\u0026#34; Constraints:\nqueryIP consists only of English letters, digits and the characters \u0026lsquo;.\u0026rsquo; and \u0026lsquo;:\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Solution { public String validIPAddress(String queryIP) { if (queryIP.indexOf(\u0026#34;.\u0026#34;) \u0026gt; 0 \u0026amp;\u0026amp; tryIpv4(queryIP)) { return \u0026#34;IPv4\u0026#34;; } else if (queryIP.indexOf(\u0026#34;:\u0026#34;) \u0026gt; 0 \u0026amp;\u0026amp; tryIpv6(queryIP)) { return \u0026#34;IPv6\u0026#34;; } else { return \u0026#34;Neither\u0026#34;; } } boolean tryIpv6(String queryIP) { int count = 0; for (int i = 0; i \u0026lt; queryIP.length(); i++) { if (queryIP.charAt(i) == \u0026#39;:\u0026#39;) count++; } if (count != 7) return false; String[] parts = queryIP.split(\u0026#34;:\u0026#34;); if (parts.length != 8) { return false; } for (int i = 0; i \u0026lt; 8; i++) { if (!isValidIpv6Part(parts[i])) { return false; } } return true; } boolean tryIpv4(String queryIP) { int count = 0; for (int i = 0; i \u0026lt; queryIP.length(); i++) { if (queryIP.charAt(i) == \u0026#39;.\u0026#39;) count++; } if (count != 3) return false; String[] parts = queryIP.split(\u0026#34;\\\\.\u0026#34;); if (parts.length != 4) { return false; } return isValidIpv4Part(parts[0]) \u0026amp;\u0026amp; isValidIpv4Part(parts[1]) \u0026amp;\u0026amp; isValidIpv4Part(parts[2]) \u0026amp;\u0026amp; isValidIpv4Part(parts[3]); } boolean isValidIpv4Part(String val) { if (val.equals(\u0026#34;0\u0026#34;)) { return true; } if (val.startsWith(\u0026#34;0\u0026#34;) || val.length() == 0) return false; try { Integer intValue = Integer.parseInt(val); return intValue \u0026gt; 0 \u0026amp;\u0026amp; intValue \u0026lt; 256; } catch(Exception e) { return false; } } boolean isValidIpv6Part(String val) { if (val.length() == 0 || val.length() \u0026gt; 4) return false; try { Integer intValue = Integer.parseInt(val, 16); return true; } catch(Exception e) { return false; } } } ","permalink":"https://volyx.in/posts/2021-11-21-validate-ip-address/","summary":"\u003cp\u003e\u003cimg alt=\"468. Validate IP Address\" loading=\"lazy\" src=\"https://leetcode.com/problems/validate-ip-address/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string queryIP, return \u0026ldquo;IPv4\u0026rdquo; if IP is a valid IPv4 address, \u0026ldquo;IPv6\u0026rdquo; if IP is a valid IPv6 address or \u0026ldquo;Neither\u0026rdquo; if IP is not a correct IP of any type.\u003c/p\u003e\n\u003cp\u003eA valid IPv4 address is an IP in the form \u0026ldquo;x1.x2.x3.x4\u0026rdquo; where 0 \u0026lt;= xi \u0026lt;= 255 and xi cannot contain leading zeros. For example, \u0026ldquo;192.168.1.1\u0026rdquo; and \u0026ldquo;192.168.1.0\u0026rdquo; are valid IPv4 addresses but \u0026ldquo;192.168.01.1\u0026rdquo;, while \u0026ldquo;192.168.1.00\u0026rdquo; and \u0026ldquo;\u003ca href=\"mailto:192.168@1.1\"\u003e192.168@1.1\u003c/a\u003e\u0026rdquo; are invalid IPv4 addresses.\u003c/p\u003e","title":"468. Validate IP Address"},{"content":"\nYou are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a \u0026lt;= b) denotes the set of real numbers x with a \u0026lt;= x \u0026lt;= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]] Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] Example 2: Input: firstList = [[1,3],[5,9]], secondList = [] Output: [] Example 3: Input: firstList = [], secondList = [[4,8],[10,12]] Output: [] Example 4: Input: firstList = [[1,7]], secondList = [[3,10]] Output: [[3,7]] Constraints:\n0 \u0026lt;= firstList.length, secondList.length \u0026lt;= 1000 firstList.length + secondList.length \u0026gt;= 1 0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^9 endi \u0026lt; starti+1 0 \u0026lt;= startj \u0026lt; endj \u0026lt;= 10^9 endj \u0026lt; startj+1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int[][] intervalIntersection(int[][] firstList, int[][] secondList) { int i = 0; int j = 0; List\u0026lt;int[]\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (i \u0026lt; firstList.length \u0026amp;\u0026amp; j \u0026lt; secondList.length) { int lo = Math.max(firstList[i][0], secondList[j][0]); int hi = Math.min(firstList[i][1], secondList[j][1]); if (lo \u0026lt;= hi) { res.add(new int[] {lo, hi}); } if (firstList[i][1] \u0026lt; secondList[j][1]) { i++; } else { j++; } } return res.toArray(new int[0][2]); } } ","permalink":"https://volyx.in/posts/2021-11-21-interval-list-intersections/","summary":"\u003cp\u003e\u003cimg alt=\"986. Interval List Intersections\" loading=\"lazy\" src=\"https://leetcode.com/problems/interval-list-intersections/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\u003c/p\u003e\n\u003cp\u003eReturn the intersection of these two interval lists.\u003c/p\u003e\n\u003cp\u003eA closed interval [a, b] (with a \u0026lt;= b) denotes the set of real numbers x with a \u0026lt;= x \u0026lt;= b.\u003c/p\u003e\n\u003cp\u003eThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].\u003c/p\u003e","title":"986. Interval List Intersections"},{"content":"\nA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.\n1 2 3 4 5 Example 1: Input: s = \u0026#34;A man, a plan, a canal: Panama\u0026#34; Output: true Explanation: \u0026#34;amanaplanacanalpanama\u0026#34; is a palindrome. 1 2 3 4 5 Example 2: Input: s = \u0026#34;race a car\u0026#34; Output: false Explanation: \u0026#34;raceacar\u0026#34; is not a palindrome. 1 2 3 4 5 6 Example 3: Input: s = \u0026#34; \u0026#34; Output: true Explanation: s is an empty string \u0026#34;\u0026#34; after removing non-alphanumeric characters. Since an empty string reads the same forward and backward, it is a palindrome. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 2 * 10^5 s consists only of printable ASCII characters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public boolean isPalindrome(String s) { int lo = 0; int hi = s.length() - 1; while (lo \u0026lt; hi) { char loChar = s.charAt(lo); if (!Character.isLetterOrDigit(loChar)) { lo++; continue; } char hiChar = s.charAt(hi); if (!Character.isLetterOrDigit(hiChar)) { hi--; continue; } loChar = Character.isUpperCase(loChar)? Character.toLowerCase(loChar): loChar; hiChar = Character.isUpperCase(hiChar)? Character.toLowerCase(hiChar): hiChar; if (loChar == hiChar) { lo++; hi--; continue; } else { return false; } } return true; } } Solution 2021-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public boolean isPalindrome(String s) { int lo = 0; int hi = s.length() - 1; while (lo \u0026lt; hi) { char left = s.charAt(lo); char right = s.charAt(hi); if (!Character.isLetterOrDigit(left)) { lo++; continue; } if (!Character.isLetterOrDigit(right)) { hi--; continue; } if (Character.isUpperCase(left)) { left = Character.toLowerCase(left); } if (Character.isUpperCase(right)) { right = Character.toLowerCase(right); } if (left != right) { return false; } lo++; hi--; } return true; } } ","permalink":"https://volyx.in/posts/2021-11-20-valid-palindrome/","summary":"\u003cp\u003e\u003cimg alt=\"125. Valid Palindrome\" loading=\"lazy\" src=\"https://leetcode.com/problems/valid-palindrome/\"\u003e\u003c/p\u003e\n\u003cp\u003eA phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\u003c/p\u003e\n\u003cp\u003eGiven a string s, return true if it is a palindrome, or false otherwise.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;A man, a plan, a canal: Panama\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;amanaplanacanalpanama\u0026#34; is a palindrome.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;race a car\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;raceacar\u0026#34; is not a palindrome.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34; \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: s is an empty string \u0026#34;\u0026#34; after removing non-alphanumeric characters.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince an empty string reads the same forward and backward, it is a palindrome.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"125. Valid Palindrome"},{"content":"\nGiven the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.\nA binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.\n1 2 3 4 5 Example 1: Input: root = [1,null,2,null,3,null,4,null,null] Output: [2,1,3,null,null,null,4] Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct. 1 2 3 4 Example 2: Input: root = [2,1,3] Output: [2,1,3] Constraints:\nThe number of nodes in the tree is in the range [1, 10^4]. 1 \u0026lt;= Node.val \u0026lt;= 10^5 Solution Recursive 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode balanceBST(TreeNode root) { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); dfs(root, list); int n = list.size(); return buildTree(list, 0, n - 1); } TreeNode buildTree(List\u0026lt;Integer\u0026gt; res, int lo, int hi) { if (lo \u0026gt; hi) return null; int mid = lo + (hi - lo) / 2; TreeNode node = new TreeNode(res.get(mid)); node.left = buildTree(res, lo, mid - 1); node.right = buildTree(res, mid + 1, hi); return node; } void dfs(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) return; dfs(node.left, res); res.add(node.val); dfs(node.right, res); } } ","permalink":"https://volyx.in/posts/2021-11-20-balance-a-binary-search-tree/","summary":"\u003cp\u003e\u003cimg alt=\"1382. Balance a Binary Search Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/balance-a-binary-search-tree/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.\u003c/p\u003e\n\u003cp\u003eA binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-11-20-balance-bst-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,2,null,3,null,4,null,null]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1,3,null,null,null,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: This is not the only correct answer, [3,1,4,null,2] is also correct.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-11-20-balance-bst-ex2.jpg\"\u003e\u003c/p\u003e","title":"1382. Balance a Binary Search Tree"},{"content":"\nGiven a string num that contains only digits and an integer target, return all possibilities to insert the binary operators \u0026lsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, and/or \u0026lsquo;*\u0026rsquo; between the digits of num so that the resultant expression evaluates to the target value.\nNote that operands in the returned expressions should not contain leading zeros.\n1 2 3 4 5 Example 1: Input: num = \u0026#34;123\u0026#34;, target = 6 Output: [\u0026#34;1*2*3\u0026#34;,\u0026#34;1+2+3\u0026#34;] Explanation: Both \u0026#34;1*2*3\u0026#34; and \u0026#34;1+2+3\u0026#34; evaluate to 6. 1 2 3 4 5 Example 2: Input: num = \u0026#34;232\u0026#34;, target = 8 Output: [\u0026#34;2*3+2\u0026#34;,\u0026#34;2+3*2\u0026#34;] Explanation: Both \u0026#34;2*3+2\u0026#34; and \u0026#34;2+3*2\u0026#34; evaluate to 8. 1 2 3 4 5 6 Example 3: Input: num = \u0026#34;105\u0026#34;, target = 5 Output: [\u0026#34;1*0+5\u0026#34;,\u0026#34;10-5\u0026#34;] Explanation: Both \u0026#34;1*0+5\u0026#34; and \u0026#34;10-5\u0026#34; evaluate to 5. Note that \u0026#34;1-05\u0026#34; is not a valid expression because the 5 has a leading zero. 1 2 3 4 5 6 Example 4: Input: num = \u0026#34;00\u0026#34;, target = 0 Output: [\u0026#34;0*0\u0026#34;,\u0026#34;0+0\u0026#34;,\u0026#34;0-0\u0026#34;] Explanation: \u0026#34;0*0\u0026#34;, \u0026#34;0+0\u0026#34;, and \u0026#34;0-0\u0026#34; all evaluate to 0. Note that \u0026#34;00\u0026#34; is not a valid expression because the 0 has a leading zero. 1 2 3 4 5 Example 5: Input: num = \u0026#34;3456237490\u0026#34;, target = 9191 Output: [] Explanation: There are no expressions that can be created from \u0026#34;3456237490\u0026#34; to evaluate to 9191. Constraints:\n1 \u0026lt;= num.length \u0026lt;= 10 num consists of only digits. -2^31 \u0026lt;= target \u0026lt;= 2^31 - 1 Solution Backtracking 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public List\u0026lt;String\u0026gt; addOperators(String num, int target) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); backtrack(0, num, \u0026#34;\u0026#34;, 0L, target, 0L, res); return res; } void backtrack(int index, String num, String expr, long sum, long target, long prev, List\u0026lt;String\u0026gt; res) { if (index == num.length()) { if (sum == target) { res.add(expr); } return; } for (int end = index; end \u0026lt; num.length(); end++) { String possibleValue = num.substring(index, end + 1); if (possibleValue.startsWith(\u0026#34;0\u0026#34;) \u0026amp;\u0026amp; possibleValue.length() \u0026gt; 1) { continue; } Long value = Long.valueOf(possibleValue); if (index == 0) { backtrack(end + 1, num, \u0026#34;\u0026#34; + value, sum + value, target, value, res); } else { backtrack(end + 1, num, expr + \u0026#34;+\u0026#34; + value, sum + value, target, value, res); backtrack(end + 1, num, expr + \u0026#34;-\u0026#34; + value, sum - value, target, -value, res); backtrack(end + 1, num, expr + \u0026#34;*\u0026#34; + value, sum - prev + value * prev, target, prev * value, res); } } } } ","permalink":"https://volyx.in/posts/2021-11-20-expression-add-operators/","summary":"\u003cp\u003e\u003cimg alt=\"282. Expression Add Operators\" loading=\"lazy\" src=\"https://leetcode.com/problems/expression-add-operators/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string num that contains only digits and an integer target, return all possibilities to insert the binary operators \u0026lsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, and/or \u0026lsquo;*\u0026rsquo; between the digits of num so that the resultant expression evaluates to the target value.\u003c/p\u003e\n\u003cp\u003eNote that operands in the returned expressions should not contain leading zeros.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = \u0026#34;123\u0026#34;, target = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;1*2*3\u0026#34;,\u0026#34;1+2+3\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both \u0026#34;1*2*3\u0026#34; and \u0026#34;1+2+3\u0026#34; evaluate to 6.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = \u0026#34;232\u0026#34;, target = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;2*3+2\u0026#34;,\u0026#34;2+3*2\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both \u0026#34;2*3+2\u0026#34; and \u0026#34;2+3*2\u0026#34; evaluate to 8.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = \u0026#34;105\u0026#34;, target = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;1*0+5\u0026#34;,\u0026#34;10-5\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both \u0026#34;1*0+5\u0026#34; and \u0026#34;10-5\u0026#34; evaluate to 5.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that \u0026#34;1-05\u0026#34; is not a valid expression because the 5 has a leading zero.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = \u0026#34;00\u0026#34;, target = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;0*0\u0026#34;,\u0026#34;0+0\u0026#34;,\u0026#34;0-0\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;0*0\u0026#34;, \u0026#34;0+0\u0026#34;, and \u0026#34;0-0\u0026#34; all evaluate to 0.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that \u0026#34;00\u0026#34; is not a valid expression because the 0 has a leading zero.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = \u0026#34;3456237490\u0026#34;, target = 9191\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are no expressions that can be created from \u0026#34;3456237490\u0026#34; to evaluate to 9191.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"282. Expression Add Operators"},{"content":"\nYou are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\n1 2 3 4 5 6 Example 1: Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. 1 2 3 4 5 6 Example 2: Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. 1 2 3 4 5 6 7 Example 3: Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1. Constraints:\nnums1.length == m + n nums2.length == n 0 \u0026lt;= m, n \u0026lt;= 200 1 \u0026lt;= m + n \u0026lt;= 200 -10^9 \u0026lt;= nums1[i], nums2[j] \u0026lt;= 10^9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public void merge(int[] nums1, int m, int[] nums2, int n) { int i1 = m - 1; int i2 = n - 1; int j = m + n - 1; while (j \u0026gt;= 0) { if (i1 \u0026gt;= 0 \u0026amp;\u0026amp; i2 \u0026gt;= 0) { if (nums1[i1] \u0026gt; nums2[i2]) { nums1[j] = nums1[i1]; i1--; } else { nums1[j] = nums2[i2]; i2--; } j--; } else if (i1 \u0026gt;= 0) { nums1[j] = nums1[i1]; i1--; j--; } else { nums1[j] = nums2[i2]; i2--; j--; } } } } ","permalink":"https://volyx.in/posts/2021-11-20-merge-sorted-array/","summary":"\u003cp\u003e\u003cimg alt=\"88. Merge Sorted Array\" loading=\"lazy\" src=\"https://leetcode.com/problems/merge-sorted-array/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\u003c/p\u003e\n\u003cp\u003eMerge nums1 and nums2 into a single array sorted in non-decreasing order.\u003c/p\u003e\n\u003cp\u003eThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\u003c/p\u003e","title":"88. Merge Sorted Array"},{"content":"\nGiven two sparse vectors, compute their dot product.\nImplement class SparseVector:\nSparseVector(nums) Initializes the object with the vector nums dotProduct(vec) Compute the dot product between the instance of SparseVector and vec A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.\nFollow up: What if only one of the vectors is sparse?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0] Output: 8 Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2) v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8 Example 2: Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2] Output: 0 Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2) v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0 Example 3: Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4] Output: 6 Constraints:\nn == nums1.length == nums2.length 1 \u0026lt;= n \u0026lt;= 10^5 0 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 100 Solution HashSet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class SparseVector { Map\u0026lt;Integer, Integer\u0026gt; map = new TreeMap\u0026lt;\u0026gt;(); SparseVector(int[] nums) { for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] != 0) { map.put(i, nums[i]); } } } public int dotProduct(SparseVector vec) { int sum = 0; for (Map.Entry\u0026lt;Integer, Integer\u0026gt; e: vec.map.entrySet()) { Integer value = this.map.get(e.getKey()); if (value != null) { sum += e.getValue() * value; } } return sum; } } // Your SparseVector object will be instantiated and called as such: // SparseVector v1 = new SparseVector(nums1); // SparseVector v2 = new SparseVector(nums2); // int ans = v1.dotProduct(v2); Solution Two Pointers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class SparseVector { List\u0026lt;int[]\u0026gt; idx = new ArrayList\u0026lt;\u0026gt;(); SparseVector(int[] nums) { for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] != 0) { idx.add(new int[] {i, nums[i]}); } } } public int dotProduct(SparseVector vec) { int p1 = 0; int p2 = 0; int product = 0; while (p1 \u0026lt; idx.size() \u0026amp;\u0026amp; p2 \u0026lt; vec.idx.size()) { if (idx.get(p1)[0] == vec.idx.get(p2)[0]) { product += idx.get(p1)[1] * vec.idx.get(p2)[1]; p1++; p2++; } else if (idx.get(p1)[0] \u0026gt; vec.idx.get(p2)[0]) { p2++; } else { p1++; } } return product; } } // Your SparseVector object will be instantiated and called as such: // SparseVector v1 = new SparseVector(nums1); // SparseVector v2 = new SparseVector(nums2); // int ans = v1.dotProduct(v2); ","permalink":"https://volyx.in/posts/2021-11-19-moving-average-from-data-stream/","summary":"\u003cp\u003e\u003cimg alt=\"346. Moving Average from Data Stream\" loading=\"lazy\" src=\"https://leetcode.com/problems/moving-average-from-data-stream/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two sparse vectors, compute their dot product.\u003c/p\u003e\n\u003cp\u003eImplement class SparseVector:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSparseVector(nums) Initializes the object with the vector nums\u003c/li\u003e\n\u003cli\u003edotProduct(vec) Compute the dot product between the instance of SparseVector and vec\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.\u003c/p\u003e\n\u003cp\u003eFollow up: What if only one of the vectors is sparse?\u003c/p\u003e","title":"346. Moving Average from Data Stream"},{"content":"\nGiven a stream of integers and a window size, calculate the moving average of all integers in the sliding window.\nImplement the MovingAverage class:\nMovingAverage(int size) Initializes the object with the size of the window size. double next(int val) Returns the moving average of the last size values of the stream. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input [\u0026#34;MovingAverage\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;] [[3], [1], [10], [3], [5]] Output [null, 1.0, 5.5, 4.66667, 6.0] Explanation MovingAverage movingAverage = new MovingAverage(3); movingAverage.next(1); // return 1.0 = 1 / 1 movingAverage.next(10); // return 5.5 = (1 + 10) / 2 movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3 movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3 Constraints:\n1 \u0026lt;= size \u0026lt;= 1000 -10^5 \u0026lt;= val \u0026lt;= 10^5 At most 104 calls will be made to next. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class MovingAverage { double sum = 0.0; Deque\u0026lt;Integer\u0026gt; deq; int n = 0; public MovingAverage(int size) { deq = new ArrayDeque\u0026lt;\u0026gt;(size); n = size; } public double next(int val) { sum += val; deq.push(val); if (deq.size() \u0026gt; n) { Integer prev = deq.pollLast(); sum -= prev; } return sum / deq.size(); } } /** * Your MovingAverage object will be instantiated and called as such: * MovingAverage obj = new MovingAverage(size); * double param_1 = obj.next(val); */ ","permalink":"https://volyx.in/posts/2021-11-18-dot-product-of-two-sparse-vectors/","summary":"\u003cp\u003e\u003cimg alt=\"1570. Dot Product of Two Sparse Vectors\" loading=\"lazy\" src=\"https://leetcode.com/problems/dot-product-of-two-sparse-vectors/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a stream of integers and a window size, calculate the moving average of all integers in the sliding window.\u003c/p\u003e\n\u003cp\u003eImplement the MovingAverage class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMovingAverage(int size) Initializes the object with the size of the window size.\u003c/li\u003e\n\u003cli\u003edouble next(int val) Returns the moving average of the last size values of the stream.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;MovingAverage\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[3], [1], [10], [3], [5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 1.0, 5.5, 4.66667, 6.0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMovingAverage movingAverage = new MovingAverage(3);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emovingAverage.next(1); // return 1.0 = 1 / 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emovingAverage.next(10); // return 5.5 = (1 + 10) / 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emovingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emovingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1570. Dot Product of Two Sparse Vectors"},{"content":"\nGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [\u0026hellip;]; // Input array int[] expectedNums = [\u0026hellip;]; // The expected answer with correct length\nint k = removeDuplicates(nums); // Calls your implementation\nassert k == expectedNums.length; for (int i = 0; i \u0026lt; k; i++) { assert nums[i] == expectedNums[i]; }\nIf all assertions pass, then your solution will be accepted.\n1 2 3 4 5 6 Example 1: Input: nums = [1,1,2] Output: 2, nums = [1,2,_] Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). 1 2 3 4 5 6 Example 2: Input: nums = [0,0,1,1,1,2,2,3,3,4] Output: 5, nums = [0,1,2,3,4,_,_,_,_,_] Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively. It does not matter what you leave beyond the returned k (hence they are underscores). Constraints:\n0 \u0026lt;= nums.length \u0026lt;= 3 * 104 -100 \u0026lt;= nums[i] \u0026lt;= 100 nums is sorted in non-decreasing order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public int removeDuplicates(int[] nums) { int index = 0; int n = nums.length; for (int i = 1; i \u0026lt; n; i++) { if (nums[i] != nums[index]) { index++; nums[index] = nums[i]; } } return index + 1; } } ","permalink":"https://volyx.in/posts/2021-11-17-remove-duplicates-from-sorted-array/","summary":"\u003cp\u003e\u003cimg alt=\"26. Remove Duplicates from Sorted Array\" loading=\"lazy\" src=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\u003c/p\u003e\n\u003cp\u003eSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\u003c/p\u003e","title":"26. Remove Duplicates from Sorted Array"},{"content":"\nGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\n1 2 3 4 5 6 7 8 9 Example 1: Input: num1 = \u0026#34;2\u0026#34;, num2 = \u0026#34;3\u0026#34; Output: \u0026#34;6\u0026#34; Example 2: Input: num1 = \u0026#34;123\u0026#34;, num2 = \u0026#34;456\u0026#34; Output: \u0026#34;56088\u0026#34; Constraints:\n1 \u0026lt;= num1.length, num2.length \u0026lt;= 200 num1 and num2 consist of digits only. Both num1 and num2 do not contain any leading zero, except the number 0 itself. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public String multiply(String num1, String num2) { int[] products = new int[num1.length() + num2.length()]; for (int i = 0; i \u0026lt; num1.length(); i++) { for (int j = 0; j \u0026lt; num2.length(); j++) { int d1 = num1.charAt(i) - \u0026#39;0\u0026#39;; int d2 = num2.charAt(j) - \u0026#39;0\u0026#39;; products[i + j + 1] += d1 * d2; } } int carry = 0; for (int i = products.length - 1; i \u0026gt;= 0; i--) { int tmp = (products[i] + carry) % 10; carry = (products[i] + carry) / 10; products[i] = tmp; } StringBuilder sb = new StringBuilder(); for (int product: products) { if (product == 0 \u0026amp;\u0026amp; sb.length() == 0) { continue; } sb.append(product); } if (sb.length() == 0) { sb.append(\u0026#34;0\u0026#34;); } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-11-17-multiply-strings/","summary":"\u003cp\u003e\u003cimg alt=\"43. Multiply Strings\" loading=\"lazy\" src=\"https://leetcode.com/problems/multiply-strings/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\u003c/p\u003e\n\u003cp\u003eNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num1 = \u0026#34;2\u0026#34;, num2 = \u0026#34;3\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;6\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num1 = \u0026#34;123\u0026#34;, num2 = \u0026#34;456\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;56088\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"43. Multiply Strings"},{"content":"\nImplement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\u0026rsquo;s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\nRead in and ignore any leading whitespace. Check if the next character (if not already at the end of the string) is \u0026lsquo;-\u0026rsquo; or \u0026lsquo;+\u0026rsquo;. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. Convert these digits into an integer (i.e. \u0026ldquo;123\u0026rdquo; -\u0026gt; 123, \u0026ldquo;0032\u0026rdquo; -\u0026gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2). If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1. Return the integer as the final result. Note:\nOnly the space character \u0026rsquo; \u0026rsquo; is considered a whitespace character. Do not ignore any characters other than the leading whitespace or the rest of the string after the digits. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: s = \u0026#34;42\u0026#34; Output: 42 Explanation: The underlined characters are what is read in, the caret is the current reader position. Step 1: \u0026#34;42\u0026#34; (no characters read because there is no leading whitespace) ^ Step 2: \u0026#34;42\u0026#34; (no characters read because there is neither a \u0026#39;-\u0026#39; nor \u0026#39;+\u0026#39;) ^ Step 3: \u0026#34;42\u0026#34; (\u0026#34;42\u0026#34; is read in) ^ The parsed integer is 42. Since 42 is in the range [-231, 231 - 1], the final result is 42. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 2: Input: s = \u0026#34; -42\u0026#34; Output: -42 Explanation: Step 1: \u0026#34; -42\u0026#34; (leading whitespace is read and ignored) ^ Step 2: \u0026#34; -42\u0026#34; (\u0026#39;-\u0026#39; is read, so the result should be negative) ^ Step 3: \u0026#34; -42\u0026#34; (\u0026#34;42\u0026#34; is read in) ^ The parsed integer is -42. Since -42 is in the range [-231, 231 - 1], the final result is -42. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 3: Input: s = \u0026#34;4193 with words\u0026#34; Output: 4193 Explanation: Step 1: \u0026#34;4193 with words\u0026#34; (no characters read because there is no leading whitespace) ^ Step 2: \u0026#34;4193 with words\u0026#34; (no characters read because there is neither a \u0026#39;-\u0026#39; nor \u0026#39;+\u0026#39;) ^ Step 3: \u0026#34;4193 with words\u0026#34; (\u0026#34;4193\u0026#34; is read in; reading stops because the next character is a non-digit) ^ The parsed integer is 4193. Since 4193 is in the range [-231, 231 - 1], the final result is 4193. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 4: Input: s = \u0026#34;words and 987\u0026#34; Output: 0 Explanation: Step 1: \u0026#34;words and 987\u0026#34; (no characters read because there is no leading whitespace) ^ Step 2: \u0026#34;words and 987\u0026#34; (no characters read because there is neither a \u0026#39;-\u0026#39; nor \u0026#39;+\u0026#39;) ^ Step 3: \u0026#34;words and 987\u0026#34; (reading stops immediately because there is a non-digit \u0026#39;w\u0026#39;) ^ The parsed integer is 0 because no digits were read. Since 0 is in the range [-231, 231 - 1], the final result is 0. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 5: Input: s = \u0026#34;-91283472332\u0026#34; Output: -2147483648 Explanation: Step 1: \u0026#34;-91283472332\u0026#34; (no characters read because there is no leading whitespace) ^ Step 2: \u0026#34;-91283472332\u0026#34; (\u0026#39;-\u0026#39; is read, so the result should be negative) ^ Step 3: \u0026#34;-91283472332\u0026#34; (\u0026#34;91283472332\u0026#34; is read in) ^ The parsed integer is -91283472332. Since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648. Constraints:\n0 \u0026lt;= s.length \u0026lt;= 200 s consists of English letters (lower-case and upper-case), digits (0-9), \u0026rsquo; \u0026lsquo;, \u0026lsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, and \u0026lsquo;.\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public int myAtoi(String s) { StringBuilder sb = new StringBuilder(s); if (s.length() == 0) return 0; int sign = 1; int value = 0; // remove whitespace int index = 0; while (index \u0026lt; sb.length() \u0026amp;\u0026amp; sb.charAt(index) == \u0026#39; \u0026#39;) { index++; } if (index \u0026lt; sb.length()) { if (sb.charAt(index) == \u0026#39;+\u0026#39;) { sign = 1; index++; } else if (sb.charAt(index) == \u0026#39;-\u0026#39; ) { sign = -1; index++; } } while (index \u0026lt; sb.length() \u0026amp;\u0026amp; Character.isDigit(sb.charAt(index))) { int digit = sb.charAt(index) - \u0026#39;0\u0026#39;; if (Integer.MAX_VALUE / 10 \u0026lt; value || Integer.MAX_VALUE / 10 == value \u0026amp;\u0026amp; Integer.MAX_VALUE % 10 \u0026lt; digit) { return sign == -1 ? Integer.MIN_VALUE: Integer.MAX_VALUE; } value = value * 10 + digit; index++; } return sign * value; } } ","permalink":"https://volyx.in/posts/2021-11-17-string-to-integer-atoi/","summary":"\u003cp\u003e\u003cimg alt=\"8. String to Integer (atoi)\" loading=\"lazy\" src=\"https://leetcode.com/problems/string-to-integer-atoi/\"\u003e\u003c/p\u003e\n\u003cp\u003eImplement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\u0026rsquo;s atoi function).\u003c/p\u003e\n\u003cp\u003eThe algorithm for myAtoi(string s) is as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRead in and ignore any leading whitespace.\u003c/li\u003e\n\u003cli\u003eCheck if the next character (if not already at the end of the string) is \u0026lsquo;-\u0026rsquo; or \u0026lsquo;+\u0026rsquo;. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\u003c/li\u003e\n\u003cli\u003eRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\u003c/li\u003e\n\u003cli\u003eConvert these digits into an integer (i.e. \u0026ldquo;123\u0026rdquo; -\u0026gt; 123, \u0026ldquo;0032\u0026rdquo; -\u0026gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\u003c/li\u003e\n\u003cli\u003eIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\u003c/li\u003e\n\u003cli\u003eReturn the integer as the final result.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote:\u003c/p\u003e","title":"8. String to Integer (atoi)"},{"content":"\nGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must write an algorithm with O(log n) runtime complexity.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: nums = [5,7,7,8,8,10], target = 8 Output: [3,4] Example 2: Input: nums = [5,7,7,8,8,10], target = 6 Output: [-1,-1] Example 3: Input: nums = [], target = 0 Output: [-1,-1] Constraints:\n0 \u0026lt;= nums.length \u0026lt;= 10^5 -10^9 \u0026lt;= nums[i] \u0026lt;= 10^9 nums is a non-decreasing array. -10^9 \u0026lt;= target \u0026lt;= 10^9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class Solution { public int[] searchRange(int[] nums, int target) { int lo = 0; int hi = nums.length - 1; while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (nums[mid] == target) { // 12345 6 6666666667890 if (mid == 0 || nums[mid - 1] != target) { lo = mid; break; } else { hi = mid - 1; } } else if (nums[mid] \u0026lt; target) { lo = mid + 1; } else { hi = mid - 1; } } if (nums.length == 0 || lo \u0026gt; hi || nums[lo] != target) { return new int[] {-1, -1}; } int[] res = new int[] {lo, -1}; lo = 0; hi = nums.length - 1; while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (nums[mid] == target) { // 12345666666666 6 7890 if (mid == nums.length - 1 || nums[mid + 1] != target) { hi = mid; break; } else { lo = mid + 1; } } else if (nums[mid] \u0026lt; target) { lo = mid + 1; } else { hi = mid - 1; } } res[1] = hi; return res; } public int[] searchRangeLinear(int[] nums, int target) { int lo = 0; int hi = nums.length - 1; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; // 123456789 // ^ // 5 // lo hi if (nums[mid] \u0026lt; target) { lo = mid + 1; } else { hi = mid; } } if (nums.length == 0 || nums[lo] != target) { return new int[] {-1, -1}; } int start = lo; // linear scan while (start + 1 \u0026lt; nums.length \u0026amp;\u0026amp; nums[lo] == nums[start + 1]) { start++; } return new int[] {lo, start}; } } Solution 2021-11-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Solution { public int[] searchRange(int[] nums, int target) { int lo = binarySearch(nums, target, true); if (lo == -1 || nums[lo] != target) { return new int[] {-1, -1}; } int hi = binarySearch(nums, target, false); return new int[] {lo, hi}; } int binarySearch(int[] nums, int target, boolean isFirst) { int lo = 0; int hi = nums.length - 1; while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (nums[mid] == target) { if (isFirst) { if (mid == lo || target != nums[mid - 1]) { return mid; } hi = mid - 1; } else { if (mid == hi || target != nums[mid + 1]) { return mid; } lo = mid + 1; } } else if (nums[mid] \u0026gt; target) { hi = mid - 1; } else { lo = mid + 1; } } return -1; } } ","permalink":"https://volyx.in/posts/2021-11-15-find-first-and-last-position-of-element-in-sorted-array/","summary":"\u003cp\u003e\u003cimg alt=\"34. Find First and Last Position of Element in Sorted Array\" loading=\"lazy\" src=\"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\u003c/p\u003e\n\u003cp\u003eIf target is not found in the array, return [-1, -1].\u003c/p\u003e\n\u003cp\u003eYou must write an algorithm with O(log n) runtime complexity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [5,7,7,8,8,10], target = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [5,7,7,8,8,10], target = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [-1,-1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [], target = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [-1,-1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"34. Find First and Last Position of Element in Sorted Array"},{"content":"\nGiven two strings s and t of length N, find the maximum number of possible matching pairs in strings s and t after swapping exactly two characters within s. A swap is switching s[i] and s[j], where s[i] and s[j] denotes the character that is present at the ith and jth index of s, respectively. The matching pairs of the two strings are defined as the number of indices for which s[i] and t[i] are equal. Note: This means you must swap two characters at different indices. Signature int matchingPairs(String s, String t) Input\ns and t are strings of length N N is between 2 and 1,000,000 Output Return an integer denoting the maximum number of matching pairs\n1 2 3 4 5 6 7 8 9 10 11 Example 1 s = \u0026#34;abcd\u0026#34; t = \u0026#34;adcb\u0026#34; output = 4 Explanation: Using 0-based indexing, and with i = 1 and j = 3, s[1] and s[3] can be swapped, making it \u0026#34;adcb\u0026#34;. Therefore, the number of matching pairs of s and t will be 4. Example 2 s = \u0026#34;mno\u0026#34; t = \u0026#34;mno\u0026#34; output = 1 Explanation: Two indices have to be swapped, regardless of which two it is, only one letter will remain the same. If i = 0 and j=1, s[0] and s[1] are swapped, making s = \u0026ldquo;nmo\u0026rdquo;, which shares only \u0026ldquo;o\u0026rdquo; with t.\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 import java.io.*; import java.util.*; // Add any extra import statements you may need here class Main { // Add any helper functions you may need here int matchingPairs(String s, String t) { // Write your code here Set\u0026lt;String\u0026gt; unmatched = new HashSet\u0026lt;\u0026gt;(); int matched = 0; int n = s.length(); for (int i = 0; i \u0026lt; n; i++) { if (s.charAt(i) == t.charAt(i)) { matched++; } else { unmatched.add(s.charAt(i) + \u0026#34;\u0026#34; + t.charAt(i)); } } for (String pair: unmatched) { String reversedPair = pair.charAt(1) + \u0026#34;\u0026#34; + pair.charAt(0); if (unmatched.contains(reversedPair)) { return matched + 2; } } // only one matching or zero // abcd // abce if (unmatched.size() \u0026lt;= 1) { matched--; } if (unmatched.size() == 0) { matched--; } return matched; } // These are the tests we use to determine if the solution is correct. // You can add your own at the bottom. int test_case_number = 1; void check(int expected, int output) { boolean result = (expected == output); char rightTick = \u0026#39;\\u2713\u0026#39;; char wrongTick = \u0026#39;\\u2717\u0026#39;; if (result) { System.out.println(rightTick + \u0026#34; Test #\u0026#34; + test_case_number); } else { System.out.print(wrongTick + \u0026#34; Test #\u0026#34; + test_case_number + \u0026#34;: Expected \u0026#34;); printInteger(expected); System.out.print(\u0026#34; Your output: \u0026#34;); printInteger(output); System.out.println(); } test_case_number++; } void printInteger(int n) { System.out.print(\u0026#34;[\u0026#34; + n + \u0026#34;]\u0026#34;); } public void run() { String s_1 = \u0026#34;abcde\u0026#34;; String t_1 = \u0026#34;adcbe\u0026#34;; int expected_1 = 5; int output_1 = matchingPairs(s_1, t_1); check(expected_1, output_1); String s_2 = \u0026#34;abcd\u0026#34;; String t_2 = \u0026#34;abcd\u0026#34;; int expected_2 = 2; int output_2 = matchingPairs(s_2, t_2); check(expected_2, output_2); // Add your own test cases here } public static void main(String[] args) { new Main().run(); } } ","permalink":"https://volyx.in/posts/2021-11-13-matching-pairs/","summary":"\u003cp\u003e\u003cimg alt=\"Matching Pairs\" loading=\"lazy\" src=\"https://leetcode.com/discuss/interview-question/632717/Facebook-or-Recruiting-Portal-or-Matching-Pairs\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings s and t of length N, find the maximum number of possible matching pairs in strings s and t after swapping exactly two characters within s.\nA swap is switching s[i] and s[j], where s[i] and s[j] denotes the character that is present at the ith and jth index of s, respectively. The matching pairs of the two strings are defined as the number of indices for which s[i] and t[i] are equal.\nNote: This means you must swap two characters at different indices.\nSignature\nint matchingPairs(String s, String t)\nInput\u003c/p\u003e","title":"Matching Pairs"},{"content":"Pair Sums Given a list of n integers arr[0..(n-1)], determine the number of different pairs of elements within it which sum to k. If an integer appears in the list multiple times, each copy is considered to be different; that is, two pairs are considered different if one pair includes at least one array index which the other doesn\u0026rsquo;t, even if they include the same values. Signature int numberOfWays(int[] arr, int k) Input n is in the range [1, 100,000]. Each value arr[i] is in the range [1, 1,000,000,000]. k is in the range [1, 1,000,000,000]. Output Return the number of different pairs of elements which sum to k.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1 n = 5 k = 6 arr = [1, 2, 3, 4, 3] output = 2 The valid pairs are 2+4 and 3+3. Example 2 n = 5 k = 6 arr = [1, 5, 3, 3, 3] output = 4 There\u0026#39;s one valid pair 1+5, and three different valid pairs 3+3 (the 3rd and 4th elements, 3rd and 5th elements, and 4th and 5th elements). Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 import java.io.*; import java.util.*; // Add any extra import statements you may need here class Main { int numberOfWays(int[] arr, int k) { Map\u0026lt;Integer, Integer\u0026gt; valueCount = new HashMap\u0026lt;\u0026gt;(); int count = 0; for (int i = 0; i \u0026lt; arr.length; i++) { count += valueCount.getOrDefault(k - arr[i], 0); valueCount.put(arr[i], valueCount.getOrDefault(arr[i], 0) + 1); } return count; } // These are the tests we use to determine if the solution is correct. // You can add your own at the bottom. int test_case_number = 1; void check(int expected, int output) { boolean result = (expected == output); char rightTick = \u0026#39;\\u2713\u0026#39;; char wrongTick = \u0026#39;\\u2717\u0026#39;; if (result) { System.out.println(rightTick + \u0026#34; Test #\u0026#34; + test_case_number); } else { System.out.print(wrongTick + \u0026#34; Test #\u0026#34; + test_case_number + \u0026#34;: Expected \u0026#34;); printInteger(expected); System.out.print(\u0026#34; Your output: \u0026#34;); printInteger(output); System.out.println(); } test_case_number++; } void printInteger(int n) { System.out.print(\u0026#34;[\u0026#34; + n + \u0026#34;]\u0026#34;); } public void run() { int k_1 = 6; int[] arr_1 = {1, 2, 3, 4, 3}; int expected_1 = 2; int output_1 = numberOfWays(arr_1, k_1); check(expected_1, output_1); int k_2 = 6; int[] arr_2 = {1, 5, 3, 3, 3}; int expected_2 = 4; int output_2 = numberOfWays(arr_2, k_2); check(expected_2, output_2); // Add your own test cases here } public static void main(String[] args) { new Main().run(); } } ","permalink":"https://volyx.in/posts/2021-11-12-pair-sums/","summary":"\u003ch2 id=\"pair-sums\"\u003ePair Sums\u003c/h2\u003e\n\u003cp\u003eGiven a list of n integers arr[0..(n-1)], determine the number of different pairs of elements within it which sum to k.\nIf an integer appears in the list multiple times, each copy is considered to be different; that is, two pairs are considered different if one pair includes at least one array index which the other doesn\u0026rsquo;t, even if they include the same values.\nSignature\nint numberOfWays(int[] arr, int k)\nInput\nn is in the range [1, 100,000].\nEach value arr[i] is in the range [1, 1,000,000,000].\nk is in the range [1, 1,000,000,000].\nOutput\nReturn the number of different pairs of elements which sum to k.\u003c/p\u003e","title":"Pair Sums"},{"content":"\nGiven two integer arrays of equal length target and arr.\nIn one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.\nReturn True if you can make arr equal to target, or False otherwise.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Example 1: Input: target = [1,2,3,4], arr = [2,4,1,3] Output: true Explanation: You can follow the next steps to convert arr to target: 1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3] 2- Reverse sub-array [4,2], arr becomes [1,2,4,3] 3- Reverse sub-array [4,3], arr becomes [1,2,3,4] There are multiple ways to convert arr to target, this is not the only way to do so. Example 2: Input: target = [7], arr = [7] Output: true Explanation: arr is equal to target without any reverses. Example 3: Input: target = [1,12], arr = [12,1] Output: true Example 4: Input: target = [3,7,9], arr = [3,7,11] Output: false Explanation: arr doesn\u0026#39;t have value 9 and it can never be converted to target. Example 5: Input: target = [1,1,1,1,1], arr = [1,1,1,1,1] Output: true Constraints:\ntarget.length == arr.length 1 \u0026lt;= target.length \u0026lt;= 1000 1 \u0026lt;= target[i] \u0026lt;= 1000 1 \u0026lt;= arr[i] \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public boolean canBeEqual(int[] array_a, int[] array_b) { if (array_a.length != array_b.length) { return false; } int n = array_a.length; int[] freq1 = new int[1_001]; int[] freq2 = new int[1_001]; for (int i = 0; i \u0026lt; n; i++) { freq1[array_a[i]]++; freq2[array_b[i]]++; } return Arrays.equals(freq1, freq2); } } ","permalink":"https://volyx.in/posts/2021-11-13-make-two-arrays-equal-by-reversing-sub-arrays/","summary":"\u003cp\u003e\u003cimg alt=\"1460. Make Two Arrays Equal by Reversing Sub-arrays\" loading=\"lazy\" src=\"https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two integer arrays of equal length target and arr.\u003c/p\u003e\n\u003cp\u003eIn one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.\u003c/p\u003e\n\u003cp\u003eReturn True if you can make arr equal to target, or False otherwise.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = [1,2,3,4], arr = [2,4,1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You can follow the next steps to convert arr to target:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2- Reverse sub-array [4,2], arr becomes [1,2,4,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThere are multiple ways to convert arr to target, this is not the only way to do so.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = [7], arr = [7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: arr is equal to target without any reverses.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = [1,12], arr = [12,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = [3,7,9], arr = [3,7,11]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: arr doesn\u0026#39;t have value 9 and it can never be converted to target.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = [1,1,1,1,1], arr = [1,1,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"Pair Sums"},{"content":"\nGiven a file and assume that you can only read the file using a given method read4, implement a method read to read n characters. Your method read may be called multiple times.\nMethod read4:\nThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\nThe return value is the number of actual characters read.\nNote that read4() has its own file pointer, much like FILE *fp in C.\nDefinition of read4:\nParameter: char[] buf4 Returns: int buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\nBelow is a high-level example of how read4 works:\nFile file(\u0026ldquo;abcde\u0026rdquo;); // File is \u0026ldquo;abcde\u0026rdquo;, initially file pointer (fp) points to \u0026lsquo;a\u0026rsquo; char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 = \u0026ldquo;abcd\u0026rdquo;, fp points to \u0026rsquo;e' read4(buf4); // read4 returns 1. Now buf4 = \u0026ldquo;e\u0026rdquo;, fp points to end of file read4(buf4); // read4 returns 0. Now buf4 = \u0026ldquo;\u0026rdquo;, fp points to end of file\nMethod read:\nBy using the read4 method, implement the method read that reads n characters from file and store it in the buffer array buf. Consider that you cannot manipulate file directly.\nThe return value is the number of actual characters read.\nDefinition of read:\nParameters: char[] buf, int n Returns: int buf[] is a destination, not a source. You will need to write the results to buf[].\nNote:\nConsider that you cannot manipulate the file directly. The file is only accessible for read4 but not for read. The read function may be called multiple times. Please remember to RESET your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see here for more details. You may assume the destination buffer array, buf, is guaranteed to have enough space for storing n characters. It is guaranteed that in a given test case the same buffer buf is called by read. 1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: file = \u0026#34;abc\u0026#34;, queries = [1,2,1] Output: [1,2,0] Explanation: The test case represents the following scenario: File file(\u0026#34;abc\u0026#34;); Solution sol; sol.read(buf, 1); // After calling your read method, buf should contain \u0026#34;a\u0026#34;. We read a total of 1 character from the file, so return 1. sol.read(buf, 2); // Now buf should contain \u0026#34;bc\u0026#34;. We read a total of 2 characters from the file, so return 2. sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0. Assume buf is allocated and guaranteed to have enough space for storing all characters from the file. 1 2 3 4 5 6 7 8 9 Example 2: Input: file = \u0026#34;abc\u0026#34;, queries = [4,1] Output: [3,0] Explanation: The test case represents the following scenario: File file(\u0026#34;abc\u0026#34;); Solution sol; sol.read(buf, 4); // After calling your read method, buf should contain \u0026#34;abc\u0026#34;. We read a total of 3 characters from the file, so return 3. sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0. Constraints:\n1 \u0026lt;= file.length \u0026lt;= 500 file consist of English letters and digits. 1 \u0026lt;= queries.length \u0026lt;= 10 1 \u0026lt;= queries[i] \u0026lt;= 500 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * The read4 API is defined in the parent class Reader4. * int read4(char[] buf4); */ public class Solution extends Reader4 { /** * @param buf Destination buffer * @param n Number of characters to read * @return The number of actual characters read a b c d e */ char[] buf4 = new char[4]; int bufPtr = 0; int bufCount = 0; public int read(char[] buf, int n) { int ptr = 0; while (ptr \u0026lt; n) { // do we need read more or we have buffer if (bufPtr == 0) { bufCount = read4(buf4); } // if we read 0, than break if (bufCount == 0) { break; } while (bufPtr \u0026lt; bufCount \u0026amp;\u0026amp; ptr \u0026lt; n) { buf[ptr++] = buf4[bufPtr++]; } // if read all? if (bufPtr == bufCount) { bufPtr = 0; } } return ptr; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * The read4 API is defined in the parent class Reader4. * int read4(char[] buf4); */ public class Solution extends Reader4 { char[] buf4 = new char[4]; int bufCount = 0; int bufPtr = 0; /** * @param buf Destination buffer * @param n Number of characters to read * @return The number of actual characters read */ public int read(char[] buf, int n) { int ptr = 0; while (ptr \u0026lt; n) { if (bufCount == 0) { // if buf4 is empty bufCount = read4(buf4); } if (bufCount == 0) { // nothing to read break; } while (bufPtr \u0026lt; bufCount \u0026amp;\u0026amp; ptr \u0026lt; n) { // copy buffer until either we have buffer or e need to read less buf[ptr++] = buf4[bufPtr++]; } if (bufPtr == bufCount) { // if we read whole buffer, reset it and continue read bufPtr = 0; bufCount = 0; } } return ptr; } } ","permalink":"https://volyx.in/posts/2021-11-09-read-n-characters-given-read4-ii-call-multiple-times/","summary":"\u003cp\u003e\u003cimg alt=\"158. Read N Characters Given read4 II - Call Multiple Times\" loading=\"lazy\" src=\"https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a file and assume that you can only read the file using a given method read4, implement a method read to read n characters. Your method read may be called multiple times.\u003c/p\u003e\n\u003cp\u003eMethod read4:\u003c/p\u003e\n\u003cp\u003eThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\u003c/p\u003e\n\u003cp\u003eThe return value is the number of actual characters read.\u003c/p\u003e","title":"158. Read N Characters Given read4 II - Call Multiple Times"},{"content":"\nAndroid devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \u0026ldquo;unlock pattern\u0026rdquo; by connecting the dots in a specific sequence, forming a series of joined line segments where each segment\u0026rsquo;s endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\nAll the dots in the sequence are distinct. If the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed. For example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6. However, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2. Here are some example valid and invalid unlock patterns:\nThe 1st pattern [4,1,3,6] is invalid because the line connecting dots 1 and 3 pass through dot 2, but dot 2 did not previously appear in the sequence. The 2nd pattern [4,1,9,2] is invalid because the line connecting dots 1 and 9 pass through dot 5, but dot 5 did not previously appear in the sequence. The 3rd pattern [2,4,1,3,6] is valid because it follows the conditions. The line connecting dots 1 and 3 meets the condition because dot 2 previously appeared in the sequence. The 4th pattern [6,5,4,1,9,2] is valid because it follows the conditions. The line connecting dots 1 and 9 meets the condition because dot 5 previously appeared in the sequence. Given two integers m and n, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least m keys and at most n keys.\nTwo unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.\n1 2 3 4 Example 1: Input: m = 1, n = 1 Output: 9 1 2 3 4 Example 2: Input: m = 1, n = 2 Output: 65 Constraints:\n1 \u0026lt;= m, n \u0026lt;= 9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Solution { public int numberOfPatterns(int m, int n) { int[][] visited = new int[3][3]; Set\u0026lt;String\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); int count = 0; for (int i = 0; i \u0026lt; 3; i++) { for (int j = 0; j \u0026lt; 3; j++) { if (visited[i][j] == 0) { dfs(i, j, visited, path, m, n, set); visited[i][j] = 0; count += set.size(); set.clear(); path.clear(); } } } return count; } void dfs(int i, int j, int[][] visited, List\u0026lt;Integer\u0026gt; path, int m, int n, Set\u0026lt;String\u0026gt; set) { visited[i][j] = 1; // print(visited); path.add(i * 3 + j + 1); if (m \u0026lt;= path.size() \u0026amp;\u0026amp; path.size() \u0026lt;= n) { set.add(path.toString()); } if (path.size() \u0026gt; n) return; for (int row = 0; row \u0026lt; 3; row++) { for (int col = 0; col \u0026lt; 3; col++) { if (isReachable(i, j, row, col, visited)) { dfs(row, col, visited, path, m, n, set); visited[row][col] = 0; Integer prev = path.remove(path.size() - 1); } } } } boolean isReachable(int i, int j, int row, int col, int[][] visited) { if (visited[row][col] == 1) return false; if (Math.abs(i - row) == 1 || Math.abs(j - col) == 1) { return true; } if (Math.abs(i - row) == 2 \u0026amp;\u0026amp; Math.abs(j - col) == 2) { return visited[1][1] == 1; } if (Math.abs(i - row) == 2) { return visited[1][j] == 1; } if (Math.abs(j - col) == 2) { return visited[i][1] == 1; } return false; } void print(int[][] visited) { for (int[] vis: visited) { System.out.println(Arrays.toString(vis)); } System.out.println(); } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Solution { int count = 0; public int numberOfPatterns(int m, int n) { int[][] visited = new int[3][3]; for (int i = 0; i \u0026lt; 3; i++) { for (int j = 0; j \u0026lt; 3; j++) { if (visited[i][j] == 0) { dfs(i, j, 1, visited, m, n); } } } return count; } void dfs(int i, int j, int pathSize, int[][] visited, int m, int n) { visited[i][j] = 1; if (m \u0026lt;= pathSize \u0026amp;\u0026amp; pathSize \u0026lt;= n) { count++; } else if (pathSize \u0026gt; n) { return; } for (int row = 0; row \u0026lt; 3; row++) { for (int col = 0; col \u0026lt; 3; col++) { if (isReachable(i, j, row, col, visited)) { dfs(row, col, pathSize + 1, visited, m, n); visited[row][col] = 0; } } } visited[i][j] = 0; } boolean isReachable(int i, int j, int row, int col, int[][] visited) { if (visited[row][col] == 1) return false; if (Math.abs(i - row) == 1 || Math.abs(j - col) == 1) { return true; } if (Math.abs(i - row) == 2 \u0026amp;\u0026amp; Math.abs(j - col) == 2) { return visited[1][1] == 1; } if (Math.abs(i - row) == 2) { return visited[1][j] == 1; } if (Math.abs(j - col) == 2) { return visited[i][1] == 1; } return false; } void print(int[][] visited) { for (int[] vis: visited) { System.out.println(Arrays.toString(vis)); } System.out.println(); } } ","permalink":"https://volyx.in/posts/2021-11-09-android-unlock-patterns/","summary":"\u003cp\u003e\u003cimg alt=\"351. Android Unlock Patterns\" loading=\"lazy\" src=\"https://leetcode.com/problems/android-unlock-patterns/\"\u003e\u003c/p\u003e\n\u003cp\u003eAndroid devices have a special lock screen with a 3 x 3 grid of dots. Users can set an \u0026ldquo;unlock pattern\u0026rdquo; by connecting the dots in a specific sequence, forming a series of joined line segments where each segment\u0026rsquo;s endpoints are two consecutive dots in the sequence. A sequence of k dots is a valid unlock pattern if both of the following are true:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAll the dots in the sequence are distinct.\u003c/li\u003e\n\u003cli\u003eIf the line segment connecting two consecutive dots in the sequence passes through the center of any other dot, the other dot must have previously appeared in the sequence. No jumps through the center non-selected dots are allowed.\u003c/li\u003e\n\u003cli\u003eFor example, connecting dots 2 and 9 without dots 5 or 6 appearing beforehand is valid because the line from dot 2 to dot 9 does not pass through the center of either dot 5 or 6.\u003c/li\u003e\n\u003cli\u003eHowever, connecting dots 1 and 3 without dot 2 appearing beforehand is invalid because the line from dot 1 to dot 3 passes through the center of dot 2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-11-09-andoid-lock-ex1.png\"\u003e\u003c/p\u003e","title":"351. Android Unlock Patterns"},{"content":"\nGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4 Example 2: Input: nums = [-1,0,3,5,9,12], target = 2 Output: -1 Explanation: 2 does not exist in nums so return -1 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 104 -10^4 \u0026lt; nums[i], target \u0026lt; 10^4 All the integers in nums are unique. nums is sorted in ascending order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public int search(int[] nums, int target) { int lo = 0; int hi = nums.length - 1; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; if (target \u0026lt;= nums[mid]) { hi = mid; } else { lo = mid + 1; } } return nums[lo] == target? lo: -1; } // symmetric, target exists in nums public int search2(int[] nums, int target) { int lo = 0; int hi = nums.length - 1; while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (target == nums[mid]) { return mid; } else if (target \u0026lt; nums[mid]) { hi = mid - 1; } else { lo = mid + 1; } } return -1; } } ","permalink":"https://volyx.in/posts/2021-11-10-binary-search/","summary":"\u003cp\u003e\u003cimg alt=\"704. Binary Search\" loading=\"lazy\" src=\"https://leetcode.com/problems/binary-search/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\u003c/p\u003e\n\u003cp\u003eYou must write an algorithm with O(log n) runtime complexity.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,0,3,5,9,12], target = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 9 exists in nums and its index is 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,0,3,5,9,12], target = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: -1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 2 does not exist in nums so return -1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"704. Binary Search"},{"content":"\nYou are given an array arr of N integers. For each index i, you are required to determine the number of contiguous subarrays that fulfill the following conditions:\nThe value at index i must be the maximum element in the contiguous subarrays, and These contiguous subarrays must either start from or end on index i. Signature int[] countSubarrays(int[] arr) Input\nArray arr is a non-empty list of unique integers that range between 1 to 1,000,000,000 Size N is between 1 and 1,000,000 Output An array where each index i contains an integer denoting the maximum number of contiguous subarrays of arr[i]\n1 2 3 4 5 6 7 8 9 10 11 12 Example: arr = [3, 4, 1, 6, 2] output = [1, 3, 1, 5, 1] Explanation: For index 0 - [3] is the only contiguous subarray that starts (or ends) with 3, and the maximum value in this subarray is 3. For index 1 - [4], [3, 4], [4, 1] For index 2 - [1] For index 3 - [6], [6, 2], [1, 6], [4, 1, 6], [3, 4, 1, 6] For index 4 - [2] So, the answer for the above input is [1, 3, 1, 5, 1] Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 import java.io.*; import java.util.*; // Add any extra import statements you may need here class Main { // Add any helper functions you may need here int[] countSubarrays(int[] arr) { int n = arr.length; Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int[] left = new int[n]; for (int i = 0; i \u0026lt; n; i++) { while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; arr[stack.peek()] \u0026lt; arr[i]) { left[i] += left[stack.pop()]; } left[i]++; stack.push(i); } stack.clear(); int[] right = new int[n]; // [3, 4, 1, 6, 2] for (int i = n - 1; i \u0026gt;= 0; i--) { while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; arr[stack.peek()] \u0026lt; arr[i]) { right[i] += right[stack.pop()]; } right[i]++; stack.push(i); } int[] res = new int[n]; for (int i = 0; i \u0026lt; n; i++) { res[i] = left[i] + right[i] - 1; } return res; } int[] countSubarrays2(int[] arr) { // Write your code here int n = arr.length; int[] res = new int[n]; for (int i = 0; i \u0026lt; n; i++) { res[i] = 1; res[i] += countSubarraysLeft(i, arr); res[i] += countSubarraysRight(i, arr); } return res; } int countSubarraysLeft(int i, int[] arr) { int count = 0; int j = i - 1; while (j \u0026gt;= 0 \u0026amp;\u0026amp; arr[j] \u0026lt; arr[i]) { j--; count++; } return count; } int countSubarraysRight(int i, int[] arr) { int count = 0; int j = i + 1; while (j \u0026lt; arr.length \u0026amp;\u0026amp; arr[j] \u0026lt; arr[i]) { j++; count++; } return count; } // These are the tests we use to determine if the solution is correct. // You can add your own at the bottom. int test_case_number = 1; void check(int[] expected, int[] output) { int expected_size = expected.length; int output_size = output.length; boolean result = true; if (expected_size != output_size) { result = false; } for (int i = 0; i \u0026lt; Math.min(expected_size, output_size); i++) { result \u0026amp;= (output[i] == expected[i]); } char rightTick = \u0026#39;\\u2713\u0026#39;; char wrongTick = \u0026#39;\\u2717\u0026#39;; if (result) { System.out.println(rightTick + \u0026#34; Test #\u0026#34; + test_case_number); } else { System.out.print(wrongTick + \u0026#34; Test #\u0026#34; + test_case_number + \u0026#34;: Expected \u0026#34;); printIntegerArray(expected); System.out.print(\u0026#34; Your output: \u0026#34;); printIntegerArray(output); System.out.println(); } test_case_number++; } void printIntegerArray(int[] arr) { int len = arr.length; System.out.print(\u0026#34;[\u0026#34;); for(int i = 0; i \u0026lt; len; i++) { if (i != 0) { System.out.print(\u0026#34;, \u0026#34;); } System.out.print(arr[i]); } System.out.print(\u0026#34;]\u0026#34;); } public void run() { int[] test_1 = {3, 4, 1, 6, 2}; int[] expected_1 = {1, 3, 1, 5, 1}; int[] output_1 = countSubarrays(test_1); check(expected_1, output_1); int[] test_2 = {2, 4, 7, 1, 5, 3}; int[] expected_2 = {1, 2, 6, 1, 3, 1}; int[] output_2 = countSubarrays(test_2); check(expected_2, output_2); // Add your own test cases here } public static void main(String[] args) { new Main().run(); } } ","permalink":"https://volyx.in/posts/2021-11-12-contiguous-subarrays/","summary":"\u003cp\u003e\u003cimg alt=\"Contiguous Subarrays\" loading=\"lazy\" src=\"https://leetcode.com/discuss/interview-question/742523/facebook-prep-question-contiguous-subarrays-on-solution\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array arr of N integers. For each index i, you are required to determine the number of contiguous subarrays that fulfill the following conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe value at index i must be the maximum element in the contiguous subarrays, and\u003c/li\u003e\n\u003cli\u003eThese contiguous subarrays must either start from or end on index i.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSignature\nint[] countSubarrays(int[] arr)\nInput\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eArray arr is a non-empty list of unique integers that range between 1 to 1,000,000,000\u003c/li\u003e\n\u003cli\u003eSize N is between 1 and 1,000,000\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOutput\nAn array where each index i contains an integer denoting the maximum number of contiguous subarrays of arr[i]\u003c/p\u003e","title":"Contiguous Subarrays"},{"content":"\nYou have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.\n1 2 3 4 5 6 7 8 9 Example 1: Input: steps = 3, arrLen = 2 Output: 4 Explanation: There are 4 differents ways to stay at index 0 after 3 steps. Right, Left, Stay Stay, Right, Left Right, Stay, Left Stay, Stay, Stay 1 2 3 4 5 6 7 Example 2: Input: steps = 2, arrLen = 4 Output: 2 Explanation: There are 2 differents ways to stay at index 0 after 2 steps Right, Left Stay, Stay 1 2 3 4 Example 3: Input: steps = 4, arrLen = 2 Output: 8 Constraints:\n1 \u0026lt;= steps \u0026lt;= 500 1 \u0026lt;= arrLen \u0026lt;= 10^6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Solution { public int numWays(int steps, int arrLen) { int maxPos = Math.min(arrLen, steps); long[][] dp = new long[steps + 1][maxPos + 1]; dp[1][0]=1; if(arrLen \u0026gt; 1) dp[1][1]=1; for (int step = 2; step \u0026lt;= steps; step++) { for (int pos = 0; pos \u0026lt; maxPos; pos++) { // STAY + RIGHT + LEFT dp[step][pos] = (dp[step - 1][pos] + dp[step - 1][pos + 1] + (pos \u0026gt; 0 ? dp[step - 1][pos - 1]: 0)) % 1_000_000_007L; } } // for (int step = 0; step \u0026lt; steps; step++) { // System.out.println(Arrays.toString(dp[step])); // } return (int) dp[steps][0]; } // TLE int count = 0; public int numWays2(int steps, int arrLen) { backtrack(steps, 0, 0, 0, arrLen); return count; } void backtrack(int steps, int pos, int opened, int closed, int arrLen) { if (pos \u0026lt; 0 || pos == arrLen) { return; } if (opened \u0026lt; closed) { return; } if (steps == 0) { if (pos == 0) { count = count + 1; count = count % 1_000_000_007; } return; } // right backtrack(steps - 1, pos + 1, opened + 1, closed, arrLen); // stay backtrack(steps - 1, pos, opened, closed, arrLen); // left backtrack(steps - 1, pos - 1, opened, closed - 1, arrLen); } } ","permalink":"https://volyx.in/posts/2021-11-07-number-of-ways-to-stay-in-the-same-place-after-some-steps/","summary":"\u003cp\u003e\u003cimg alt=\"1269. Number of Ways to Stay in the Same Place After Some Steps\" loading=\"lazy\" src=\"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\u003c/p\u003e\n\u003cp\u003eGiven two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 109 + 7.\u003c/p\u003e","title":"1269. Number of Ways to Stay in the Same Place After Some Steps"},{"content":"\nGiven a URL startUrl and an interface HtmlParser, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as startUrl.\nReturn all URLs obtained by your web crawler in any order.\nYour crawler should:\nStart from the page: startUrl Call HtmlParser.getUrls(url) to get all URLs from a webpage of a given URL. Do not crawl the same link twice. Explore only the links that are under the same hostname as startUrl. As shown in the example URL above, the hostname is example.org. For simplicity\u0026rsquo;s sake, you may assume all URLs use HTTP protocol without any port specified. For example, the URLs http://leetcode.com/problems and http://leetcode.com/contest are under the same hostname, while URLs http://example.org/test and http://example.com/abc are not under the same hostname.\nThe HtmlParser interface is defined as such:\n1 2 3 4 5 interface HtmlParser { // Return a list of all urls from a webpage of given url. // This is a blocking call, that means it will do HTTP request and return when this request is finished. public List\u0026lt;String\u0026gt; getUrls(String url); } Note that getUrls(String url) simulates performing an HTTP request. You can treat it as a blocking function call that waits for an HTTP request to finish. It is guaranteed that getUrls(String url) will return the URLs within 15ms. Single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better?\nBelow are two examples explaining the functionality of the problem. For custom testing purposes, you\u0026rsquo;ll have three variables urls, edges and startUrl. Notice that you will only have access to startUrl in your code, while urls and edges are not directly accessible to you in code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input: urls = [ \u0026#34;http://news.yahoo.com\u0026#34;, \u0026#34;http://news.yahoo.com/news\u0026#34;, \u0026#34;http://news.yahoo.com/news/topics/\u0026#34;, \u0026#34;http://news.google.com\u0026#34;, \u0026#34;http://news.yahoo.com/us\u0026#34; ] edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] startUrl = \u0026#34;http://news.yahoo.com/news/topics/\u0026#34; Output: [ \u0026#34;http://news.yahoo.com\u0026#34;, \u0026#34;http://news.yahoo.com/news\u0026#34;, \u0026#34;http://news.yahoo.com/news/topics/\u0026#34;, \u0026#34;http://news.yahoo.com/us\u0026#34; ] 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 2: Input: urls = [ \u0026#34;http://news.yahoo.com\u0026#34;, \u0026#34;http://news.yahoo.com/news\u0026#34;, \u0026#34;http://news.yahoo.com/news/topics/\u0026#34;, \u0026#34;http://news.google.com\u0026#34; ] edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] startUrl = \u0026#34;http://news.google.com\u0026#34; Output: [\u0026#34;http://news.google.com\u0026#34;] Explanation: The startUrl links to all other pages that do not share the same hostname. Constraints:\n1 \u0026lt;= urls.length \u0026lt;= 1000 1 \u0026lt;= urls[i].length \u0026lt;= 300 startUrl is one of the urls. Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from \u0026lsquo;a\u0026rsquo; to \u0026lsquo;z\u0026rsquo;, digits from \u0026lsquo;0\u0026rsquo; to \u0026lsquo;9\u0026rsquo; and the hyphen-minus character (\u0026rsquo;-\u0026rsquo;). The hostname may not start or end with the hyphen-minus character (\u0026rsquo;-\u0026rsquo;). See: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames You may assume there\u0026rsquo;re no duplicates in the URL library. Follow up:\nAssume we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software onto each node. The software can know about all the nodes. We have to minimize communication between machines and make sure each node does equal amount of work. How would your web crawler design change? What if one node fails or does not work? How do you know when the crawler is done? Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /** * // This is the HtmlParser\u0026#39;s API interface. * // You should not implement it, or speculate about its implementation * interface HtmlParser { * public List\u0026lt;String\u0026gt; getUrls(String url) {} * } */ class Solution { public List\u0026lt;String\u0026gt; crawl(String startUrl, HtmlParser htmlParser) { ExecutorService ex = Executors.newFixedThreadPool(4, r -\u0026gt; { Thread t = new Thread(r); t.setDaemon(true); return t; }); ConcurrentMap\u0026lt;String, Boolean\u0026gt; visited = new ConcurrentHashMap\u0026lt;\u0026gt;(); BlockingQueue\u0026lt;String\u0026gt; q = new ArrayBlockingQueue\u0026lt;String\u0026gt;(100_000); String[] parts = startUrl.split(\u0026#34;/\u0026#34;); String domain = parts[0] + \u0026#34;//\u0026#34; + parts[2]; q.add(startUrl); Deque\u0026lt;Future\u0026gt; tasks = new ArrayDeque\u0026lt;\u0026gt;(); while (true) { final String url = q.poll(); if (url != null) { visited.put(startUrl, true); tasks.add(ex.submit(() -\u0026gt; { for (String otherUrl: htmlParser.getUrls(url)) { if (otherUrl.startsWith(domain) \u0026amp;\u0026amp; !visited.containsKey(otherUrl)) { q.add(otherUrl); visited.put(otherUrl, true); } } })); } else { if (tasks.size() \u0026gt; 0) { try { tasks.pollFirst().get(); } catch (Exception e) {} } else { break; } } } return new ArrayList\u0026lt;\u0026gt;(visited.keySet()); } } ","permalink":"https://volyx.in/posts/2021-11-04-web-crawler-multithreaded-copy/","summary":"\u003cp\u003e\u003cimg alt=\"1287. Element Appearing More Than 25% In Sorted Array\" loading=\"lazy\" src=\"https://leetcode.com/problems/web-crawler-multithreaded/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a URL startUrl and an interface HtmlParser, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as startUrl.\u003c/p\u003e\n\u003cp\u003eReturn all URLs obtained by your web crawler in any order.\u003c/p\u003e\n\u003cp\u003eYour crawler should:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eStart from the page: startUrl\u003c/li\u003e\n\u003cli\u003eCall HtmlParser.getUrls(url) to get all URLs from a webpage of a given URL.\u003c/li\u003e\n\u003cli\u003eDo not crawl the same link twice.\u003c/li\u003e\n\u003cli\u003eExplore only the links that are under the same hostname as startUrl.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs shown in the example URL above, the hostname is example.org. For simplicity\u0026rsquo;s sake, you may assume all URLs use HTTP protocol without any port specified. For example, the URLs \u003ca href=\"http://leetcode.com/problems\"\u003ehttp://leetcode.com/problems\u003c/a\u003e and \u003ca href=\"http://leetcode.com/contest\"\u003ehttp://leetcode.com/contest\u003c/a\u003e are under the same hostname, while URLs \u003ca href=\"http://example.org/test\"\u003ehttp://example.org/test\u003c/a\u003e and \u003ca href=\"http://example.com/abc\"\u003ehttp://example.com/abc\u003c/a\u003e are not under the same hostname.\u003c/p\u003e","title":"1242. Web Crawler Multithreaded"},{"content":"\nGiven an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\n1 2 3 4 5 6 7 8 9 Example 1: Input: arr = [1,2,2,6,6,6,6,7,10] Output: 6 Example 2: Input: arr = [1,1] Output: 1 Constraints:\n1 \u0026lt;= arr.length \u0026lt;= 10^4 0 \u0026lt;= arr[i] \u0026lt;= 10^5 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Solution { public int findSpecialInteger2(int[] arr) { int n = arr.length; int val1 = arr[n / 4]; int val2 = arr[n / 4 * 2] ; int val3 = arr[n / 4 * 3]; int val4 = arr[n - 1]; int count1 = countFreq(arr, val1); int count2 = countFreq(arr, val2); int count3 = countFreq(arr, val3); int count4 = countFreq(arr, val4); if (count1 \u0026gt;= count2 \u0026amp;\u0026amp; count1 \u0026gt;= count3 \u0026amp;\u0026amp; count1 \u0026gt;= count4) { return val1; } if (count2 \u0026gt;= count1 \u0026amp;\u0026amp; count2 \u0026gt;= count3 \u0026amp;\u0026amp; count2 \u0026gt;= count4) { return val2; } if (count3 \u0026gt;= count1 \u0026amp;\u0026amp; count3 \u0026gt;= count2 \u0026amp;\u0026amp; count3 \u0026gt;= count4) { return val3; } return val4; } int countFreq(int[] arr, int val) { int mid = Arrays.binarySearch(arr, val); int right = mid; while (right \u0026lt; arr.length - 1 \u0026amp;\u0026amp; arr[right] == arr[right + 1]) { right++; } int left = mid; while (left \u0026gt; 0 \u0026amp;\u0026amp; arr[left] == arr[left - 1]) { left--; } return right - left; } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int findSpecialInteger(int[] arr) { int n = arr.length; int t = n / 4; for (int i = 0; i \u0026lt; n - t; i++) { if (arr[i] == arr[i + t]) { return arr[i]; } } return -1; } } ","permalink":"https://volyx.in/posts/2021-10-28-element-appearing-more-than-25-in-sorted-array/","summary":"\u003cp\u003e\u003cimg alt=\"1287. Element Appearing More Than 25% In Sorted Array\" loading=\"lazy\" src=\"https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [1,2,2,6,6,6,6,7,10]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1287. Element Appearing More Than 25% In Sorted Array"},{"content":"\nGiven two binary search trees root1 and root2.\nReturn a list containing all the integers from both trees sorted in ascending order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: root1 = [2,1,4], root2 = [1,0,3] Output: [0,1,1,2,3,4] Example 2: Input: root1 = [0,-10,10], root2 = [5,1,7,0,2] Output: [-10,0,0,1,2,5,7,10] Example 3: Input: root1 = [], root2 = [5,1,7,0,2] Output: [0,1,2,5,7] Example 4: Input: root1 = [0,-10,10], root2 = [] Output: [-10,0,10] 1 2 3 4 Example 5: Input: root1 = [1,null,8], root2 = [8,1] Output: [1,1,8,8] Constraints:\nEach tree has at most 5000 nodes. Each node\u0026rsquo;s value is between [-10^5, 10^5]. Solution DFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ /* 2 1 4 1 0 3 s1: 2 s2: 1 */ class Solution { public List\u0026lt;Integer\u0026gt; getAllElements2(TreeNode root1, TreeNode root2) { List\u0026lt;Integer\u0026gt; res1 = new ArrayList(); List\u0026lt;Integer\u0026gt; res2 = new ArrayList(); dfs(root1, res1); dfs(root2, res2); int i = 0; int j = 0; List\u0026lt;Integer\u0026gt; res = new ArrayList(); while (i \u0026lt; res1.size() \u0026amp;\u0026amp; j \u0026lt; res2.size()) { if (res1.get(i) \u0026lt; res2.get(j)) { res.add(res1.get(i)); i++; } else { res.add(res2.get(j)); j++; } } while (i \u0026lt; res1.size()) { res.add(res1.get(i)); i++; } while (j \u0026lt; res2.size()) { res.add(res2.get(j)); j++; } return res; } void dfs(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) { return; } dfs(node.left, res); res.add(node.val); dfs(node.right, res); } } Solution Stack 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ /* 2 1 4 1 0 3 s1: 2 s2: 1 */ class Solution { public List\u0026lt;Integer\u0026gt; getAllElements(TreeNode root1, TreeNode root2) { Stack\u0026lt;TreeNode\u0026gt; s1 = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;TreeNode\u0026gt; s2 = new Stack\u0026lt;\u0026gt;(); pushLeft(s1, root1); pushLeft(s2, root2); List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (s1.size() \u0026gt; 0 || s2.size() \u0026gt; 0) { Stack\u0026lt;TreeNode\u0026gt; s = null; if (s1.size() \u0026gt; 0 \u0026amp;\u0026amp; s2.size() \u0026gt; 0) { if (s1.peek().val \u0026lt; s2.peek().val) { s = s1; } else { s = s2; } } else if (s1.size() \u0026gt; 0) { s = s1; } else { s = s2; } TreeNode node = s.pop(); res.add(node.val); pushLeft(s, node.right); } return res; } void pushLeft(Stack\u0026lt;TreeNode\u0026gt; stack, TreeNode node) { while (node != null) { stack.push(node); node = node.left; } } } ","permalink":"https://volyx.in/posts/2021-10-28-all-elements-in-two-binary-search-trees/","summary":"\u003cp\u003e\u003cimg alt=\"1305. All Elements in Two Binary Search Trees\" loading=\"lazy\" src=\"https://leetcode.com/problems/all-elements-in-two-binary-search-trees/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two binary search trees root1 and root2.\u003c/p\u003e\n\u003cp\u003eReturn a list containing all the integers from both trees sorted in ascending order.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-10-28-bst-all-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root1 = [2,1,4], root2 = [1,0,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root1 = [0,-10,10], root2 = [5,1,7,0,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [-10,0,0,1,2,5,7,10]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root1 = [], root2 = [5,1,7,0,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,2,5,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root1 = [0,-10,10], root2 = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [-10,0,10]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root1 = [1,null,8], root2 = [8,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,1,8,8]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-10-28-bst-all-ex2.png\"\u003e\u003c/p\u003e","title":"1305. All Elements in Two Binary Search Trees"},{"content":"\nImplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST. boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false. int next() Moves the pointer to the right, then returns the number at the pointer. Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input [\u0026#34;BSTIterator\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;hasNext\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;hasNext\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;hasNext\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;hasNext\u0026#34;] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] Output [null, 3, 7, true, 9, true, 15, true, 20, false] Explanation BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); bSTIterator.next(); // return 3 bSTIterator.next(); // return 7 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 9 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 15 bSTIterator.hasNext(); // return True bSTIterator.next(); // return 20 bSTIterator.hasNext(); // return False Constraints:\nThe number of nodes in the tree is in the range [1, 105]. 0 \u0026lt;= Node.val \u0026lt;= 106 At most 105 calls will be made to hasNext, and next. Follow up:\nCould you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree? Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class BSTIterator { Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); public BSTIterator(TreeNode root) { pushLeft(root); } public int next() { TreeNode node = stack.pop(); pushLeft(node.right); return node.val; } public boolean hasNext() { return stack.size() \u0026gt; 0; } public void pushLeft(TreeNode node) { while (node != null) { stack.push(node); node = node.left; } } } /** * Your BSTIterator object will be instantiated and called as such: * BSTIterator obj = new BSTIterator(root); * int param_1 = obj.next(); * boolean param_2 = obj.hasNext(); */ ","permalink":"https://volyx.in/posts/2021-10-28-binary-search-tree-iterator/","summary":"\u003cp\u003e\u003cimg alt=\"173. Binary Search Tree Iterator\" loading=\"lazy\" src=\"https://leetcode.com/problems/binary-search-tree-iterator/\"\u003e\u003c/p\u003e\n\u003cp\u003eImplement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\u003c/li\u003e\n\u003cli\u003eboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\u003c/li\u003e\n\u003cli\u003eint next() Moves the pointer to the right, then returns the number at the pointer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\u003c/p\u003e","title":"173. Binary Search Tree Iterator"},{"content":"\nAn integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: nums = [1,2,3,4] Output: 3 Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself. Example 2: Input: nums = [1] Output: 0 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 5000 -1000 \u0026lt;= nums[i] \u0026lt;= 1000 Solution Brute Force 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int numberOfArithmeticSlices2(int[] nums) { if (nums.length \u0026lt; 3) { return 0; } int count = 0; for (int i = 0; i \u0026lt; nums.length - 2; i++) { int delta = nums[i] - nums[i+1] ; if (delta == nums[i + 1] - nums[i+2]) { count++; int j = i + 2; while (j + 1 \u0026lt; nums.length \u0026amp;\u0026amp; delta == nums[j] - nums[j+1]) { count++; j++; } } } return count; } } Solution DP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { /* 123456 123456 112345 123 1234 12345 123456 234 2345 23456 345 3456 456 */ public int numberOfArithmeticSlices(int[] nums) { int[] dp = new int[nums.length]; int sum = 0; for (int i = 2; i \u0026lt; nums.length; i++) { if (nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) { dp[i] = dp[i - 1] + 1; sum += dp[i]; } } return sum; } } ","permalink":"https://volyx.in/posts/2021-10-26-arithmetic-slices/","summary":"\u003cp\u003e\u003cimg alt=\"413. Arithmetic Slices\" loading=\"lazy\" src=\"https://leetcode.com/problems/arithmetic-slices/\"\u003e\u003c/p\u003e\n\u003cp\u003eAn integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\u003c/p\u003e\n\u003cp\u003eFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, return the number of arithmetic subarrays of nums.\u003c/p\u003e\n\u003cp\u003eA subarray is a contiguous subsequence of the array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"413. Arithmetic Slices"},{"content":"\nYou are controlling a robot that is located somewhere in a room. The room is modeled as an m x n binary grid where 0 represents a wall and 1 represents an empty slot.\nThe robot starts at an unknown location in the root that is guaranteed to be empty, and you do not have access to the grid, but you can move the robot using the given API Robot.\nYou are tasked to use the robot to clean the entire room (i.e., clean every empty cell in the room). The robot with the four given APIs can move forward, turn left, or turn right. Each turn is 90 degrees.\nWhen the robot tries to move into a wall cell, its bumper sensor detects the obstacle, and it stays on the current cell.\nDesign an algorithm to clean the entire room using the following APIs:\n1 2 3 4 5 6 7 8 9 10 11 12 13 interface Robot { // returns true if next cell is open and robot moves into the cell. // returns false if next cell is obstacle and robot stays on the current cell. boolean move(); // Robot will stay on the same cell after calling turnLeft/turnRight. // Each turn will be 90 degrees. void turnLeft(); void turnRight(); // Clean the current cell. void clean(); } Note that the initial direction of the robot will be facing up. You can assume all four edges of the grid are all surrounded by a wall.\nCustom testing:\nThe input is only given to initialize the room and the robot\u0026rsquo;s position internally. You must solve this problem \u0026ldquo;blindfolded\u0026rdquo;. In other words, you must control the robot using only the four mentioned APIs without knowing the room layout and the initial robot\u0026rsquo;s position.\n1 2 3 4 5 6 7 8 Example 1: Input: room = [[1,1,1,1,1,0,1,1],[1,1,1,1,1,0,1,1],[1,0,1,1,1,1,1,1],[0,0,0,1,0,0,0,0],[1,1,1,1,1,1,1,1]], row = 1, col = 3 Output: Robot cleaned all rooms. Explanation: All grids in the room are marked by either 0 or 1. 0 means the cell is blocked, while 1 means the cell is accessible. The robot initially starts at the position of row=1, col=3. From the top left corner, its position is one row below and three columns right. 1 2 3 4 Example 2: Input: room = [[1]], row = 0, col = 0 Output: Robot cleaned all rooms. Constraints:\nm == room.length n == room[i].length 1 \u0026lt;= m \u0026lt;= 100 1 \u0026lt;= n \u0026lt;= 200 room[i][j] is either 0 or 1. 0 \u0026lt;= row \u0026lt; m 0 \u0026lt;= col \u0026lt; n room[row][col] == 1 All the empty cells can be visited from the starting position. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 /** * // This is the robot\u0026#39;s control interface. * // You should not implement it, or speculate about its implementation * interface Robot { * // Returns true if the cell in front is open and robot moves into the cell. * // Returns false if the cell in front is blocked and robot stays in the current cell. * public boolean move(); * * // Robot will stay in the same cell after calling turnLeft/turnRight. * // Each turn will be 90 degrees. * public void turnLeft(); * public void turnRight(); * * // Clean the current cell. * public void clean(); * } */ /* 0000 0000 00^0 0000 ^\u0026gt;^\u0026gt; ^v^v ^v^v \u0026lt;\u0026lt;\u0026lt;v */ class Solution { Set\u0026lt;String\u0026gt; visited = new HashSet\u0026lt;\u0026gt;(); public void cleanRoom(Robot robot) { dfs(1, 0, 0, robot); } /* [ [1,1,1,1,1,0,1,1], [1,1,1,1,1,0,1,1], [1,0,1,1,1,1,1,1], [0,0,0,1,0,0,0,0], [1,1,1,1,1,1,1,1] ] 111 111 111 11 11 */ void dfs(int d, int i, int j, Robot robot) { String key = i + \u0026#34;.\u0026#34; + j; if (visited.contains(key)) { return; } // System.out.println(visited); visited.add(key); robot.clean(); for (int dir = 0; dir \u0026lt; 4; dir++) { if (robot.move()) { int newDir = (dir + d) % 4; int x = getNext(newDir, i, j)[0]; int y = getNext(newDir, i, j)[1]; dfs(newDir, x, y, robot); goBack(robot); } robot.turnRight(); } } public void goBack(Robot robot) { robot.turnRight(); robot.turnRight(); robot.move(); robot.turnRight(); robot.turnRight(); } int[] getNext(int dir, int x, int y) { if (dir == 0) { return new int[] {x + 1, y}; } else if (dir == 1) { return new int[] {x, y + 1}; } else if (dir == 2) { return new int[] {x - 1, y}; } else if (dir == 3) { return new int[] {x, y - 1}; } throw new IllegalStateException(); } } ","permalink":"https://volyx.in/posts/2021-10-26-robot-room-cleaner/","summary":"\u003cp\u003e\u003cimg alt=\"489. Robot Room Cleaner\" loading=\"lazy\" src=\"https://leetcode.com/problems/robot-room-cleaner/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are controlling a robot that is located somewhere in a room. The room is modeled as an m x n binary grid where 0 represents a wall and 1 represents an empty slot.\u003c/p\u003e\n\u003cp\u003eThe robot starts at an unknown location in the root that is guaranteed to be empty, and you do not have access to the grid, but you can move the robot using the given API Robot.\u003c/p\u003e","title":"489. Robot Room Cleaner"},{"content":"\nDesign a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key\u0026rsquo;s value at a certain timestamp.\nImplement the TimeMap class:\nTimeMap() Initializes the object of the data structure. void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp. String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev \u0026lt;= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \u0026ldquo;\u0026rdquo;. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input [\u0026#34;TimeMap\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;] [[], [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 3], [\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 5]] Output [null, null, \u0026#34;bar\u0026#34;, \u0026#34;bar\u0026#34;, null, \u0026#34;bar2\u0026#34;, \u0026#34;bar2\u0026#34;] Explanation TimeMap timeMap = new TimeMap(); timeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1); // store the key \u0026#34;foo\u0026#34; and value \u0026#34;bar\u0026#34; along with timestamp = 1. timeMap.get(\u0026#34;foo\u0026#34;, 1); // return \u0026#34;bar\u0026#34; timeMap.get(\u0026#34;foo\u0026#34;, 3); // return \u0026#34;bar\u0026#34;, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \u0026#34;bar\u0026#34;. timeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4); // store the key \u0026#34;foo\u0026#34; and value \u0026#34;ba2r\u0026#34; along with timestamp = 4. timeMap.get(\u0026#34;foo\u0026#34;, 4); // return \u0026#34;bar2\u0026#34; timeMap.get(\u0026#34;foo\u0026#34;, 5); // return \u0026#34;bar2\u0026#34; Constraints:\n1 \u0026lt;= key.length, value.length \u0026lt;= 100 key and value consist of lowercase English letters and digits. 1 \u0026lt;= timestamp \u0026lt;= 107 All the timestamps timestamp of set are strictly increasing. At most 2 * 105 calls will be made to set and get. Solution TreeMap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class TimeMap { Map\u0026lt;String, TreeMap\u0026lt;Integer, String\u0026gt;\u0026gt; timeMap = new HashMap(); public TimeMap() { } public void set(String key, String value, int timestamp) { TreeMap\u0026lt;Integer, String\u0026gt; keyMap = timeMap.get(key); if (keyMap == null) { keyMap = new TreeMap\u0026lt;\u0026gt;(); } keyMap.put(timestamp, value); timeMap.put(key, keyMap); } public String get(String key, int timestamp) { TreeMap\u0026lt;Integer, String\u0026gt; keyMap = timeMap.get(key); if (keyMap == null) { return \u0026#34;\u0026#34;; } var entry = keyMap.floorEntry(timestamp); if (entry == null) { return \u0026#34;\u0026#34;; } return entry.getValue(); } } /** * Your TimeMap object will be instantiated and called as such: * TimeMap obj = new TimeMap(); * obj.set(key,value,timestamp); * String param_2 = obj.get(key,timestamp); */ Solution Binary Search 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class TimeMap { Map\u0026lt;String, List\u0026lt;Pair\u0026lt;Integer, String\u0026gt;\u0026gt;\u0026gt; timeMap = new HashMap(); public TimeMap() { } public void set(String key, String value, int timestamp) { List\u0026lt;Pair\u0026lt;Integer, String\u0026gt;\u0026gt; keyList = timeMap.get(key); if (keyList == null) { keyList = new ArrayList\u0026lt;\u0026gt;(); } keyList.add(new Pair\u0026lt;\u0026gt;(timestamp, value)); timeMap.put(key, keyList); } public String get(String key, int timestamp) { List\u0026lt;Pair\u0026lt;Integer, String\u0026gt;\u0026gt; keyList = timeMap.get(key); if (keyList == null) { return \u0026#34;\u0026#34;; } int find = binarySearch(keyList, timestamp); if (find == -1) { return \u0026#34;\u0026#34;; } Pair\u0026lt;Integer, String\u0026gt; pair = keyList.get(find); return pair.getValue(); } int binarySearch(List\u0026lt;Pair\u0026lt;Integer, String\u0026gt;\u0026gt; list, int timestamp) { if (list.size() == 0) { return -1; } int lo = 0; int hi = list.size() - 1; // lo......mid...t....hi while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; long val = list.get(mid).getKey(); if (val == timestamp) { return mid; } else if (val \u0026gt; timestamp) { hi = mid; } else { lo = mid + 1; } } if (lo == 0 \u0026amp;\u0026amp; timestamp \u0026lt; list.get(0).getKey()) { return -1; } if (lo \u0026gt; 0) { int delta0 = Math.abs(timestamp - list.get(lo - 1).getKey()); int delta1 = Math.abs(timestamp - list.get(lo).getKey()); if (delta0 \u0026lt;= delta1) { return lo - 1; } } return lo; } } /** * Your TimeMap object will be instantiated and called as such: * TimeMap obj = new TimeMap(); * obj.set(key,value,timestamp); * String param_2 = obj.get(key,timestamp); */ ","permalink":"https://volyx.in/posts/2021-10-21-time-based-key-value-store/","summary":"\u003cp\u003e\u003cimg alt=\"981. Time Based Key-Value Store\" loading=\"lazy\" src=\"https://leetcode.com/problems/time-based-key-value-store/\"\u003e\u003c/p\u003e\n\u003cp\u003eDesign a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key\u0026rsquo;s value at a certain timestamp.\u003c/p\u003e\n\u003cp\u003eImplement the TimeMap class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eTimeMap() Initializes the object of the data structure.\u003c/li\u003e\n\u003cli\u003evoid set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.\u003c/li\u003e\n\u003cli\u003eString get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev \u0026lt;= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \u0026ldquo;\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;TimeMap\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;set\u0026#34;, \u0026#34;get\u0026#34;, \u0026#34;get\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[], [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 1], [\u0026#34;foo\u0026#34;, 3], [\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 4], [\u0026#34;foo\u0026#34;, 5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, null, \u0026#34;bar\u0026#34;, \u0026#34;bar\u0026#34;, null, \u0026#34;bar2\u0026#34;, \u0026#34;bar2\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTimeMap timeMap = new TimeMap();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, 1);  // store the key \u0026#34;foo\u0026#34; and value \u0026#34;bar\u0026#34; along with timestamp = 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeMap.get(\u0026#34;foo\u0026#34;, 1);         // return \u0026#34;bar\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeMap.get(\u0026#34;foo\u0026#34;, 3);         // return \u0026#34;bar\u0026#34;, since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \u0026#34;bar\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeMap.set(\u0026#34;foo\u0026#34;, \u0026#34;bar2\u0026#34;, 4); // store the key \u0026#34;foo\u0026#34; and value \u0026#34;ba2r\u0026#34; along with timestamp = 4.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeMap.get(\u0026#34;foo\u0026#34;, 4);         // return \u0026#34;bar2\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etimeMap.get(\u0026#34;foo\u0026#34;, 5);         // return \u0026#34;bar2\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"981. Time Based Key-Value Store"},{"content":"\nYou are given an array prices where prices[i] is the price of a given stock on the ith day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n1 2 3 4 5 6 Example 1: Input: prices = [7,1,5,3,6,4] Output: 5 Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. 1 2 3 4 5 Example 2: Input: prices = [7,6,4,3,1] Output: 0 Explanation: In this case, no transactions are done and the max profit = 0. Constraints:\n1 \u0026lt;= prices.length \u0026lt;= 10^5 0 \u0026lt;= prices[i] \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int maxProfit(int[] prices) { int minPrice = Integer.MAX_VALUE; int maxProfit = 0; for (int price: prices) { if (price \u0026lt; minPrice) { minPrice = price; } else if (price - minPrice \u0026gt; maxProfit) { maxProfit = price - minPrice; } } return maxProfit; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int maxProfit(int[] prices) { int min = prices[0]; int profit = 0; for (int i = 0; i \u0026lt; prices.length; i++) { if (prices[i] \u0026lt; min) { min = prices[i]; } else if (prices[i] - min \u0026gt; profit) { profit = prices[i] - min; } } return profit; } } ","permalink":"https://volyx.in/posts/2021-10-20-best-time-to-buy-and-sell-stock/","summary":"\u003cp\u003e\u003cimg alt=\"121. Best Time to Buy and Sell Stock\" loading=\"lazy\" src=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array prices where prices[i] is the price of a given stock on the ith day.\u003c/p\u003e\n\u003cp\u003eYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\u003c/p\u003e\n\u003cp\u003eReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\u003c/p\u003e","title":"121. Best Time to Buy and Sell Stock"},{"content":"\nYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are: [ 1-\u0026gt;4-\u0026gt;5, 1-\u0026gt;3-\u0026gt;4, 2-\u0026gt;6 ] merging them into one sorted list: 1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6 1 2 3 4 Example 2: Input: lists = [] Output: [] 1 2 3 4 Example 3: Input: lists = [[]] Output: [] Constraints:\nk == lists.length 0 \u0026lt;= k \u0026lt;= 10^4 0 \u0026lt;= lists[i].length \u0026lt;= 500 -10^4 \u0026lt;= lists[i][j] \u0026lt;= 10^4 lists[i] is sorted in ascending order. The sum of lists[i].length won\u0026rsquo;t exceed 10^4. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode mergeKLists(ListNode[] lists) { PriorityQueue\u0026lt;ListNode\u0026gt; heap = new PriorityQueue\u0026lt;\u0026gt;((a,b) -\u0026gt; { return a.val - b.val; }); ListNode head = new ListNode(); ListNode curr = head; for (ListNode node: lists) { if (node != null) { heap.add(node); } } while (heap.size() \u0026gt; 0) { ListNode node = heap.poll(); curr.next = new ListNode(node.val); curr = curr.next; if (node.next != null) { heap.add(node.next); } } return head.next; } } ","permalink":"https://volyx.in/posts/2021-10-19-merge-k-sorted-lists/","summary":"\u003cp\u003e\u003cimg alt=\"23. Merge k Sorted Lists\" loading=\"lazy\" src=\"https://leetcode.com/problems/merge-k-sorted-lists/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\u003c/p\u003e\n\u003cp\u003eMerge all the linked-lists into one sorted linked-list and return it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: lists = [[1,4,5],[1,3,4],[2,6]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,1,2,3,4,4,5,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The linked-lists are:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  1-\u0026gt;4-\u0026gt;5,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  1-\u0026gt;3-\u0026gt;4,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  2-\u0026gt;6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emerging them into one sorted list:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: lists = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: lists = [[]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"23. Merge k Sorted Lists"},{"content":"\nFor a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.\n1 2 3 4 5 6 Example 1: Flipped Trees Diagram Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7] Output: true Explanation: We flipped at nodes with values 1, 3, and 5. 1 2 3 4 Example 2: Input: root1 = [], root2 = [] Output: true 1 2 3 4 Example 3: Input: root1 = [], root2 = [1] Output: false 1 2 3 4 Example 4: Input: root1 = [0,null,1], root2 = [] Output: false 1 2 3 4 Example 5: Input: root1 = [0,null,1], root2 = [0,1] Output: true Constraints:\nThe number of nodes in each tree is in the range [0, 100]. Each tree will have unique node values in the range [0, 99]. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean flipEquiv(TreeNode root1, TreeNode root2) { if (root1 == null \u0026amp;\u0026amp; root2 == null) { return true; } if (root1 == null || root2 == null || root1.val != root2.val) { return false; } return (flipEquiv(root1.left, root2.right) \u0026amp;\u0026amp; flipEquiv(root1.right, root2.left)) || (flipEquiv(root1.left, root2.left) \u0026amp;\u0026amp; flipEquiv(root1.right, root2.right)); } } ","permalink":"https://volyx.in/posts/2021-10-19-flip-equivalent-binary-trees/","summary":"\u003cp\u003e\u003cimg alt=\"951. Flip Equivalent Binary Trees\" loading=\"lazy\" src=\"https://leetcode.com/problems/flip-equivalent-binary-trees/\"\u003e\u003c/p\u003e\n\u003cp\u003eFor a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\u003c/p\u003e\n\u003cp\u003eA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\u003c/p\u003e\n\u003cp\u003eGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.\u003c/p\u003e","title":"951. Flip Equivalent Binary Trees"},{"content":"\nGiven the root of a binary tree, return the lowest common ancestor of its deepest leaves.\nRecall that:\nThe node of a binary tree is a leaf if and only if it has no children The depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1. The lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A. 1 2 3 4 5 6 7 Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4] Output: [2,7,4] Explanation: We return the node with value 2, colored in yellow in the diagram. The nodes coloured in blue are the deepest leaf-nodes of the tree. Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3. 1 2 3 4 5 Example 2: Input: root = [1] Output: [1] Explanation: The root is the deepest node in the tree, and it\u0026#39;s the lca of itself. 1 2 3 4 5 Example 3: Input: root = [0,1,3,null,2] Output: [2] Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself. Constraints:\nThe number of nodes in the tree will be in the range [1, 1000]. 0 \u0026lt;= Node.val \u0026lt;= 1000 The values of the nodes in the tree are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int max = 0; TreeNode lca = null; public TreeNode lcaDeepestLeaves(TreeNode root) { deepest(root, 0); return lca; } int deepest(TreeNode node, int level) { if (node == null) return 0; if (level \u0026gt; max) { max = level; lca = node; } int leftMax = deepest(node.left, level + 1); int rightMax = deepest(node.right, level + 1); if (leftMax == max \u0026amp;\u0026amp; rightMax == max) { lca = node; } return Math.max(level, Math.max(leftMax, rightMax)); } } ","permalink":"https://volyx.in/posts/2021-10-17-lowest-common-ancestor-of-deepest-leaves/","summary":"\u003cp\u003e\u003cimg alt=\"1123. Lowest Common Ancestor of Deepest Leaves\" loading=\"lazy\" src=\"https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the lowest common ancestor of its deepest leaves.\u003c/p\u003e\n\u003cp\u003eRecall that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe node of a binary tree is a leaf if and only if it has no children\u003c/li\u003e\n\u003cli\u003eThe depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.\u003c/li\u003e\n\u003cli\u003eThe lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,5,1,6,2,0,8,null,null,7,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,7,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: We return the node with value 2, colored in yellow in the diagram.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe nodes coloured in blue are the deepest leaf-nodes of the tree.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-10-17-tree-leafs-ex1.png\"\u003e\u003c/p\u003e","title":"1123. Lowest Common Ancestor of Deepest Leaves"},{"content":"\nWe have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.\nWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn\u0026rsquo;t take any additional time.\nWhen an ant reaches one end of the plank at a time t, it falls out of the plank imediately.\nGiven an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: n = 4, left = [4,3], right = [0,1] Output: 4 Explanation: In the image above: -The ant at index 0 is named A and going to the right. -The ant at index 1 is named B and going to the right. -The ant at index 3 is named C and going to the left. -The ant at index 4 is named D and going to the left. Note that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i.e. We can say that at t = 4.0000000001, there is no ants on the plank). 1 2 3 4 5 Example 2: Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7] Output: 7 Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall. 1 2 3 4 5 Example 3: Input: n = 7, left = [0,1,2,3,4,5,6,7], right = [] Output: 7 Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall. 1 2 3 4 5 Example 4: Input: n = 9, left = [5], right = [4] Output: 5 Explanation: At t = 1 second, both ants will be at the same intial position but with different direction. 1 2 3 4 Example 5: Input: n = 6, left = [6], right = [0] Output: 6 Constraints:\n1 \u0026lt;= n \u0026lt;= 10^4 0 \u0026lt;= left.length \u0026lt;= n + 1 0 \u0026lt;= left[i] \u0026lt;= n 0 \u0026lt;= right.length \u0026lt;= n + 1 0 \u0026lt;= right[i] \u0026lt;= n 1 \u0026lt;= left.length + right.length \u0026lt;= n + 1 All values of left and right are unique, and each value can appear only in one of the two arrays. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public int getLastMoment(int n, int[] left, int[] right) { if (right.length == 0 \u0026amp;\u0026amp; left.length == 0) return 0; if (right.length == 0) { return max(left); } if (left.length == 0) { return n - min(right); } return Math.max(n - min(right), max(left)); } int min(int[] arr) { int min = Integer.MAX_VALUE; for (int a: arr) { min = Math.min(a, min); } return min; } int max(int[] arr) { int max = Integer.MIN_VALUE; for (int a: arr) { max = Math.max(a, max); } return max; } } ","permalink":"https://volyx.in/posts/2021-10-17-last-moment-before-all-ants-fall-out-of-a-plank/","summary":"\u003cp\u003e\u003cimg alt=\"1503. Last Moment Before All Ants Fall Out of a Plank\" loading=\"lazy\" src=\"https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank/\"\u003e\u003c/p\u003e\n\u003cp\u003eWe have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.\u003c/p\u003e\n\u003cp\u003eWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn\u0026rsquo;t take any additional time.\u003c/p\u003e","title":"1503. Last Moment Before All Ants Fall Out of a Plank"},{"content":"\nGiven an array nums and an integer target.\nReturn the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Example 1: Input: nums = [1,1,1,1,1], target = 2 Output: 2 Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2). Example 2: Input: nums = [-1,3,5,1,4,2,-9], target = 6 Output: 2 Explanation: There are 3 subarrays with sum equal to 6. ([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping. Example 3: Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10 Output: 3 Example 4: Input: nums = [0,0,0], target = 0 Output: 3 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^5 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 0 \u0026lt;= target \u0026lt;= 10^6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int maxNonOverlapping(int[] nums, int target) { Map\u0026lt;Integer, Integer\u0026gt; prefixMap = new HashMap\u0026lt;\u0026gt;(); int count = 0; int sum = 0; int lastIndex = -1; prefixMap.put(0, -1); for (int i = 0; i \u0026lt; nums.length; i++) { sum+= nums[i]; int remain = sum - target; if (prefixMap.containsKey(remain)) { int start = prefixMap.get(remain); if (start \u0026gt;= lastIndex) { count++; lastIndex = i; } } prefixMap.put(sum, i); } return count; } } ","permalink":"https://volyx.in/posts/2021-10-16-maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/","summary":"\u003cp\u003e\u003cimg alt=\"1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target\" loading=\"lazy\" src=\"maximum-number-of-non-overlapping-subarrays-with-sum-equals-target\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array nums and an integer target.\u003c/p\u003e\n\u003cp\u003eReturn the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,1,1,1], target = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,3,5,1,4,2,-9], target = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are 3 subarrays with sum equal to 6.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-2,6,6,3,5,4,1,2,8], target = 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,0,0], target = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target"},{"content":"\nWe can represent a sentence as an array of words, for example, the sentence \u0026ldquo;I am happy with leetcode\u0026rdquo; can be represented as arr = [\u0026ldquo;I\u0026rdquo;,\u0026ldquo;am\u0026rdquo;,happy\u0026quot;,\u0026ldquo;with\u0026rdquo;,\u0026ldquo;leetcode\u0026rdquo;].\nGiven two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.\nReturn true if sentence1 and sentence2 are similar, or false if they are not similar.\nTwo sentences are similar if:\nThey have the same length (i.e., the same number of words) sentence1[i] and sentence2[i] are similar. Notice that a word is always similar to itself, also notice that the similarity relation is transitive. For example, if the words a and b are similar, and the words b and c are similar, then a and c are similar.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input: sentence1 = [\u0026#34;great\u0026#34;,\u0026#34;acting\u0026#34;,\u0026#34;skills\u0026#34;], sentence2 = [\u0026#34;fine\u0026#34;,\u0026#34;drama\u0026#34;,\u0026#34;talent\u0026#34;], similarPairs = [[\u0026#34;great\u0026#34;,\u0026#34;good\u0026#34;],[\u0026#34;fine\u0026#34;,\u0026#34;good\u0026#34;],[\u0026#34;drama\u0026#34;,\u0026#34;acting\u0026#34;],[\u0026#34;skills\u0026#34;,\u0026#34;talent\u0026#34;]] Output: true Explanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2. Example 2: Input: sentence1 = [\u0026#34;I\u0026#34;,\u0026#34;love\u0026#34;,\u0026#34;leetcode\u0026#34;], sentence2 = [\u0026#34;I\u0026#34;,\u0026#34;love\u0026#34;,\u0026#34;onepiece\u0026#34;], similarPairs = [[\u0026#34;manga\u0026#34;,\u0026#34;onepiece\u0026#34;],[\u0026#34;platform\u0026#34;,\u0026#34;anime\u0026#34;],[\u0026#34;leetcode\u0026#34;,\u0026#34;platform\u0026#34;],[\u0026#34;anime\u0026#34;,\u0026#34;manga\u0026#34;]] Output: true Explanation: \u0026#34;leetcode\u0026#34; --\u0026gt; \u0026#34;platform\u0026#34; --\u0026gt; \u0026#34;anime\u0026#34; --\u0026gt; \u0026#34;manga\u0026#34; --\u0026gt; \u0026#34;onepiece\u0026#34;. Since \u0026#34;leetcode is similar to \u0026#34;onepiece\u0026#34; and the first two words are the same, the two sentences are similar. Example 3: Input: sentence1 = [\u0026#34;I\u0026#34;,\u0026#34;love\u0026#34;,\u0026#34;leetcode\u0026#34;], sentence2 = [\u0026#34;I\u0026#34;,\u0026#34;love\u0026#34;,\u0026#34;onepiece\u0026#34;], similarPairs = [[\u0026#34;manga\u0026#34;,\u0026#34;hunterXhunter\u0026#34;],[\u0026#34;platform\u0026#34;,\u0026#34;anime\u0026#34;],[\u0026#34;leetcode\u0026#34;,\u0026#34;platform\u0026#34;],[\u0026#34;anime\u0026#34;,\u0026#34;manga\u0026#34;]] Output: false Explanation: \u0026#34;leetcode\u0026#34; is not similar to \u0026#34;onepiece\u0026#34;. Constraints:\n1 \u0026lt;= sentence1.length, sentence2.length \u0026lt;= 1000 1 \u0026lt;= sentence1[i].length, sentence2[i].length \u0026lt;= 20 sentence1[i] and sentence2[i] consist of lower-case and upper-case English letters. 0 \u0026lt;= similarPairs.length \u0026lt;= 2000 similarPairs[i].length == 2 1 \u0026lt;= xi.length, yi.length \u0026lt;= 20 xi and yi consist of English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class Solution { int n = 0; int[] uf = new int[10_000]; int[] sizes = new int[10_000]; Map\u0026lt;String, Integer\u0026gt; indexes = new HashMap\u0026lt;\u0026gt;(); public boolean areSentencesSimilarTwo(String[] sen1, String[] sen2, List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; similarPairs) { if (sen1.length != sen2.length) return false; for (List\u0026lt;String\u0026gt; pair: similarPairs) { add(pair.get(0), pair.get(1)); } for (int i = 0; i \u0026lt; sen1.length; i++) { var word1 = sen1[i]; var word2 = sen2[i]; if (word1.equals(word2)) { continue; } if (!contains(word1)) { return false; } if (!contains(word2)) { return false; } if (!isConnected(word1, word2)) { return false; } } return true; } void add(String w1, String w2) { if (!indexes.containsKey(w1)) { indexes.put(w1, n); uf[n] = n; sizes[n] = 1; n++; } if (!indexes.containsKey(w2)) { indexes.put(w2, n); uf[n] = n; sizes[n] = 1; n++; } int pid = parent(indexes.get(w1)); int qid = parent(indexes.get(w2)); if (sizes[pid] \u0026gt; sizes[qid]) { uf[qid] = pid; sizes[pid] += sizes[qid]; } else { uf[pid] = qid; sizes[qid] += sizes[pid]; } } boolean contains(String word) { return indexes.containsKey(word); } boolean isConnected(String w1, String w2) { return parent(indexes.get(w1)) == parent(indexes.get(w2)); } int parent(int pid) { while (pid != uf[pid]) { pid = uf[pid]; } return pid; } } ","permalink":"https://volyx.in/posts/2021-10-15-sentence-similarity-ii/","summary":"\u003cp\u003e\u003cimg alt=\"737. Sentence Similarity II\" loading=\"lazy\" src=\"https://leetcode.com/problems/sentence-similarity-ii/\"\u003e\u003c/p\u003e\n\u003cp\u003eWe can represent a sentence as an array of words, for example, the sentence \u0026ldquo;I am happy with leetcode\u0026rdquo; can be represented as arr = [\u0026ldquo;I\u0026rdquo;,\u0026ldquo;am\u0026rdquo;,happy\u0026quot;,\u0026ldquo;with\u0026rdquo;,\u0026ldquo;leetcode\u0026rdquo;].\u003c/p\u003e\n\u003cp\u003eGiven two sentences sentence1 and sentence2 each represented as a string array and given an array of string pairs similarPairs where similarPairs[i] = [xi, yi] indicates that the two words xi and yi are similar.\u003c/p\u003e\n\u003cp\u003eReturn true if sentence1 and sentence2 are similar, or false if they are not similar.\u003c/p\u003e","title":"737. Sentence Similarity II"},{"content":"\nGiven an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nRecall that a subsequence of an array nums is a list nums[i1], nums[i2], \u0026hellip;, nums[ik] with 0 \u0026lt;= i1 \u0026lt; i2 \u0026lt; \u0026hellip; \u0026lt; ik \u0026lt;= nums.length - 1, and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 \u0026lt;= i \u0026lt; seq.length - 1).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: nums = [3,6,9,12] Output: 4 Explanation: The whole array is an arithmetic sequence with steps of length = 3. Example 2: Input: nums = [9,4,7,2,10] Output: 3 Explanation: The longest arithmetic subsequence is [4,7,10]. Example 3: Input: nums = [20,1,15,3,10,5,8] Output: 4 Explanation: The longest arithmetic subsequence is [20,15,10,5]. Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 1000 0 \u0026lt;= nums[i] \u0026lt;= 500 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Solution { /* 12 - 9 12 - 6 12 - 3 9 - 6 9 - 3 6 - 3 0: 9 - 1 3 - 4 1: 6 - 3 3 - 3 2: 3 - 2 6 - 2 3: 3 - 1 6 - 1 9 - 1 */ public int longestArithSeqLength(int[] nums) { Map\u0026lt;Integer, Integer\u0026gt;[] maps = new HashMap[nums.length]; for (int i = 0; i \u0026lt; nums.length; i++) { maps[i] = new HashMap\u0026lt;Integer, Integer\u0026gt;(); } int max = 0; for (int j = nums.length - 1; j \u0026gt;= 0; j--) { for (int i = j - 1; i \u0026gt;= 0; i--) { int diff = nums[j] - nums[i]; maps[i].put(diff, maps[j].getOrDefault(diff, 1) + 1); max = Math.max(max, maps[i].get(diff)); } } return max; } } ","permalink":"https://volyx.in/posts/2021-10-12-longest-arithmetic-subsequence/","summary":"\u003cp\u003e\u003cimg alt=\"1027. Longest Arithmetic Subsequence\" loading=\"lazy\" src=\"https://leetcode.com/problems/longest-arithmetic-subsequence/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array nums of integers, return the length of the longest arithmetic subsequence in nums.\u003c/p\u003e\n\u003cp\u003eRecall that a subsequence of an array nums is a list nums[i1], nums[i2], \u0026hellip;, nums[ik] with 0 \u0026lt;= i1 \u0026lt; i2 \u0026lt; \u0026hellip; \u0026lt; ik \u0026lt;= nums.length - 1, and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 \u0026lt;= i \u0026lt; seq.length - 1).\u003c/p\u003e","title":"1027. Longest Arithmetic Subsequence"},{"content":"\nGiven the root of a binary tree, determine if it is a complete binary tree.\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\n1 2 3 4 5 Example 1: Input: root = [1,2,3,4,5,6] Output: true Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible. 1 2 3 4 5 Example 2: Input: root = [1,2,3,4,5,null,7] Output: false Explanation: The node with value 7 isn\u0026#39;t as far left as possible. Constraints:\nThe number of nodes in the tree is in the range [1, 100]. 1 \u0026lt;= Node.val \u0026lt;= 1000 Solution BFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int depth = 0; public boolean isCompleteTree(TreeNode root) { depth(root, 0); Queue\u0026lt;TreeNode\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); q.add(root); int level = 0; // System.out.println(\u0026#34;depth = \u0026#34; + depth); while (q.size() \u0026gt; 0) { int size = q.size(); boolean seenNull = false; for (int i = 0; i \u0026lt; size; i++) { TreeNode node = q.poll(); if (level != depth \u0026amp;\u0026amp; node == null) { return false; } if (level == depth) { if (node == null) { seenNull = true; } else { if (seenNull) return false; } } if (node == null) continue; q.add(node.left); q.add(node.right); } if (level == depth) { return true; } level++; } return true; } void depth(TreeNode node, int level) { if (node == null) return; depth = Math.max(depth, level); depth(node.left, level + 1); depth(node.right, level + 1); } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isCompleteTree(TreeNode root) { Queue\u0026lt;TreeNode\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); q.add(root); while (q.peek() != null) { TreeNode node = q.poll(); q.add(node.left); q.add(node.right); } while (q.size() \u0026gt; 0 \u0026amp;\u0026amp; q.peek() == null) { q.poll(); } return q.size() == 0; } } ","permalink":"https://volyx.in/posts/2021-10-12-check-completeness-of-a-binary-tree/","summary":"\u003cp\u003e\u003cimg alt=\"958. Check Completeness of a Binary Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/check-completeness-of-a-binary-tree/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, determine if it is a complete binary tree.\u003c/p\u003e\n\u003cp\u003eIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,3,4,5,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-10-12-complete-tree-ex1.png\"\u003e\u003c/p\u003e","title":"261. Graph Valid Tree"},{"content":"\nA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node\u0026rsquo;s values in the path.\nGiven the root of a binary tree, return the maximum path sum of any path.\n1 2 3 4 5 Example 1: Input: root = [1,2,3] Output: 6 Explanation: The optimal path is 2 -\u0026gt; 1 -\u0026gt; 3 with a path sum of 2 + 1 + 3 = 6. 1 2 3 4 5 Example 2: Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The optimal path is 15 -\u0026gt; 20 -\u0026gt; 7 with a path sum of 15 + 20 + 7 = 42. Constraints:\nThe number of nodes in the tree is in the range [1, 3 * 104]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int maxSum = 0; public int maxPathSum(TreeNode root) { maxSum = root.val; dfs(root); return maxSum; } int dfs(TreeNode node) { if (node == null) return 0; int leftSum = Math.max(dfs(node.left), 0); // int leftSum = dfs(node.left); int rightSum = Math.max(dfs(node.right), 0); // int rightSum = dfs(node.right); int currSum = leftSum + node.val + rightSum; maxSum = Math.max(currSum, maxSum); return node.val + Math.max(leftSum, rightSum); } } Solution 2021-11-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { int max; public int maxPathSum(TreeNode root) { if (root == null) return 0; max = root.val; maxSum(root); return max; } int maxSum(TreeNode node) { if (node == null) return 0; int leftSum = Math.max(maxSum(node.left), 0); // either take left or not int rightSum = Math.max(maxSum(node.right), 0); // either take right or not int currMax = leftSum + rightSum + node.val; max = Math.max(max, currMax); return node.val + Math.max(leftSum, rightSum); } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int maxSum = 0; public int maxPathSum(TreeNode root) { maxSum = root.val; dfs(root); return maxSum; } int dfs(TreeNode node) { if (node == null) return 0; int left = Math.max(dfs(node.left), 0); int right = Math.max(dfs(node.right), 0); int currSum = node.val + left + right; maxSum = Math.max(maxSum, currSum); return node.val + Math.max(left, right); } } ","permalink":"https://volyx.in/posts/2021-10-09-binary-tree-maximum-path-sum/","summary":"\u003cp\u003e\u003cimg alt=\"124. Binary Tree Maximum Path Sum\" loading=\"lazy\" src=\"https://leetcode.com/problems/binary-tree-maximum-path-sum/\"\u003e\u003c/p\u003e\n\u003cp\u003eA path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\u003c/p\u003e\n\u003cp\u003eThe path sum of a path is the sum of the node\u0026rsquo;s values in the path.\u003c/p\u003e","title":"124. Binary Tree Maximum Path Sum"},{"content":"\nYou have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.\nReturn true if the edges of the given graph make up a valid tree, and false otherwise.\n1 2 3 4 Example 1: Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]] Output: true 1 2 3 4 Example 2: Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]] Output: false Constraints:\n1 \u0026lt;= 2000 \u0026lt;= n 0 \u0026lt;= edges.length \u0026lt;= 5000 edges[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; n ai != bi There are no self-loops or repeated edges. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Solution { public boolean validTree(int n, int[][] edges) { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; graph = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { graph.put(i, new ArrayList\u0026lt;\u0026gt;()); } for (int[] edge: edges) { int source = edge[0]; int target = edge[1]; graph.get(source).add(target); graph.get(target).add(source); } // [ {1: 2,3,4}, {2: {5,6}}] boolean[] visited = new boolean[n]; boolean hasCycles = dfs(0, -1, graph, visited); if (hasCycles) { return false; } for (boolean hasVisit: visited) { if (!hasVisit) { return false; } } return true; } boolean dfs(int start, int prev, Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; graph, boolean[] visited) { // already visited, has cycle if (visited[start]) { return true; } visited[start] = true; for (Integer node: graph.get(start)) { if (node == prev) continue; boolean hasCycle = dfs(node, start, graph, visited); if (hasCycle) { return true; } } return false; } } ","permalink":"https://volyx.in/posts/2021-10-09-graph-valid-tree/","summary":"\u003cp\u003e\u003cimg alt=\"261. Graph Valid Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/graph-valid-tree/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou have a graph of n nodes labeled from 0 to n - 1. You are given an integer n and a list of edges where edges[i] = [ai, bi] indicates that there is an undirected edge between nodes ai and bi in the graph.\u003c/p\u003e\n\u003cp\u003eReturn true if the edges of the given graph make up a valid tree, and false otherwise.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-10-09-valid-tree-ex1.jpg\"\u003e\u003c/p\u003e","title":"261. Graph Valid Tree"},{"content":"\nGiven two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: num1 = \u0026#34;11\u0026#34;, num2 = \u0026#34;123\u0026#34; Output: \u0026#34;134\u0026#34; Example 2: Input: num1 = \u0026#34;456\u0026#34;, num2 = \u0026#34;77\u0026#34; Output: \u0026#34;533\u0026#34; Example 3: Input: num1 = \u0026#34;0\u0026#34;, num2 = \u0026#34;0\u0026#34; Output: \u0026#34;0\u0026#34; Constraints:\n1 \u0026lt;= num1.length, num2.length \u0026lt;= 104 num1 and num2 consist of only digits. num1 and num2 don\u0026rsquo;t have any leading zeros except for the zero itself. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public String addStrings(String num1, String num2) { int carry = 0; int idx1 = num1.length() - 1; int idx2 = num2.length() - 1; StringBuilder sb = new StringBuilder(); while (idx1 \u0026gt;= 0 || idx2 \u0026gt;= 0) { int digit1 = (idx1 \u0026gt;= 0) ? num1.charAt(idx1) - \u0026#39;0\u0026#39;: 0; // 0 1 int digit2 = (idx2 \u0026gt;= 0) ? num2.charAt(idx2) - \u0026#39;0\u0026#39;: 0; // 1 2 // 4 = 1 + 3 // 3 = 1 + 2 int value = digit1 + digit2 + carry; carry = value / 10; value = value % 10; sb.append(value); idx1--; idx2--; } if (carry == 1) { sb.append(1); } return sb.reverse().toString(); } } Solution 2021-10-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public String addStrings(String num1, String num2) { int carry = 0; int len1 = num1.length(); int len2 = num2.length(); int i = len1 - 1; int j = len2 - 1; StringBuilder sb = new StringBuilder(); while (i \u0026gt;= 0 || j \u0026gt;= 0) { int c1 = i \u0026gt;= 0 ? num1.charAt(i) - \u0026#39;0\u0026#39; : 0; int c2 = j \u0026gt;= 0 ? num2.charAt(j) - \u0026#39;0\u0026#39;: 0; int val = c1 + c2 + carry; carry = val / 10; val = val % 10; sb.append(val); i--; j--; } if (carry \u0026gt; 0) { sb.append(carry); } return sb.reverse().toString(); } } ","permalink":"https://volyx.in/posts/2021-10-09-add-strings/","summary":"\u003cp\u003e\u003cimg alt=\"415. Add Strings\" loading=\"lazy\" src=\"https://leetcode.com/problems/add-strings/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\u003c/p\u003e\n\u003cp\u003eYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num1 = \u0026#34;11\u0026#34;, num2 = \u0026#34;123\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;134\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num1 = \u0026#34;456\u0026#34;, num2 = \u0026#34;77\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;533\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num1 = \u0026#34;0\u0026#34;, num2 = \u0026#34;0\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;0\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"415. Add Strings"},{"content":"\nYou are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\nFor example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 Example 1: Input [\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;] [[[1]],[]] Output [null,0] Explanation Solution solution = new Solution([1]); solution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w. Example 2: Input [\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;] [[[1,3]],[],[],[],[],[]] Output [null,1,1,1,1,0] Explanation Solution solution = new Solution([1, 3]); solution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4. solution.pickIndex(); // return 1 solution.pickIndex(); // return 1 solution.pickIndex(); // return 1 solution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4. Since this is a randomization problem, multiple answers are allowed. All of the following outputs can be considered correct: [null,1,1,1,1,0] [null,1,1,1,1,1] [null,1,1,1,0,0] [null,1,1,1,0,1] [null,1,0,1,0,0] ...... and so on. Constraints:\n1 \u0026lt;= w.length \u0026lt;= 104 1 \u0026lt;= w[i] \u0026lt;= 105 pickIndex will be called at most 104 times. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { Random random = new Random(); int[] prefix; int sum = 0; public Solution(int[] w) { this.prefix = new int[w.length]; for (int i = 0; i \u0026lt; prefix.length; i++) { sum += w[i]; prefix[i] = sum; } } public int pickIndex() { double val = Math.random() * prefix[prefix.length - 1]; int lo = 0; int hi = prefix.length; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; if (val \u0026gt; prefix[mid]) { lo = mid + 1; } else { hi = mid; } } return lo; } } /** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(w); * int param_1 = obj.pickIndex(); */ Solution 2021-11-18 Double Array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { double[] prob; public Solution(int[] w) { int sum = 0; for (int i = 0; i \u0026lt; w.length; i++) { sum += w[i]; } int preSum = 0; prob = new double[w.length]; for (int i = 0; i \u0026lt; w.length; i++) { preSum += w[i]; prob[i] += (double) preSum / sum; } } public int pickIndex() { double val = Math.random(); int index = Arrays.binarySearch(prob, val); if (index \u0026lt; 0) { index = -(index + 1); } return index; } } /** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(w); * int param_1 = obj.pickIndex(); */ Solution 2022-01-24, Integer Array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { Random RANDOM = new Random(); int[] p; public Solution(int[] w) { p = new int[w.length]; int sum = 0; for (int i = 0; i \u0026lt; w.length; i++) { sum += w[i]; p[i] = sum; } System.out.println(Arrays.toString(p)); } public int pickIndex() { int value = RANDOM.nextInt(p[p.length - 1]) + 1; int index = Arrays.binarySearch(p, value); return index \u0026gt;= 0 ? index : -(index + 1); } } /** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(w); * int param_1 = obj.pickIndex(); */ ","permalink":"https://volyx.in/posts/2021-10-08-random-pick-with-weight/","summary":"\u003cp\u003e\u003cimg alt=\"528. Random Pick with Weight\" loading=\"lazy\" src=\"https://leetcode.com/problems/random-pick-with-weight/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.\u003c/p\u003e\n\u003cp\u003eYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[1]],[]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSolution solution = new Solution([1]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[1,3]],[],[],[],[],[]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,1,1,1,1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSolution solution = new Solution([1, 3]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pickIndex(); // return 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pickIndex(); // return 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pickIndex(); // return 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince this is a randomization problem, multiple answers are allowed.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAll of the following outputs can be considered correct:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,1,1,1,1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,1,1,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,1,1,1,0,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,1,1,1,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,1,0,1,0,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e......\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eand so on.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"528. Random Pick with Weight"},{"content":"\nImplement a thread-safe bounded blocking queue that has the following methods:\nBoundedBlockingQueue(int capacity) The constructor initializes the queue with a maximum capacity. void enqueue(int element) Adds an element to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full. int dequeue() Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty. int size() Returns the number of elements currently in the queue. Your implementation will be tested using multiple threads at the same time. Each thread will either be a producer thread that only makes calls to the enqueue method or a consumer thread that only makes calls to the dequeue method. The size method will be called after every test case.\nPlease do not use built-in implementations of bounded blocking queue as this will not be accepted in an interview.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: 1 1 [\u0026#34;BoundedBlockingQueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;dequeue\u0026#34;,\u0026#34;dequeue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;dequeue\u0026#34;] [[2],[1],[],[],[0],[2],[3],[4],[]] Output: [1,0,2,2] Explanation: Number of producer threads = 1 Number of consumer threads = 1 BoundedBlockingQueue queue = new BoundedBlockingQueue(2); // initialize the queue with capacity = 2. queue.enqueue(1); // The producer thread enqueues 1 to the queue. queue.dequeue(); // The consumer thread calls dequeue and returns 1 from the queue. queue.dequeue(); // Since the queue is empty, the consumer thread is blocked. queue.enqueue(0); // The producer thread enqueues 0 to the queue. The consumer thread is unblocked and returns 0 from the queue. queue.enqueue(2); // The producer thread enqueues 2 to the queue. queue.enqueue(3); // The producer thread enqueues 3 to the queue. queue.enqueue(4); // The producer thread is blocked because the queue\u0026#39;s capacity (2) is reached. queue.dequeue(); // The consumer thread returns 2 from the queue. The producer thread is unblocked and enqueues 4 to the queue. queue.size(); // 2 elements remaining in the queue. size() is always called at the end of each test case. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 2: Input: 3 4 [\u0026#34;BoundedBlockingQueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;enqueue\u0026#34;,\u0026#34;dequeue\u0026#34;,\u0026#34;dequeue\u0026#34;,\u0026#34;dequeue\u0026#34;,\u0026#34;enqueue\u0026#34;] [[3],[1],[0],[2],[],[],[],[3]] Output: [1,0,2,1] Explanation: Number of producer threads = 3 Number of consumer threads = 4 BoundedBlockingQueue queue = new BoundedBlockingQueue(3); // initialize the queue with capacity = 3. queue.enqueue(1); // Producer thread P1 enqueues 1 to the queue. queue.enqueue(0); // Producer thread P2 enqueues 0 to the queue. queue.enqueue(2); // Producer thread P3 enqueues 2 to the queue. queue.dequeue(); // Consumer thread C1 calls dequeue. queue.dequeue(); // Consumer thread C2 calls dequeue. queue.dequeue(); // Consumer thread C3 calls dequeue. queue.enqueue(3); // One of the producer threads enqueues 3 to the queue. queue.size(); // 1 element remaining in the queue. Since the number of threads for producer/consumer is greater than 1, we do not know how the threads will be scheduled in the operating system, even though the input seems to imply the ordering. Therefore, any of the output [1,0,2] or [1,2,0] or [0,1,2] or [0,2,1] or [2,0,1] or [2,1,0] will be accepted. Constraints:\n1 \u0026lt;= Number of Prdoucers \u0026lt;= 8 1 \u0026lt;= Number of Consumers \u0026lt;= 8 1 \u0026lt;= size \u0026lt;= 30 0 \u0026lt;= element \u0026lt;= 20 The number of calls to enqueue is greater than or equal to the number of calls to dequeue. At most 40 calls will be made to enque, deque, and size. Synchronizated Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { Set\u0026lt;Set\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; unique = new HashSet\u0026lt;\u0026gt;(); public int numDistinctIslands(int[][] grid) { int count = 1; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 1) { count++; Set\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt; shape = new HashSet\u0026lt;\u0026gt;(); dfs(grid, i, j, shape, i, j, count); unique.add(shape); } } } return unique.size(); } int[][] DIRS = new int[][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, }; void dfs(int[][] grid, int i, int j, Set\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt; shape, int start, int end, int index) { grid[i][j] = index; shape.add(new Pair(i - start, j - end)); for (int[] dir: DIRS) { int x = dir[0] + i; int y = dir[1] + j; if (x \u0026lt; 0 || x == grid.length || y \u0026lt; 0 || y == grid[0].length) continue; if (grid[x][y] == 1) { dfs(grid, x, y, shape, start, end, index); } } } } Path Hash Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class BoundedBlockingQueue { private int start = 0; private int end = 0; private final int[] q = new int[100]; private final int capacity; public BoundedBlockingQueue(int capacity) { this.capacity = capacity; } public void enqueue(int element) throws InterruptedException { synchronized(this) { while (end - start == capacity) { this.wait(); } q[end++] = element; this.notifyAll(); } } public int dequeue() throws InterruptedException { synchronized(this) { while (end - start \u0026lt;= 0) { this.wait(); } int element = q[start++]; this.notifyAll(); return element; } } public int size() { synchronized(this) { return end - start; } } } Solution ReentrantReadWriteLock 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class BoundedBlockingQueue { private LinkedList\u0026lt;Integer\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); private final int capacity; private final ReentrantLock rwl = new ReentrantLock(); private final Condition empty = rwl.newCondition(); private final Condition full = rwl.newCondition(); public BoundedBlockingQueue(int capacity) { this.capacity = capacity; } public void enqueue(int element) throws InterruptedException { rwl.lock(); try { while (q.size() == capacity) { full.await(); } q.add(element); empty.signalAll(); } finally { rwl.unlock(); } } public int dequeue() throws InterruptedException { rwl.lock(); try { while (q.size() == 0) { empty.await(); } int element = q.pollFirst(); full.signalAll(); return element; } finally { rwl.unlock(); } } public int size() { rwl.lock(); try { return q.size(); } finally { rwl.unlock(); } } } ","permalink":"https://volyx.in/posts/2021-10-05-design-bounded-blocking-queue/","summary":"\u003cp\u003e\u003cimg alt=\"1188. Design Bounded Blocking Queue\" loading=\"lazy\" src=\"https://leetcode.com/problems/design-bounded-blocking-queue/\"\u003e\u003c/p\u003e\n\u003cp\u003eImplement a thread-safe bounded blocking queue that has the following methods:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBoundedBlockingQueue(int capacity) The constructor initializes the queue with a maximum capacity.\u003c/li\u003e\n\u003cli\u003evoid enqueue(int element) Adds an element to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full.\u003c/li\u003e\n\u003cli\u003eint dequeue() Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.\u003c/li\u003e\n\u003cli\u003eint size() Returns the number of elements currently in the queue.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYour implementation will be tested using multiple threads at the same time. Each thread will either be a producer thread that only makes calls to the enqueue method or a consumer thread that only makes calls to the dequeue method. The size method will be called after every test case.\u003c/p\u003e","title":"1188. Design Bounded Blocking Queue"},{"content":"\nYou are given an m x n binary matrix grid. An island is a group of 1\u0026rsquo;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nAn island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\nReturn the number of distinct islands.\n1 2 3 4 Example 1: Input: grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]] Output: 1 1 2 3 4 Example 2: Input: grid = [[1,1,0,1,1],[1,0,0,0,0],[0,0,0,0,1],[1,1,0,1,1]] Output: 3 Constraints:\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 50 grid[i][j] is either 0 or 1. Set Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { Set\u0026lt;Set\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; unique = new HashSet\u0026lt;\u0026gt;(); public int numDistinctIslands(int[][] grid) { int count = 1; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 1) { count++; Set\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt; shape = new HashSet\u0026lt;\u0026gt;(); dfs(grid, i, j, shape, i, j, count); unique.add(shape); } } } return unique.size(); } int[][] DIRS = new int[][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, }; void dfs(int[][] grid, int i, int j, Set\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt; shape, int start, int end, int index) { grid[i][j] = index; shape.add(new Pair(i - start, j - end)); for (int[] dir: DIRS) { int x = dir[0] + i; int y = dir[1] + j; if (x \u0026lt; 0 || x == grid.length || y \u0026lt; 0 || y == grid[0].length) continue; if (grid[x][y] == 1) { dfs(grid, x, y, shape, start, end, index); } } } } Path Hash Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { Set\u0026lt;String\u0026gt; unique = new HashSet\u0026lt;\u0026gt;(); public int numDistinctIslands(int[][] grid) { int count = 1; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 1) { count++; StringBuilder sb = new StringBuilder(); dfs(grid, \u0026#39;0\u0026#39;, i, j, sb, count); unique.add(sb.toString()); } } } return unique.size(); } int[][] DIRS = new int[][] { {-1, 0}, // down {0, 1}, // r {0, -1}, // l {1, 0}, // top }; void dfs(int[][] grid, char direction, int i, int j, StringBuilder sb, int index) { if (i \u0026lt; 0 || i == grid.length || j \u0026lt; 0 || j == grid[0].length) return; if (grid[i][j] == 1) { grid[i][j] = index; sb.append(direction); dfs(grid, \u0026#39;D\u0026#39;, i + 1, j, sb, index); dfs(grid, \u0026#39;T\u0026#39;, i - 1, j, sb, index); dfs(grid, \u0026#39;R\u0026#39;, i, j + 1, sb, index); dfs(grid, \u0026#39;L\u0026#39;, i, j - 1, sb, index); sb.append(\u0026#39;0\u0026#39;); } } } ","permalink":"https://volyx.in/posts/2021-10-02-number-of-distinct-islands/","summary":"\u003cp\u003e\u003cimg alt=\"694. Number of Distinct Islands\" loading=\"lazy\" src=\"https://leetcode.com/problems/number-of-distinct-islands/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an m x n binary matrix grid. An island is a group of 1\u0026rsquo;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\u003c/p\u003e\n\u003cp\u003eAn island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\u003c/p\u003e","title":"694. Number of Distinct Islands"},{"content":"\nGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in O(n) time.\n1 2 3 4 5 Example 1: Input: nums = [100,4,200,1,3,2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. 1 2 3 4 Example 2: Input: nums = [0,3,7,2,5,8,4,6,0,1] Output: 9 Constraints:\n0 \u0026lt;= nums.length \u0026lt;= 105 -10^9 \u0026lt;= nums[i] \u0026lt;= 10^9 DFS Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int longestConsecutive(int[] nums) { int n = nums.length; if (n == 0) return 0; Arrays.sort(nums); int max = 1; int currentMax = 1; for (int i = 1; i \u0026lt; n ; i++) { if (nums[i] - nums[i - 1] == 0) { continue; } else if (nums[i] - nums[i - 1] == 1) { currentMax++; max = Math.max(max, currentMax); } else { currentMax = 1; } } return max; } } ","permalink":"https://volyx.in/posts/2021-09-20-longest-consecutive-sequence/","summary":"\u003cp\u003e\u003cimg alt=\"128. Longest Consecutive Sequence\" loading=\"lazy\" src=\"https://leetcode.com/problems/longest-consecutive-sequence/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\u003c/p\u003e\n\u003cp\u003eYou must write an algorithm that runs in O(n) time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [100,4,200,1,3,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,3,7,2,5,8,4,6,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 9\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"128. Longest Consecutive Sequence"},{"content":"\nGiven an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: nums = [-1,2,1,-4], target = 1 Output: 2 Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2). Example 2: Input: nums = [0,0,0], target = 1 Output: 0 Constraints:\n3 \u0026lt;= nums.length \u0026lt;= 1000 -1000 \u0026lt;= nums[i] \u0026lt;= 1000 -10^4 \u0026lt;= target \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int threeSumClosest(int[] nums, int target) { Arrays.sort(nums); int closest = 0; int minDistance = Integer.MAX_VALUE; int n = nums.length; for (int i = 0; i \u0026lt; nums.length - 2; i++) { int lo = i + 1; int hi = n - 1; while (lo \u0026lt; hi) { int sum = nums[i] + nums[lo] + nums[hi]; if (Math.abs(target - sum) \u0026lt; minDistance) { minDistance = Math.abs(target - sum); closest = sum; } if (sum \u0026gt; target) { hi--; } else { lo++; } } } return closest; } } ","permalink":"https://volyx.in/posts/2021-09-19-3sum-closest/","summary":"\u003cp\u003e\u003cimg alt=\"16. 3Sum Closest\" loading=\"lazy\" src=\"https://leetcode.com/problems/3sum-closest\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\u003c/p\u003e\n\u003cp\u003eReturn the sum of the three integers.\u003c/p\u003e\n\u003cp\u003eYou may assume that each input would have exactly one solution.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,2,1,-4], target = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,0,0], target = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"16. 3Sum Closest"},{"content":"\nSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\n1 2 3 4 Example 1: Input: root = [1,2,3,null,null,4,5] Output: [1,2,3,null,null,4,5] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 2: Input: root = [] Output: [] Example 3: Input: root = [1] Output: [1] Example 4: Input: root = [1,2] Output: [1,2] Constraints:\nThe number of nodes in the tree is in the range [0, 10^4]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 DFS Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ public class Codec { // Encodes a tree to a single string. public String serialize(TreeNode root) { StringBuilder sb = new StringBuilder(); dfs(root, sb); System.out.println(sb.toString()); return sb.toString(); } void dfs(TreeNode node, StringBuilder sb) { if (node == null) { sb.append(\u0026#34;#\u0026#34;); sb.append(\u0026#34;,\u0026#34;); } else { sb.append(node.val); sb.append(\u0026#34;,\u0026#34;); dfs(node.left, sb); dfs(node.right, sb); } } // Decodes your encoded data to tree. public TreeNode deserialize(String data) { String[] values = data.split(\u0026#34;,\u0026#34;); System.out.println(Arrays.toString(values)); Queue\u0026lt;String\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); q.addAll(Arrays.asList(values)); return buildTree(q); } TreeNode buildTree(Queue\u0026lt;String\u0026gt; q) { if (q.size() == 0) return null; String val = q.poll(); if (val.equals(\u0026#34;#\u0026#34;)) return null; TreeNode node = new TreeNode(Integer.valueOf(val)); node.left = buildTree(q); node.right = buildTree(q); return node; } } // Your Codec object will be instantiated and called as such: // Codec ser = new Codec(); // Codec deser = new Codec(); // TreeNode ans = deser.deserialize(ser.serialize(root)); BFS Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ public class Codec { // Encodes a tree to a single string. public String serialize(TreeNode root) { StringBuilder sb = new StringBuilder(); Queue\u0026lt;TreeNode\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); q.add(root); while (q.size() \u0026gt; 0) { TreeNode node = q.poll(); if (node == null) { sb.append(\u0026#34;#,\u0026#34;); } else { sb.append(node.val).append(\u0026#34;,\u0026#34;); q.add(node.left); q.add(node.right); } } // System.out.println(sb.toString()); return sb.toString(); } // Decodes your encoded data to tree. public TreeNode deserialize(String data) { String[] values = data.split(\u0026#34;,\u0026#34;); // System.out.println(Arrays.toString(values)); if (values.length == 0) return null; Queue\u0026lt;TreeNode\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); TreeNode root = parse(values, 0); q.add(root); for (int i = 1; i \u0026lt; values.length; i++) { TreeNode parent = q.poll(); parent.left = parse(values, i); if (parent.left != null) { q.add(parent.left); } i++; parent.right = parse(values, i); if (parent.right != null) { q.add(parent.right); } } return root; } TreeNode parse(String[] values, int index) { if (index \u0026gt;= values.length) return null; String val = values[index]; return val.equals(\u0026#34;#\u0026#34;) ? null: new TreeNode(Integer.valueOf(val)); } } // Your Codec object will be instantiated and called as such: // Codec ser = new Codec(); // Codec deser = new Codec(); // TreeNode ans = deser.deserialize(ser.serialize(root)); ","permalink":"https://volyx.in/posts/2021-09-19-serialize-and-deserialize-binary-tree/","summary":"\u003cp\u003e\u003cimg alt=\"297. Serialize and Deserialize Binary Tree\" loading=\"lazy\" src=\"https://leetcode.com/problems/serialize-and-deserialize-binary-tree\"\u003e\u003c/p\u003e\n\u003cp\u003eSerialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\u003c/p\u003e\n\u003cp\u003eDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\u003c/p\u003e","title":"297. Serialize and Deserialize Binary Tree"},{"content":"\nGiven two nodes of a binary tree p and q, return their lowest common ancestor (LCA).\nEach node will have a reference to its parent node. The definition for Node is below:\n1 2 3 4 5 6 class Node { public int val; public Node left; public Node right; public Node parent; } According to the definition of LCA on Wikipedia: \u0026ldquo;The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).\u0026rdquo;\n1 2 3 4 5 Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3. 1 2 3 4 5 Example 2: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition. 1 2 3 4 Example 3: Input: root = [1,2], p = 1, q = 2 Output: 1 Constraints:\nThe number of nodes in the tree is in the range [2, 105]. -10^9 \u0026lt;= Node.val \u0026lt;= 10^9 All Node.val are unique. p != q p and q exist in the tree. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 /* // Definition for a Node. class Node { public int val; public Node left; public Node right; public Node parent; }; */ class Solution { public Node lowestCommonAncestor(Node p, Node q) { Node runner1 = p; Node runner2 = q; while (runner1 != runner2) { runner1 = (runner1 == null) ? q: runner1.parent; runner2 = (runner2 == null) ? p: runner2.parent; } return runner1; } /** DIFF HEIGTH APROACH **/ public Node lowestCommonAncestor2(Node p, Node q) { int depth1 = depth(p); int depth2 = depth(q); if (depth1 \u0026lt; depth2) { return lowestCommonAncestor(q, p); } int diff = depth1 - depth2; while (diff \u0026gt; 0) { p = p.parent; diff--; } while (p != q) { q = q.parent; p = p.parent; } return p; } int depth(Node node) { Node parent = node.parent; int count = 0; while (parent != null) { parent = parent.parent; count++; } return count; } /** HASH SET APPROACH */ public Node lowestCommonAncestor1(Node p, Node q) { Set\u0026lt;Node\u0026gt; seen = new HashSet\u0026lt;Node\u0026gt;(); while (p != null) { seen.add(p); p = p.parent; } while (q != null) { if (seen.contains(q)) { return q; } q = q.parent; } return null; } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /* // Definition for a Node. class Node { public int val; public Node left; public Node right; public Node parent; }; */ class Solution { public Node lowestCommonAncestor(Node p, Node q) { Node s = p; Node f = q; while (s != f) { s = s.parent; f = f.parent; if (s == null) { s = p; } if (f == null) { f = q; } } return s; } } ","permalink":"https://volyx.in/posts/2021-09-16-lowest-common-ancestor-of-a-binary-tree-iii/","summary":"\u003cp\u003e\u003cimg alt=\"1650. Lowest Common Ancestor of a Binary Tree III\" loading=\"lazy\" src=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two nodes of a binary tree p and q, return their lowest common ancestor (LCA).\u003c/p\u003e\n\u003cp\u003eEach node will have a reference to its parent node. The definition for Node is below:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Node left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Node right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Node parent;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eAccording to the definition of LCA on Wikipedia: \u0026ldquo;The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).\u0026rdquo;\u003c/p\u003e","title":"1650. Lowest Common Ancestor of a Binary Tree III"},{"content":"\nGiven two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.\n1 2 3 4 5 6 7 8 Example 1: Input: word1 = [\u0026#34;ab\u0026#34;, \u0026#34;c\u0026#34;], word2 = [\u0026#34;a\u0026#34;, \u0026#34;bc\u0026#34;] Output: true Explanation: word1 represents string \u0026#34;ab\u0026#34; + \u0026#34;c\u0026#34; -\u0026gt; \u0026#34;abc\u0026#34; word2 represents string \u0026#34;a\u0026#34; + \u0026#34;bc\u0026#34; -\u0026gt; \u0026#34;abc\u0026#34; The strings are the same, so return true. 1 2 3 4 Example 2: Input: word1 = [\u0026#34;a\u0026#34;, \u0026#34;cb\u0026#34;], word2 = [\u0026#34;ab\u0026#34;, \u0026#34;c\u0026#34;] Output: false 1 2 3 4 Example 3: Input: word1 = [\u0026#34;abc\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;defg\u0026#34;], word2 = [\u0026#34;abcddefg\u0026#34;] Output: true Constraints:\n1 \u0026lt;= word1.length, word2.length \u0026lt;= 10^3 1 \u0026lt;= word1[i].length, word2[i].length \u0026lt;= 10^3 1 \u0026lt;= sum(word1[i].length), sum(word2[i].length) \u0026lt;= 103 word1[i] and word2[i] consist of lowercase letters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Solution { public boolean arrayStringsAreEqual(String[] word1, String[] word2) { int len1 = word1.length; int len2 = word2.length; int part1Index = 0; int part2Index = 0; int i = 0; int j = 0; int all1 = countLetters(word1); int all2 = countLetters(word2); if (all1 != all2) return false; int seen1 = 0; int seen2 = 0; while (part1Index \u0026lt; len1 \u0026amp;\u0026amp; part2Index \u0026lt; len2) { String w1 = word1[part1Index]; String w2 = word2[part2Index]; if (i == w1.length()) { i = 0; part1Index++; continue; } if (j == w2.length()) { j = 0; part2Index++; continue; } seen1++; seen2++; if (w1.charAt(i) != w2.charAt(j)) { return false; } else { i++; j++; } } if (seen1 != all1 || seen2 != all1) return false; return true; } int countLetters(String[] words) { int count = 0; for (int i = 0; i\u0026lt; words.length; i++) { count += words[i].length(); } return count; } } ","permalink":"https://volyx.in/posts/2021-09-16-check-if-two-string-arrays-are-equivalent/","summary":"\u003cp\u003e\u003cimg alt=\"1662. Check If Two String Arrays are Equivalent\" loading=\"lazy\" src=\"https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\u003c/p\u003e\n\u003cp\u003eA string is represented by an array if the array elements concatenated in order forms the string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: word1 = [\u0026#34;ab\u0026#34;, \u0026#34;c\u0026#34;], word2 = [\u0026#34;a\u0026#34;, \u0026#34;bc\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eword1 represents string \u0026#34;ab\u0026#34; + \u0026#34;c\u0026#34; -\u0026gt; \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eword2 represents string \u0026#34;a\u0026#34; + \u0026#34;bc\u0026#34; -\u0026gt; \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe strings are the same, so return true.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: word1 = [\u0026#34;a\u0026#34;, \u0026#34;cb\u0026#34;], word2 = [\u0026#34;ab\u0026#34;, \u0026#34;c\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: word1  = [\u0026#34;abc\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;defg\u0026#34;], word2 = [\u0026#34;abcddefg\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1662. Check If Two String Arrays are Equivalent"},{"content":"259. 3Sum Smaller\nGiven an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 \u0026lt;= i \u0026lt; j \u0026lt; k \u0026lt; n that satisfy the condition nums[i] + nums[j] + nums[k] \u0026lt; target.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: nums = [-2,0,1,3], target = 2 Output: 2 Explanation: Because there are two triplets which sums are less than 2: [-2,0,1] [-2,0,3] Example 2: Input: nums = [], target = 0 Output: 0 Example 3: Input: nums = [0], target = 0 Output: 0 Constraints:\nn == nums.length 0 \u0026lt;= n \u0026lt;= 3500 -100 \u0026lt;= nums[i] \u0026lt;= 100 -100 \u0026lt;= target \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int threeSumSmaller(int[] nums, int target) { Arrays.sort(nums); int n = nums.length; int count = 0; for (int i = 0; i \u0026lt; n - 2; i++) { int lo = i + 1; int hi = n - 1; while (lo \u0026lt; hi) { int sum = nums[i] + nums[lo] + nums[hi]; if (sum \u0026lt; target) { count += hi - lo; lo++; } else { hi--; } } } return count; } } ","permalink":"https://volyx.in/posts/2021-09-09-3sum-smaller/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/3sum-smaller/\"\u003e259. 3Sum Smaller\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of n integers nums and an integer target, find the number of index triplets i, j, k with 0 \u0026lt;= i \u0026lt; j \u0026lt; k \u0026lt; n that satisfy the condition nums[i] + nums[j] + nums[k] \u0026lt; target.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-2,0,1,3], target = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Because there are two triplets which sums are less than 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[-2,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[-2,0,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [], target = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0], target = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"259. 3Sum Smaller"},{"content":"Two/Three Sum Workout https://leetcode.com/problems/two-sum/\n1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public int[] twoSum(int[] nums, int target) { Map\u0026lt;Integer, Integer\u0026gt; valueIndex = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { Integer find = valueIndex.get(target - nums[i]); if (find != null) { return new int[] {find, i}; } valueIndex.put(nums[i], i); } return new int[] {-1, -1}; } } https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int[] twoSum(int[] numbers, int target) { int lo = 0; int hi = numbers.length - 1; while (lo \u0026lt; hi) { if (numbers[lo] + numbers[hi] == target) { return new int[] {lo + 1, hi + 1}; } else if (numbers[lo] + numbers[hi] \u0026gt; target) { hi--; } else { lo++; } } return new int[] {-1, -1}; } } https://leetcode.com/problems/3sum/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { /* [-1,0,1,2,-1,-4] [-4, -1, -1, 0, 1, 2] */ public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSum(int[] nums) { Arrays.sort(nums); System.out.println(Arrays.toString(nums)); int n = nums.length; List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n - 2; i++) { if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i - 1] == nums[i]) continue; int lo = i + 1; int hi = n - 1; while (lo \u0026lt; hi) { int sum = nums[i] + nums[lo] + nums[hi]; if (sum \u0026lt; 0) { lo++; } else if (sum \u0026gt; 0) { hi--; } else { res.add(List.of(nums[i], nums[lo], nums[hi])); lo++; hi--; while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[lo - 1] == nums[lo]) { lo++; } } } } return res; } } https://leetcode.com/problems/3sum-smaller/\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int threeSumSmaller(int[] nums, int target) { Arrays.sort(nums); int n = nums.length; int count = 0; for (int i = 0; i \u0026lt; n - 2; i++) { int lo = i + 1; int hi = n - 1; while (lo \u0026lt; hi) { int sum = nums[i] + nums[lo] + nums[hi]; if (sum \u0026lt; target) { count += hi - lo; lo++; } else { hi--; } } } return count; } } https://leetcode.com/problems/3sum-closest/\n","permalink":"https://volyx.in/posts/2021-09-09-two-sum-workout/","summary":"\u003ch2 id=\"twothree-sum-workout\"\u003eTwo/Three Sum Workout\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/two-sum/\"\u003ehttps://leetcode.com/problems/two-sum/\u003c/a\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etwoSum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInteger, Integer\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e valueIndex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e HashMap\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Integer find \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e valueIndex.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(target \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (find \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e {find, i};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            valueIndex.\u003cspan style=\"color:#a6e22e\"\u003eput\u003c/span\u003e(nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e, i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e {\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\"\u003ehttps://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\u003c/a\u003e\u003c/p\u003e","title":"Two/Three Sum Workout"},{"content":"315. Count of Smaller Numbers After Self\nYou are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: nums = [5,2,6,1] Output: [2,1,1,0] Explanation: To the right of 5 there are 2 smaller elements (2 and 1). To the right of 2 there is only 1 smaller element (1). To the right of 6 there is 1 smaller element (1). To the right of 1 there is 0 smaller element. Example 2: Input: nums = [-1] Output: [0] Example 3: Input: nums = [-1,-1] Output: [0,0] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^5 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 class Solution { /* -1 -1 5 2 1 0 1 2 3 4 5 .. 0...2 0 1 1 0 0 1 */ public List\u0026lt;Integer\u0026gt; countSmaller(int[] nums) { int offset = 10_000; int size = 2 * 10_000 + 1; int[] tree = new int[size * 2]; List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = nums.length - 1; i \u0026gt;= 0; i--) { int smallerCount = query(0, nums[i] + offset, tree, size); res.add(0, smallerCount); update(nums[i] + offset, 1, tree, size); } return res; } void update(int index, int value, int[] tree, int size) { index += size; tree[index] += value; while (index \u0026gt; 1) { index /= 2; tree[index] = tree[index * 2] + tree[index * 2 + 1]; } } int query(int left, int right, int[] tree, int size) { int result = 0; left += size; right += size; while (left \u0026lt; right) { if (left % 2 == 1) { result += tree[left]; left++; } if (right % 2 == 1) { right--; result += tree[right]; } left /= 2; right /= 2; } return result; } } ","permalink":"https://volyx.in/posts/2021-09-08-count-of-smaller-numbers-after-self/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/count-of-smaller-numbers-after-self/\"\u003e315. Count of Smaller Numbers After Self\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [5,2,6,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1,1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTo the right of 5 there are 2 smaller elements (2 and 1).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTo the right of 2 there is only 1 smaller element (1).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTo the right of 6 there is 1 smaller element (1).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTo the right of 1 there is 0 smaller element.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,-1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,0]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"315. Count of Smaller Numbers After Self"},{"content":"350. Intersection of Two Arrays II\nGiven two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: nums1 = [1,2,2,1], nums2 = [2,2] Output: [2,2] Example 2: Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] Output: [4,9] Explanation: [9,4] is also accepted. Constraints:\n1 \u0026lt;= nums1.length, nums2.length \u0026lt;= 1000 0 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 1000 Follow up:\nWhat if the given array is already sorted? How would you optimize your algorithm? What if nums1\u0026rsquo;s size is small compared to nums2\u0026rsquo;s size? Which algorithm is better? What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once? Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int[] intersect(int[] nums1, int[] nums2) { int[] freq1 = new int[1_001]; int[] freq2 = new int[1_001]; for (int i = 0; i \u0026lt; nums1.length; i++) { freq1[nums1[i]]++; } for (int i = 0; i \u0026lt; nums2.length; i++) { freq2[nums2[i]]++; } List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 1_001; i++) { int j = 0; while (j \u0026lt; Math.min(freq1[i] , freq2[i])) { res.add(i); j++; } } return toList(res); } int[] toList(List\u0026lt;Integer\u0026gt; res) { int[] a = new int[res.size()]; for (int i = 0; i \u0026lt; res.size(); i++) { a[i] = res.get(i); } return a; } } ","permalink":"https://volyx.in/posts/2021-09-07-intersection-of-two-arrays-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/intersection-of-two-arrays-ii/\"\u003e350. Intersection of Two Arrays II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums1 = [1,2,2,1], nums2 = [2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [9,4] is also accepted.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"350. Intersection of Two Arrays II"},{"content":"255. Verify Preorder Sequence in Binary Search Tree\nGiven an array of unique integers preorder, return true if it is the correct preorder traversal sequence of a binary search tree.\n1 2 3 4 5 6 7 8 9 Example 1: Input: preorder = [5,2,1,3,6] Output: true Example 2: Input: preorder = [5,2,6,1,3] Output: false Constraints:\n1 \u0026lt;= preorder.length \u0026lt;= 10^4 1 \u0026lt;= preorder[i] \u0026lt;= 10^4 All the elements of preorder are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public boolean verifyPreorder(int[] preorder) { Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int lowerBound = Integer.MIN_VALUE; for (int val: preorder) { while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; val \u0026gt; stack.peek()) { lowerBound = stack.pop(); } if (val \u0026lt; lowerBound) { return false; } stack.push(val); } return true; } } ","permalink":"https://volyx.in/posts/2021-09-03-verify-preorder-sequence-in-binary-search-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/\"\u003e255. Verify Preorder Sequence in Binary Search Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of unique integers preorder, return true if it is the correct preorder traversal sequence of a binary search tree.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: preorder = [5,2,1,3,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: preorder = [5,2,6,1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-09-03-ex1.jpg\"\u003e\u003c/p\u003e","title":"255. Verify Preorder Sequence in Binary Search Tree"},{"content":"654. Maximum Binary Tree\nYou are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\nCreate a root node whose value is the maximum value in nums. Recursively build the left subtree on the subarray prefix to the left of the maximum value. Recursively build the right subtree on the subarray suffix to the right of the maximum value. Return the maximum binary tree built from nums.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: nums = [3,2,1,6,0,5] Output: [6,3,5,null,2,0,null,null,1] Explanation: The recursive calls are as follow: - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5]. - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1]. - Empty array, so no child. - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1]. - Empty array, so no child. - Only one element, so child is a node with value 1. - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is []. - Only one element, so child is a node with value 0. - Empty array, so no child. 1 2 3 4 Example 2: Input: nums = [3,2,1] Output: [3,null,2,null,1] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 1000 0 \u0026lt;= nums[i] \u0026lt;= 1000 All integers in nums are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { //int this que we need to work seperately on the left side of max element and on the right side of maxElement //so we required a data structure that give us this functionality that while going from left to right if there is any max element between left and right then //we can separate them //here monotonic Stack can help us if we will put element in decreasing order then //if any max element comes then we will pop the element from stack untill stackTop is less than max element and we will make //(stack max element) (which is last poped max element) to the left child of maxelement //if lesser element comes then we will make it right child of stackTOp public TreeNode constructMaximumBinaryTree(int[] nums) { Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { TreeNode curr = new TreeNode(nums[i]); while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; stack.peek().val \u0026lt; nums[i]) { curr.left = stack.pop(); } if (stack.size() \u0026gt; 0) { stack.peek().right = curr; } stack.push(curr); } while (stack.size() \u0026gt; 1) stack.pop(); return stack.peek(); } } ","permalink":"https://volyx.in/posts/2021-09-03-maximum-binary-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-binary-tree/\"\u003e654. Maximum Binary Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a root node whose value is the maximum value in nums.\u003c/li\u003e\n\u003cli\u003eRecursively build the left subtree on the subarray prefix to the left of the maximum value.\u003c/li\u003e\n\u003cli\u003eRecursively build the right subtree on the subarray suffix to the right of the maximum value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the maximum binary tree built from nums.\u003c/p\u003e","title":"2654. Maximum Binary Tree"},{"content":"307. Range Sum Query - Mutable\nGiven an integer array nums, handle multiple queries of the following types:\nUpdate the value of an element in nums. Calculate the sum of the elements of nums between indices left and right inclusive where left \u0026lt;= right. Implement the NumArray class:\nNumArray(int[] nums) Initializes the object with the integer array nums. void update(int index, int val) Updates the value of nums[index] to be val. int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + \u0026hellip; + nums[right]). 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input [\u0026#34;NumArray\u0026#34;, \u0026#34;sumRange\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;sumRange\u0026#34;] [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] Output [null, 9, null, 8] Explanation NumArray numArray = new NumArray([1, 3, 5]); numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9 numArray.update(1, 2); // nums = [1, 2, 5] numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 3 * 104 -100 \u0026lt;= nums[i] \u0026lt;= 100 0 \u0026lt;= index \u0026lt; nums.length -100 \u0026lt;= val \u0026lt;= 100 0 \u0026lt;= left \u0026lt;= right \u0026lt; nums.length At most 3 * 104 calls will be made to update and sumRange. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class NumArray { int[] nums; int[] tree; int n; /* 0,1,2,3,4,5 [x,x,8,1,3,5] 9 1 8 0 1 3 5 */ public NumArray(int[] nums) { this.n = nums.length; this.nums = nums; this.tree = new int[2 * n]; for (int i = 0; i \u0026lt; n; i++) { tree[n + i] = nums[i]; } for (int i = n - 1; i \u0026gt; 0; i--) { tree[i] = tree[i * 2] + tree[2 * i + 1]; } // System.out.println(Arrays.toString(nums)); // System.out.println(Arrays.toString(tree)); } public void update(int index, int val) { nums[index] = val; index += n; tree[index] = val; while (index \u0026gt; 0) { int left = index; int right = index; if (index % 2 == 0) { right = index + 1; } else { left = index - 1; } tree[index / 2] = tree[left] + tree[right]; index = index / 2; } // System.out.println(Arrays.toString(nums)); // System.out.println(Arrays.toString(tree)); } public int sumRange(int left, int right) { left += n; right += n; int sum = 0; while (left \u0026lt;= right) { if (left % 2 == 1) { sum += tree[left]; left++; continue; } if (right % 2 == 0) { sum += tree[right]; right--; continue; } right /= 2; left /= 2; } return sum; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * obj.update(index,val); * int param_2 = obj.sumRange(left,right); */ ","permalink":"https://volyx.in/posts/2021-09-04-range-sum-query-mutable/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/range-sum-query-mutable/\"\u003e307. Range Sum Query - Mutable\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, handle multiple queries of the following types:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUpdate the value of an element in nums.\u003c/li\u003e\n\u003cli\u003eCalculate the sum of the elements of nums between indices left and right inclusive where left \u0026lt;= right.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplement the NumArray class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNumArray(int[] nums) Initializes the object with the integer array nums.\u003c/li\u003e\n\u003cli\u003evoid update(int index, int val) Updates the value of nums[index] to be val.\u003c/li\u003e\n\u003cli\u003eint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + \u0026hellip; + nums[right]).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;NumArray\u0026#34;, \u0026#34;sumRange\u0026#34;, \u0026#34;update\u0026#34;, \u0026#34;sumRange\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 9, null, 8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNumArray numArray = new NumArray([1, 3, 5]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumArray.update(1, 2);   // nums = [1, 2, 5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"307. Range Sum Query - Mutable"},{"content":"304. Range Sum Query 2D - Immutable\nGiven a 2D matrix matrix, handle multiple queries of the following type:\nCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). Implement the NumMatrix class:\nNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix. int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2). 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input [\u0026#34;NumMatrix\u0026#34;, \u0026#34;sumRegion\u0026#34;, \u0026#34;sumRegion\u0026#34;, \u0026#34;sumRegion\u0026#34;] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] Output [null, 8, 11, 12] Explanation NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle) numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle) numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle) Constraints:\nm == matrix.length n == matrix[i].length 1 \u0026lt;= m, n \u0026lt;= 200 -10^5 \u0026lt;= matrix[i][j] \u0026lt;= 10^5 0 \u0026lt;= row1 \u0026lt;= row2 \u0026lt; m 0 \u0026lt;= col1 \u0026lt;= col2 \u0026lt; n At most 10^4 calls will be made to sumRegion. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class NumMatrix { int[][] prefix; int n; int m; public NumMatrix(int[][] matrix) { this.n = matrix.length; this.m = matrix[0].length; this.prefix = new int[n][m]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { int sum = 0; if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { sum += matrix[i][j]; sum += prefix[i - 1][j]; sum += prefix[i][j - 1]; sum -= prefix[i - 1][j - 1]; } else if (i \u0026gt; 0) { sum += matrix[i][j]; sum += prefix[i - 1][j]; } else if (j \u0026gt; 0) { sum += matrix[i][j]; sum += prefix[i][j - 1]; } else { sum = matrix[i][j]; } prefix[i][j] = sum; } } } public int sumRegion(int row1, int col1, int row2, int col2) { int big = prefix[row2][col2]; if (row1 \u0026gt; 0) { big -= prefix[row1 - 1][col2]; } if (col1 \u0026gt; 0) { big -= prefix[row2][col1 - 1]; } if (row1 \u0026gt; 0 \u0026amp;\u0026amp; col1 \u0026gt; 0) { big += prefix[row1 - 1][col1 - 1]; } return big; } } /** * Your NumMatrix object will be instantiated and called as such: * NumMatrix obj = new NumMatrix(matrix); * int param_1 = obj.sumRegion(row1,col1,row2,col2); */ ","permalink":"https://volyx.in/posts/2021-09-02-range-sum-query-2d-immutable/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/range-sum-query-2d-immutable/\"\u003e304. Range Sum Query 2D - Immutable\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a 2D matrix matrix, handle multiple queries of the following type:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplement the NumMatrix class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\u003c/li\u003e\n\u003cli\u003eint sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;NumMatrix\u0026#34;, \u0026#34;sumRegion\u0026#34;, \u0026#34;sumRegion\u0026#34;, \u0026#34;sumRegion\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 8, 11, 12]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-09-01-matrix-ex1.jpg\"\u003e\u003c/p\u003e","title":"304. Range Sum Query 2D - Immutable"},{"content":"962. Maximum Width Ramp\nA ramp in an integer array nums is a pair (i, j) for which i \u0026lt; j and nums[i] \u0026lt;= nums[j]. The width of such a ramp is j - i.\nGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [6,0,8,2,1,5] Output: 4 Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5. Example 2: Input: nums = [9,8,1,0,1,9,4,0,4,1] Output: 7 Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1. Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 5 * 10^4 0 \u0026lt;= nums[i] \u0026lt;= 5 * 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int maxWidthRamp(int[] nums) { Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { if (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; nums[i] \u0026gt; nums[stack.peek()] ) { continue; } stack.push(i); } int max = 0; for (int i = nums.length - 1; i \u0026gt;= 0; i--) { while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; nums[i] \u0026gt;= nums[stack.peek()]) { max = Math.max(max, i - stack.pop()); } } return max; } } ","permalink":"https://volyx.in/posts/2021-09-02-maximum-width-ramp/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-width-ramp/\"\u003e962. Maximum Width Ramp\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA ramp in an integer array nums is a pair (i, j) for which i \u0026lt; j and nums[i] \u0026lt;= nums[j]. The width of such a ramp is j - i.\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [6,0,8,2,1,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [9,8,1,0,1,9,4,0,4,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"962. Maximum Width Ramp"},{"content":"319. Bulb Switcher\nThere are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it\u0026rsquo;s off or turning off if it\u0026rsquo;s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.\n1 2 3 4 5 6 7 8 9 Example 1: Input: n = 3 Output: 1 Explanation: At first, the three bulbs are [off, off, off]. After the first round, the three bulbs are [on, on, on]. After the second round, the three bulbs are [on, off, on]. After the third round, the three bulbs are [on, off, off]. So you should return 1 because there is only one bulb is on. 1 2 3 4 5 6 7 8 9 Example 2: Input: n = 0 Output: 0 Example 3: Input: n = 1 Output: 1 Constraints:\n0 \u0026lt;= n \u0026lt;= 10^9 Solution 1 2 3 4 5 class Solution { public int bulbSwitch(int n) { return (int) Math.sqrt(n); } } ","permalink":"https://volyx.in/posts/2021-09-01-bulb-switcher/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/bulb-switcher/\"\u003e319. Bulb Switcher\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.\u003c/p\u003e\n\u003cp\u003eOn the third round, you toggle every third bulb (turning on if it\u0026rsquo;s off or turning off if it\u0026rsquo;s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.\u003c/p\u003e\n\u003cp\u003eReturn the number of bulbs that are on after n rounds.\u003c/p\u003e","title":"319. Bulb Switcher"},{"content":"581. Shortest Unsorted Continuous Subarray\nGiven an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\nReturn the shortest such subarray and output its length.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: nums = [2,6,4,8,10,9,15] Output: 5 Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order. Example 2: Input: nums = [1,2,3,4] Output: 0 Example 3: Input: nums = [1] Output: 0 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^4 -10^5 \u0026lt;= nums[i] \u0026lt;= 10^5 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Solution { /** [2,6,4,8,10,9,15] [2,6,4,13,10,12,15] [2,4,5,6,3] - increasing stack (2,4,5,6,3!) (2!) (15,12,10,13!) decreasing stack (15,13) */ public int findUnsortedSubarray(int[] nums) { Stack\u0026lt;Integer\u0026gt; incStack = new Stack\u0026lt;\u0026gt;(); int lo = nums.length; for (int i = 0; i \u0026lt; nums.length; i++) { while (incStack.size() \u0026gt; 0 \u0026amp;\u0026amp; nums[i] \u0026lt; nums[incStack.peek()]) { lo = Math.min(lo, incStack.pop()); } incStack.push(i); } Stack\u0026lt;Integer\u0026gt; decStack = new Stack\u0026lt;\u0026gt;(); int hi = 0; for (int i = nums.length - 1; i \u0026gt;= 0; i--) { while (decStack.size() \u0026gt; 0 \u0026amp;\u0026amp; nums[i] \u0026gt; nums[decStack.peek()]) { hi = Math.max(hi, decStack.pop()); } decStack.push(i); } return hi - lo \u0026gt; 0 ? hi - lo + 1: 0; } } ","permalink":"https://volyx.in/posts/2021-08-26-shortest-unsorted-continuous-subarray/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/\"\u003e581. Shortest Unsorted Continuous Subarray\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\u003c/p\u003e\n\u003cp\u003eReturn the shortest such subarray and output its length.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,6,4,8,10,9,15]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"581. Shortest Unsorted Continuous Subarray"},{"content":"907. Sum of Subarray Minimums\nGiven an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: arr = [3,1,2,4] Output: 17 Explanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. Sum is 17. Example 2: Input: arr = [11,81,94,43,3] Output: 444 Constraints:\n1 \u0026lt;= arr.length \u0026lt;= 3 * 10^4 1 \u0026lt;= arr[i] \u0026lt;= 3 * 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public int sumSubarrayMins(int[] arr) { // increasing stack Stack\u0026lt;Integer\u0026gt; prevLess = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;Integer\u0026gt; nextLess = new Stack\u0026lt;\u0026gt;(); int[] left = new int[arr.length]; int[] right = new int[arr.length]; for (int i = 0; i \u0026lt; arr.length; i++) { while (prevLess.size() \u0026gt; 0 \u0026amp;\u0026amp; arr[i] \u0026lt;= arr[prevLess.peek()]) { prevLess.pop(); } left[i] = prevLess.size() == 0 ? i + 1: i - prevLess.peek(); prevLess.push(i); } for (int i = arr.length - 1; i \u0026gt;=0; i--) { while (nextLess.size() \u0026gt; 0 \u0026amp;\u0026amp; arr[i] \u0026lt; arr[nextLess.peek()]) { nextLess.pop(); } right[i] = nextLess.size() == 0 ? arr.length - i: nextLess.peek() - i; nextLess.push(i); } long MOD = (long) 1e9 + 7; long res = 0; for (int i = 0; i \u0026lt; arr.length; i++) { res = (res + (long)arr[i] * left[i] * right[i]) % MOD; } return (int) res; } } ","permalink":"https://volyx.in/posts/2021-08-25-sum-of-subarray-minimums/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/sum-of-subarray-minimums/\"\u003e907. Sum of Subarray Minimums\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [3,1,2,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 17\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSum is 17.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [11,81,94,43,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 444\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"907. Sum of Subarray Minimums"},{"content":"398. Random Pick Index\nGiven an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\nImplement the Solution class:\nSolution(int[] nums) Initializes the object with the array nums. int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i\u0026rsquo;s, then each index should have an equal probability of returning. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input [\u0026#34;Solution\u0026#34;, \u0026#34;pick\u0026#34;, \u0026#34;pick\u0026#34;, \u0026#34;pick\u0026#34;] [[[1, 2, 3, 3, 3]], [3], [1], [3]] Output [null, 4, 0, 2] Explanation Solution solution = new Solution([1, 2, 3, 3, 3]); solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1. solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 2 * 104 -2^31 \u0026lt;= nums[i] \u0026lt;= 2^31 - 1 target is an integer from nums. At most 10^4 calls will be made to pick. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { Random random = new Random(); Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; valueCount = new HashMap\u0026lt;\u0026gt;(); public Solution(int[] nums) { for (int i = 0; i \u0026lt; nums.length; i++) { int num = nums[i]; List\u0026lt;Integer\u0026gt; indexes = valueCount.getOrDefault(num, new ArrayList\u0026lt;\u0026gt;()); indexes.add(i); valueCount.put(num, indexes); } } public int pick(int target) { List\u0026lt;Integer\u0026gt; indexes = valueCount.get(target); int index = random.nextInt(indexes.size()); return indexes.get(index); } } /** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(nums); * int param_1 = obj.pick(target); */ Solution 2021-01-29 Reservour sampling 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { int[] nums; Random random = new Random(); public Solution(int[] nums) { this.nums = nums; } public int pick(int target) { int count = 0; int id = 0; for (int i = 0; i \u0026lt; nums.length; i++) { int num = nums[i]; if (num != target) continue; if (random.nextInt(++count) == 0) { id = i; } } return id; } } /** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(nums); * int param_1 = obj.pick(target); */ ","permalink":"https://volyx.in/posts/2021-08-23-random-pick-index-copy/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/random-pick-index/\"\u003e398. Random Pick Index\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\u003c/p\u003e\n\u003cp\u003eImplement the Solution class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSolution(int[] nums) Initializes the object with the array nums.\u003c/li\u003e\n\u003cli\u003eint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i\u0026rsquo;s, then each index should have an equal probability of returning.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;Solution\u0026#34;, \u0026#34;pick\u0026#34;, \u0026#34;pick\u0026#34;, \u0026#34;pick\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[1, 2, 3, 3, 3]], [3], [1], [3]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 4, 0, 2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSolution solution = new Solution([1, 2, 3, 3, 3]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"398. Random Pick Index"},{"content":"364. Nested List Weight Sum II\nYou are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.\nThe depth of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer\u0026rsquo;s value set to its depth. Let maxDepth be the maximum depth of any integer.\nThe weight of an integer is maxDepth - (the depth of the integer) + 1.\nReturn the sum of each integer in nestedList multiplied by its weight.\n1 2 3 4 5 6 Example 1: Input: nestedList = [[1,1],2,[1,1]] Output: 8 Explanation: Four 1\u0026#39;s with a weight of 1, one 2 with a weight of 2. 1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8 ex1\n1 2 3 4 5 6 Example 2: Input: nestedList = [1,[4,[6]]] Output: 17 Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1. 1*3 + 4*2 + 6*1 = 17 ex2\nConstraints:\n1 \u0026lt;= nestedList.length \u0026lt;= 50 The values of the integers in the nested list is in the range [-100, 100]. The maximum depth of any integer is less than or equal to 50. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 /** * // This is the interface that allows for creating nested lists. * // You should not implement it, or speculate about its implementation * public interface NestedInteger { * // Constructor initializes an empty nested list. * public NestedInteger(); * * // Constructor initializes a single integer. * public NestedInteger(int value); * * // @return true if this NestedInteger holds a single integer, rather than a nested list. * public boolean isInteger(); * * // @return the single integer that this NestedInteger holds, if it holds a single integer * // Return null if this NestedInteger holds a nested list * public Integer getInteger(); * * // Set this NestedInteger to hold a single integer. * public void setInteger(int value); * * // Set this NestedInteger to hold a nested list and adds a nested integer to it. * public void add(NestedInteger ni); * * // @return the nested list that this NestedInteger holds, if it holds a nested list * // Return empty list if this NestedInteger holds a single integer * public List\u0026lt;NestedInteger\u0026gt; getList(); * } */ class Solution { int max = 0; int sum = 0; public int depthSumInverse(List\u0026lt;NestedInteger\u0026gt; nestedList) { for (NestedInteger nested: nestedList) { depth(nested, 1); } // print(nestedList); // System.out.println(); // System.out.println(max); for (NestedInteger nested: nestedList) { sum(nested, 1); } return sum; } void sum(NestedInteger nested, int level) { if (nested.isInteger()) { sum += (max - level + 1) * nested.getInteger(); return; } for (NestedInteger child: nested.getList()) { sum(child, level + 1); } } void depth(NestedInteger nested, int level) { max = Math.max(max, level); if (nested.isInteger()) { return; } for (NestedInteger child: nested.getList()) { depth(child, level + 1); } } void print(List\u0026lt;NestedInteger\u0026gt; nestedList) { for (NestedInteger nested: nestedList) { if (nested.isInteger()) { System.out.print(nested.getInteger() + \u0026#34; \u0026#34;); } else { System.out.print(\u0026#34;[\u0026#34;); print(nested.getList()); System.out.print(\u0026#34;]\u0026#34;); } } } } ","permalink":"https://volyx.in/posts/2021-08-20-nested-list-weight-sum-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/nested-list-weight-sum-ii/\"\u003e364. Nested List Weight Sum II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists.\u003c/p\u003e\n\u003cp\u003eThe depth of an integer is the number of lists that it is inside of. For example, the nested list [1,[2,2],[[3],2],1] has each integer\u0026rsquo;s value set to its depth. Let maxDepth be the maximum depth of any integer.\u003c/p\u003e","title":"364. Nested List Weight Sum II"},{"content":"901. Online Stock Span\nDesign an algorithm that collects daily price quotes for some stock and returns the span of that stock\u0026rsquo;s price for the current day.\nThe span of the stock\u0026rsquo;s price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today\u0026rsquo;s price.\nFor example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6]. Implement the StockSpanner class:\nStockSpanner() Initializes the object of the class. int next(int price) Returns the span of the stock\u0026rsquo;s price given that today\u0026rsquo;s price is price. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input [\u0026#34;StockSpanner\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;, \u0026#34;next\u0026#34;] [[], [100], [80], [60], [70], [60], [75], [85]] Output [null, 1, 1, 1, 2, 1, 4, 6] Explanation StockSpanner stockSpanner = new StockSpanner(); stockSpanner.next(100); // return 1 stockSpanner.next(80); // return 1 stockSpanner.next(60); // return 1 stockSpanner.next(70); // return 2 stockSpanner.next(60); // return 1 stockSpanner.next(75); // return 4, because the last 4 prices (including today\u0026#39;s price of 75) were less than or equal to today\u0026#39;s price. stockSpanner.next(85); // return 6 Constraints:\n1 \u0026lt;= price \u0026lt;= 10^5 At most 104 calls will be made to next. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class StockSpanner { // decresaing stack Stack\u0026lt;Integer\u0026gt; priceStack = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;Integer\u0026gt; spanStack = new Stack\u0026lt;\u0026gt;(); /* 100 80 (60) 70 60 75 1 1 (1) 2 1 */ public StockSpanner() { } public int next(int price) { int span = 1; while (priceStack.size() \u0026gt; 0 \u0026amp;\u0026amp; priceStack.peek() \u0026lt;= price) { int prevPrice = priceStack.pop(); int prevSpan = spanStack.pop(); span += prevSpan; } priceStack.push(price); spanStack.push(span); return span; } } /** * Your StockSpanner object will be instantiated and called as such: * StockSpanner obj = new StockSpanner(); * int param_1 = obj.next(price); */ ","permalink":"https://volyx.in/posts/2021-08-19-online-stock-span/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/online-stock-span/\"\u003e901. Online Stock Span\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDesign an algorithm that collects daily price quotes for some stock and returns the span of that stock\u0026rsquo;s price for the current day.\u003c/p\u003e\n\u003cp\u003eThe span of the stock\u0026rsquo;s price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today\u0026rsquo;s price.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplement the StockSpanner class:\u003c/p\u003e","title":"901. Online Stock Span"},{"content":"1762. Buildings With an Ocean View\nThere are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.\nThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.\nReturn a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: heights = [4,2,3,1] Output: [0,2,3] Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller. Example 2: Input: heights = [4,3,2,1] Output: [0,1,2,3] Explanation: All the buildings have an ocean view. Example 3: Input: heights = [1,3,2,4] Output: [3] Explanation: Only building 3 has an ocean view. Example 4: Input: heights = [2,2,2,2] Output: [3] Explanation: Buildings cannot see the ocean if there are buildings of the same height to its right. Constraints:\n1 \u0026lt;= heights.length \u0026lt;= 10^5 1 \u0026lt;= heights[i] \u0026lt;= 10^9 Solution Decresing Monotonick Stack 2021-08-18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int[] findBuildings(int[] heights) { Stack\u0026lt;Integer\u0026gt; pos = new Stack\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; heights.length; i++) { while (pos.size() \u0026gt; 0 \u0026amp;\u0026amp; heights[pos.peek()] \u0026lt;= heights[i]) { pos.pop(); } pos.push(i); } int[] res = new int[pos.size()]; for (int i = pos.size() - 1; i \u0026gt;= 0; i--) { res[i] = pos.pop(); } return res; } } Solution Increasing Monotonick Stack 2022-01-24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int[] findBuildings(int[] heights) { Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int n = heights.length; stack.push(n - 1); for (int i = n - 2; i \u0026gt;= 0; i--) { if (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; heights[stack.peek()] \u0026lt; heights[i]) { stack.push(i); } } int[] res = new int[stack.size()]; int i = 0; while (stack.size() \u0026gt; 0) { res[i++] = stack.pop(); } return res; } } ","permalink":"https://volyx.in/posts/2021-08-18-buildings-with-an-ocean-view/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/buildings-with-an-ocean-view/\"\u003e1762. Buildings With an Ocean View\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n buildings in a line. You are given an integer array heights of size n that represents the heights of the buildings in the line.\u003c/p\u003e\n\u003cp\u003eThe ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.\u003c/p\u003e","title":"1762. Buildings With an Ocean View"},{"content":"84. Largest Rectangle in Histogram\nGiven an array of integers heights representing the histogram\u0026rsquo;s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\n1 2 3 4 5 6 Example 1: Input: heights = [2,1,5,6,2,3] Output: 10 Explanation: The above is a histogram where width of each bar is 1. The largest rectangle is shown in the red area, which has an area = 10 units. 1 2 3 4 Example 2: Input: heights = [2,4] Output: 4 Constraints:\n1 \u0026lt;= heights.length \u0026lt;= 105 0 \u0026lt;= heights[i] \u0026lt;= 104 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 class Solution { public int largestRectangleArea(int[] heights) { int max = 0; Stack\u0026lt;Integer\u0026gt; posStack = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;Integer\u0026gt; heightStack = new Stack\u0026lt;\u0026gt;(); for (int right = 0; right \u0026lt;= heights.length; right++) { int rightHeight = (right == heights.length) ? 0: heights[right]; while (posStack.size() \u0026gt; 0 \u0026amp;\u0026amp; heightStack.peek() \u0026gt; rightHeight) { int left = posStack.pop(); int leftHeight = heightStack.pop(); int sideLength = posStack.size() \u0026gt; 0 ? (right - posStack.peek() - 1): right; int square = leftHeight * sideLength; // System.out.printf(\u0026#34;[%d,%d] = %d %n\u0026#34;, sideLength, right, square); max = Math.max(max, square); } int left = 0; int minHeight = rightHeight; if (posStack.size() \u0026gt; 0) { left = posStack.peek(); minHeight = heightStack.peek(); } int square = minHeight * (right - left - 1); // System.out.printf(\u0026#34;last [%d,%d] = %d %n\u0026#34;, left, right, square); max = Math.max(max, square); posStack.push(right); heightStack.push(rightHeight); } return max; } public int largestRectangleArea1(int[] heights) { int max = 0; Stack\u0026lt;Integer\u0026gt; posStack = new Stack\u0026lt;\u0026gt;(); Stack\u0026lt;Integer\u0026gt; heightStack = new Stack\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt;= heights.length; i++) { int h = (i == heights.length) ? 0: heights[i]; while (posStack.size() \u0026gt; 0 \u0026amp;\u0026amp; heightStack.peek() \u0026gt; h) { int left = posStack.pop(); int leftHeight = heightStack.pop(); int sideLength = posStack.size() \u0026gt; 0 ? (i - posStack.peek() - 1): i; int square = leftHeight * sideLength; System.out.printf(\u0026#34;[%d,%d] = %d %n\u0026#34;, sideLength, i, square); max = Math.max(max, square); } posStack.push(i); heightStack.push(h); } while (posStack.size() \u0026gt; 0) { int right = posStack.pop(); int rightHeight = heightStack.pop(); int left = 0; int minHeight = rightHeight; if (posStack.size() \u0026gt; 0) { left = posStack.peek(); minHeight = heightStack.peek(); } int square = minHeight * (right - left - 1); System.out.printf(\u0026#34;last [%d,%d] = %d %n\u0026#34;, left, right, square); max = Math.max(max, square); } return max; } public int largestRectangleArea2(int[] heights) { int max = 0; for (int i = 0; i \u0026lt; heights.length; i++) { for (int j = i; j \u0026lt; heights.length; j++) { int minH = heights[i]; for (int k = i; k \u0026lt;= j; k++) { minH = Math.min(heights[k], minH); } int square = minH * (j - i + 1); // System.out.printf(\u0026#34;[%d,%d] = %d %n\u0026#34;, i, j, square); max = Math.max(max, square); } } return max; } public int largestRectangleArea3(int[] heights) { int max = 0; for (int i = 0; i \u0026lt; heights.length; i++) { int h = heights[i]; int minH = h; for (int j = i; j \u0026lt; heights.length; j++) { minH = Math.min(heights[j], minH); int square = minH * (j - i + 1); max = Math.max(max, square); System.out.printf(\u0026#34;[%d,%d] = %d %n\u0026#34;, i, j, square); } } return max; } } ","permalink":"https://volyx.in/posts/2021-08-17-largest-rectangle-in-histogram/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/largest-rectangle-in-histogram/\"\u003e84. Largest Rectangle in Histogram\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers heights representing the histogram\u0026rsquo;s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: heights = [2,1,5,6,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The above is a histogram where width of each bar is 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe largest rectangle is shown in the red area, which has an area = 10 units.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-08-17-ex1.jpg\"\u003e\u003c/p\u003e","title":"84. Largest Rectangle in Histogram"},{"content":"1360. Number of Days Between Two Dates\nWrite a program to count the number of days between two dates.\nThe two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.\n1 2 3 4 5 6 7 8 9 Example 1: Input: date1 = \u0026#34;2019-06-29\u0026#34;, date2 = \u0026#34;2019-06-30\u0026#34; Output: 1 Example 2: Input: date1 = \u0026#34;2020-01-15\u0026#34;, date2 = \u0026#34;2019-12-31\u0026#34; Output: 15 Constraints:\nThe given dates are valid dates between the years 1971 and 2100. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import java.time.*; class Solution { public int daysBetweenDates(String date1, String date2) { return Math.abs(countDays(date1) - countDays(date2)); } int [] MONTHS = new int[] {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; int countDays(String date) { String[] parts = date.split(\u0026#34;-\u0026#34;); Integer years = Integer.parseInt(parts[0]); Integer months = Integer.parseInt(parts[1]); Integer days = Integer.parseInt(parts[2]); for (int year = 1971; year \u0026lt; years; year++) { if (isLeapYear(year)) { days += 366; } else { days += 365; } } for (int month = 1; month \u0026lt; months; month++) { if (isLeapYear(years) \u0026amp;\u0026amp; month == 2) { days += 29; } else { days += MONTHS[month]; } } return days; } boolean isLeapYear(int year) { return (year % 4 == 0 \u0026amp;\u0026amp; year % 100 != 0) || (year % 400 == 0); } public int daysBetweenDates2(String date1, String date2) { LocalDateTime time1 = LocalDate.parse(date1).atTime(LocalTime.NOON); LocalDateTime time2 = LocalDate.parse(date2).atTime(LocalTime.NOON); Duration duration = Duration.between(time1, time2); return (int) Math.abs(duration.toDays()); } } ","permalink":"https://volyx.in/posts/2021-08-15-number-of-days-between-two-dates/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/number-of-days-between-two-dates/\"\u003e1360. Number of Days Between Two Dates\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWrite a program to count the number of days between two dates.\u003c/p\u003e\n\u003cp\u003eThe two dates are given as strings, their format is YYYY-MM-DD as shown in the examples.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: date1 = \u0026#34;2019-06-29\u0026#34;, date2 = \u0026#34;2019-06-30\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: date1 = \u0026#34;2020-01-15\u0026#34;, date2 = \u0026#34;2019-12-31\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 15\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1360. Number of Days Between Two Dates"},{"content":"827. Making A Large Island\nYou are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: grid = [[1,0],[0,1]] Output: 3 Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3. Example 2: Input: grid = [[1,1],[1,0]] Output: 4 Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4. Example 3: Input: grid = [[1,1],[1,1]] Output: 4 Explanation: Can\u0026#39;t change any 0 to 1, only one island with area = 4. Constraints:\nn == grid.length n == grid[i].length 1 \u0026lt;= n \u0026lt;= 500 grid[i][j] is either 0 or 1. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class Solution { int[][] DIRECTIONS = new int[][] { new int[] {0,1}, // t new int[] {1,0}, // r new int[] {0, -1}, // d new int[] {-1, 0} }; public int largestIsland(int[][] matrix) { // check n,m int max = 0; Map\u0026lt;Integer, Integer\u0026gt; sizes = new HashMap\u0026lt;\u0026gt;(); int idx = 2; int n = matrix.length; int m = matrix[0].length; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (matrix[i][j] == 1) { dfs(i, j, matrix, sizes, idx); max = Math.max(max, sizes.getOrDefault(idx, 0)); idx++; } } } // [2=4,3=1,4=2,5=1] // 5(1) //2(4) 0 4(2) // 0 // [1,1,1] // [1,0,1] // [1,1,1] // [2,2,2] // [2,0,2] // [2,2,2] // sizes[2=8] for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (matrix[i][j] == 0) { int newSize = 1; Set\u0026lt;Integer\u0026gt; closestIslands = new HashSet\u0026lt;\u0026gt;(); for (int[] dir: DIRECTIONS) { int x = i + dir[0]; int y = j + dir[1]; if (x \u0026lt; 0 || x \u0026gt;= n || y \u0026lt; 0 || y \u0026gt;= m) { continue; } closestIslands.add(matrix[x][y]); } for (Integer id: closestIslands) { newSize += sizes.getOrDefault(id, 0); } max = Math.max(max, newSize); } } } return max; } void dfs(int i, int j, int[][] matrix, Map\u0026lt;Integer, Integer\u0026gt; sizes, int idx) { int n = matrix.length; int m = matrix[0].length; if (i \u0026lt; 0 || i \u0026gt;= n || j \u0026lt; 0 || j \u0026gt;= m) { return; } matrix[i][j] = idx; sizes.put(idx, sizes.getOrDefault(idx, 0) + 1); for (int[] dir: DIRECTIONS) { int x = i + dir[0]; int y = j + dir[1]; if (x \u0026lt; 0 || x \u0026gt;= n || y \u0026lt; 0 || y \u0026gt;= m) { continue; } if (matrix[x][y] == 1) { // BUG dfs(x, y, matrix, sizes, idx); } } } } ","permalink":"https://volyx.in/posts/2021-08-06-making-a-large-island/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/making-a-large-island/\"\u003e827. Making A Large Island\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\u003c/p\u003e\n\u003cp\u003eReturn the size of the largest island in grid after applying this operation.\u003c/p\u003e\n\u003cp\u003eAn island is a 4-directionally connected group of 1s.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: grid = [[1,0],[0,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: grid = [[1,1],[1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: grid = [[1,1],[1,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Can\u0026#39;t change any 0 to 1, only one island with area = 4.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"827. Making A Large Island"},{"content":"1168. Optimize Water Distribution in a Village\nThere are n houses in a village. We want to supply water for all the houses by building wells and laying pipes.\nFor each house i, we can either build a well inside it directly with cost wells[i - 1] (note the -1 due to 0-indexing), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array pipes, where each pipes[j] = [house1j, house2j, costj] represents the cost to connect house1j and house2j together using a pipe. Connections are bidirectional.\nReturn the minimum total cost to supply water to all houses.\n1 2 3 4 5 6 7 Example 1: Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]] Output: 3 Explanation: The image shows the costs of connecting houses using pipes. The best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3. Constraints:\n1 \u0026lt;= n \u0026lt;= 104 wells.length == n 0 \u0026lt;= wells[i] \u0026lt;= 105 1 \u0026lt;= pipes.length \u0026lt;= 104 pipes[j].length == 3 1 \u0026lt;= house1j, house2j \u0026lt;= n 0 \u0026lt;= costj \u0026lt;= 105 house1j != house2j Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class Solution { public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; edgeList = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; pipes.length; i++) { int[] pipe = pipes[i]; int from = pipe[0]; int to = pipe[1]; edgeList.add(Arrays.asList(from, to, pipe[2])); edgeList.add(Arrays.asList(to, from, pipe[2])); } for (int i = 0; i \u0026lt; n; i++) { edgeList.add(Arrays.asList(0, i + 1, wells[i])); edgeList.add(Arrays.asList(i + 1, 0, wells[i])); } PriorityQueue\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; queue = new PriorityQueue\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt;((a, b) -\u0026gt; { return a.get(2) - b.get(2); }); for (List\u0026lt;Integer\u0026gt; edge: edgeList) { queue.add(edge); } int cost = 0; UF uf = new UF(100_000); while (queue.size() \u0026gt; 0) { List\u0026lt;Integer\u0026gt; edge = queue.poll(); int from = edge.get(0); int to = edge.get(1); if (!uf.isConnected(from, to)) { uf.connect(from, to); cost += edge.get(2); } } return cost; } class UF { int n; int[] a; int[] sizes; public UF(int n) { this.a = new int[n]; this.n = n; this.sizes = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } void connect(int p, int q) { int pid = parent(p); int qid = parent(q); if (sizes[pid] \u0026gt; sizes[qid]) { a[qid] = pid; sizes[pid] += sizes[qid]; } else { a[pid] = qid; sizes[qid] += sizes[pid]; } } boolean isConnected(int i, int j) { return parent(i) == parent(j); } int parent(int i) { while (i != a[i]) { i = a[i]; } return i; } } } ","permalink":"https://volyx.in/posts/2021-08-01-optimize-water-distribution-in-a-village/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/shuffle-string/\"\u003e1168. Optimize Water Distribution in a Village\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n houses in a village. We want to supply water for all the houses by building wells and laying pipes.\u003c/p\u003e\n\u003cp\u003eFor each house i, we can either build a well inside it directly with cost wells[i - 1] (note the -1 due to 0-indexing), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array pipes, where each pipes[j] = [house1j, house2j, costj] represents the cost to connect house1j and house2j together using a pipe. Connections are bidirectional.\u003c/p\u003e","title":"1168. Optimize Water Distribution in a Village"},{"content":"1528. Shuffle String\nA city\u0026rsquo;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\nlefti is the x coordinate of the left edge of the ith building. righti is the x coordinate of the right edge of the ith building. heighti is the height of the ith building. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \u0026ldquo;key points\u0026rdquo; sorted by their x-coordinate in the form [[x1,y1],[x2,y2],\u0026hellip;]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline\u0026rsquo;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline\u0026rsquo;s contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [\u0026hellip;,[2 3],[4 5],[7 5],[11 5],[12 7],\u0026hellip;] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [\u0026hellip;,[2 3],[4 5],[12 7],\u0026hellip;]\n1 2 3 4 5 6 7 Example 1: Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] Explanation: Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list. 1 2 3 4 Example 2: Input: buildings = [[0,2,3],[2,5,3]] Output: [[0,3],[5,0]] Constraints:\n1 \u0026lt;= buildings.length \u0026lt;= 104 0 \u0026lt;= lefti \u0026lt; righti \u0026lt;= 231 - 1 1 \u0026lt;= heighti \u0026lt;= 231 - 1 buildings is sorted by lefti in non-decreasing order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; getSkyline(int[][] buildings) { List\u0026lt;Point\u0026gt; points = new ArrayList\u0026lt;\u0026gt;(); for (int[] building: buildings) { int left = building[0]; int right = building[1]; int height = building[2]; points.add(new Point(left, height, true)); points.add(new Point(right, height, false)); } Collections.sort(points); // TreeMap\u0026lt;Integer, Integer\u0026gt; queue = new TreeMap\u0026lt;Integer, Integer\u0026gt;(); PriorityQueue\u0026lt;Integer\u0026gt; heap = new PriorityQueue\u0026lt;\u0026gt;(Collections.reverseOrder()); // queue.put(0, 1); heap.add(0); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int prevMax = 0; for (Point p: points) { if (p.isStart) { // queue.compute(p.h, (key, value) -\u0026gt; { // if (value != null) { // return value + 1; // } // return 1; // }); heap.add(p.h); } else { // queue.compute(p.h, (key, value) -\u0026gt; { // if (value == 1) { // return null; // } // return value - 1; // }); heap.remove(p.h); } // int currentMax = queue.lastKey(); int currentMax= heap.peek(); if (currentMax != prevMax) { res.add(Arrays.asList(p.x, currentMax)); prevMax = currentMax; } } return res; } class Point implements Comparable\u0026lt;Point\u0026gt; { int x; int h; boolean isStart; Point(int x, int h, boolean isStart) { this.x = x; this.h = h; this.isStart = isStart; } //first compare by x. //If they are same then use this logic //if two starts are compared then higher height building should be picked first //if two ends are compared then lower height building should be picked first //if one start and end is compared then start should appear before end public int compareTo(Point other) { int compare = Integer.compare(this.x, other.x); if (compare != 0) return compare; /* ┌─────────────┐ ├──────┐ │ │ │ │ └──────┴──────┘ */ if (this.isStart \u0026amp;\u0026amp; other.isStart) { return - Integer.compare(this.h, other.h); } /* +------------+ | +-------+ | | | +----+-------+ */ if (!this.isStart \u0026amp;\u0026amp; !other.isStart) { return Integer.compare(this.h, other.h); } /* +---+ +---+ | +---+---+ */ return -Boolean.compare(this.isStart, other.isStart); } } } ","permalink":"https://volyx.in/posts/2021-07-31-shuffle-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/shuffle-string/\"\u003e1528. Shuffle String\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA city\u0026rsquo;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\u003c/p\u003e\n\u003cp\u003eThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elefti is the x coordinate of the left edge of the ith building.\u003c/li\u003e\n\u003cli\u003erighti is the x coordinate of the right edge of the ith building.\u003c/li\u003e\n\u003cli\u003eheighti is the height of the ith building.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\u003c/p\u003e","title":"1528. Shuffle String"},{"content":"1266. Minimum Time Visiting All Points\nOn a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\nYou can move according to these rules:\nIn 1 second, you can either: move vertically by one unit, move horizontally by one unit, or move diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second). You have to visit the points in the same order as they appear in the array. You are allowed to pass through points that appear later in the order, but these do not count as visits. 1 2 3 4 5 6 7 8 Example 1: Input: points = [[1,1],[3,4],[-1,0]] Output: 7 Explanation: One optimal path is [1,1] -\u0026gt; [2,2] -\u0026gt; [3,3] -\u0026gt; [3,4] -\u0026gt; [2,3] -\u0026gt; [1,2] -\u0026gt; [0,1] -\u0026gt; [-1,0] Time from [1,1] to [3,4] = 3 seconds Time from [3,4] to [-1,0] = 4 seconds Total time = 7 seconds 1 2 3 4 Example 2: Input: points = [[3,2],[-2,2]] Output: 5 Constraints:\npoints.length == n 1 \u0026lt;= n \u0026lt;= 100 points[i].length == 2 -1000 \u0026lt;= points[i][0], points[i][1] \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Solution { public int minTimeToVisitAllPoints(int[][] points) { int count = 0; int i = 0; while (i \u0026lt; points.length - 1) { count += chebishevDistance(points[i], points[i + 1]); i++; } return count; } int chebishevDistance(int[] a, int[] b) { return Math.max(Math.abs(a[0] - b[0]), Math.abs(a[1] - b[1])); } int[][] DIRECTIONS = new int[][] { new int[] {0,1}, // top new int[] {1,1}, // top r new int[] {1,0}, // r new int[] {1,-1}, // down r new int[] {0,-1}, // down new int[] {-1,-1}, // down l new int[] {-1,0}, // l new int[] {-1,1}, // top l }; public int minTimeToVisitAllPoints2(int[][] points) { int i = 0; int[] current = points[i]; int count = 0; while (i \u0026lt; points.length - 1) { int[] next = points[i + 1]; if (Arrays.equals(current, next)) { i++; continue; } double minDist = Double.MAX_VALUE; int[] bestStep = null; for (int[] dir: DIRECTIONS) { int[] nextStep = new int[] {current[0] + dir[0], current[1] + dir[1]}; double distance = distance(nextStep, next); if (distance \u0026lt; minDist) { minDist = distance; bestStep = nextStep; } } current = bestStep; count++; } return count; } double distance(int[] a, int[] b) { double x2 = (a[0] - b[0]) * (a[0] - b[0]); double y2 = (a[1] - b[1]) * (a[1] - b[1]); return Math.sqrt(x2 + y2); } } ","permalink":"https://volyx.in/posts/2021-07-30-minimum-time-visiting-all-points/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-time-visiting-all-points/\"\u003e1266. Minimum Time Visiting All Points\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOn a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\u003c/p\u003e\n\u003cp\u003eYou can move according to these rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIn 1 second, you can either:\nmove vertically by one unit,\nmove horizontally by one unit, or\nmove diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).\u003c/li\u003e\n\u003cli\u003eYou have to visit the points in the same order as they appear in the array.\u003c/li\u003e\n\u003cli\u003eYou are allowed to pass through points that appear later in the order, but these do not count as visits.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[1,1],[3,4],[-1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: One optimal path is [1,1] -\u0026gt; [2,2] -\u0026gt; [3,3] -\u0026gt; [3,4] -\u0026gt; [2,3] -\u0026gt; [1,2] -\u0026gt; [0,1] -\u0026gt; [-1,0]   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTime from [1,1] to [3,4] = 3 seconds \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTime from [3,4] to [-1,0] = 4 seconds\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eTotal time = 7 seconds\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[3,2],[-2,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1266. Minimum Time Visiting All Points"},{"content":"218. The Skyline Problem\nA city\u0026rsquo;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\nlefti is the x coordinate of the left edge of the ith building. righti is the x coordinate of the right edge of the ith building. heighti is the height of the ith building. You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \u0026ldquo;key points\u0026rdquo; sorted by their x-coordinate in the form [[x1,y1],[x2,y2],\u0026hellip;]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline\u0026rsquo;s termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline\u0026rsquo;s contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [\u0026hellip;,[2 3],[4 5],[7 5],[11 5],[12 7],\u0026hellip;] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [\u0026hellip;,[2 3],[4 5],[12 7],\u0026hellip;]\n1 2 3 4 5 6 7 Example 1: Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] Explanation: Figure A shows the buildings of the input. Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list. 1 2 3 4 Example 2: Input: buildings = [[0,2,3],[2,5,3]] Output: [[0,3],[5,0]] Constraints:\n1 \u0026lt;= buildings.length \u0026lt;= 104 0 \u0026lt;= lefti \u0026lt; righti \u0026lt;= 231 - 1 1 \u0026lt;= heighti \u0026lt;= 231 - 1 buildings is sorted by lefti in non-decreasing order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; getSkyline(int[][] buildings) { List\u0026lt;Point\u0026gt; points = new ArrayList\u0026lt;\u0026gt;(); for (int[] building: buildings) { int left = building[0]; int right = building[1]; int height = building[2]; points.add(new Point(left, height, true)); points.add(new Point(right, height, false)); } Collections.sort(points); // TreeMap\u0026lt;Integer, Integer\u0026gt; queue = new TreeMap\u0026lt;Integer, Integer\u0026gt;(); PriorityQueue\u0026lt;Integer\u0026gt; heap = new PriorityQueue\u0026lt;\u0026gt;(Collections.reverseOrder()); // queue.put(0, 1); heap.add(0); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int prevMax = 0; for (Point p: points) { if (p.isStart) { // queue.compute(p.h, (key, value) -\u0026gt; { // if (value != null) { // return value + 1; // } // return 1; // }); heap.add(p.h); } else { // queue.compute(p.h, (key, value) -\u0026gt; { // if (value == 1) { // return null; // } // return value - 1; // }); heap.remove(p.h); } // int currentMax = queue.lastKey(); int currentMax= heap.peek(); if (currentMax != prevMax) { res.add(Arrays.asList(p.x, currentMax)); prevMax = currentMax; } } return res; } class Point implements Comparable\u0026lt;Point\u0026gt; { int x; int h; boolean isStart; Point(int x, int h, boolean isStart) { this.x = x; this.h = h; this.isStart = isStart; } //first compare by x. //If they are same then use this logic //if two starts are compared then higher height building should be picked first //if two ends are compared then lower height building should be picked first //if one start and end is compared then start should appear before end public int compareTo(Point other) { int compare = Integer.compare(this.x, other.x); if (compare != 0) return compare; /* ┌─────────────┐ ├──────┐ │ │ │ │ └──────┴──────┘ */ if (this.isStart \u0026amp;\u0026amp; other.isStart) { return - Integer.compare(this.h, other.h); } /* +------------+ | +-------+ | | | +----+-------+ */ if (!this.isStart \u0026amp;\u0026amp; !other.isStart) { return Integer.compare(this.h, other.h); } /* +---+ +---+ | +---+---+ */ return -Boolean.compare(this.isStart, other.isStart); } } } ","permalink":"https://volyx.in/posts/2021-07-30-the-skyline-problem/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/the-skyline-problem/\"\u003e218. The Skyline Problem\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA city\u0026rsquo;s skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\u003c/p\u003e\n\u003cp\u003eThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elefti is the x coordinate of the left edge of the ith building.\u003c/li\u003e\n\u003cli\u003erighti is the x coordinate of the right edge of the ith building.\u003c/li\u003e\n\u003cli\u003eheighti is the height of the ith building.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\u003c/p\u003e","title":"218. The Skyline Problem"},{"content":"270. Closest Binary Search Tree Value\nGiven the root of a binary search tree and a target value, return the value in the BST that is closest to the target.\n1 2 3 4 Example 1: Input: root = [4,2,5,1,3], target = 3.714286 Output: 4 1 2 3 4 Example 2: Input: root = [1], target = 4.428571 Output: 1 Constraints:\nThe number of nodes in the tree is in the range [1, 104]. 0 \u0026lt;= Node.val \u0026lt;= 10^9 -10^9 \u0026lt;= target \u0026lt;= 10^9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { //////////////// O(logN) //////////////////////// public int closestValue(TreeNode root, double target) { int closest = root.val; while (root != null) { if (Math.abs(root.val - target) \u0026lt; Math.abs(closest - target)) { closest = root.val; } root = root.val \u0026gt; target ? root.left: root.right; } return closest; } //////////////// O(N) //////////////////////// int closest; double closestDelta; public int closestValue2(TreeNode root, double target) { closest = root.val; closestDelta = Math.abs((double) root.val - target); find(root, target); return closest; } void find(TreeNode node, double target) { if (node == null) return; double currentDelta = Math.abs((double) node.val - target); if (currentDelta \u0026lt; closestDelta) { closest = node.val; closestDelta = currentDelta; } find(node.left, target); find(node.right, target); } ///////////// In Order Traversal O(N) public int closestValue1(TreeNode root, double target) { Deque\u0026lt;TreeNode\u0026gt; deq = new ArrayDeque\u0026lt;\u0026gt;(); long prev = Long.MIN_VALUE; while (deq.size() \u0026gt; 0 || root != null) { while (root != null) { deq.offerLast(root); root = root.left; } root = deq.removeLast(); if (prev \u0026lt;= target \u0026amp;\u0026amp; target \u0026lt; root.val) { if (Math.abs(target - prev) \u0026lt; Math.abs(target - root.val)) { return (int) prev; } else { return root.val; } } prev = root.val; root = root.right; } return (int) prev; } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public int closestValue(TreeNode root, double target) { int closest = root.val; while (root != null) { if (Math.abs(target - root.val) \u0026lt; Math.abs(closest - target)) { closest = root.val; } root = (root.val \u0026gt; target) ? root.left: root.right; } return closest; } } ","permalink":"https://volyx.in/posts/2021-07-26-closest-binary-search-tree-value/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/closest-binary-search-tree-value/\"\u003e270. Closest Binary Search Tree Value\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary search tree and a target value, return the value in the BST that is closest to the target.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [4,2,5,1,3], target = 3.714286\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-07-26-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1], target = 4.428571\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"270. Closest Binary Search Tree Value"},{"content":"71. Simplify Path\nGiven a string path, which is an absolute path (starting with a slash \u0026lsquo;/\u0026rsquo;) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period \u0026lsquo;.\u0026rsquo; refers to the current directory, a double period \u0026lsquo;..\u0026rsquo; refers to the directory up a level, and any multiple consecutive slashes (i.e. \u0026lsquo;//\u0026rsquo;) are treated as a single slash \u0026lsquo;/\u0026rsquo;. For this problem, any other format of periods such as \u0026lsquo;\u0026hellip;\u0026rsquo; are treated as file/directory names.\nThe canonical path should have the following format:\nThe path starts with a single slash \u0026lsquo;/\u0026rsquo;. Any two directories are separated by a single slash \u0026lsquo;/\u0026rsquo;. The path does not end with a trailing \u0026lsquo;/\u0026rsquo;. The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period \u0026lsquo;.\u0026rsquo; or double period \u0026lsquo;..\u0026rsquo;) Return the simplified canonical path.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 Example 1: Input: path = \u0026#34;/home/\u0026#34; Output: \u0026#34;/home\u0026#34; Explanation: Note that there is no trailing slash after the last directory name. Example 2: Input: path = \u0026#34;/../\u0026#34; Output: \u0026#34;/\u0026#34; Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go. Example 3: Input: path = \u0026#34;/home//foo/\u0026#34; Output: \u0026#34;/home/foo\u0026#34; Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one. Example 4: Input: path = \u0026#34;/a/./b/../../c/\u0026#34; Output: \u0026#34;/c\u0026#34; Constraints:\n1 \u0026lt;= path.length \u0026lt;= 3000 path consists of English letters, digits, period \u0026lsquo;.\u0026rsquo;, slash \u0026lsquo;/\u0026rsquo; or \u0026lsquo;_\u0026rsquo;. path is a valid absolute Unix path. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public String simplifyPath(String path) { List\u0026lt;String\u0026gt; stack = new ArrayList\u0026lt;\u0026gt;(); String[] parts = path.split(\u0026#34;/\u0026#34;); for (int i = 0; i \u0026lt; parts.length; i++) { String part = parts[i]; if (part.length() == 0) { continue; } if (part.equals(\u0026#34;.\u0026#34;)) { continue; } if (part.equals(\u0026#34;..\u0026#34;)) { if (stack.size() \u0026gt; 0) { stack.remove(stack.size() - 1); } continue; } stack.add(part); } StringBuilder sb = new StringBuilder(); for (String val: stack) { sb.append(\u0026#34;/\u0026#34;).append(val); } if (sb.length() == 0) { return \u0026#34;/\u0026#34;; } return sb.toString(); } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public String simplifyPath(String path) { Deque\u0026lt;String\u0026gt; stack = new ArrayDeque\u0026lt;\u0026gt;(); for (String pathPart: path.split(\u0026#34;/\u0026#34;)) { if (pathPart.length() == 0 || pathPart.equals(\u0026#34;.\u0026#34;)) { continue; } if (pathPart.equals(\u0026#34;..\u0026#34;)) { if (stack.size() \u0026gt; 0) { stack.pop(); } } else { stack.push(pathPart); } } StringBuilder sb = new StringBuilder(); while (stack.size() \u0026gt; 0) { sb.append(\u0026#34;/\u0026#34;); sb.append(stack.pollLast()); } if (sb.length() == 0) return \u0026#34;/\u0026#34;; return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-07-26-simplify-path/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/simplify-path/\"\u003e71. Simplify Path\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string path, which is an absolute path (starting with a slash \u0026lsquo;/\u0026rsquo;) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\u003c/p\u003e\n\u003cp\u003eIn a Unix-style file system, a period \u0026lsquo;.\u0026rsquo; refers to the current directory, a double period \u0026lsquo;..\u0026rsquo; refers to the directory up a level, and any multiple consecutive slashes (i.e. \u0026lsquo;//\u0026rsquo;) are treated as a single slash \u0026lsquo;/\u0026rsquo;. For this problem, any other format of periods such as \u0026lsquo;\u0026hellip;\u0026rsquo; are treated as file/directory names.\u003c/p\u003e","title":"71. Simplify Path"},{"content":"134. Gas Station\nThere are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station\u0026rsquo;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output: 3 Explanation: Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. Example 2: Input: gas = [2,3,4], cost = [3,4,3] Output: -1 Explanation: You can\u0026#39;t start at station 0 or 1, as there is not enough gas to travel to the next station. Let\u0026#39;s start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 0. Your tank = 4 - 3 + 2 = 3 Travel to station 1. Your tank = 3 - 3 + 3 = 3 You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. Therefore, you can\u0026#39;t travel around the circuit once no matter where you start. Constraints:\ngas.length == n cost.length == n 1 \u0026lt;= n \u0026lt;= 104 0 \u0026lt;= gas[i], cost[i] \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int canCompleteCircuit(int[] gas, int[] cost) { /* gas = 1-----2-----3-----4------5------1 cost 3 4 5 1 2 */ int total_tank = 0; int current_tank = 0; int current = 0; for (int i = 0; i \u0026lt; gas.length; i++) { total_tank += gas[i] - cost[i]; current_tank += gas[i] - cost[i]; if (current_tank \u0026lt; 0) { current_tank = 0; current = i + 1; } } return total_tank \u0026gt;= 0 ? current: -1; } } ","permalink":"https://volyx.in/posts/2021-07-24-gas-station/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/gas-station/\"\u003e134. Gas Station\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\u003c/p\u003e\n\u003cp\u003eYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\u003c/p\u003e\n\u003cp\u003eGiven two integer arrays gas and cost, return the starting gas station\u0026rsquo;s index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\u003c/p\u003e","title":"134. Gas Station"},{"content":"287. Find the Duplicate Number\nGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return this repeated number.\nYou must solve the problem without modifying the array nums and uses only constant extra space.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: nums = [1,3,4,2,2] Output: 2 Example 2: Input: nums = [3,1,3,4,2] Output: 3 Example 3: Input: nums = [1,1] Output: 1 Example 4: Input: nums = [1,1,2] Output: 1 Constraints:\n1 \u0026lt;= n \u0026lt;= 105 nums.length == n + 1 1 \u0026lt;= nums[i] \u0026lt;= n All the integers in nums appear only once except for precisely one integer which appears two or more times. Follow up:\nHow can we prove that at least one duplicate number must exist in nums? Can you solve the problem in linear runtime complexity? Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class Solution { /* [0,1,2,3,4] [3,1,3,4,2] slow: 3 4 2 fast: 3 23 4 xxxxxxxx xxx xx xx xx xxxxxxxxxxxxxxxxxx x xx x xxxx xxx xxxxxxx */ public int findDuplicate(int[] nums) { int fast = nums[0]; int slow = nums[0]; do { slow = nums[slow]; fast = nums[nums[fast]]; } while (slow != fast); slow = nums[0]; while (slow != fast) { slow = nums[slow]; fast = nums[fast]; } return fast; } public int findDuplicate1(int[] nums) { int duplicate = -1; for (int i = 0; i \u0026lt; nums.length; i++) { int curr = Math.abs(nums[i]); if (nums[curr] \u0026lt; 0) { duplicate = curr; } nums[curr] *= -1; } for (int i = 0; i \u0026lt; nums.length; i++) { nums[i] = Math.abs(nums[i]); } return duplicate; } } ","permalink":"https://volyx.in/posts/2021-07-24-find-the-duplicate-number/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-the-duplicate-number/\"\u003e287. Find the Duplicate Number\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\u003c/p\u003e\n\u003cp\u003eThere is only one repeated number in nums, return this repeated number.\u003c/p\u003e\n\u003cp\u003eYou must solve the problem without modifying the array nums and uses only constant extra space.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,3,4,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [3,1,3,4,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"287. Find the Duplicate Number"},{"content":"621. Task Scheduler\nGiven a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\nHowever, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.\nReturn the least number of units of times that the CPU will take to finish all the given tasks.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: tasks = [\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;], n = 2 Output: 8 Explanation: A -\u0026gt; B -\u0026gt; idle -\u0026gt; A -\u0026gt; B -\u0026gt; idle -\u0026gt; A -\u0026gt; B There is at least 2 units of time between any two same tasks. Example 2: Input: tasks = [\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;], n = 0 Output: 6 Explanation: On this case any permutation of size 6 would work since n = 0. [\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;] [\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;] [\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;] ... And so on. Example 3: Input: tasks = [\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;E\u0026#34;,\u0026#34;F\u0026#34;,\u0026#34;G\u0026#34;], n = 2 Output: 16 Explanation: One possible solution is A -\u0026gt; B -\u0026gt; C -\u0026gt; A -\u0026gt; D -\u0026gt; E -\u0026gt; A -\u0026gt; F -\u0026gt; G -\u0026gt; A -\u0026gt; idle -\u0026gt; idle -\u0026gt; A -\u0026gt; idle -\u0026gt; idle -\u0026gt; A Constraints:\n1 \u0026lt;= task.length \u0026lt;= 104 tasks[i] is upper-case English letter. The integer n is in the range [0, 100]. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int leastInterval(char[] tasks, int n) { int[] freq = new int[26]; for (char c: tasks) { freq[c - \u0026#39;A\u0026#39;]++; } Arrays.sort(freq); int maxFreq = freq[25] - 1; int idleSlots = maxFreq * n; for (int i = 24; i \u0026gt;= 0; i--) { idleSlots -= Math.min(freq[i], maxFreq); } return idleSlots \u0026gt; 0 ? idleSlots + tasks.length: tasks.length; } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int leastInterval(char[] tasks, int n) { int[] freq = new int[26]; for (char c: tasks) { freq[c - \u0026#39;A\u0026#39;]++; } Arrays.sort(freq); int maxFreq = (freq[25] - 1); int idleSlots = maxFreq * n; for (int i = 24; i \u0026gt;= 0; i--) { idleSlots -= Math.min(freq[i], maxFreq); } return idleSlots \u0026gt; 0 ? idleSlots + tasks.length: tasks.length; } } ","permalink":"https://volyx.in/posts/2021-07-24-task-scheduler/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/task-scheduler/\"\u003e621. Task Scheduler\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\u003c/p\u003e\n\u003cp\u003eHowever, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.\u003c/p\u003e","title":"621. Task Scheduler"},{"content":"252. Meeting Rooms\nGiven an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.\n1 2 3 4 5 6 7 8 9 Example 1: Input: intervals = [[0,30],[5,10],[15,20]] Output: false Example 2: Input: intervals = [[7,10],[2,4]] Output: true Constraints:\n0 \u0026lt;= intervals.length \u0026lt;= 10^4 intervals[i].length == 2 0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public boolean canAttendMeetings(int[][] intervals) { if (intervals.length \u0026lt; 2) { return true; } Arrays.sort(intervals, (a, b) -\u0026gt; a[0] - b[0]); for (int i = 1; i \u0026lt; intervals.length; i++) { int[] curr = intervals[i]; int[] prev = intervals[i - 1]; if (overlap(prev, curr)) { return false; } } return true; } /* ---------------| |-------------------------- -----------| |-------------- */ boolean overlap(int[] a, int[] b) { return Math.max(a[0], b[0]) \u0026lt; Math.min(a[1], b[1]); } } ","permalink":"https://volyx.in/posts/2021-07-22-meeting-rooms/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/meeting-rooms/\"\u003e252. Meeting Rooms\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of meeting time intervals where intervals[i] = [starti, endi], determine if a person could attend all meetings.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[0,30],[5,10],[15,20]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[7,10],[2,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"252. Meeting Rooms"},{"content":"253. Meeting Rooms II\nGiven an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.\n1 2 3 4 5 6 7 8 9 Example 1: Input: intervals = [[0,30],[5,10],[15,20]] Output: 2 Example 2: Input: intervals = [[7,10],[2,4]] Output: 1 Constraints:\n1 \u0026lt;= intervals.length \u0026lt;= 10^4 0 \u0026lt;= starti \u0026lt; endi \u0026lt;= 10^6 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { /* [[0,30],[5,10],[15,20]] [ 0,30] [ 5,10] ---- [15,20] (1, 10), (2, 7), (3, 19), (8, 12), (10, 20), (11, 30) */ public int minMeetingRooms(int[][] intervals) { Arrays.sort(intervals, (a,b) -\u0026gt; a[0] - b[0]); PriorityQueue\u0026lt;int[]\u0026gt; pq = new PriorityQueue\u0026lt;int[]\u0026gt;((a,b) -\u0026gt; { return a[1] - b[1]; }); for (int[] interval: intervals) { if (!pq.isEmpty() \u0026amp;\u0026amp; pq.peek()[1] \u0026lt;= interval[0]) { pq.poll(); } pq.add(interval); } return pq.size(); } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public int minMeetingRooms(int[][] intervals) { Integer min = Integer.MAX_VALUE; Integer max = Integer.MIN_VALUE; for (int[] i: intervals) { min = Math.min(min, i[0]); max = Math.max(max, i[1]); } int[] times = new int[max - min + 1]; for (int[] i: intervals) { times[i[0] - min]++; times[i[1] - min]--; } int count = 0; int result = 0; for (int time: times) { count += time; result = Math.max(result, count); } return result; } } ","permalink":"https://volyx.in/posts/2021-07-22-meeting-rooms-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/meeting-rooms-ii/\"\u003e253. Meeting Rooms II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[0,30],[5,10],[15,20]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[7,10],[2,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"253. Meeting Rooms II"},{"content":"314. Binary Tree Vertical Order Traversal\nGiven the root of a binary tree, return the vertical order traversal of its nodes\u0026rsquo; values. (i.e., from top to bottom, column by column).\nIf two nodes are in the same row and column, the order should be from left to right.\n1 2 3 4 Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[9],[3,15],[20],[7]] 1 2 3 4 Example 2: Input: root = [3,9,8,4,0,1,7] Output: [[4],[9],[3,0,1],[8],[7]] 1 2 3 4 Example 3: Input: root = [3,9,8,4,0,1,7,null,null,null,2,5] Output: [[4],[9,5],[3,0,1],[8,2],[7]] 1 2 3 4 Example 4: Input: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; verticalOrder(TreeNode root) { List\u0026lt;List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; posList = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; negList = new ArrayList\u0026lt;\u0026gt;(); dfs(root, 0, 0, negList, posList); return merge(negList, posList); } void dfs(TreeNode node, int row, int col, List\u0026lt;List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; negList, List\u0026lt;List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; posList ) { if (node == null) return; if (col \u0026gt;= 0) { if (posList.size() == col) { posList.add(new ArrayList\u0026lt;\u0026gt;()); } posList.get(col).add(new Pair\u0026lt;\u0026gt;(node.val, row)); } else { int posCol = -col - 1; if (negList.size() == posCol) { negList.add(new ArrayList\u0026lt;\u0026gt;()); } negList.get(posCol).add(new Pair\u0026lt;\u0026gt;(node.val, row)); } dfs(node.left, row + 1, col - 1, negList, posList); dfs(node.right, row + 1, col + 1, negList, posList); } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; merge(List\u0026lt;List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; negList, List\u0026lt;List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt;\u0026gt; posList) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = negList.size() - 1; i \u0026gt;= 0; i--) { negList.get(i).sort((a, b) -\u0026gt; a.getValue() - b.getValue()); res.add(negList.get(i).stream().map(a -\u0026gt; a.getKey()).collect(Collectors.toList())); } for (int i = 0; i \u0026lt; posList.size(); i++) { posList.get(i).sort((a, b) -\u0026gt; a.getValue() - b.getValue()); res.add(posList.get(i).stream().map(a -\u0026gt; a.getKey()).collect(Collectors.toList())); } return res; } } Solution 2022-01-26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int min = 0; int max = 0; public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; verticalOrder(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); computeRange(root, 0); for (int i = min; i \u0026lt;= max; i++) { res.add(new ArrayList\u0026lt;\u0026gt;()); } Queue\u0026lt;Integer\u0026gt; qid = new ArrayDeque\u0026lt;\u0026gt;(); qid.add(- min); Queue\u0026lt;TreeNode\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(root); while (q.size() \u0026gt; 0) { TreeNode node = q.poll(); int id = qid.poll(); res.get(id).add(node.val); if (node.left != null) { qid.add(id - 1); q.add(node.left); } if (node.right != null) { qid.add(id + 1); q.add(node.right); } } return res; } void computeRange(TreeNode node, int id) { if (node == null) return; min = Math.min(min, id); max = Math.max(max, id); computeRange(node.left, id - 1); computeRange(node.right, id + 1); } } ","permalink":"https://volyx.in/posts/2021-07-22-binary-tree-vertical-order-traversal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-vertical-order-traversal/\"\u003e314. Binary Tree Vertical Order Traversal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the vertical order traversal of its nodes\u0026rsquo; values. (i.e., from top to bottom, column by column).\u003c/p\u003e\n\u003cp\u003eIf two nodes are in the same row and column, the order should be from left to right.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[9],[3,15],[20],[7]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-07-22-bt-ex1.jpg\"\u003e\u003c/p\u003e","title":"314. Binary Tree Vertical Order Traversal"},{"content":"987. Vertical Order Traversal of a Binary Tree\nGiven the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.\n1 2 3 4 5 6 7 8 9 Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[9],[3,15],[20],[7]] Explanation: Column -1: Only node 9 is in this column. Column 0: Nodes 3 and 15 are in this column in that order from top to bottom. Column 1: Only node 20 is in this column. Column 2: Only node 7 is in this column. 1 2 3 4 5 6 7 8 9 10 11 12 Example 2: Input: root = [1,2,3,4,5,6,7] Output: [[4],[2],[1,5,6],[3],[7]] Explanation: Column -2: Only node 4 is in this column. Column -1: Only node 2 is in this column. Column 0: Nodes 1, 5, and 6 are in this column. 1 is at the top, so it comes first. 5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6. Column 1: Only node 3 is in this column. Column 2: Only node 7 is in this column. 1 2 3 4 5 6 7 Example 3: Input: root = [1,2,3,4,6,5,7] Output: [[4],[2],[1,5,6],[3],[7]] Explanation: This case is the exact same as example 2, but with nodes 5 and 6 swapped. Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values. Constraints:\nThe number of nodes in the tree is in the range [1, 1000]. 0 \u0026lt;= Node.val \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { List \u0026lt; List \u0026lt; Integer \u0026gt;\u0026gt; verticalTraversal(TreeNode root) { if (root == null) return Collections.emptyList(); List\u0026lt;List\u0026lt;Node\u0026gt;\u0026gt; posList = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;List\u0026lt;Node\u0026gt;\u0026gt; negList = new ArrayList\u0026lt;\u0026gt;(); dfs(root, 0, 0, negList, posList); return mergeAndSort(negList, posList); } class Node { int val; int row; public Node(int val, int row) { this.val = val; this.row = row; } } void dfs(TreeNode node, int row, int col, List\u0026lt;List\u0026lt;Node\u0026gt;\u0026gt; negList, List\u0026lt;List\u0026lt;Node\u0026gt;\u0026gt; posList) { if (node == null) return; if (col \u0026gt;= 0) { if (posList.size() == col) { posList.add(new ArrayList \u0026lt; \u0026gt;()); } posList.get(col).add(new Node(node.val, row)); } else { int posCol = -col - 1; if (negList.size() == posCol) { negList.add(new ArrayList\u0026lt;\u0026gt;()); } negList.get(posCol).add(new Node(node.val, row)); } // (row + 1, col - 1) left dfs(node.left, row + 1, col - 1, negList, posList); // and (row + 1, col + 1) right dfs(node.right, row + 1, col + 1, negList, posList); } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; mergeAndSort(List\u0026lt;List\u0026lt;Node\u0026gt;\u0026gt; negList, List\u0026lt;List\u0026lt;Node\u0026gt;\u0026gt; posList) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = negList.size() - 1; i \u0026gt;= 0; i--) { List\u0026lt;Node\u0026gt; colList = negList.get(i); colList.sort((a, b) -\u0026gt; a.row == b.row ? a.val - b.val : a.row - b.row); res.add(buildList(colList)); } for (int i = 0; i \u0026lt; posList.size(); i++) { List\u0026lt;Node\u0026gt; colList = posList.get(i); colList.sort((a, b) -\u0026gt; a.row == b.row ? a.val - b.val : a.row - b.row); res.add(buildList(colList)); } return res; } List\u0026lt;Integer\u0026gt; buildList(List\u0026lt;Node\u0026gt; list) { return list.stream().map(a -\u0026gt; a.val).collect(Collectors.toList()); } } Solution 2022-01-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int min = 0; int max = 0; public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; verticalTraversal(TreeNode root) { List\u0026lt;List\u0026lt;NodeValue\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); computeRange(root, 0); for (int i = min; i \u0026lt;= max; i++) { res.add(new ArrayList\u0026lt;\u0026gt;()); } Queue\u0026lt;NodeValue\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(new NodeValue(root, 0, -min)); while (q.size() \u0026gt; 0) { NodeValue nodeVal = q.poll(); res.get(nodeVal.col).add(nodeVal); if (nodeVal.node.left != null) { q.add(new NodeValue(nodeVal.node.left, nodeVal.row + 1, nodeVal.col - 1)); } if (nodeVal.node.right != null) { q.add(new NodeValue(nodeVal.node.right, nodeVal.row + 1, nodeVal.col + 1)); } } for (int i = 0; i \u0026lt; res.size(); i++) { Collections.sort(res.get(i), (a,b) -\u0026gt; { int c = Integer.compare(a.row, b.row); if (c != 0) return c; return Integer.compare(a.node.val, b.node.val); }); } List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; resInt = new ArrayList(); for (List\u0026lt;NodeValue\u0026gt; nodes : res) { List\u0026lt;Integer\u0026gt; rows = new ArrayList\u0026lt;\u0026gt;(); for (NodeValue n: nodes) { rows.add(n.node.val); } resInt.add(rows); } return resInt; } class NodeValue{ TreeNode node; int row; int col; NodeValue(TreeNode node, int row, int col) { this.node = node; this.row = row; this.col = col; } } void computeRange(TreeNode node, int id) { if (node == null) return; min = Math.min(min, id); max = Math.max(max, id); computeRange(node.left, id - 1); computeRange(node.right, id + 1); } } ","permalink":"https://volyx.in/posts/2021-07-22-vertical-order-traversal-of-a-binary-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/\"\u003e987. Vertical Order Traversal of a Binary Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, calculate the vertical order traversal of the binary tree.\u003c/p\u003e\n\u003cp\u003eFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\u003c/p\u003e\n\u003cp\u003eThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\u003c/p\u003e","title":"987. Vertical Order Traversal of a Binary Tree"},{"content":"157. Read N Characters Given Read4\nGiven a file and assume that you can only read the file using a given method read4, implement a method to read n characters.\nMethod read4:\nThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\nThe return value is the number of actual characters read.\nNote that read4() has its own file pointer, much like FILE *fp in C.\nDefinition of read4:\nParameter: char[] buf4 Returns: int buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].\nBelow is a high-level example of how read4 works:\nFile file(\u0026ldquo;abcde\u0026rdquo;); // File is \u0026ldquo;abcde\u0026rdquo;, initially file pointer (fp) points to \u0026lsquo;a\u0026rsquo; char[] buf4 = new char[4]; // Create buffer with enough space to store characters read4(buf4); // read4 returns 4. Now buf4 = \u0026ldquo;abcd\u0026rdquo;, fp points to \u0026rsquo;e' read4(buf4); // read4 returns 1. Now buf4 = \u0026ldquo;e\u0026rdquo;, fp points to end of file read4(buf4); // read4 returns 0. Now buf4 = \u0026ldquo;\u0026rdquo;, fp points to end of file\nMethod read:\nBy using the read4 method, implement the method read that reads n characters from file and store it in the buffer array buf. Consider that you cannot manipulate file directly.\nThe return value is the number of actual characters read.\nDefinition of read:\nParameters: char[] buf, int n Returns: int buf[] is a destination, not a source. You will need to write the results to buf[].\nNote:\nConsider that you cannot manipulate the file directly. The file is only accessible for read4 but not for read. The read function will only be called once for each test case. You may assume the destination buffer array, buf, is guaranteed to have enough space for storing n characters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: file = \u0026#34;abc\u0026#34;, n = 4 Output: 3 Explanation: After calling your read method, buf should contain \u0026#34;abc\u0026#34;. We read a total of 3 characters from the file, so return 3. Note that \u0026#34;abc\u0026#34; is the file\u0026#39;s content, not buf. buf is the destination buffer that you will have to write the results to. Example 2: Input: file = \u0026#34;abcde\u0026#34;, n = 5 Output: 5 Explanation: After calling your read method, buf should contain \u0026#34;abcde\u0026#34;. We read a total of 5 characters from the file, so return 5. Example 3: Input: file = \u0026#34;abcdABCD1234\u0026#34;, n = 12 Output: 12 Explanation: After calling your read method, buf should contain \u0026#34;abcdABCD1234\u0026#34;. We read a total of 12 characters from the file, so return 12. Example 4: Input: file = \u0026#34;leetcode\u0026#34;, n = 5 Output: 5 Explanation: After calling your read method, buf should contain \u0026#34;leetc\u0026#34;. We read a total of 5 characters from the file, so return 5. Constraints:\n1 \u0026lt;= file.length \u0026lt;= 500 file consist of English letters and digits. 1 \u0026lt;= n \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 /** * The read4 API is defined in the parent class Reader4. * int read4(char[] buf4); */ public class Solution extends Reader4 { /** * @param buf Destination buffer * @param n Number of characters to read * @return The number of actual characters read */ public int read(char[] buf, int n) { // buf = new char[n]; int curr = 0; char[] buf4 = new char[4]; int res = this.read4(buf4); while (res \u0026gt; 0) { for (int i = 0; i \u0026lt; res \u0026amp;\u0026amp; curr \u0026lt; n; i++) { buf[curr++] = buf4[i]; } res = this.read4(buf4); } return curr; } } Solution 2021-08-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * The read4 API is defined in the parent class Reader4. * int read4(char[] buf4); */ public class Solution extends Reader4 { /** * @param buf Destination buffer * @param n Number of characters to read * @return The number of actual characters read */ public int read(char[] buf, int n) { char[] buf4 = new char[4]; int copied = 0; int readed = 4; while (copied \u0026lt; n \u0026amp;\u0026amp; readed == 4) { readed = read4(buf4); for (int i = 0; i \u0026lt; readed; i++) { if (copied == n) return copied; buf[copied] = buf4[i]; copied++; } } return copied; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 /** * The read4 API is defined in the parent class Reader4. * int read4(char[] buf4); */ public class Solution extends Reader4 { /** * @param buf Destination buffer * @param n Number of characters to read * @return The number of actual characters read */ public int read(char[] buf, int n) { int bufPtr = 0; int bufCount = 0; char[] buf4 = new char[4]; int ptr = 0; while (ptr \u0026lt; n) { if (bufCount == 0) { bufCount = read4(buf4); } if (bufCount == 0) { break; } while (bufPtr \u0026lt; bufCount \u0026amp;\u0026amp; ptr \u0026lt; n) { buf[ptr++] = buf4[bufPtr++]; } if (bufCount == bufPtr) { bufCount = 0; bufPtr = 0; } } return ptr; } } ","permalink":"https://volyx.in/posts/2021-07-20-read-n-characters-given-read4/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/read-n-characters-given-read4/\"\u003e157. Read N Characters Given Read4\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a file and assume that you can only read the file using a given method read4, implement a method to read n characters.\u003c/p\u003e\n\u003cp\u003eMethod read4:\u003c/p\u003e\n\u003cp\u003eThe API read4 reads four consecutive characters from file, then writes those characters into the buffer array buf4.\u003c/p\u003e\n\u003cp\u003eThe return value is the number of actual characters read.\u003c/p\u003e\n\u003cp\u003eNote that read4() has its own file pointer, much like FILE *fp in C.\u003c/p\u003e","title":"157. Read N Characters Given Read4"},{"content":"303. Range Sum Query - Immutable\nGiven an integer array nums, handle multiple queries of the following type:\nCalculate the sum of the elements of nums between indices left and right inclusive where left \u0026lt;= right. Implement the NumArray class:\nNumArray(int[] nums) Initializes the object with the integer array nums. int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + \u0026hellip; + nums[right]). 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input [\u0026#34;NumArray\u0026#34;, \u0026#34;sumRange\u0026#34;, \u0026#34;sumRange\u0026#34;, \u0026#34;sumRange\u0026#34;] [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]] Output [null, 1, -1, -3] Explanation NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]); numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1 numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1 numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^4 -10^5 \u0026lt;= nums[i] \u0026lt;= 10^5 0 \u0026lt;= left \u0026lt;= right \u0026lt; nums.length At most 10^4 calls will be made to sumRange. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class NumArray { int[] prefix; /* [-2, 0, 3, -5, 2, -1] [-2,-2, 1, -4,-2, -3] [0, 2] 1 === 1 -- 2 [2, 5] -1 === -3 [0, 5] -3 */ public NumArray(int[] nums) { prefix = new int[nums.length]; int sum = 0; for (int i = 0; i \u0026lt; nums.length; i++) { sum += nums[i]; prefix[i] = sum; } } public int sumRange(int left, int right) { if (left == 0) { return prefix[right]; } return prefix[right] - prefix[left - 1]; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(left,right); */ Solution 2021-08-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class NumArray { int[] prefix; public NumArray(int[] nums) { this.prefix = new int[nums.length]; /* -2 0 3 -5 2 -1 -2 -2 1 -4 -2 -3 [2,5] = -3 - (1) = -4 */ for (int i = 0; i \u0026lt; nums.length; i++) { if (i \u0026gt; 0) { prefix[i] = prefix[i - 1] + nums[i]; } else { prefix[i] = nums[i]; } } // System.out.println(Arrays.toString(prefix)); } public int sumRange(int left, int right) { if (left == 0) return prefix[right]; return prefix[right] - prefix[left - 1]; } } /** * Your NumArray object will be instantiated and called as such: * NumArray obj = new NumArray(nums); * int param_1 = obj.sumRange(left,right); */ ","permalink":"https://volyx.in/posts/2021-07-20-range-sum-query-immutable/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/range-sum-query-immutable/\"\u003e303. Range Sum Query - Immutable\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, handle multiple queries of the following type:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCalculate the sum of the elements of nums between indices left and right inclusive where left \u0026lt;= right.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eImplement the NumArray class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNumArray(int[] nums) Initializes the object with the integer array nums.\u003c/li\u003e\n\u003cli\u003eint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + \u0026hellip; + nums[right]).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;NumArray\u0026#34;, \u0026#34;sumRange\u0026#34;, \u0026#34;sumRange\u0026#34;, \u0026#34;sumRange\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 1, -1, -3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"303. Range Sum Query - Immutable"},{"content":"1482. Minimum Number of Days to Make m Bouquets\nGiven a string s, reverse only all the vowels in the string and return it.\nThe vowels are \u0026lsquo;a\u0026rsquo;, \u0026rsquo;e\u0026rsquo;, \u0026lsquo;i\u0026rsquo;, \u0026lsquo;o\u0026rsquo;, and \u0026lsquo;u\u0026rsquo;, and they can appear in both cases.\n1 2 3 4 5 6 7 8 9 Example 1: Input: s = \u0026#34;hello\u0026#34; Output: \u0026#34;holle\u0026#34; Example 2: Input: s = \u0026#34;leetcode\u0026#34; Output: \u0026#34;leotcede\u0026#34; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 3 * 105 s consist of printable ASCII characters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public String reverseVowels(String s) { Set\u0026lt;Character\u0026gt; vowels = new HashSet\u0026lt;\u0026gt;(); vowels.addAll(Arrays.asList(\u0026#39;a\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;A\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;I\u0026#39;, \u0026#39;O\u0026#39;, \u0026#39;U\u0026#39;)); int lo = 0; int hi = s.length() - 1; char[] word = s.toCharArray(); while (lo \u0026lt; hi) { while (lo \u0026lt; hi \u0026amp;\u0026amp; !vowels.contains(word[lo])) { lo++; } while (lo \u0026lt; hi \u0026amp;\u0026amp; !vowels.contains(word[hi])) { hi--; } char c = word[lo]; word[lo] = word[hi]; word[hi] = c; lo++; hi--; } return new String(word); } } ","permalink":"https://volyx.in/posts/2021-07-19-reverse-vowels-of-a-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/\"\u003e1482. Minimum Number of Days to Make m Bouquets\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, reverse only all the vowels in the string and return it.\u003c/p\u003e\n\u003cp\u003eThe vowels are \u0026lsquo;a\u0026rsquo;, \u0026rsquo;e\u0026rsquo;, \u0026lsquo;i\u0026rsquo;, \u0026lsquo;o\u0026rsquo;, and \u0026lsquo;u\u0026rsquo;, and they can appear in both cases.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;hello\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;holle\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;leetcode\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;leotcede\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"345. Reverse Vowels of a String"},{"content":"515. Find Largest Value in Each Tree Row\nGiven the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: root = [1,3,2,5,3,null,9] Output: [1,3,9] Example 2: Input: root = [1,2,3] Output: [1,3] Example 3: Input: root = [1] Output: [1] Example 4: Input: root = [1,null,2] Output: [1,2] Example 5: Input: root = [] Output: [] Constraints:\nThe number of nodes in the tree will be in the range [0, 104]. -231 \u0026lt;= Node.val \u0026lt;= 231 - 1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;Integer\u0026gt; largestValues(TreeNode root) { Queue\u0026lt;TreeNode\u0026gt; q = new LinkedList\u0026lt;\u0026gt;(); if (root != null) { q.add(root); } List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (q.size() \u0026gt; 0) { int size = q.size(); int max = Integer.MIN_VALUE; for (int i = 0; i \u0026lt; size; i++) { TreeNode node = q.poll(); max = Math.max(node.val, max); if (node.left != null) q.add(node.left); if (node.right != null) q.add(node.right); } res.add(max); } return res; } public List\u0026lt;Integer\u0026gt; largestValues2(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); dfs(root, res, 0); return res; } void dfs(TreeNode node, List\u0026lt;Integer\u0026gt; res, int level) { if (node == null) return; if (res.size() == level) { res.add(node.val); } Integer max = Math.max(res.get(level), node.val); res.set(level, max); dfs(node.left, res, level + 1); dfs(node.right, res, level + 1); } } Solution 2021-10-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public List\u0026lt;Integer\u0026gt; largestValues(TreeNode root) { if (root == null) return Collections.emptyList(); Queue\u0026lt;TreeNode\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); q.add(root); while (q.size() \u0026gt; 0) { int size = q.size(); int max = Integer.MIN_VALUE; for (int i = 0; i \u0026lt; size; i++) { TreeNode node = q.poll(); max = Math.max(node.val, max); if (node.left != null) { q.add(node.left); } if (node.right != null) { q.add(node.right); } } res.add(max); } return res; } } ","permalink":"https://volyx.in/posts/2021-07-19-find-largest-value-in-each-tree-row/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-largest-value-in-each-tree-row/\"\u003e515. Find Largest Value in Each Tree Row\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,3,2,5,3,null,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-07-19-ex1.jpg\"\u003e\u003c/p\u003e","title":"515. Find Largest Value in Each Tree Row"},{"content":"791. Custom Sort String\nYou are given two strings order and s. All the words of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: order = \u0026#34;cba\u0026#34;, s = \u0026#34;abcd\u0026#34; Output: \u0026#34;cbad\u0026#34; Explanation: \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34; appear in order, so the order of \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34; should be \u0026#34;c\u0026#34;, \u0026#34;b\u0026#34;, and \u0026#34;a\u0026#34;. Since \u0026#34;d\u0026#34; does not appear in order, it can be at any position in the returned string. \u0026#34;dcba\u0026#34;, \u0026#34;cdba\u0026#34;, \u0026#34;cbda\u0026#34; are also valid outputs. Example 2: Input: order = \u0026#34;cbafg\u0026#34;, s = \u0026#34;abcd\u0026#34; Output: \u0026#34;cbad\u0026#34; Constraints:\n1 \u0026lt;= order.length \u0026lt;= 26 1 \u0026lt;= s.length \u0026lt;= 200 order and s consist of lowercase English letters. All the characters of order are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public String customSortString(String order, String s) { Map\u0026lt;Character, Integer\u0026gt; orderMap = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; order.length(); i++) { orderMap.put(order.charAt(i), i); } int n = orderMap.size(); StringBuilder[] res = new StringBuilder[n + 1]; List\u0026lt;Character\u0026gt; word = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); Integer index = orderMap.get(c); Integer realIndex = index != null? index: n; if (res[realIndex] == null) { res[realIndex] = new StringBuilder(); } res[realIndex].append(c); } StringBuilder sb = new StringBuilder(); for (StringBuilder indexBuilder: res) { if (indexBuilder != null) { sb.append(indexBuilder.toString()); } } return sb.toString(); } } Solution 2022-01-31 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Solution { public String customSortString(String order, String s) { int[] indexes = new int[256]; for (int i = 0; i \u0026lt; order.length(); i++) { indexes[order.charAt(i)] = i; } StringBuilder[] buckets = new StringBuilder[256]; for (char c: s.toCharArray()) { int id = indexes[c]; if (buckets[id] == null) { buckets[id] = new StringBuilder(); } buckets[id].append(c); } StringBuilder res = new StringBuilder(); for (int i = 0; i \u0026lt; buckets.length; i++) { if (buckets[i] != null) { res.append(buckets[i].toString()); } } return res.toString(); } public String customSortStringSort(String order, String s) { int[] indexes = new int[256]; for (int i = 0; i \u0026lt; order.length(); i++) { indexes[order.charAt(i)] = i; } List\u0026lt;Character\u0026gt; symbols = new ArrayList\u0026lt;\u0026gt;(); for (char c : s.toCharArray()) { symbols.add(c); } Collections.sort(symbols, (a, b) -\u0026gt; { return indexes[a] - indexes[b]; }); StringBuilder sb = new StringBuilder(); for (Character c: symbols) { sb.append(c); } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-07-19-custom-sort-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/custom-sort-string/\"\u003e791. Custom Sort String\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two strings order and s. All the words of order are unique and were sorted in some custom order previously.\u003c/p\u003e\n\u003cp\u003ePermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\u003c/p\u003e\n\u003cp\u003eReturn any permutation of s that satisfies this property.\u003c/p\u003e","title":"791. Custom Sort String"},{"content":"977. Squares of a Sorted Array\nGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [-4,-1,0,3,10] Output: [0,1,9,16,100] Explanation: After squaring, the array becomes [16,1,0,9,100]. After sorting, it becomes [0,1,9,16,100]. Example 2: Input: nums = [-7,-3,2,3,11] Output: [4,9,9,49,121] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 104 -104 \u0026lt;= nums[i] \u0026lt;= 104 nums is sorted in non-decreasing order. Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int[] sortedSquares(int[] nums) { int n = nums.length; int[] res = new int[n]; int j = n - 1; int lo = 0; int hi = n - 1; while (lo \u0026lt;= hi) { int left = nums[lo] * nums[lo]; int right = nums[hi] * nums[hi]; if (right \u0026gt; left) { res[j] = right; hi--; j--; } else { lo++; res[j] = left; j--; } } return res; } } Solution 2021-11-18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int[] sortedSquares(int[] nums) { int n = nums.length; int[] res = new int[n]; int lo = 0; int hi = n - 1; for (int index = n - 1; index \u0026gt;= 0; index--) { if (nums[lo] * nums[lo] \u0026gt; nums[hi] * nums[hi]) { res[index] = nums[lo] * nums[lo]; lo++; } else { res[index] = nums[hi] * nums[hi]; hi--; } } return res; } } Solution 2021-11-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int[] sortedSquares(int[] nums) { int[] res = new int[nums.length]; int lo = 0; int hi = nums.length - 1; for (int k = nums.length - 1; k \u0026gt;= 0; k--) { if (nums[lo] * nums[lo] \u0026lt; nums[hi] * nums[hi]) { res[k] = nums[hi] * nums[hi]; hi--; } else { res[k] = nums[lo] * nums[lo]; lo++; } } return res; } } ","permalink":"https://volyx.in/posts/2021-07-19-squares-of-a-sorted-array/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/squares-of-a-sorted-array/\"\u003e977. Squares of a Sorted Array\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-4,-1,0,3,10]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,9,16,100]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: After squaring, the array becomes [16,1,0,9,100].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAfter sorting, it becomes [0,1,9,16,100].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-7,-3,2,3,11]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,9,9,49,121]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"977. Squares of a Sorted Array"},{"content":"1482. Minimum Number of Days to Make m Bouquets\nGiven an integer array bloomDay, an integer m and an integer k.\nWe need to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.\nThe garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 Example 1: Input: bloomDay = [1,10,3,10,2], m = 3, k = 1 Output: 3 Explanation: Let\u0026#39;s see what happened in the first three days. x means flower bloomed and _ means flower didn\u0026#39;t bloom in the garden. We need 3 bouquets each should contain 1 flower. After day 1: [x, _, _, _, _] // we can only make one bouquet. After day 2: [x, _, _, _, x] // we can only make two bouquets. After day 3: [x, _, x, _, x] // we can make 3 bouquets. The answer is 3. Example 2: Input: bloomDay = [1,10,3,10,2], m = 3, k = 2 Output: -1 Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1. Example 3: Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3 Output: 12 Explanation: We need 2 bouquets each should have 3 flowers. Here\u0026#39;s the garden after the 7 and 12 days: After day 7: [x, x, x, x, _, x, x] We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent. After day 12: [x, x, x, x, x, x, x] It is obvious that we can make two bouquets in different ways. Example 4: Input: bloomDay = [1000000000,1000000000], m = 1, k = 1 Output: 1000000000 Explanation: You need to wait 1000000000 days to have a flower ready for a bouquet. Example 5: Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2 Output: 9 Constraints:\nbloomDay.length == n 1 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= bloomDay[i] \u0026lt;= 10^9 1 \u0026lt;= m \u0026lt;= 10^6 1 \u0026lt;= k \u0026lt;= n Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution { public int minDays(int[] bloomDay, int m, int k) { int max = 0; int min = Integer.MAX_VALUE; for (int bloom: bloomDay) { max = Math.max(bloom, max); min = Math.min(bloom, min); } int lo = min; int hi = max; while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (check(bloomDay, m, k, mid)) { hi = mid - 1; } else { lo = mid + 1; } } if (lo \u0026lt; min || lo \u0026gt; max) return -1; return lo; } boolean check(int[] bloomDay, int m, int k, int mid) { int i = 0; while (i \u0026lt; bloomDay.length) { int j = i; while (j \u0026lt; bloomDay.length \u0026amp;\u0026amp; bloomDay[j] \u0026lt;= mid \u0026amp;\u0026amp; j - i \u0026lt; k) { j++; } if (j - i == k) { // have enough i = i + k; m--; } else { // have less i = i + 1; } if (m == 0) return true; } return false; } } ","permalink":"https://volyx.in/posts/2021-07-17-minimum-number-of-days-to-make-m-bouquets/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/\"\u003e1482. Minimum Number of Days to Make m Bouquets\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array bloomDay, an integer m and an integer k.\u003c/p\u003e\n\u003cp\u003eWe need to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.\u003c/p\u003e\n\u003cp\u003eThe garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.\u003c/p\u003e\n\u003cp\u003eReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.\u003c/p\u003e","title":"1482. Minimum Number of Days to Make m Bouquets"},{"content":"475. Heaters\nWinter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\nEvery house can be warmed, as long as the house is within the heater\u0026rsquo;s warm radius range.\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\nNotice that all the heaters follow your radius standard, and the warm radius will the same.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: houses = [1,2,3], heaters = [2] Output: 1 Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed. Example 2: Input: houses = [1,2,3,4], heaters = [1,4] Output: 1 Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed. Example 3: Input: houses = [1,5], heaters = [2] Output: 3 Constraints:\n1 \u0026lt;= houses.length, heaters.length \u0026lt;= 3 * 10^4 1 \u0026lt;= houses[i], heaters[i] \u0026lt;= 10^9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { public int findRadius(int[] houses, int[] heaters) { Arrays.sort(heaters); Arrays.sort(houses); int res = 0; int i = 0; for (int house : houses) { while (i \u0026lt; heaters.length - 1 \u0026amp;\u0026amp; heaters[i] + heaters[i + 1] \u0026lt;= 2*house) { i++; } res = Math.max(res, Math.abs(heaters[i] - house)); } return res; } public int findRadius2(int[] houses, int[] heaters) { Arrays.sort(heaters); int res = Integer.MIN_VALUE; for (int house: houses) { int index = Arrays.binarySearch(heaters, house); if (index \u0026lt; 0) { index = -(index + 1); } // System.out.println(\u0026#34;index = \u0026#34; + index); int dist1 = (index - 1) \u0026gt;= 0 ? house - heaters[index - 1] : Integer.MAX_VALUE; int dist2 = (index \u0026lt; heaters.length) ? heaters[index] - house: Integer.MAX_VALUE; res = Math.max(res, Math.min(dist1, dist2)); } return res; } } ","permalink":"https://volyx.in/posts/2021-07-17-heaters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/heaters/\"\u003e475. Heaters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWinter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\u003c/p\u003e\n\u003cp\u003eEvery house can be warmed, as long as the house is within the heater\u0026rsquo;s warm radius range.\u003c/p\u003e\n\u003cp\u003eGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.\u003c/p\u003e","title":"475. Heaters"},{"content":"21. Merge Two Sorted Lists\nMerge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: l1 = [1,2,4], l2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2: Input: l1 = [], l2 = [] Output: [] Example 3: Input: l1 = [], l2 = [0] Output: [0] Constraints:\nThe number of nodes in both lists is in the range [0, 50]. -100 \u0026lt;= Node.val \u0026lt;= 100 Both l1 and l2 are sorted in non-decreasing order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode node1 = l1; ListNode node2 = l2; ListNode node3 = new ListNode(-1); ListNode head = node3; ListNode prev = null; while (node1 != null || node2 != null) { if (node1 != null \u0026amp;\u0026amp; node2 != null) { if (node1.val \u0026lt; node2.val) { ListNode node = new ListNode(node1.val); node3.next = node; prev = node3; node1 = node1.next; } else { ListNode node = new ListNode(node2.val); node3.next = node; prev = node3; node2 = node2.next; } } else if (node1 != null) { ListNode node = new ListNode(node1.val); node3.next = node; prev = node3; node1 = node1.next; } else if (node2 != null) { ListNode node = new ListNode(node2.val); node3.next = node; prev = node3; node2 = node2.next; } node3 = node3.next; } return head.next; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode curr = new ListNode(); ListNode root = curr; while (l1 != null || l2 != null) { if (l1 != null \u0026amp;\u0026amp; l2 != null) { if (l1.val \u0026lt; l2.val) { ListNode node = new ListNode(l1.val); curr.next = node; curr = curr.next; l1 = l1.next; } else { ListNode node = new ListNode(l2.val); curr.next = node; curr = curr.next; l2 = l2.next; } } else if (l1 != null) { ListNode node = new ListNode(l1.val); curr.next = node; curr = curr.next; l1 = l1.next; } else { ListNode node = new ListNode(l2.val); curr.next = node; curr = curr.next; l2 = l2.next; } } return root.next; } } ","permalink":"https://volyx.in/posts/2021-07-16-merge-two-sorted-lists/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/merge-two-sorted-lists/\"\u003e21. Merge Two Sorted Lists\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eMerge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: l1 = [1,2,4], l2 = [1,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,1,2,3,4,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: l1 = [], l2 = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: l1 = [], l2 = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-07-16-ex1.jpg\"\u003e\u003c/p\u003e","title":"21. Merge Two Sorted Lists"},{"content":"325. Maximum Size Subarray Sum Equals k\nGiven an integer array nums and an integer k, return the maximum length of a subarray that sums to k. If there isn\u0026rsquo;t one, return 0 instead.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [1,-1,5,-2,3], k = 3 Output: 4 Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest. Example 2: Input: nums = [-2,-1,2,1], k = 1 Output: 2 Explanation: The subarray [-1, 2] sums to 1 and is the longest. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 2 * 105 -104 \u0026lt;= nums[i] \u0026lt;= 104 -109 \u0026lt;= k \u0026lt;= 109 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { /* 1 -1 5 -2 3 1 0 5 3 6 */ public int maxSubArrayLen(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(0, -1); int max = 0; int sum = 0; for (int i = 0; i \u0026lt; nums.length; i++) { sum += nums[i]; Integer prev = map.get(sum - k); if (prev != null) { max = Math.max(max, i - prev); } map.putIfAbsent(sum, i); } return max; } } Solution 2021-11-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int maxSubArrayLen(int[] nums, int k) { int n = nums.length; Map\u0026lt;Integer, Integer\u0026gt; prefix = new HashMap\u0026lt;\u0026gt;(); int sum = 0; int maxLen = 0; for (int i = 0; i \u0026lt; n; i++) { sum += nums[i]; if (sum == k) { maxLen = i + 1; } if (prefix.containsKey(sum - k)) { maxLen = Math.max(maxLen, i - prefix.get(sum - k)); } if (!prefix.containsKey(sum)) prefix.put(sum, i); } return maxLen; } } ","permalink":"https://volyx.in/posts/2021-07-16-maximum-size-subarray-sum-equals-k/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/\"\u003e325. Maximum Size Subarray Sum Equals k\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums and an integer k, return the maximum length of a subarray that sums to k. If there isn\u0026rsquo;t one, return 0 instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,-1,5,-2,3], k = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-2,-1,2,1], k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subarray [-1, 2] sums to 1 and is the longest.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"325. Maximum Size Subarray Sum Equals k"},{"content":"1213. Intersection of Three Sorted Arrays\nGiven three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8] Output: [1,5] Explanation: Only 1 and 5 appeared in the three arrays. Example 2: Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764] Output: [] Constraints:\n1 \u0026lt;= arr1.length, arr2.length, arr3.length \u0026lt;= 1000 1 \u0026lt;= arr1[i], arr2[i], arr3[i] \u0026lt;= 2000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Solution { /* 1 2 3 4 2 4 5 1 3 4 5 */ public List\u0026lt;Integer\u0026gt; arraysIntersection(int[] arr1, int[] arr2, int[] arr3) { int p1 = 0; int p2 = 0; int p3 = 0; int n1 = arr1.length; int n2 = arr2.length; int n3 = arr3.length; List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (p1 \u0026lt; n1 \u0026amp;\u0026amp; p2 \u0026lt; n2 \u0026amp;\u0026amp; p3 \u0026lt; n3) { if (arr1[p1] == arr2[p2] \u0026amp;\u0026amp; arr2[p2] == arr3[p3]) { res.add(arr1[p1]); p1++; p2++; p3++; } else { if (arr1[p1] \u0026lt; arr2[p2]) { p1++; } else if (arr2[p2] \u0026lt; arr3[p3]) { p2++; } else { p3++; } } } return res; } public List\u0026lt;Integer\u0026gt; arraysIntersection2(int[] arr1, int[] arr2, int[] arr3) { int[] freq = new int[2001]; for (int i = 0; i \u0026lt; arr1.length; i++) { freq[arr1[i]]++; } for (int i = 0; i \u0026lt; arr2.length; i++) { freq[arr2[i]]++; } for (int i = 0; i \u0026lt; arr3.length; i++) { freq[arr3[i]]++; } List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; freq.length; i++) { if (freq[i] == 3) { res.add(i); } } return res; } } ","permalink":"https://volyx.in/posts/2021-07-15-intersection-of-three-sorted-arrays/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/intersection-of-three-sorted-arrays/\"\u003e1213. Intersection of Three Sorted Arrays\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Only 1 and 5 appeared in the three arrays.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1213. Intersection of Three Sorted Arrays"},{"content":"496. Next Greater Element I\nThe next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 \u0026lt;= i \u0026lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: nums1 = [4,1,2], nums2 = [1,3,4,2] Output: [-1,3,-1] Explanation: The next greater element for each value of nums1 is as follows: - 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. - 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3. - 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1. Example 2: Input: nums1 = [2,4], nums2 = [1,2,3,4] Output: [3,-1] Explanation: The next greater element for each value of nums1 is as follows: - 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3. - 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1. Constraints:\n1 \u0026lt;= nums1.length \u0026lt;= nums2.length \u0026lt;= 1000 0 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 104 All integers in nums1 and nums2 are unique. All the integers of nums1 also appear in nums2. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Solution { public int[] nextGreaterElement(int[] findNums, int[] nums) { Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); int[] res = new int[findNums.length]; Deque\u0026lt;Integer\u0026gt; stack = new ArrayDeque\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { while (!stack.isEmpty() \u0026amp;\u0026amp; stack.peek() \u0026lt; nums[i]) { map.put(stack.pop(), nums[i]); } stack.push(nums[i]); } while (!stack.isEmpty()) { map.put(stack.pop(), -1); } for (int i = 0; i \u0026lt; findNums.length; i++) { res[i] = map.get(findNums[i]); } return res; } public int[] nextGreaterElement2(int[] nums1, int[] nums2) { Map\u0026lt;Integer, Integer\u0026gt; valueToIndex = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums2.length; i++) { valueToIndex.put(nums2[i], i); } int[] res = new int[nums1.length]; Arrays.fill(res, -1); for (int i = 0; i \u0026lt; nums1.length; i++) { Integer index = valueToIndex.get(nums1[i]); if (index != null) { for (int j = index + 1; j \u0026lt; nums2.length; j++) { if (nums2[j] \u0026gt; nums1[i]) { res[i] = nums2[j]; break; } } } } return res; } } Solution 2021-10-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int[] nextGreaterElement(int[] nums1, int[] nums2) { Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); // [1,3,4,2] // 1 = 3, 3 = 4, 2 = -1 for (int i = 0; i \u0026lt; nums2.length; i++) { while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; stack.peek() \u0026lt; nums2[i]) { map.put(stack.pop(), nums2[i]); } stack.push(nums2[i]); } while (stack.size() \u0026gt; 0) { map.put(stack.pop(), -1); } int[] res = new int[nums1.length]; for (int i = 0; i \u0026lt; nums1.length; i++) { res[i] = map.get(nums1[i]); } return res; } } Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int[] nextGreaterElement(int[] nums1, int[] nums2) { Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); Map\u0026lt;Integer, Integer\u0026gt; nextGreater = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums2.length; i++) { while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; nums2[stack.peek()] \u0026lt; nums2[i]) { nextGreater.put(nums2[stack.pop()], nums2[i]); } stack.push(i); } int[] res = new int[nums1.length]; for (int i = 0; i \u0026lt; res.length; i++) { res[i] = nextGreater.getOrDefault(nums1[i], -1); } return res; } } ","permalink":"https://volyx.in/posts/2021-07-15-next-greater-element-i/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/next-greater-element-i/\"\u003e496. Next Greater Element I\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\u003c/p\u003e\n\u003cp\u003eYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\u003c/p\u003e\n\u003cp\u003eFor each 0 \u0026lt;= i \u0026lt; nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\u003c/p\u003e","title":"496. Next Greater Element I"},{"content":"503. Next Greater Element II\nGiven a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn\u0026rsquo;t exist, return -1 for this number.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: nums = [1,2,1] Output: [2,-1,2] Explanation: The first 1\u0026#39;s next greater number is 2; The number 2 can\u0026#39;t find next greater number. The second 1\u0026#39;s next greater number needs to search circularly, which is also 2. Example 2: Input: nums = [1,2,3,4,3] Output: [2,3,4,-1,4] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 104 -109 \u0026lt;= nums[i] \u0026lt;= 109 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int[] nextGreaterElements(int[] nums) { // monotonic decreasing stack int n = nums.length; int[] res = new int[n]; Arrays.fill(res, -1); Deque\u0026lt;Integer\u0026gt; stack = new ArrayDeque\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; 2*n; i++) { while (!stack.isEmpty() \u0026amp;\u0026amp; nums[stack.peek()] \u0026lt; nums[i % n]) { res[stack.pop()] = nums[i % n]; } stack.push(i % n); } return res; } } Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int[] nextGreaterElements(int[] nums) { int n = nums.length; Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int[] res = new int[n]; Arrays.fill(res, -1); for (int i = 0; i \u0026lt; 2 * n; i++) { int index = i % n; while (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; nums[stack.peek()] \u0026lt; nums[index]) { res[stack.pop()] = nums[index]; } stack.push(index); } return res; } } ","permalink":"https://volyx.in/posts/2021-07-15-next-greater-element-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/next-greater-element-ii/\"\u003e503. Next Greater Element II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\u003c/p\u003e\n\u003cp\u003eThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn\u0026rsquo;t exist, return -1 for this number.\u003c/p\u003e","title":"503. Next Greater Element II"},{"content":"1329. Sort the Matrix Diagonally\nA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix\u0026rsquo;s end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\n1 2 3 4 Example 1: Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]] Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]] 1 2 3 4 Example 2: Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]] Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]] Constraints:\nm == mat.length n == mat[i].length 1 \u0026lt;= m, n \u0026lt;= 100 1 \u0026lt;= mat[i][j] \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class Solution { /** [[1,1,1,1], [1,2,2,2], [1,2,3,3]] [[11,25,45,1,69,7], [23,36,17,58,8,52], [75,31,55,44,66,15], [22,27,33,25,68,4], [84,28,14,11,5,50]] [22,27,31,36,50,66], [84,28,75,33,55,68]] */ public int[][] diagonalSort(int[][] mat) { int rows = mat.length; int cols = mat[0].length; for (int i = 0; i \u0026lt; rows; i++) { sort(i, 0, mat); } for (int j = 0; j \u0026lt; cols; j++) { sort(0, j, mat); } return mat; } void sort(int row, int col, int[][] mat) { int rows = mat.length; int cols = mat[0].length; int[] freq = new int[101]; int i = row; int j = col; while (i \u0026lt; rows \u0026amp;\u0026amp; j \u0026lt; cols) { int val = mat[i][j]; freq[val]++; i++; j++; } i = row; j = col; int k = 0; int index = 0; while (i \u0026lt; rows \u0026amp;\u0026amp; j \u0026lt; cols) { while (freq[index] == 0) { index++; } mat[i][j] = index; freq[index]--; i++; j++; k++; } } void sort2(int row, int col, int[][] mat) { int rows = mat.length; int cols = mat[0].length; List\u0026lt;Integer\u0026gt; diagonal = new ArrayList\u0026lt;\u0026gt;(); int i = row; int j = col; while (i \u0026lt; rows \u0026amp;\u0026amp; j \u0026lt; cols) { diagonal.add(mat[i][j]); i++; j++; } Collections.sort(diagonal); i = row; j = col; int k = 0; while (k \u0026lt; diagonal.size()) { mat[i][j] = diagonal.get(k); i++; j++; k++; } } } ","permalink":"https://volyx.in/posts/2021-07-11-sort-the-matrix-diagonally/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/sort-the-matrix-diagonally/\"\u003e1329. Sort the Matrix Diagonally\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix\u0026rsquo;s end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\u003c/p\u003e\n\u003cp\u003eGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\u003c/p\u003e","title":"1329. Sort the Matrix Diagonally"},{"content":"1235. Maximum Profit in Job Scheduling\nWe have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou\u0026rsquo;re given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.\n1 2 3 4 5 6 Example 1: Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70] Output: 120 Explanation: The subset chosen is the first and fourth job. Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70. 1 2 3 4 5 6 Example 2: Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60] Output: 150 Explanation: The subset chosen is the first, fourth and fifth job. Profit obtained 150 = 20 + 70 + 60. 1 2 3 4 Example 3: Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4] Output: 6 Constraints:\n1 \u0026lt;= startTime.length == endTime.length == profit.length \u0026lt;= 5 * 10^4 1 \u0026lt;= startTime[i] \u0026lt; endTime[i] \u0026lt;= 10^9 1 \u0026lt;= profit[i] \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public int findPeakElement(int[] nums) { int lo = 0; int hi = nums.length - 1; if (nums.length == 1) { return 0; } while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (isPeak(nums, mid)) { return mid; } else if (nums[mid + 1] \u0026gt; nums[mid]) { lo = mid + 1; } else { hi = mid - 1; } } return lo; } boolean isPeak(int[] nums, int x) { if (x == 0) { return nums[x] \u0026gt; nums[x + 1]; } if (x == nums.length - 1) { return nums[x] \u0026gt; nums[x - 1]; } return nums[x] \u0026gt; nums[x - 1] \u0026amp;\u0026amp; nums[x] \u0026gt; nums[x + 1]; } } ","permalink":"https://volyx.in/posts/2021-07-10-maximum-profit-in-job-scheduling/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-profit-in-job-scheduling/\"\u003e1235. Maximum Profit in Job Scheduling\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWe have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;re given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\u003c/p\u003e\n\u003cp\u003eIf you choose a job that ends at time X you will be able to start another job that starts at time X.\u003c/p\u003e","title":"1235. Maximum Profit in Job Scheduling"},{"content":"1348. Tweet Counts Per Frequency\nA social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\nFor example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:\nEvery minute (60-second chunks): [10,69], [70,129], [130,189], \u0026hellip;, [9970,10000] Every hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000] Every day (86400-second chunks): [10,10000] Notice that the last chunk may be shorter than the specified frequency\u0026rsquo;s chunk size and will always end with the end time of the period (10000 in the above example).\nDesign and implement an API to help the company with their analysis.\nImplement the TweetCounts class:\nTweetCounts() Initializes the TweetCounts object. void recordTweet(String tweetName, int time) Stores the tweetName at the recorded time (in seconds). List\u0026lt;Integer\u0026gt; getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime) Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time [startTime, endTime] (in seconds) and frequency freq. freq is one of \u0026ldquo;minute\u0026rdquo;, \u0026ldquo;hour\u0026rdquo;, or \u0026ldquo;day\u0026rdquo; representing a frequency of every minute, hour, or day respectively. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example: Input [\u0026#34;TweetCounts\u0026#34;,\u0026#34;recordTweet\u0026#34;,\u0026#34;recordTweet\u0026#34;,\u0026#34;recordTweet\u0026#34;,\u0026#34;getTweetCountsPerFrequency\u0026#34;,\u0026#34;getTweetCountsPerFrequency\u0026#34;,\u0026#34;recordTweet\u0026#34;,\u0026#34;getTweetCountsPerFrequency\u0026#34;] [[],[\u0026#34;tweet3\u0026#34;,0],[\u0026#34;tweet3\u0026#34;,60],[\u0026#34;tweet3\u0026#34;,10],[\u0026#34;minute\u0026#34;,\u0026#34;tweet3\u0026#34;,0,59],[\u0026#34;minute\u0026#34;,\u0026#34;tweet3\u0026#34;,0,60],[\u0026#34;tweet3\u0026#34;,120],[\u0026#34;hour\u0026#34;,\u0026#34;tweet3\u0026#34;,0,210]] Output [null,null,null,null,[2],[2,1],null,[4]] Explanation TweetCounts tweetCounts = new TweetCounts(); tweetCounts.recordTweet(\u0026#34;tweet3\u0026#34;, 0); // New tweet \u0026#34;tweet3\u0026#34; at time 0 tweetCounts.recordTweet(\u0026#34;tweet3\u0026#34;, 60); // New tweet \u0026#34;tweet3\u0026#34; at time 60 tweetCounts.recordTweet(\u0026#34;tweet3\u0026#34;, 10); // New tweet \u0026#34;tweet3\u0026#34; at time 10 tweetCounts.getTweetCountsPerFrequency(\u0026#34;minute\u0026#34;, \u0026#34;tweet3\u0026#34;, 0, 59); // return [2]; chunk [0,59] had 2 tweets tweetCounts.getTweetCountsPerFrequency(\u0026#34;minute\u0026#34;, \u0026#34;tweet3\u0026#34;, 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet tweetCounts.recordTweet(\u0026#34;tweet3\u0026#34;, 120); // New tweet \u0026#34;tweet3\u0026#34; at time 120 tweetCounts.getTweetCountsPerFrequency(\u0026#34;hour\u0026#34;, \u0026#34;tweet3\u0026#34;, 0, 210); // return [4]; chunk [0,210] had 4 tweets Constraints:\n0 \u0026lt;= time, startTime, endTime \u0026lt;= 109 0 \u0026lt;= endTime - startTime \u0026lt;= 104 There will be at most 104 calls in total to recordTweet and getTweetCountsPerFrequency. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class TweetCounts { private Map\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt; tweets = new HashMap\u0026lt;\u0026gt;(); public TweetCounts() { } public void recordTweet(String tweetName, int time) { List\u0026lt;Integer\u0026gt; times = tweets.get(tweetName); if (times == null) { times = new ArrayList\u0026lt;\u0026gt;(); } times.add(time); tweets.put(tweetName, times); } public List\u0026lt;Integer\u0026gt; getTweetCountsPerFrequency( String freq, String tweetName, int startTime, int endTime) { List\u0026lt;Integer\u0026gt; freqs = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; times = tweets.get(tweetName); if (times == null) return Collections.emptyList(); Collections.sort(times); int duration = 0; if (freq.equals(\u0026#34;minute\u0026#34;)) { duration = 60; } else if (freq.equals(\u0026#34;hour\u0026#34;)) { duration = 60 * 60; } else if (freq.equals(\u0026#34;day\u0026#34;)) { duration = 60 * 60 * 24; } if (duration == 0) return Collections.emptyList(); int durationStart = startTime; int durationEnd = Math.min(startTime + duration - 1, endTime); int iter = 0; while (durationStart \u0026lt;= endTime) { // skip before startTime while (iter \u0026lt; times.size() \u0026amp;\u0026amp; times.get(iter) \u0026lt; durationStart) { iter++; } int currFreq = 0; while (iter \u0026lt; times.size() \u0026amp;\u0026amp; times.get(iter) \u0026lt;= durationEnd) { iter++; currFreq++; } freqs.add(currFreq); durationStart = durationEnd + 1; durationEnd = Math.min(durationEnd + duration, endTime); } return freqs; } } /** * Your TweetCounts object will be instantiated and called as such: * TweetCounts obj = new TweetCounts(); * obj.recordTweet(tweetName,time); * List\u0026lt;Integer\u0026gt; param_2 = obj.getTweetCountsPerFrequency(freq,tweetName,startTime,endTime); */ ","permalink":"https://volyx.in/posts/2021-07-10-tweet-counts-per-frequency/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/tweet-counts-per-frequency/\"\u003e1348. Tweet Counts Per Frequency\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\u003c/p\u003e\n\u003cp\u003eFor example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEvery minute (60-second chunks): [10,69], [70,129], [130,189], \u0026hellip;, [9970,10000]\u003c/li\u003e\n\u003cli\u003eEvery hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]\u003c/li\u003e\n\u003cli\u003eEvery day (86400-second chunks): [10,10000]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNotice that the last chunk may be shorter than the specified frequency\u0026rsquo;s chunk size and will always end with the end time of the period (10000 in the above example).\u003c/p\u003e","title":"1348. Tweet Counts Per Frequency"},{"content":"1428. Leftmost Column with at Least a One\nThis problem is an interactive problem.)\nA row-sorted binary matrix means that all elements are 0 or 1 and each row of the matrix is sorted in non-decreasing order.\nGiven a row-sorted binary matrix binaryMatrix, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return -1.\nYou can\u0026rsquo;t access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:\nBinaryMatrix.get(row, col) returns the element of the matrix at index (row, col) (0-indexed). BinaryMatrix.dimensions() returns the dimensions of the matrix as a list of 2 elements [rows, cols], which means the matrix is rows x cols. Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.\nFor custom testing purposes, the input will be the entire binary matrix mat. You will not have access to the binary matrix directly.\n1 2 3 4 Example 1: Input: mat = [[0,0],[1,1]] Output: 0 1 2 3 4 Example 2: Input: mat = [[0,0],[0,1]] Output: 1 1 2 3 4 Example 3: Input: mat = [[0,0],[0,0]] Output: -1 1 2 3 4 Example 4: Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]] Output: 1 Constraints:\nrows == mat.length cols == mat[i].length 1 \u0026lt;= rows, cols \u0026lt;= 100 mat[i][j] is either 0 or 1. mat[i] is sorted in non-decreasing order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 /** * // This is the BinaryMatrix\u0026#39;s API interface. * // You should not implement it, or speculate about its implementation * interface BinaryMatrix { * public int get(int row, int col) {} * public List\u0026lt;Integer\u0026gt; dimensions {} * }; */ class Solution { public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) { List\u0026lt;Integer\u0026gt; dimensions = binaryMatrix.dimensions(); int rows = dimensions.get(0); int cols = dimensions.get(1); int row = 0; int col = cols - 1; while (row \u0026lt; rows \u0026amp;\u0026amp; col \u0026gt;= 0) { int val = binaryMatrix.get(row, col); if (val == 0) { row++; } else { col--; } } return (col == cols - 1) ? -1: col + 1; } public int leftMostColumnWithOne2(BinaryMatrix binaryMatrix) { List\u0026lt;Integer\u0026gt; dimensions = binaryMatrix.dimensions(); int rows = dimensions.get(0); int cols = dimensions.get(1); int smallestIndex = Integer.MAX_VALUE; for (int row = 0; row \u0026lt; rows; row++) { int lo = 0; int hi = cols - 1; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; int val = binaryMatrix.get(row, mid); if (val == 0) { lo = mid + 1; } else { hi = mid; } } if (binaryMatrix.get(row, lo) == 1) { smallestIndex = Math.min(lo, smallestIndex); } } return smallestIndex == Integer.MAX_VALUE? -1: smallestIndex; } } Solution 2021-08-15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 /** * // This is the BinaryMatrix\u0026#39;s API interface. * // You should not implement it, or speculate about its implementation * interface BinaryMatrix { * public int get(int row, int col) {} * public List\u0026lt;Integer\u0026gt; dimensions {} * }; */ class Solution { public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) { int rows = binaryMatrix.dimensions().get(0); int cols = binaryMatrix.dimensions().get(1); int row = 0; int col = cols - 1; /* 000000001 111111111 000000001 */ while (row \u0026lt; rows \u0026amp;\u0026amp; col \u0026gt;= 0) { if (binaryMatrix.get(row, col) == 1) { col--; } else { row++; } } if (col == -1) return 0; /* 0000000 0000000 */ if (col == cols - 1) return -1; return col + 1; } } Solution 2022-01-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /** * // This is the BinaryMatrix\u0026#39;s API interface. * // You should not implement it, or speculate about its implementation * interface BinaryMatrix { * public int get(int row, int col) {} * public List\u0026lt;Integer\u0026gt; dimensions {} * }; */ class Solution { public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) { List\u0026lt;Integer\u0026gt; dimensions = binaryMatrix.dimensions(); int n = dimensions.get(0); int m = dimensions.get(1); int i = 0; int j = m - 1; int leftMax = -1; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026gt;= 0) { if (binaryMatrix.get(i, j) == 1) { leftMax = j; j--; } else { i++; } } return leftMax; } } ","permalink":"https://volyx.in/posts/2021-07-10-leftmost-column-with-at-least-a-one/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/leftmost-column-with-at-least-a-one/\"\u003e1428. Leftmost Column with at Least a One\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThis problem is an interactive problem.)\u003c/p\u003e\n\u003cp\u003eA row-sorted binary matrix means that all elements are 0 or 1 and each row of the matrix is sorted in non-decreasing order.\u003c/p\u003e\n\u003cp\u003eGiven a row-sorted binary matrix binaryMatrix, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return -1.\u003c/p\u003e\n\u003cp\u003eYou can\u0026rsquo;t access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:\u003c/p\u003e","title":"1428. Leftmost Column with at Least a One"},{"content":"162. Find Peak Element\nA peak element is an element that is strictly greater than its neighbors.\nGiven an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -∞.\nYou must write an algorithm that runs in O(log n) time.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [1,2,3,1] Output: 2 Explanation: 3 is a peak element and your function should return the index number 2. Example 2: Input: nums = [1,2,1,3,5,6,4] Output: 5 Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 1000 -2^31 \u0026lt;= nums[i] \u0026lt;= 2^31 - 1 nums[i] != nums[i + 1] for all valid i. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public int findPeakElement(int[] nums) { int lo = 0; int hi = nums.length - 1; if (nums.length == 1) { return 0; } while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; if (isPeak(nums, mid)) { return mid; } else if (nums[mid + 1] \u0026gt; nums[mid]) { lo = mid + 1; } else { hi = mid - 1; } } return lo; } boolean isPeak(int[] nums, int x) { if (x == 0) { return nums[x] \u0026gt; nums[x + 1]; } if (x == nums.length - 1) { return nums[x] \u0026gt; nums[x - 1]; } return nums[x] \u0026gt; nums[x - 1] \u0026amp;\u0026amp; nums[x] \u0026gt; nums[x + 1]; } } Solution II 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int findPeakElement(int[] nums) { int lo = 0; int hi = nums.length - 1; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; if (nums[mid] \u0026lt; nums[mid + 1]) { lo = mid + 1; } else { hi = mid; } } return lo; } } ","permalink":"https://volyx.in/posts/2021-07-10-find-peak-element/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-peak-element/\"\u003e162. Find Peak Element\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA peak element is an element that is strictly greater than its neighbors.\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\u003c/p\u003e\n\u003cp\u003eYou may imagine that nums[-1] = nums[n] = -∞.\u003c/p\u003e\n\u003cp\u003eYou must write an algorithm that runs in O(log n) time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 3 is a peak element and your function should return the index number 2.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,1,3,5,6,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"162. Find Peak Element"},{"content":"240. Search a 2D Matrix II\nWrite an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:\nIntegers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom. 1 2 3 4 Example 1: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 Output: true 1 2 3 4 Example 2: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20 Output: false Constraints:\nm == matrix.length n == matrix[i].length 1 \u0026lt;= n, m \u0026lt;= 300 -109 \u0026lt;= matix[i][j] \u0026lt;= 109 All the integers in each row are sorted in ascending order. All the integers in each column are sorted in ascending order. -109 \u0026lt;= target \u0026lt;= 109 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public boolean searchMatrix(int[][] matrix, int target) { int m = matrix.length; int n = matrix[0].length; int row = 0; int col = n - 1; while (row \u0026lt; m \u0026amp;\u0026amp; col \u0026gt;= 0) { int value = matrix[row][col]; if (value == target) return true; if (target \u0026lt; value) { col--; } else { row++; } } return false; } } ","permalink":"https://volyx.in/posts/2021-07-06-search-a-2d-matrix-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/search-a-2d-matrix-ii/\"\u003e240. Search a 2D Matrix II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWrite an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIntegers in each row are sorted in ascending from left to right.\u003c/li\u003e\n\u003cli\u003eIntegers in each column are sorted in ascending from top to bottom.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-07-06-search-matrix-ii-ex1.jpg\"\u003e\u003c/p\u003e","title":"240. Search a 2D Matrix II"},{"content":"51. N-Queens\nThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens\u0026rsquo; placement, where \u0026lsquo;Q\u0026rsquo; and \u0026lsquo;.\u0026rsquo; both indicate a queen and an empty space, respectively.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: n = 4 Output: [[\u0026#34;.Q..\u0026#34;,\u0026#34;...Q\u0026#34;,\u0026#34;Q...\u0026#34;,\u0026#34;..Q.\u0026#34;],[\u0026#34;..Q.\u0026#34;,\u0026#34;Q...\u0026#34;,\u0026#34;...Q\u0026#34;,\u0026#34;.Q..\u0026#34;]] Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above Example 2: Input: n = 1 Output: [[\u0026#34;Q\u0026#34;]] Constraints:\n1 \u0026lt;= n \u0026lt;= 9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; solveNQueens(int n) { int[][] board = new int[n][n]; Set\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new HashSet\u0026lt;\u0026gt;(); backtrack(n, 0, board, res); return new ArrayList\u0026lt;\u0026gt;(res); } void backtrack(int n, int k, int[][] board, Set\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res) { // System.out.println(); // for (String line: toList(board)) { // System.out.println(line); // } if (k == n) { res.add(toList(board)); return; } for (int j = 0; j \u0026lt; n; j++) { if (canPut(board, k, j)) { board[k][j] = 1; backtrack(n, k + 1, board, res); board[k][j] = 0; } } } boolean canPut(int[][] board, int i, int j) { int n = board.length; // check rows for (int col = 0; col \u0026lt; n; col++) { if (board[i][col] == 1) return false; } // check cols for (int row = 0; row \u0026lt; n; row++) { if (board[row][j] == 1) return false; } /* 00 01 02 03 10 11 12 13 20 21 22 23 30 31 32 33 */ for (int row = 0; row \u0026lt; n; row++) { for (int col = 0; col \u0026lt; n; col++) { // check first diagonal if (i - j == row - col \u0026amp;\u0026amp; board[row][col] == 1) { return false; } // check second diagonal if (i + j == row + col \u0026amp;\u0026amp; board[row][col] == 1) { return false; } } } return true; } List\u0026lt;String\u0026gt; toList(int[][] board) { int n = board.length; List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int row = 0; row \u0026lt; n; row++) { StringBuilder sb = new StringBuilder(); for (int col = 0; col \u0026lt; n; col++) { if (board[row][col] == 1) { sb.append(\u0026#34;Q\u0026#34;); } else { sb.append(\u0026#34;.\u0026#34;); } } res.add(sb.toString()); } return res; } } ","permalink":"https://volyx.in/posts/2021-07-06-n-queens/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/n-queens/\"\u003e51. N-Queens\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\u003c/p\u003e\n\u003cp\u003eGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\u003c/p\u003e\n\u003cp\u003eEach solution contains a distinct board configuration of the n-queens\u0026rsquo; placement, where \u0026lsquo;Q\u0026rsquo; and \u0026lsquo;.\u0026rsquo; both indicate a queen and an empty space, respectively.\u003c/p\u003e","title":"51. N-Queens"},{"content":"74. Search a 2D Matrix\nWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right. The first integer of each row is greater than the last integer of the previous row. 1 2 3 4 Example 1: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 Output: true 1 2 3 4 Example 2: Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 Output: false Constraints:\nm == matrix.length n == matrix[i].length 1 \u0026lt;= m, n \u0026lt;= 100 -104 \u0026lt;= matrix[i][j], target \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public boolean searchMatrix(int[][] matrix, int target) { int cols = matrix.length; int rows = matrix[0].length; int lo = 0; int hi = cols * rows - 1; while (lo \u0026lt;= hi) { int mid = lo + (hi - lo) / 2; int value = matrix[mid / rows][mid % rows]; if (value == target) { return true; } if (target \u0026lt; value) { hi = mid - 1; } else { lo = mid + 1; } } return false; } } ","permalink":"https://volyx.in/posts/2021-07-06-search-a-2d-matrix/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/search-a-2d-matrix/\"\u003e74. Search a 2D Matrix\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWrite an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIntegers in each row are sorted from left to right.\u003c/li\u003e\n\u003cli\u003eThe first integer of each row is greater than the last integer of the previous row.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-07-06-search-matrix-ex1.jpg\"\u003e\u003c/p\u003e","title":"74. Search a 2D Matrix"},{"content":"Wine Selling Problem\nProblem statement: Given n wines in a row, with integers denoting the cost of each wine respectively. Each year you can sell the first or the last wine in the row. Let the initial profits from the wines be P1, P2, P3…Pn. In the Yth year, the profit from the ith wine will be Y*P[i]. The goal is to calculate the maximum profit that can be earned by selling all the wines.\nSuppose, wine array denotes the initial cost of each wine in the first year.\nwine[] = [2, 4, 6, 2, 5]\nThe initial thought would be to go greedy, that is, check both the ends and sell the cheaper wine every time. If we do it greedy way,\n1 2 3 4 5 price = 2*1 = 2, remaining wines = [ 4, 6, 2, 5 ], Profit = 2 price = 4*2 = 8, remaining wines = [ 6, 2, 5 ], Profit = 10 price = 5*3 = 15, remaining wines = [ 6, 2 ], Profit = 25 price = 2*4 = 8, remaining wines = [ 6 ], Profit = 33 price = 6*5 = 30, remaining wines = [ ], Profit = 63 Therefore the overall profit received by applying a greedy approach is 63. Do you think this is the correct answer? Well, no! In a greedy approach, we select the best solution at each step. The greedy solution does not guarantee a globally optimal solution. Hence, by choosing the cheaper wine from each end every time, we might be the profit associated with the remaining unsold wines.\nTo the above solution, the actual optimal profit is 64. Let me show how:\nwine[] = [2, 4, 6, 2, 5]\n1 2 3 4 5 price = 2*1 = 2, remaining wines = [ 4, 6, 2, 5 ], Profit = 2 price = 5*2 = 10, remaining wines = [ 4, 6, 2 ], Profit = 12 price = 2*3 = 6, remaining wines = [ 4, 6], Profit = 18 price = 4*4 = 16, remaining wines = [ 6 ], Profit = 34 price = 6*5 = 30, remaining wines = [ ], Profit = 64 So, here we can see, in the second step, wine with price 5 is sold first instead of the wine with the price 4. By doing this, we make sure that wine with a very cheap price that is ‘2’ is sold in the third year, which otherwise would have been sold in the fourth year. Hence, increasing the overall profit.\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 import java.util.Arrays; public class Main { int[] wines; int[][] winesProfit; public static void main(String[] args) { int[] wines = new int[] {2, 4, 6, 2, 5}; int n = wines.length; var main = new Main(); main.wines = wines; main.winesProfit = new int[n][n]; System.out.println(main.maxProfit(1, 0, n - 1)); } int maxProfit(int year, int left, int right) { if (left \u0026gt; right) return 0; else if (winesProfit[left][right] !=0) { return winesProfit[left][right]; } else { int leftProfit = wines[left] * year + maxProfit(year + 1, left + 1, right); int rightProfit = wines[right] * year + maxProfit(year + 1, left, right - 1); winesProfit[left][right] = Math.max(leftProfit, rightProfit); return winesProfit[left][right] ; } } int maxProfit2(int year, int left, int right) { if (left == right) return year * wines[left]; int leftProfit = wines[left] * year + maxProfit(year + 1, left + 1, right); int rightProfit = wines[right] * year + maxProfit(year + 1, left, right - 1); return Math.max(leftProfit, rightProfit); } } ","permalink":"https://volyx.in/posts/2021-07-04-wine-selling-problem-copy/","summary":"\u003cp\u003e\u003ca href=\"https://medium.com/trick-the-interviwer/wine-selling-problem-4f6886d8ed6d\"\u003eWine Selling Problem\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eProblem statement:\nGiven n wines in a row, with integers denoting the cost of each wine respectively. Each year you can sell the first or the last wine in the row. Let the initial profits from the wines be P1, P2, P3…Pn. In the Yth year, the profit from the ith wine will be Y*P[i]. The goal is to calculate the maximum profit that can be earned by selling all the wines.\u003c/p\u003e","title":"Wine Selling Problem"},{"content":"12. Integer to Roman\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000\nFor example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. Given an integer, convert it to a roman numeral.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: num = 3 Output: \u0026#34;III\u0026#34; Example 2: Input: num = 4 Output: \u0026#34;IV\u0026#34; Example 3: Input: num = 9 Output: \u0026#34;IX\u0026#34; Example 4: Input: num = 58 Output: \u0026#34;LVIII\u0026#34; Explanation: L = 50, V = 5, III = 3. Example 5: Input: num = 1994 Output: \u0026#34;MCMXCIV\u0026#34; Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Constraints:\n1 \u0026lt;= num \u0026lt;= 3999 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { String[] M = new String[] {\u0026#34;\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;MM\u0026#34;, \u0026#34;MMM\u0026#34;}; String[] C = new String[] {\u0026#34;\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;CC\u0026#34;, \u0026#34;CCC\u0026#34;, \u0026#34;CD\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;DC\u0026#34;, \u0026#34;DCC\u0026#34;, \u0026#34;DCCC\u0026#34;, \u0026#34;CM\u0026#34;}; String[] X = new String[] {\u0026#34;\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;XX\u0026#34;, \u0026#34;XXX\u0026#34;, \u0026#34;XL\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;LX\u0026#34;, \u0026#34;LXX\u0026#34;, \u0026#34;LXXX\u0026#34;, \u0026#34;XC\u0026#34;}; String[] I = new String[] {\u0026#34;\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;II\u0026#34;, \u0026#34;III\u0026#34;, \u0026#34;IV\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;VI\u0026#34;, \u0026#34;VII\u0026#34;, \u0026#34;VIII\u0026#34;, \u0026#34;IX\u0026#34;}; public String intToRoman(int num) { return M[num / 1000] + C[(num % 1000) / 100] + X[(num % 100) / 10] + I[num % 10]; } } ","permalink":"https://volyx.in/posts/2021-07-01-integer-to-roman/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/integer-to-roman/\"\u003e12. Integer to Roman\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\u003c/p\u003e\n\u003cp\u003eSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\u003c/p\u003e\n\u003cp\u003eFor example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\u003c/p\u003e","title":"12. Integer to Roman"},{"content":"13. Roman to Integer\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\nSymbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000\nFor example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: s = \u0026#34;III\u0026#34; Output: 3 Example 2: Input: s = \u0026#34;IV\u0026#34; Output: 4 Example 3: Input: s = \u0026#34;IX\u0026#34; Output: 9 Example 4: Input: s = \u0026#34;LVIII\u0026#34; Output: 58 Explanation: L = 50, V= 5, III = 3. Example 5: Input: s = \u0026#34;MCMXCIV\u0026#34; Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 15 s contains only the characters (\u0026lsquo;I\u0026rsquo;, \u0026lsquo;V\u0026rsquo;, \u0026lsquo;X\u0026rsquo;, \u0026lsquo;L\u0026rsquo;, \u0026lsquo;C\u0026rsquo;, \u0026lsquo;D\u0026rsquo;, \u0026lsquo;M\u0026rsquo;). It is guaranteed that s is a valid roman numeral in the range [1, 3999]. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int romanToInt(String s) { Map\u0026lt;String, Integer\u0026gt; map = Map.of( \u0026#34;I\u0026#34;, 1, \u0026#34;V\u0026#34;, 5, \u0026#34;X\u0026#34;, 10, \u0026#34;L\u0026#34;, 50, \u0026#34;C\u0026#34;, 100, \u0026#34;D\u0026#34;, 500, \u0026#34;M\u0026#34;, 1000 ); int res = 0; for (int i = 0; i \u0026lt; s.length(); i++) { if (i \u0026gt; 0 \u0026amp;\u0026amp; map.get(s.charAt(i) + \u0026#34;\u0026#34;) \u0026gt; map.get(s.charAt(i - 1) + \u0026#34;\u0026#34;)) { res -= 2* map.get(s.charAt(i - 1) + \u0026#34;\u0026#34;); } res += map.get(s.charAt(i) + \u0026#34;\u0026#34;); } return res; } } Solution 1.08.2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { static String[] I = new String[] {\u0026#34;I\u0026#34;, \u0026#34;II\u0026#34;, \u0026#34;III\u0026#34;, \u0026#34;IV\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;VI\u0026#34;, \u0026#34;VII\u0026#34;, \u0026#34;VIII\u0026#34;, \u0026#34;IX\u0026#34;}; static String[] X = new String[] {\u0026#34;X\u0026#34;, \u0026#34;XX\u0026#34;, \u0026#34;XXX\u0026#34;, \u0026#34;XL\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;LX\u0026#34;, \u0026#34;LXX\u0026#34;, \u0026#34;LXXX\u0026#34;, \u0026#34;XC\u0026#34;}; static String[] C = new String[] {\u0026#34;C\u0026#34;, \u0026#34;CC\u0026#34;, \u0026#34;CCC\u0026#34;, \u0026#34;CD\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;DC\u0026#34;, \u0026#34;DCC\u0026#34;, \u0026#34;DCCC\u0026#34;, \u0026#34;CM\u0026#34;}; static String[] M = new String[] {\u0026#34;M\u0026#34;, \u0026#34;MM\u0026#34;, \u0026#34;MMM\u0026#34;}; static String[][] ALL = new String[][] { I, // 0 X, // 1 C, // 2 M // 3 }; public int romanToInt(String s) { int res = 0; int len = s.length(); int i = 0; while (i \u0026lt; len) { boolean found = false; for (int j = ALL.length - 1; j \u0026gt;= 0; j--) { String[] values = ALL[j]; for (int k = values.length - 1; k \u0026gt;= 0; k--) { String val = values[k]; if (i + val.length() \u0026gt; len) continue; if (s.substring(i, i + val.length()).equals(val)) { res += pow(10, j) * (k + 1); found = true; // System.out.println(\u0026#34;\\t\u0026#34; + val + \u0026#34; res \u0026#34; + res); i += val.length(); break; } } if (found) { break; } } } return res; } int pow(int a, int b) { return (int) Math.pow(a, b); } } ","permalink":"https://volyx.in/posts/2021-07-01-roman-to-integer/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/roman-to-integer/\"\u003e13. Roman to Integer\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\u003c/p\u003e\n\u003cp\u003eSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\u003c/p\u003e\n\u003cp\u003eFor example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\u003c/p\u003e","title":"13. Roman to Integer"},{"content":"1175. Prime Arrangements\nReturn the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)\nSince the answer may be large, return the answer modulo 10^9 + 7.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: n = 5 Output: 12 Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1. Example 2: Input: n = 100 Output: 682289015 Constraints:\n1 \u0026lt;= n \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { static long MOD = 1_000_000_007L; public int numPrimeArrangements(int n) { int count = 0; for (int i = 2; i \u0026lt; n + 1; i++) { if (i == 2 || i == 3 || isPrime(i)) { count++; } } long pn = factorial(count) % MOD; long npn = factorial(n - count) % MOD; return (int) (pn * npn % MOD); } boolean isPrime(int n) { int m = (int) Math.sqrt(n) + 1; for (int i = 2; i \u0026lt; m; i++) { if (n % i == 0) return false; } return true; } long factorial(int n) { long res = 1; for (int i = 1; i \u0026lt; n + 1; i++) { res = res * i; res %= MOD; } return res; } } ","permalink":"https://volyx.in/posts/2021-06-30-prime-arrangements/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/prime-arrangements/\"\u003e1175. Prime Arrangements\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eReturn the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)\u003c/p\u003e\n\u003cp\u003e(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)\u003c/p\u003e\n\u003cp\u003eSince the answer may be large, return the answer modulo 10^9 + 7.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 12\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 100\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 682289015\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1175. Prime Arrangements"},{"content":"1913. Maximum Product Difference Between Two Pairs\nThe product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\nFor example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16. Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: nums = [5,6,2,7,4] Output: 34 Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4). The product difference is (6 * 7) - (2 * 4) = 34. Example 2: Input: nums = [4,2,5,9,7,4,8] Output: 64 Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4). The product difference is (9 * 8) - (2 * 4) = 64. Constraints:\n4 \u0026lt;= nums.length \u0026lt;= 10^4 1 \u0026lt;= nums[i] \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 class Solution { public int maxProductDifference(int[] nums) { Arrays.sort(nums); int n = nums.length; return nums[n - 1] * nums[n - 2] - nums[1] * nums[0]; } } ","permalink":"https://volyx.in/posts/2021-06-30-maximum-product-difference-between-two-pairs/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-product-difference-between-two-pairs/\"\u003e1913. Maximum Product Difference Between Two Pairs\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe product difference between two pairs (a, b) and (c, d) is defined as \u003ccode\u003e(a * b) - (c * d).\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, the product difference between (5, 6) and (2, 7) is \u003ccode\u003e(5 * 6) - (2 * 7) = 16.\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\u003c/p\u003e","title":"1913. Maximum Product Difference Between Two Pairs"},{"content":"50. Pow(x, n)\nImplement pow(x, n), which calculates x raised to the power n (i.e., xn).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: x = 2.00000, n = 10 Output: 1024.00000 Example 2: Input: x = 2.10000, n = 3 Output: 9.26100 Example 3: Input: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25 Constraints:\n-100.0 \u0026lt; x \u0026lt; 100.0 -231 \u0026lt;= n \u0026lt;= 231-1 -104 \u0026lt;= xn \u0026lt;= 104 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public double myPow(double x, int n) { long N = n; if (n \u0026lt; 0) { x = 1.0 / x; N = -N; } long i = N; double res = 1.0; double current = x; while (i \u0026gt; 0) { if (i % 2 == 1) { res = res * current; } current = current * current; i = i / 2; } return res; } } Solution 2021-11-19 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public double myPow(double x, int n) { long N = n; if (n \u0026lt; 0) { x = 1 / x; N = -N; } double ans = 1.0; for (long i = N; i \u0026gt; 0; i = i / 2) { if (i % 2 == 1) { ans = ans * x; } x = x * x; } return ans; } } Solution 2021-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public double myPow(double x, int n) { long m = n; if (m == 0) return 1; if (m \u0026lt; 0) { m = -m; x = 1 / x; } double base = x; long degree = 1L; while (degree \u0026lt; m) { x = x * x; degree *= 2; } while (degree-- != m) { x /= base; } return x; } } ","permalink":"https://volyx.in/posts/2021-06-30-powx-n/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/powx-n/\"\u003e50. Pow(x, n)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eImplement pow(x, n), which calculates x raised to the power n (i.e., xn).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: x = 2.00000, n = 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1024.00000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: x = 2.10000, n = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 9.26100\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: x = 2.00000, n = -2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0.25000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 2-2 = 1/22 = 1/4 = 0.25\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"50. Pow(x, n)"},{"content":"1071. Greatest Common Divisor of Strings\nFor two strings s and t, we say \u0026ldquo;t divides s\u0026rdquo; if and only if s = t + \u0026hellip; + t (t concatenated with itself 1 or more times)\nGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: str1 = \u0026#34;ABCABC\u0026#34;, str2 = \u0026#34;ABC\u0026#34; Output: \u0026#34;ABC\u0026#34; Example 2: Input: str1 = \u0026#34;ABABAB\u0026#34;, str2 = \u0026#34;ABAB\u0026#34; Output: \u0026#34;AB\u0026#34; Example 3: Input: str1 = \u0026#34;LEET\u0026#34;, str2 = \u0026#34;CODE\u0026#34; Output: \u0026#34;\u0026#34; Example 4: Input: str1 = \u0026#34;ABCDEF\u0026#34;, str2 = \u0026#34;ABC\u0026#34; Output: \u0026#34;\u0026#34; Constraints:\n1 \u0026lt;= str1.length \u0026lt;= 1000 1 \u0026lt;= str2.length \u0026lt;= 1000 str1 and str2 consist of English uppercase letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { // ABABABA // ABAB public String gcdOfStrings(String str1, String str2) { if (str1.length() \u0026lt; str2.length()) { return gcdOfStrings(str2, str1); } if (!str1.startsWith(str2)) { return \u0026#34;\u0026#34;; } if (str2.isEmpty()) { return str1; } return gcdOfStrings(str1.substring(str2.length()), str2); } } ","permalink":"https://volyx.in/posts/2021-06-29-greatest-common-divisor-of-strings/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/greatest-common-divisor-of-strings/\"\u003e1071. Greatest Common Divisor of Strings\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFor two strings s and t, we say \u0026ldquo;t divides s\u0026rdquo; if and only if s = t + \u0026hellip; + t  (t concatenated with itself 1 or more times)\u003c/p\u003e\n\u003cp\u003eGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: str1 = \u0026#34;ABCABC\u0026#34;, str2 = \u0026#34;ABC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;ABC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: str1 = \u0026#34;ABABAB\u0026#34;, str2 = \u0026#34;ABAB\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;AB\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: str1 = \u0026#34;LEET\u0026#34;, str2 = \u0026#34;CODE\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: str1 = \u0026#34;ABCDEF\u0026#34;, str2 = \u0026#34;ABC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1071. Greatest Common Divisor of Strings"},{"content":"204. Count Primes\nCount the number of prime numbers less than a non-negative number, n.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: n = 10 Output: 4 Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7. Example 2: Input: n = 0 Output: 0 Example 3: Input: n = 1 Output: 0 Constraints:\n0 \u0026lt;= n \u0026lt;= 5 * 106 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int countPrimes(int n) { boolean[] numbers = new boolean[n + 1]; for (int p = 2; p \u0026lt;= (int) Math.sqrt(n); p++) { if (numbers[p] == false) { for (int j = p + p; j \u0026lt; n; j += p) { numbers[j] = true; } } } int count = 0; for (int i = 2; i \u0026lt; n; i++) { if (numbers[i] == false) { count++; } } return count; } } ","permalink":"https://volyx.in/posts/2021-06-29-count-primes/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/count-primes/\"\u003e204. Count Primes\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eCount the number of prime numbers less than a non-negative number, n.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"204. Count Primes"},{"content":"11004. Max Consecutive Ones III\nGiven a binary array nums and an integer k, return the maximum number of consecutive 1\u0026rsquo;s in the array if you can flip at most k 0\u0026rsquo;s.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2 Output: 6 Explanation: [1,1,1,0,0,1,1,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. Example 2: Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3 Output: 10 Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 105 nums[i] is either 0 or 1. 0 \u0026lt;= k \u0026lt;= nums.length Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int longestOnes(int[] nums, int k) { int[] map = new int[2]; int start = 0; int end = 0; int maxLen = 0; while (end \u0026lt; nums.length) { int val = nums[end]; map[val]++; end++; while (map[0] \u0026gt; k) { int prev = nums[start]; map[prev]--; start++; } maxLen = Math.max(maxLen, end - start); } return maxLen; } } ","permalink":"https://volyx.in/posts/2021-06-24-max-consecutive-ones-iii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/\"\u003e11004. Max Consecutive Ones III\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a binary array nums and an integer k, return the maximum number of consecutive 1\u0026rsquo;s in the array if you can flip at most k 0\u0026rsquo;s.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [1,1,1,0,0,1,1,1,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1004. Max Consecutive Ones III"},{"content":"11. Container With Most Water\nGiven n non-negative integers a1, a2, \u0026hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\nNotice that you may not slant the container.\n1 2 3 4 5 Example 1: Input: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 2: Input: height = [1,1] Output: 1 Example 3: Input: height = [4,3,2,1,4] Output: 16 Example 4: Input: height = [1,2,1] Output: 2 Constraints:\nn == height.length 2 \u0026lt;= n \u0026lt;= 10^5 0 \u0026lt;= height[i] \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int maxArea(int[] height) { int l = 0; int r = height.length - 1; int maxarea = 0; while (l \u0026lt; r) { int minHeight = Math.min(height[l], height[r]); maxarea = Math.max(maxarea, minHeight * (r - l)); if (height[l] \u0026lt; height[r]) { l++; } else { r--; } } return maxarea; } } ","permalink":"https://volyx.in/posts/2021-06-24-container-with-most-water/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/container-with-most-water/\"\u003e11. Container With Most Water\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven n non-negative integers a1, a2, \u0026hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\u003c/p\u003e\n\u003cp\u003eNotice that you may not slant the container.\u003c/p\u003e","title":"11. Container With Most Water"},{"content":"159. Longest Substring with At Most Two Distinct Characters\nGiven a string s, return the length of the longest substring that contains at most two distinct characters.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: s = \u0026#34;eceba\u0026#34; Output: 3 Explanation: The substring is \u0026#34;ece\u0026#34; which its length is 3. Example 2: Input: s = \u0026#34;ccaabbb\u0026#34; Output: 5 Explanation: The substring is \u0026#34;aabbb\u0026#34; which its length is 5. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 104 s consists of English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int lengthOfLongestSubstringTwoDistinct(String s) { int start = 0; int end = 0; int maxLen = 0; int uniq = 0; int[] map = new int[128]; while (end \u0026lt; s.length()) { char c = s.charAt(end); map[c]++; if (map[c] == 1) uniq++; end++; while (uniq \u0026gt; 2) { char prev = s.charAt(start); map[prev]--; if (map[prev] == 0) uniq--; start++; } maxLen = Math.max(maxLen, end - start); } return maxLen; } } ","permalink":"https://volyx.in/posts/2021-06-24-longest-substring-with-at-most-two-distinct-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters/\"\u003e159. Longest Substring with At Most Two Distinct Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, return the length of the longest substring that contains at most two distinct characters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;eceba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The substring is \u0026#34;ece\u0026#34; which its length is 3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ccaabbb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The substring is \u0026#34;aabbb\u0026#34; which its length is 5.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"159. Longest Substring with At Most Two Distinct Characters"},{"content":"209. Minimum Size Subarray Sum\nGiven an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, \u0026hellip;, numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: target = 7, nums = [2,3,1,2,4,3] Output: 2 Explanation: The subarray [4,3] has the minimal length under the problem constraint. Example 2: Input: target = 4, nums = [1,4,4] Output: 1 Example 3: Input: target = 11, nums = [1,1,1,1,1,1,1,1] Output: 0 Constraints:\n1 \u0026lt;= target \u0026lt;= 10^9 1 \u0026lt;= nums.length \u0026lt;= 10^5 1 \u0026lt;= nums[i] \u0026lt;= 10^5 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public int minSubArrayLen(int target, int[] nums) { int start = 0; int end = 0; int n = nums.length; int sum = 0; int minLen = Integer.MAX_VALUE; while (end \u0026lt; n) { sum += nums[end]; end++; while (sum \u0026gt;= target) { minLen = Math.min(minLen, end - start); sum -= nums[start]; start++; } } return minLen == Integer.MAX_VALUE ? 0: minLen; } } ","permalink":"https://volyx.in/posts/2021-06-24-minimum-size-subarray-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-size-subarray-sum/\"\u003e209. Minimum Size Subarray Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, \u0026hellip;, numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = 7, nums = [2,3,1,2,4,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subarray [4,3] has the minimal length under the problem constraint.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = 4, nums = [1,4,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: target = 11, nums = [1,1,1,1,1,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"209. Minimum Size Subarray Sum"},{"content":"3. Longest Substring Without Repeating Characters\nGiven a string s, find the length of the longest substring without repeating characters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: s = \u0026#34;abcabcbb\u0026#34; Output: 3 Explanation: The answer is \u0026#34;abc\u0026#34;, with the length of 3. Example 2: Input: s = \u0026#34;bbbbb\u0026#34; Output: 1 Explanation: The answer is \u0026#34;b\u0026#34;, with the length of 1. Example 3: Input: s = \u0026#34;pwwkew\u0026#34; Output: 3 Explanation: The answer is \u0026#34;wke\u0026#34;, with the length of 3. Notice that the answer must be a substring, \u0026#34;pwke\u0026#34; is a subsequence and not a substring. Example 4: Input: s = \u0026#34;\u0026#34; Output: 0 Constraints:\n0 \u0026lt;= s.length \u0026lt;= 5 * 104 s consists of English letters, digits, symbols and spaces. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int lengthOfLongestSubstring(String s) { int[] map = new int[128]; int start = 0; int end = 0; int maxLen = 0; while (end \u0026lt; s.length()) { char c = s.charAt(end); map[c]++; end++; while (map[c] \u0026gt; 1) { char prev = s.charAt(start); map[prev]--; start++; } maxLen = Math.max(maxLen, end - start); } return maxLen; } } Solution 2021-11-16 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { /* abcabcbb 01234567 abc bca cab abc */ public int lengthOfLongestSubstring(String s) { int lo = 0; int hi = 0; int max = 0; Map\u0026lt;Character, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); while (hi \u0026lt; s.length()) { char c = s.charAt(hi); if (map.containsKey(Character.valueOf(c))) { lo = Math.max(map.get(Character.valueOf(c)), lo); } max = Math.max(max, hi - lo + 1); map.put(s.charAt(hi), hi + 1); hi++; } return max; } public int lengthOfLongestSubstring2(String s) { int lo = 0; int hi = 0; int max = 0; int[] freq = new int[256]; while (hi \u0026lt; s.length()) { char c = s.charAt(hi); freq[c]++; while (freq[c] \u0026gt; 1) { char prev = s.charAt(lo); freq[prev]--; lo++; } max = Math.max(max, hi - lo + 1); hi++; } return max; } } ","permalink":"https://volyx.in/posts/2021-06-24-longest-substring-without-repeating-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\"\u003e3. Longest Substring Without Repeating Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, find the length of the longest substring without repeating characters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abcabcbb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The answer is \u0026#34;abc\u0026#34;, with the length of 3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;bbbbb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The answer is \u0026#34;b\u0026#34;, with the length of 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;pwwkew\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The answer is \u0026#34;wke\u0026#34;, with the length of 3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNotice that the answer must be a substring, \u0026#34;pwke\u0026#34; is a subsequence and not a substring.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"3. Longest Substring Without Repeating Characters"},{"content":"424. Longest Repeating Character Replacement\nYou are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: s = \u0026#34;ABAB\u0026#34;, k = 2 Output: 4 Explanation: Replace the two \u0026#39;A\u0026#39;s with two \u0026#39;B\u0026#39;s or vice versa. Example 2: Input: s = \u0026#34;AABABBA\u0026#34;, k = 1 Output: 4 Explanation: Replace the one \u0026#39;A\u0026#39; in the middle with \u0026#39;B\u0026#39; and form \u0026#34;AABBBBA\u0026#34;. The substring \u0026#34;BBBB\u0026#34; has the longest repeating letters, which is 4. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 105 s consists of only uppercase English letters. 0 \u0026lt;= k \u0026lt;= s.length Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int characterReplacement(String s, int k) { int start = 0; int end = 0; int[] map = new int[128]; int maxLen = 0; int maxChar = 0; while (end \u0026lt; s.length()) { char c = s.charAt(end); map[c]++; end++; maxChar = Math.max(maxChar, map[c]); while (end - start - maxChar \u0026gt; k) { char prev = s.charAt(start); map[prev]--; start++; } maxLen = Math.max(maxLen, end - start); } return maxLen; } } ","permalink":"https://volyx.in/posts/2021-06-24-longest-repeating-character-replacement/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-repeating-character-replacement/\"\u003e424. Longest Repeating Character Replacement\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\u003c/p\u003e\n\u003cp\u003eReturn the length of the longest substring containing the same letter you can get after performing the above operations.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ABAB\u0026#34;, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Replace the two \u0026#39;A\u0026#39;s with two \u0026#39;B\u0026#39;s or vice versa.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;AABABBA\u0026#34;, k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Replace the one \u0026#39;A\u0026#39; in the middle with \u0026#39;B\u0026#39; and form \u0026#34;AABBBBA\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe substring \u0026#34;BBBB\u0026#34; has the longest repeating letters, which is 4.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"424. Longest Repeating Character Replacement"},{"content":"340. Longest Substring with At Most K Distinct Characters\nGiven a string s and an integer k, return the length of the longest substring of s that contains at most k distinct characters.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: s = \u0026#34;eceba\u0026#34;, k = 2 Output: 3 Explanation: The substring is \u0026#34;ece\u0026#34; with length 3. Example 2: Input: s = \u0026#34;aa\u0026#34;, k = 1 Output: 2 Explanation: The substring is \u0026#34;aa\u0026#34; with length 2. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 5 * 104 0 \u0026lt;= k \u0026lt;= 50 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { int[] map = new int[128]; int start = 0; int end = 0; int maxLen = 0; int counter = 0; while (end \u0026lt; s.length()) { char c = s.charAt(end); if (map[c] == 0) counter++; map[c]++; end++; while (counter \u0026gt; k) { char prev = s.charAt(start); if (map[prev] == 1) counter--; map[prev]--; start++; } maxLen = Math.max(maxLen, end - start); } return maxLen; } } Solution 2021-09-07 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { /* eceba 01234 1223 */ public int lengthOfLongestSubstringKDistinct(String s, int k) { int[] freq = new int[256]; int max = 0; int n = s.length(); int start = 0; int end = 0; int counter = 0; while (end \u0026lt; n) { char c = s.charAt(end); freq[c]++; if (freq[c] == 1) { counter++; } end++; while (counter \u0026gt; k) { char prev = s.charAt(start); freq[prev]--; if (freq[prev] == 0) { counter--; } start++; } max = Math.max(end - start, max); } return max; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public int lengthOfLongestSubstringKDistinct(String s, int k) { int lo = 0; int hi = 0; int n = s.length(); int[] freq = new int[256]; int count = 0; int max = 0; while (hi \u0026lt; n) { freq[s.charAt(hi)]++; if (freq[s.charAt(hi)] == 1) { count++; } while (count \u0026gt; k) { freq[s.charAt(lo)]--; if (freq[s.charAt(lo)] == 0) { count--; } lo++; } max = Math.max(max, hi - lo + 1); hi++; } return max; } } ","permalink":"https://volyx.in/posts/2021-06-23-longest-substring-with-at-most-k-distinct-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters/\"\u003e340. Longest Substring with At Most K Distinct Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s and an integer k, return the length of the longest substring of s that contains at most k distinct characters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;eceba\u0026#34;, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The substring is \u0026#34;ece\u0026#34; with length 3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aa\u0026#34;, k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The substring is \u0026#34;aa\u0026#34; with length 2.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"340. Longest Substring with At Most K Distinct Characters"},{"content":"76. Minimum Window Substring\nGiven two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \u0026ldquo;\u0026rdquo;.\nThe testcases will be generated such that the answer is unique.\nA substring is a contiguous sequence of characters within the string.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input: s = \u0026#34;ADOBECODEBANC\u0026#34;, t = \u0026#34;ABC\u0026#34; Output: \u0026#34;BANC\u0026#34; Explanation: The minimum window substring \u0026#34;BANC\u0026#34; includes \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, and \u0026#39;C\u0026#39; from string t. Example 2: Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;a\u0026#34; Output: \u0026#34;a\u0026#34; Explanation: The entire string s is the minimum window. Example 3: Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34; Output: \u0026#34;\u0026#34; Explanation: Both \u0026#39;a\u0026#39;s from t must be included in the window. Since the largest window of s only has one \u0026#39;a\u0026#39;, return empty string. Constraints:\nm == s.length n == t.length 1 \u0026lt;= m, n \u0026lt;= 105 s and t consist of uppercase and lowercase English letters. Follow up: Could you find an algorithm that runs in O(m + n) time?\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public String minWindow(String s, String t) { int[] freq = new int[128]; int counter = t.length(); for (char c : t.toCharArray()) { freq[c]++; } int start = 0; int end = 0; int minStart = 0; int minLength = Integer.MAX_VALUE; while (end \u0026lt; s.length()) { char c = s.charAt(end); if (freq[c] \u0026gt; 0) { counter--; } freq[c]--; end++; while (counter == 0) { if (end - start \u0026lt; minLength) { minStart = start; minLength = end - start; } char startChar = s.charAt(start); freq[startChar]++; if (freq[startChar] \u0026gt; 0) { counter++; } start++; } } if (minLength == Integer.MAX_VALUE) { return \u0026#34;\u0026#34;; } return s.substring(minStart, minStart + minLength); } } ","permalink":"https://volyx.in/posts/2021-06-23-minimum-window-substring/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-window-substring/\"\u003e76. Minimum Window Substring\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \u0026ldquo;\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eThe testcases will be generated such that the answer is unique.\u003c/p\u003e\n\u003cp\u003eA substring is a contiguous sequence of characters within the string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ADOBECODEBANC\u0026#34;, t = \u0026#34;ABC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;BANC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The minimum window substring \u0026#34;BANC\u0026#34; includes \u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, and \u0026#39;C\u0026#39; from string t.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;, t = \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The entire string s is the minimum window.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both \u0026#39;a\u0026#39;s from t must be included in the window.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince the largest window of s only has one \u0026#39;a\u0026#39;, return empty string.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"76. Minimum Window Substring"},{"content":"1625. Lexicographically Smallest String After Applying Operations\nGiven the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\n1 2 3 4 Example 1: Input: head = [1,1,2] Output: [1,2] 1 2 3 4 Example 2: Input: head = [1,1,2,3,3] Output: [1,2,3] Constraints:\nThe number of nodes in the list is in the range [0, 300]. -100 \u0026lt;= Node.val \u0026lt;= 100 The list is guaranteed to be sorted in ascending order. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { String smallest = null; public String findLexSmallestString(String s, int a, int b) { smallest = s; Set\u0026lt;String\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); dfs(s, set, a, b); return smallest; } void dfs(String current, Set\u0026lt;String\u0026gt; set, int a, int b) { if (set.contains(current)) { return; } set.add(current); if (current.compareTo(smallest) \u0026lt; 0) { smallest = current; } dfs(add(current, a), set, a, b); dfs(rotate(current, b), set, a, b); } String add(String s, int a) { StringBuilder sb = new StringBuilder(s); for (int i = 1; i \u0026lt; s.length(); i += 2) { char c = sb.charAt(i); int value = c - \u0026#39;0\u0026#39;; value += a; value = value % 10; sb.deleteCharAt(i); sb.insert(i, value); } return sb.toString(); } String rotate(String s, int b) { int len = s.length(); return s.substring(len - b, len) + s.substring(0, len - b); } } ","permalink":"https://volyx.in/posts/2021-06-22-remove-duplicates-from-sorted-list/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/\"\u003e1625. Lexicographically Smallest String After Applying Operations\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-22-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,1,2,3,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-06-22-ex2.jpg\"\u003e\u003c/p\u003e","title":"83. Remove Duplicates from Sorted List"},{"content":"1624. Largest Substring Between Two Equal Characters\nGiven a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: s = \u0026#34;aa\u0026#34; Output: 0 Explanation: The optimal substring here is an empty substring between the two \u0026#39;a\u0026#39;s. Example 2: Input: s = \u0026#34;abca\u0026#34; Output: 2 Explanation: The optimal substring here is \u0026#34;bc\u0026#34;. Example 3: Input: s = \u0026#34;cbzxy\u0026#34; Output: -1 Explanation: There are no characters that appear twice in s. Example 4: Input: s = \u0026#34;cabbac\u0026#34; Output: 4 Explanation: The optimal substring here is \u0026#34;abba\u0026#34;. Other non-optimal substrings include \u0026#34;bb\u0026#34; and \u0026#34;\u0026#34;. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 300 s contains only lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int maxLengthBetweenEqualCharacters(String s) { int[] dist = new int[256]; int[] start = new int[256]; Arrays.fill(start, Integer.MAX_VALUE); Arrays.fill(dist, Integer.MIN_VALUE); int max = -1; for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); start[c] = Math.min(start[c], i); dist[c] = Math.max(dist[c], i - start[c]); max = Math.max(max, dist[c]); } return max == -1 ? -1: max - 1; } } ","permalink":"https://volyx.in/posts/2021-06-20-largest-substring-between-two-equal-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/largest-substring-between-two-equal-characters/\"\u003e1624. Largest Substring Between Two Equal Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\u003c/p\u003e\n\u003cp\u003eA substring is a contiguous sequence of characters within a string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The optimal substring here is an empty substring between the two \u0026#39;a\u0026#39;s.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abca\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The optimal substring here is \u0026#34;bc\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;cbzxy\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: -1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are no characters that appear twice in s.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;cabbac\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The optimal substring here is \u0026#34;abba\u0026#34;. Other non-optimal substrings include \u0026#34;bb\u0026#34; and \u0026#34;\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1624. Largest Substring Between Two Equal Characters"},{"content":"1625. Lexicographically Smallest String After Applying Operations\nYou are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\nAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \u0026ldquo;3456\u0026rdquo; and a = 5, s becomes \u0026ldquo;3951\u0026rdquo;. Rotate s to the right by b positions. For example, if s = \u0026ldquo;3456\u0026rdquo; and b = 1, s becomes \u0026ldquo;6345\u0026rdquo;. Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \u0026ldquo;0158\u0026rdquo; is lexicographically smaller than \u0026ldquo;0190\u0026rdquo; because the first position they differ is at the third letter, and \u0026lsquo;5\u0026rsquo; comes before \u0026lsquo;9\u0026rsquo;.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 Example 1: Input: s = \u0026#34;5525\u0026#34;, a = 9, b = 2 Output: \u0026#34;2050\u0026#34; Explanation: We can apply the following operations: Start: \u0026#34;5525\u0026#34; Rotate: \u0026#34;2555\u0026#34; Add: \u0026#34;2454\u0026#34; Add: \u0026#34;2353\u0026#34; Rotate: \u0026#34;5323\u0026#34; Add: \u0026#34;5222\u0026#34; ​​​​​​​Add: \u0026#34;5121\u0026#34; ​​​​​​​Rotate: \u0026#34;2151\u0026#34; ​​​​​​​Add: \u0026#34;2050\u0026#34;​​​​​​​​​​​​ There is no way to obtain a string that is lexicographically smaller then \u0026#34;2050\u0026#34;. Example 2: Input: s = \u0026#34;74\u0026#34;, a = 5, b = 1 Output: \u0026#34;24\u0026#34; Explanation: We can apply the following operations: Start: \u0026#34;74\u0026#34; Rotate: \u0026#34;47\u0026#34; ​​​​​​​Add: \u0026#34;42\u0026#34; ​​​​​​​Rotate: \u0026#34;24\u0026#34;​​​​​​​​​​​​ There is no way to obtain a string that is lexicographically smaller then \u0026#34;24\u0026#34;. Example 3: Input: s = \u0026#34;0011\u0026#34;, a = 4, b = 2 Output: \u0026#34;0011\u0026#34; Explanation: There are no sequence of operations that will give us a lexicographically smaller string than \u0026#34;0011\u0026#34;. Example 4: Input: s = \u0026#34;43987654\u0026#34;, a = 7, b = 3 Output: \u0026#34;00553311\u0026#34; Constraints:\n2 \u0026lt;= s.length \u0026lt;= 100 s.length is even. s consists of digits from 0 to 9 only. 1 \u0026lt;= a \u0026lt;= 9 1 \u0026lt;= b \u0026lt;= s.length - 1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { String smallest = null; public String findLexSmallestString(String s, int a, int b) { smallest = s; Set\u0026lt;String\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); dfs(s, set, a, b); return smallest; } void dfs(String current, Set\u0026lt;String\u0026gt; set, int a, int b) { if (set.contains(current)) { return; } set.add(current); if (current.compareTo(smallest) \u0026lt; 0) { smallest = current; } dfs(add(current, a), set, a, b); dfs(rotate(current, b), set, a, b); } String add(String s, int a) { StringBuilder sb = new StringBuilder(s); for (int i = 1; i \u0026lt; s.length(); i += 2) { char c = sb.charAt(i); int value = c - \u0026#39;0\u0026#39;; value += a; value = value % 10; sb.deleteCharAt(i); sb.insert(i, value); } return sb.toString(); } String rotate(String s, int b) { int len = s.length(); return s.substring(len - b, len) + s.substring(0, len - b); } } ","permalink":"https://volyx.in/posts/2021-06-20-lexicographically-smallest-string-after-applying-operations/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations/\"\u003e1625. Lexicographically Smallest String After Applying Operations\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\u003c/p\u003e\n\u003cp\u003eYou can apply either of the following two operations any number of times and in any order on s:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \u0026ldquo;3456\u0026rdquo; and a = 5, s becomes \u0026ldquo;3951\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eRotate s to the right by b positions. For example, if s = \u0026ldquo;3456\u0026rdquo; and b = 1, s becomes \u0026ldquo;6345\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\u003c/p\u003e","title":"1625. Lexicographically Smallest String After Applying Operations"},{"content":"206. Reverse Linked List\nGiven the head of a singly linked list, reverse the list, and return the reversed list.\n1 2 3 4 Example 1: Input: head = [1,2,3,4,5] Output: [5,4,3,2,1] 1 2 3 4 Example 2: Input: head = [1,2] Output: [2,1] 1 2 3 4 Example 3: Input: head = [] Output: [] Constraints:\nThe number of nodes in the list is the range [0, 5000]. -5000 \u0026lt;= Node.val \u0026lt;= 5000 Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode prev = null; while (head != null) { ListNode nextNode = head.next; head.next = prev; prev = head; head = nextNode; } return prev; } } ","permalink":"https://volyx.in/posts/2021-06-17-reverse-linked-list/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/reverse-linked-list/\"\u003e206. Reverse Linked List\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the head of a singly linked list, reverse the list, and return the reversed list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,2,3,4,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [5,4,3,2,1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-17-reverse-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-06-17-reverse-ex2.jpg\"\u003e\u003c/p\u003e","title":"206. Reverse Linked List"},{"content":"24. Swap Nodes in Pairs\nGiven a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list\u0026rsquo;s nodes (i.e., only nodes themselves may be changed.)\n1 2 3 4 Example 1: Input: head = [1,2,3,4] Output: [2,1,4,3] 1 2 3 4 5 6 7 8 9 Example 2: Input: head = [] Output: [] Example 3: Input: head = [1] Output: [1] Constraints:\nThe number of nodes in the list is in the range [0, 100]. 0 \u0026lt;= Node.val \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode swapPairs(ListNode head) { ListNode dummy = new ListNode(0); dummy.next = head; ListNode runner = dummy; while (runner.next != null \u0026amp;\u0026amp; runner.next.next != null) { ListNode r1 = runner.next; ListNode r2 = runner.next.next; runner.next = r2; r1.next = r2.next; r2.next = r1; runner = runner.next.next; } return dummy.next; } } ","permalink":"https://volyx.in/posts/2021-06-17-swap-nodes-in-pairs/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/swap-nodes-in-pairs/\"\u003e24. Swap Nodes in Pairs\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list\u0026rsquo;s nodes (i.e., only nodes themselves may be changed.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1,4,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-17-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"24. Swap Nodes in Pairs"},{"content":"237. Delete Node in a Linked List\nWrite a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\nIt is guaranteed that the node to be deleted is not a tail node in the list.\n1 2 3 4 5 Example 1: Input: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function. 1 2 3 4 5 Example 2: Input: head = [4,5,1,9], node = 1 Output: [4,5,9] Explanation: You are given the third node with value 1, the linked list should become 4 -\u0026gt; 5 -\u0026gt; 9 after calling your function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 3: Input: head = [1,2,3,4], node = 3 Output: [1,2,4] Example 4: Input: head = [0,1], node = 0 Output: [1] Example 5: Input: head = [-3,5,-99], node = -3 Output: [5,-99] Constraints:\nThe number of the nodes in the given list is in the range [2, 1000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 The value of each node in the list is unique. The node to be deleted is in the list and is not a tail node Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public void deleteNode(ListNode node) { if (node.next == null) { node = null; } else { node.val = node.next.val; node.next = node.next.next; } } } ","permalink":"https://volyx.in/posts/2021-06-16-delete-node-in-a-linked-list/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/delete-node-in-a-linked-list/\"\u003e237. Delete Node in a Linked List\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWrite a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\u003c/p\u003e\n\u003cp\u003eIt is guaranteed that the node to be deleted is not a tail node in the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [4,5,1,9], node = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,1,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-16-ex1.jpg\"\u003e\u003c/p\u003e","title":"237. Delete Node in a Linked List"},{"content":"680. Valid Palindrome II\nGiven a string s, return true if the s can be palindrome after deleting at most one character from it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: s = \u0026#34;aba\u0026#34; Output: true Example 2: Input: s = \u0026#34;abca\u0026#34; Output: true Explanation: You could delete the character \u0026#39;c\u0026#39;. Example 3: Input: s = \u0026#34;abc\u0026#34; Output: false Constraints:\n1 \u0026lt;= s.length \u0026lt;= 105 s consists of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public boolean validPalindrome(String s) { return palindrom(s, 0); } boolean palindrom(String s, int count) { int i = 0; int n = s.length(); while (i \u0026lt; n / 2) { char c1 = s.charAt(i); char c2 = s.charAt(n - i - 1); if (c1 == c2) { i++; continue; } else { if (count == 0) { StringBuilder sb1 = new StringBuilder(s); sb1.deleteCharAt(i); boolean res1 = palindrom(sb1.toString(), 1); if (res1) return true; StringBuilder sb2 = new StringBuilder(s); sb2.deleteCharAt(n - i - 1); return palindrom(sb2.toString(), 1); } return false; } } return true; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public boolean validPalindrome(String s) { return validatePalindrom(s, 1, 0, s.length() - 1); } boolean validatePalindrom(String s, int deleted, int lo, int hi) { while (lo \u0026lt; hi) { if (s.charAt(lo) == s.charAt(hi)) { lo++; hi--; } else { if (deleted == 0) { return false; } return validatePalindrom(s, 0, lo + 1, hi) || validatePalindrom(s, 0, lo, hi - 1); } } return true; } } Solution 2022-01-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public boolean validPalindrome(String s) { char[] symbols = s.toCharArray(); return validPalindrome(symbols, 0, s.length() - 1, 1); } boolean validPalindrome(char[] symbols, int i, int j, int count) { while (i \u0026lt; j) { if (symbols[i] == symbols[j]) { i++; j--; continue; } else { if (count \u0026gt; 0) { return validPalindrome(symbols, i, j - 1, 0) || validPalindrome(symbols, i + 1, j, 0); } else { return false; } } } return true; } } ","permalink":"https://volyx.in/posts/2021-06-15-valid-palindrome-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/valid-palindrome-ii/\"\u003e680. Valid Palindrome II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, return true if the s can be palindrome after deleting at most one character from it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abca\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You could delete the character \u0026#39;c\u0026#39;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"680. Valid Palindrome II"},{"content":"1099. Two Sum Less Than K\nGiven an array nums of integers and integer k, return the maximum sum such that there exists i \u0026lt; j with nums[i] + nums[j] = sum and sum \u0026lt; k. If no i, j exist satisfying this equation, return -1.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: nums = [34,23,1,24,75,33,54,8], k = 60 Output: 58 Explanation: We can use 34 and 24 to sum 58 which is less than 60. Example 2: Input: nums = [10,20,30], k = 15 Output: -1 Explanation: In this case it is not possible to get a pair sum less that 15. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 100 1 \u0026lt;= nums[i] \u0026lt;= 1000 1 \u0026lt;= k \u0026lt;= 2000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int twoSumLessThanK(int[] nums, int k) { TreeSet\u0026lt;Integer\u0026gt; set = new TreeSet\u0026lt;\u0026gt;(); int max = -1; for (int i = 0; i \u0026lt; nums.length; i++) { int num = nums[i]; Integer pre = set.lower(k - num); if (pre != null) { max = Math.max(pre + num, max); } set.add(num); } return max; } } ","permalink":"https://volyx.in/posts/2021-06-14-two-sum-less-than-k/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/two-sum-less-than-k/\"\u003e1099. Two Sum Less Than K\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array nums of integers and integer k, return the maximum sum such that there exists i \u0026lt; j with nums[i] + nums[j] = sum and sum \u0026lt; k. If no i, j exist satisfying this equation, return -1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [34,23,1,24,75,33,54,8], k = 60\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 58\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: We can use 34 and 24 to sum 58 which is less than 60.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [10,20,30], k = 15\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: -1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: In this case it is not possible to get a pair sum less that 15.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1099. Two Sum Less Than K"},{"content":"19. Remove Nth Node From End of List\nGiven the head of a linked list, remove the nth node from the end of the list and return its head.\n1 2 3 4 Example 1: Input: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] 1 2 3 4 5 6 7 8 9 Example 2: Input: head = [1], n = 1 Output: [] Example 3: Input: head = [1,2], n = 1 Output: [1] Constraints:\nThe number of nodes in the list is sz. 1 \u0026lt;= sz \u0026lt;= 30 0 \u0026lt;= Node.val \u0026lt;= 100 1 \u0026lt;= n \u0026lt;= sz Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode dummy = new ListNode(0); dummy.next= head; ListNode walker = dummy; ListNode runner = dummy; for (int i = 0; i \u0026lt; n + 1; i++) { runner = runner.next; } while (runner != null) { walker = walker.next; runner = runner.next; } walker.next = walker.next.next; return dummy.next; } } ","permalink":"https://volyx.in/posts/2021-06-14-remove-nth-node-from-end-of-list/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/\"\u003e19. Remove Nth Node From End of List\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the head of a linked list, remove the nth node from the end of the list and return its head.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,2,3,4,5], n = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,3,5]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-04-remove-n-node-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1], n = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,2], n = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"19. Remove Nth Node From End of List"},{"content":"2. Add Two Numbers\nYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n1 2 3 4 5 Example 1: Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807. 1 2 3 4 5 6 7 8 9 Example 2: Input: l1 = [0], l2 = [0] Output: [0] Example 3: Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1] Constraints:\nThe number of nodes in each linked list is in the range [1, 100]. 0 \u0026lt;= Node.val \u0026lt;= 9 It is guaranteed that the list represents a number that does not have leading zeros. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode head = null; ListNode curr = null; ListNode prev = null; int carry = 0; while (l1 != null || l2 != null) { int value = 0; if (l1 != null) value += l1.val; if (l2 != null) value +=l2.val; if (carry \u0026gt; 0) { value+=1; carry = 0; } if (value \u0026gt;= 10) { carry = 1; value = value % 10; } curr = new ListNode(); curr.val = value; if (prev == null) { prev = curr; } else { prev.next = curr; prev = curr; } if (head == null) { head = prev; } l1 = l1 != null? l1.next : null; l2 = l2 != null ? l2.next: null; } if (carry \u0026gt; 0) { prev.next = new ListNode(1); } return head; } } Solution 1.08.2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } 2 --- 4 --- 3 5 --- 6 --- 8 */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode dummy1 = l1; ListNode dummy2 = l2; ListNode res = new ListNode(-1); ListNode head = res; int add = 0; while (dummy1 != null || dummy2 != null) { int val1 = dummy1 != null ? dummy1.val: 0; int val2 = dummy2 != null ? dummy2.val: 0; int val = val1 + val2 + add; if (val \u0026gt; 9) { add = 1; } else { add = 0; } res.next = new ListNode(val % 10); res = res.next; if (dummy1 != null) { dummy1 = dummy1.next; } if (dummy2 != null) { dummy2 = dummy2.next; } } if (add \u0026gt; 0) { res.next = new ListNode(1); res = res.next; } return head.next; } /* null 1 2 prev -\u0026gt; curr -\u0026gt; next */ ListNode reverse(ListNode node) { if (node == null) return null; ListNode prev = null; ListNode curr = node; while (curr != null) { ListNode next = curr.next; curr.next = prev; prev = curr; curr = next; } return prev; } void print(ListNode node) { ListNode curr = node; while (curr != null) { System.out.print(curr.val + \u0026#34; \u0026#34;); curr = curr.next; } System.out.println(); } } ","permalink":"https://volyx.in/posts/2021-06-14-add-two-numbers/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/add-two-numbers/\"\u003e2. Add Two Numbers\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\u003c/p\u003e\n\u003cp\u003eYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: l1 = [2,4,3], l2 = [5,6,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [7,0,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 342 + 465 = 807.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-04-ex1.jpg\"\u003e\u003c/p\u003e","title":"2. Add Two Numbers"},{"content":"523. Continuous Subarray Sum\nGiven an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: nums = [23,2,4,6,7], k = 6 Output: true Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6. Example 2: Input: nums = [23,2,6,4,7], k = 6 Output: true Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42. 42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer. Example 3: Input: nums = [23,2,6,4,7], k = 13 Output: false Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 105 0 \u0026lt;= nums[i] \u0026lt;= 109 0 \u0026lt;= sum(nums[i]) \u0026lt;= 231 - 1 1 \u0026lt;= k \u0026lt;= 231 - 1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public boolean checkSubarraySum(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; prefix = new HashMap\u0026lt;\u0026gt;(); prefix.put(0, -1); int sum = 0; for (int i = 0; i \u0026lt; nums.length; i++) { sum += nums[i]; sum = sum % k; Integer prev = prefix.get(sum); if (prev != null) { if ((i - prev) \u0026gt; 1) return true; } else { prefix.put(sum, i); } } return false; } /* [23, 2, 4,6,7], k = 6 [23,25,29,35,42] [5, 1, 5, 5, 0] 5, 1, 5, ^ 5: 0 1: 1 [0-2] */ } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public boolean checkSubarraySum(int[] nums, int k) { int n = nums.length; Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); int[] prefix = new int[n]; map.put(0, 0); int sum = 0; for (int i = 0; i \u0026lt; prefix.length; i++) { sum += nums[i]; prefix[i] = sum; prefix[i] %= k; Integer prev = map.get(prefix[i]); if (prev != null) { if ((i - prev) \u0026gt; 1) return true; } else { map.put(prefix[i], i); } } return false; } } Solution 2021-01-26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public boolean checkSubarraySum(int[] nums, int k) { int n = nums.length; Map\u0026lt;Integer, Integer\u0026gt; prefix = new HashMap\u0026lt;\u0026gt;(); prefix.put(0, -1); int sum = 0; for (int i = 0; i \u0026lt; n; i++) { sum += nums[i]; sum = sum % k; Integer prev = prefix.get(sum); if (prev != null) { if (i - prev \u0026gt; 1) { return true; } } else { prefix.put(sum, i); } } return false; } } ","permalink":"https://volyx.in/posts/2021-06-14-continuous-subarray-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/continuous-subarray-sum/\"\u003e523. Continuous Subarray Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.\u003c/p\u003e\n\u003cp\u003eAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [23,2,4,6,7], k = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [23,2,6,4,7], k = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [23,2,6,4,7], k = 13\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"523. Continuous Subarray Sum"},{"content":"67. Add Binary\nGiven two binary strings a and b, return their sum as a binary string.\n1 2 3 4 5 6 7 8 9 Example 1: Input: a = \u0026#34;11\u0026#34;, b = \u0026#34;1\u0026#34; Output: \u0026#34;100\u0026#34; Example 2: Input: a = \u0026#34;1010\u0026#34;, b = \u0026#34;1011\u0026#34; Output: \u0026#34;10101\u0026#34; Constraints:\n1 \u0026lt;= a.length, b.length \u0026lt;= 104 a and b consist only of \u0026lsquo;0\u0026rsquo; or \u0026lsquo;1\u0026rsquo; characters. Each string does not contain leading zeros except for the zero itself. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public String addBinary(String a, String b) { int i = a.length() - 1; int j = b.length() - 1; int carry = 0; StringBuilder sb = new StringBuilder(); while (i \u0026gt;= 0 || j \u0026gt;= 0) { int c1 = (i \u0026gt;= 0) ? a.charAt(i) - \u0026#39;0\u0026#39;: 0; int c2 = (j \u0026gt;= 0) ? b.charAt(j) - \u0026#39;0\u0026#39;: 0; int c3 = c1 + c2 + carry; if (carry \u0026gt; 0) { carry = 0; } if (c3 == 3) { carry = 1; sb.insert(0, \u0026#39;1\u0026#39;); } else if (c3 == 2) { carry = 1; sb.insert(0, \u0026#39;0\u0026#39;); } else if (c3 == 1) { sb.insert(0, \u0026#39;1\u0026#39;); } else { sb.insert(0, \u0026#39;0\u0026#39;); } i--; j--; } if (carry \u0026gt; 0) { sb.insert(0, \u0026#39;1\u0026#39;); } return sb.toString(); } public String addBinary2(String a, String b) { Integer i1 = Integer.parseInt(a, 2); Integer i2 = Integer.parseInt(b, 2); return Integer.toBinaryString(i1 + i2); } } ","permalink":"https://volyx.in/posts/2021-06-15-add-binary/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/add-binary/\"\u003e67. Add Binary\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two binary strings a and b, return their sum as a binary string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: a = \u0026#34;11\u0026#34;, b = \u0026#34;1\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;100\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: a = \u0026#34;1010\u0026#34;, b = \u0026#34;1011\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;10101\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"67. Add Binary"},{"content":"974. Subarray Sums Divisible by K\nGiven an array nums of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by k.\n1 2 3 4 5 6 Example 1: Input: nums = [4,5,0,-2,-3,1], k = 5 Output: 7 Explanation: There are 7 subarrays with a sum divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] Note:\n1 \u0026lt;= nums.length \u0026lt;= 30000 -10000 \u0026lt;= nums[i] \u0026lt;= 10000 2 \u0026lt;= k \u0026lt;= 10000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int subarraysDivByK(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; prefix = new HashMap\u0026lt;\u0026gt;(); prefix.put(0, 1); int sum = 0; int count = 0; for (int i = 0; i \u0026lt; nums.length; i++) { sum += nums[i]; sum = sum % k; if (sum \u0026lt; 0) { sum += k; } count += prefix.getOrDefault(sum, 0); prefix.put(sum, prefix.getOrDefault(sum, 0) + 1); } return count; } } ","permalink":"https://volyx.in/posts/2021-06-14-subarray-sums-divisible-by-k/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/subarray-sums-divisible-by-k/\"\u003e974. Subarray Sums Divisible by K\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array nums of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by k.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [4,5,0,-2,-3,1], k = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are 7 subarrays with a sum divisible by k = 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"974. Subarray Sums Divisible by K"},{"content":"1897. Redistribute Characters to Make All Strings Equal\nYou are given an array of strings words (0-indexed).\nIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\nReturn true if you can make every string in words equal using any number of operations, and false otherwise.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: words = [\u0026#34;abc\u0026#34;,\u0026#34;aabc\u0026#34;,\u0026#34;bc\u0026#34;] Output: true Explanation: Move the first \u0026#39;a\u0026#39; in words[1] to the front of words[2], to make words[1] = \u0026#34;abc\u0026#34; and words[2] = \u0026#34;abc\u0026#34;. All the strings are now equal to \u0026#34;abc\u0026#34;, so return true. Example 2: Input: words = [\u0026#34;ab\u0026#34;,\u0026#34;a\u0026#34;] Output: false Explanation: It is impossible to make all the strings equal using the operation. Constraints:\n1 \u0026lt;= words.length \u0026lt;= 100 1 \u0026lt;= words[i].length \u0026lt;= 100 words[i] consists of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public boolean makeEqual(String[] words) { int n = words.length; int[] freq = new int[256]; for (String word: words) { for (char c : word.toCharArray()) { freq[c]++; } } for (int i: freq) { if ((i != 0) \u0026amp;\u0026amp; (i % n != 0)) { return false; } } return true; } } ","permalink":"https://volyx.in/posts/2021-06-13-redistribute-characters-to-make-all-strings-equal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/redistribute-characters-to-make-all-strings-equal/\"\u003e1897. Redistribute Characters to Make All Strings Equal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array of strings words (0-indexed).\u003c/p\u003e\n\u003cp\u003eIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\u003c/p\u003e\n\u003cp\u003eReturn true if you can make every string in words equal using any number of operations, and false otherwise.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;abc\u0026#34;,\u0026#34;aabc\u0026#34;,\u0026#34;bc\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Move the first \u0026#39;a\u0026#39; in words[1] to the front of words[2],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eto make words[1] = \u0026#34;abc\u0026#34; and words[2] = \u0026#34;abc\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAll the strings are now equal to \u0026#34;abc\u0026#34;, so return true.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;ab\u0026#34;,\u0026#34;a\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: It is impossible to make all the strings equal using the operation.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1897. Redistribute Characters to Make All Strings Equal"},{"content":"1898. Maximum Number of Removable Characters\nYou are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\nYou want to choose an integer k (0 \u0026lt;= k \u0026lt;= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 \u0026lt;= i \u0026lt; k, then remove all marked characters and check if p is still a subsequence.\nReturn the maximum k you can choose such that p is still a subsequence of s after the removals.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Example 1: Input: s = \u0026#34;abcacb\u0026#34;, p = \u0026#34;ab\u0026#34;, removable = [3,1,0] Output: 2 Explanation: After removing the characters at indices 3 and 1, \u0026#34;abcacb\u0026#34; becomes \u0026#34;accb\u0026#34;. \u0026#34;ab\u0026#34; is a subsequence of \u0026#34;accb\u0026#34;. If we remove the characters at indices 3, 1, and 0, \u0026#34;abcacb\u0026#34; becomes \u0026#34;ccb\u0026#34;, and \u0026#34;ab\u0026#34; is no longer a subsequence. Hence, the maximum k is 2. Example 2: Input: s = \u0026#34;abcbddddd\u0026#34;, p = \u0026#34;abcd\u0026#34;, removable = [3,2,1,4,5,6] Output: 1 Explanation: After removing the character at index 3, \u0026#34;abcbddddd\u0026#34; becomes \u0026#34;abcddddd\u0026#34;. \u0026#34;abcd\u0026#34; is a subsequence of \u0026#34;abcddddd\u0026#34;. Example 3: Input: s = \u0026#34;abcab\u0026#34;, p = \u0026#34;abc\u0026#34;, removable = [0,1,2,3,4] Output: 0 Explanation: If you remove the first index in the array removable, \u0026#34;abc\u0026#34; is no longer a subsequence. Constraints:\n1 \u0026lt;= p.length \u0026lt;= s.length \u0026lt;= 105 0 \u0026lt;= removable.length \u0026lt; s.length 0 \u0026lt;= removable[i] \u0026lt; s.length p is a subsequence of s. s and p both consist of lowercase English letters. The elements in removable are distinct. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int maximumRemovals(String s, String p, int[] removable) { char[] letters = s.toCharArray(); int l = 0; int r = removable.length; while (l \u0026lt;= r) { int mid = (r + l) / 2; for (int i = 0; i \u0026lt; mid; i++) { letters[removable[i]] = \u0026#39;/\u0026#39;; } if (check(letters, p)) { l = mid + 1; } else { letters = s.toCharArray(); r = mid - 1; } } return r; } boolean check(char[] letters, String p) { int i1 = 0; int i2 = 0; while (i1 \u0026lt; letters.length \u0026amp;\u0026amp; i2 \u0026lt; p.length()) { char curr1 = letters[i1]; char curr2 = p.charAt(i2); if (letters[i1] != \u0026#39;/\u0026#39; \u0026amp;\u0026amp; curr1 == curr2) { i2++; } i1++; } return p.length() == i2; } } ","permalink":"https://volyx.in/posts/2021-06-13-maximum-number-of-removable-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-number-of-removable-characters\"\u003e1898. Maximum Number of Removable Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\u003c/p\u003e\n\u003cp\u003eYou want to choose an integer k (0 \u0026lt;= k \u0026lt;= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 \u0026lt;= i \u0026lt; k, then remove all marked characters and check if p is still a subsequence.\u003c/p\u003e","title":"1898. Maximum Number of Removable Characters"},{"content":"1899. Merge Triplets to Form Target Triplet\nA triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\nChoose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)]. For example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5]. Return true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Example 1: Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5] Output: true Explanation: Perform the following operations: - Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]] The target triplet [2,7,5] is now an element of triplets. Example 2: Input: triplets = [[1,3,4],[2,5,8]], target = [2,5,8] Output: true Explanation: The target triplet [2,5,8] is already an element of triplets. Example 3: Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5] Output: true Explanation: Perform the following operations: - Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. - Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]]. The target triplet [5,5,5] is now an element of triplets. Example 4: Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5] Output: false Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets. Constraints:\n1 \u0026lt;= triplets.length \u0026lt;= 105 triplets[i].length == target.length == 3 1 \u0026lt;= ai, bi, ci, x, y, z \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public boolean mergeTriplets(int[][] triplets, int[] target) { int[] res = new int[] {0, 0, 0}; for (int[] s: triplets) { if (s[0] \u0026lt;= target[0] \u0026amp;\u0026amp; s[1] \u0026lt;= target[1] \u0026amp;\u0026amp; s[2] \u0026lt;= target[2]) { res[0] = Math.max(s[0], res[0]); res[1] = Math.max(s[1], res[1]); res[2] = Math.max(s[2], res[2]); } } return Arrays.equals(res, target); } } ","permalink":"https://volyx.in/posts/2021-06-13-merge-triplets-to-form-target-triplet/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/merge-triplets-to-form-target-triplet/\"\u003e1899. Merge Triplets to Form Target Triplet\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\u003c/p\u003e\n\u003cp\u003eTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\u003c/p\u003e","title":"1899. Merge Triplets to Form Target Triplet"},{"content":"31. Next Permutation\nImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\nThe replacement must be in place and use only constant extra memory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: nums = [1,2,3] Output: [1,3,2] Example 2: Input: nums = [3,2,1] Output: [1,2,3] Example 3: Input: nums = [1,1,5] Output: [1,5,1] Example 4: Input: nums = [1] Output: [1] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public void nextPermutation(int[] nums) { int i = nums.length - 2; // [2,3,1,3,3] // i = 2 while (i \u0026gt;= 0 \u0026amp;\u0026amp; nums[i + 1] \u0026lt;= nums[i]) { i--; } if (i \u0026gt;= 0) { int j = nums.length - 1; while (nums[j] \u0026lt;= nums[i]) { j--; } swap(nums, i, j); } reverse(nums, i + 1); } void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } void reverse(int[] nums, int start) { int i = start; int j = nums.length - 1; while (i \u0026lt; j) { // System.out.println(\u0026#34;reverse \u0026#34; + i + \u0026#34; \u0026#34; + j); swap(nums, i, j); i++; j--; } } } Solution 2021-10-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public void nextPermutation(int[] arr) { int n = arr.length; int index = -1; for (int i = n - 1; i \u0026gt; 0; i--) { if (arr[i - 1] \u0026lt; arr[i]) { index = i - 1; break; } } if (index != -1) { for (int j = n - 1; j \u0026gt; index; j--) { if (arr[j] \u0026gt; arr[index]) { swap(arr, index, j); break; } } } reverse(arr, index + 1, n); } void swap(int[] arr, int i, int j) { int tmp = arr[i]; arr[i] = arr[j]; arr[j] = tmp; } void reverse(int[] arr, int i, int j) { j--; while (i \u0026lt; j) { swap(arr, i , j); i++; j--; } } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { public void nextPermutation(int[] nums) { int n = nums.length; int index = -1; // 5 4 3 2 1 for (int i = n - 1; i \u0026gt; 0; i--) { if (nums[i - 1] \u0026lt; nums[i]) { index = i - 1; break; } } if (index != -1) { for (int j = n - 1; j \u0026gt; index; j--) { if (nums[j] \u0026gt; nums[index]) { swap(nums, index, j); break; } } } reverse(nums, index + 1); } void swap(int[] nums, int i, int j) { int t = nums[i]; nums[i] = nums[j]; nums[j] = t; } void reverse(int[] nums, int i) { int lo = i; int hi = nums.length - 1; while (lo \u0026lt; hi) { swap(nums, lo, hi); lo++; hi--; } } } ","permalink":"https://volyx.in/posts/2021-06-13-next-permutation/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/next-permutation/\"\u003e31. Next Permutation\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eImplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\u003c/p\u003e\n\u003cp\u003eIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\u003c/p\u003e\n\u003cp\u003eThe replacement must be in place and use only constant extra memory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [3,2,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,5,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"31. Next Permutation"},{"content":"338. Counting Bits\nGiven an integer n, return an array ans of length n + 1 such that for each i (0 \u0026lt;= i \u0026lt;= n), ans[i] is the number of 1\u0026rsquo;s in the binary representation of i.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: n = 2 Output: [0,1,1] Explanation: 0 --\u0026gt; 0 1 --\u0026gt; 1 2 --\u0026gt; 10 Example 2: Input: n = 5 Output: [0,1,1,2,1,2] Explanation: 0 --\u0026gt; 0 1 --\u0026gt; 1 2 --\u0026gt; 10 3 --\u0026gt; 11 4 --\u0026gt; 100 5 --\u0026gt; 101 Constraints:\n0 \u0026lt;= n \u0026lt;= 105 Follow up:\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass? Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)? Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int[] countBits(int n) { int[] bits = new int[n + 1]; for (int num = 0; num \u0026lt; bits.length; num++) { int count = 0; int i = 0; while (i \u0026lt; 32) { if ((num \u0026amp; (1 \u0026lt;\u0026lt; i)) != 0) { count++; } i++; } bits[num] = count; } return bits; } } ","permalink":"https://volyx.in/posts/2021-06-13-counting-bits/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/counting-bits/\"\u003e338. Counting Bits\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer n, return an array ans of length n + 1 such that for each i (0 \u0026lt;= i \u0026lt;= n), ans[i] is the number of 1\u0026rsquo;s in the binary representation of i.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0 --\u0026gt; 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 --\u0026gt; 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2 --\u0026gt; 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,1,2,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0 --\u0026gt; 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 --\u0026gt; 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2 --\u0026gt; 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e3 --\u0026gt; 11\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e4 --\u0026gt; 100\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5 --\u0026gt; 101\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"338. Counting Bits\""},{"content":"136. Single Number\nGiven a non-empty array of integers nums, every element appears twice except for one. Find that single one.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: nums = [2,2,1] Output: 1 Example 2: Input: nums = [4,1,2,1,2] Output: 4 Example 3: Input: nums = [1] Output: 1 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 3 * 104 -3 * 10^4 \u0026lt;= nums[i] \u0026lt;= 3 * 10^4 Each element in the array appears twice except for one element which appears only once. Solution 1 2 3 4 5 6 7 8 9 10 class Solution { public int singleNumber(int[] nums) { int single = 0; for (int num: nums) { single ^= num; } return single; } } Solved 2022-01-15 ","permalink":"https://volyx.in/posts/2021-06-11-single-number/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/single-number/\"\u003e136. Single Number\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a non-empty array of integers nums, every element appears twice except for one. Find that single one.\u003c/p\u003e\n\u003cp\u003eYou must implement a solution with a linear runtime complexity and use only constant extra space.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,2,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [4,1,2,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"136. Single Number"},{"content":"137. Single Number II\nGiven an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must implement a solution with a linear runtime complexity and use only constant extra space.\n1 2 3 4 5 6 7 8 9 Example 1: Input: nums = [2,2,3,2] Output: 3 Example 2: Input: nums = [0,1,0,1,0,1,99] Output: 99 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 3 * 104 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 Each element in nums appears exactly three times except for one element which appears once. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int singleNumber(int[] nums) { long sum = 0; Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (int num: nums) { set.add(num); sum+=num; } long uniqueSum = 0; for (int num: set) { uniqueSum += num; } long remainder = (3 * uniqueSum) - sum; return (int) (remainder / 2); } } ","permalink":"https://volyx.in/posts/2021-06-11-single-number-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/single-number-ii/\"\u003e137. Single Number II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\u003c/p\u003e\n\u003cp\u003eYou must implement a solution with a linear runtime complexity and use only constant extra space.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,2,3,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,1,0,1,0,1,99]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 99\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"137. Single Number II"},{"content":"190. Reverse Bits\nReverse bits of a given 32 bits unsigned integer.\nNote:\nNote that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer\u0026rsquo;s internal binary representation is the same, whether it is signed or unsigned. In Java, the compiler represents the signed integers using 2\u0026rsquo;s complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825. Follow up:\nIf this function is called many times, how would you optimize it?\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: n = 00000010100101000001111010011100 Output: 964176192 (00111001011110000010100101000000) Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. Example 2: Input: n = 11111111111111111111111111111101 Output: 3221225471 (10111111111111111111111111111111) Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. Constraints:\nThe input must be a binary string of length 32 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Solution { /* 0101 = 5 digit = 1 res = 2^32 + 2^(32-2) i = 0; 0010 = 2 digit = 0; i = 1 0001 = 1 res = 2^32 + 2^(32 - 2) digit = 1 i = 2 0000 res = 2^32 + 2^(32 - 2) + 2^(32-3) digit = 0 i = 3 */ public int reverseBits(int n) { long res = 0; int i = 0; while (i \u0026lt; 32) { if ((n \u0026amp; 1) \u0026gt; 0) { res += 1 \u0026lt;\u0026lt; (31 - i); } n = n \u0026gt;\u0026gt; 1; i++; } return (int) res; } } ","permalink":"https://volyx.in/posts/2021-06-11-reverse-bits/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/reverse-bits/\"\u003e190. Reverse Bits\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eReverse bits of a given 32 bits unsigned integer.\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNote that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer\u0026rsquo;s internal binary representation is the same, whether it is signed or unsigned.\u003c/li\u003e\n\u003cli\u003eIn Java, the compiler represents the signed integers using 2\u0026rsquo;s complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up:\u003c/p\u003e","title":"190. Reverse Bits"},{"content":"260. Single Number III\nGiven an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\nYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: nums = [1,2,1,3,2,5] Output: [3,5] Explanation: [5, 3] is also a valid answer. Example 2: Input: nums = [-1,0] Output: [-1,0] Example 3: Input: nums = [0,1] Output: [1,0] Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 3 * 104 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 Each integer in nums will appear twice, only two integers will appear once. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int[] singleNumber(int[] nums) { int bitmask = 0; for (int num: nums) { bitmask ^= num; } // right most bit int diff = bitmask \u0026amp; (-bitmask); // x = 011 = 3 // y = 101 = 5 // bitmask = 110 = 6 // diff = 010 // 2 num = 10 // 3 num = 11 // 2 num = 10 // x = 10 ^ 11 ^ 10 = 3 int x = 0; for (int num: nums) { if ((diff \u0026amp; num ) != 0) { x = x ^ num; } } return new int[]{x, bitmask ^ x}; } } ","permalink":"https://volyx.in/posts/2021-06-11-single-number-iii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/single-number-iii/\"\u003e260. Single Number III\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\u003c/p\u003e\n\u003cp\u003eYou must write an algorithm that runs in linear runtime complexity and uses only constant extra space.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,1,3,2,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [3,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:  [5, 3] is also a valid answer.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [-1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,0]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"260. Single Number III"},{"content":"268. Missing Number\nGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: nums = [3,0,1] Output: 2 Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. Example 2: Input: nums = [0,1] Output: 2 Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. Example 3: Input: nums = [9,6,4,2,3,5,7,0,1] Output: 8 Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. Example 4: Input: nums = [0] Output: 1 Explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums. Constraints:\nn == nums.length 1 \u0026lt;= n \u0026lt;= 104 0 \u0026lt;= nums[i] \u0026lt;= n All the numbers of nums are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution { public int missingNumber(int[] nums) { int n = nums.length; int sum = 0; for (int num: nums) { sum += num; } return ((n + 1) * n) / 2 - sum; } // 0 1 2 3 4 5 6 7 8 9 // 10 * 9 / 2 = 45 } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 class Solution { public int missingNumber(int[] nums) { int sum = 0; for (int num: nums) { sum += num; } int n = nums.length; return n * (n + 1) / 2 - sum; } } ","permalink":"https://volyx.in/posts/2021-06-11-missing-number/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/missing-number/\"\u003e268. Missing Number\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.\u003c/p\u003e\n\u003cp\u003eFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [3,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [9,6,4,2,3,5,7,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"268. Missing Number"},{"content":"389. Find the Difference\nYou are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: s = \u0026#34;abcd\u0026#34;, t = \u0026#34;abcde\u0026#34; Output: \u0026#34;e\u0026#34; Explanation: \u0026#39;e\u0026#39; is the letter that was added. Example 2: Input: s = \u0026#34;\u0026#34;, t = \u0026#34;y\u0026#34; Output: \u0026#34;y\u0026#34; Example 3: Input: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34; Output: \u0026#34;a\u0026#34; Example 4: Input: s = \u0026#34;ae\u0026#34;, t = \u0026#34;aea\u0026#34; Output: \u0026#34;a\u0026#34; Constraints:\n0 \u0026lt;= s.length \u0026lt;= 1000 t.length == s.length + 1 s and t consist of lower-case English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public char findTheDifference(String s, String t) { int xor = 0; for (char c : s.toCharArray()) { xor = xor ^ c; } for (char c : t.toCharArray()) { xor = xor ^ c; } return (char) xor; } } ","permalink":"https://volyx.in/posts/2021-06-11-find-the-difference/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-the-difference/\"\u003e389. Find the Difference\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two strings s and t.\u003c/p\u003e\n\u003cp\u003eString t is generated by random shuffling string s and then add one more letter at a random position.\u003c/p\u003e\n\u003cp\u003eReturn the letter that was added to t.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abcd\u0026#34;, t = \u0026#34;abcde\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;e\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#39;e\u0026#39; is the letter that was added.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;\u0026#34;, t = \u0026#34;y\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;y\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;, t = \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ae\u0026#34;, t = \u0026#34;aea\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"389. Find the Difference"},{"content":"1013. Partition Array Into Three Parts With Equal Sum\nGiven an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i + 1 \u0026lt; j with (arr[0] + arr[1] + \u0026hellip; + arr[i] == arr[i + 1] + arr[i + 2] + \u0026hellip; + arr[j - 1] == arr[j] + arr[j + 1] + \u0026hellip; + arr[arr.length - 1])\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1] Output: true Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1 Example 2: Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1] Output: false Example 3: Input: arr = [3,3,6,5,-2,2,5,1,-9,4] Output: true Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4 Constraints:\n3 \u0026lt;= arr.length \u0026lt;= 5 * 104 -104 \u0026lt;= arr[i] \u0026lt;= 104 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public boolean canThreePartsEqualSum(int[] arr) { int sum = 0; int n = arr.length; for (int i = 0; i \u0026lt; n; i ++) { sum += arr[i]; } if (sum % 3 != 0) return false; int partSum = sum / 3; int i = 0; int currentSum = 0; int count = 0; while (i \u0026lt; n) { if (count == 2) { return true; } currentSum += arr[i]; if (currentSum == partSum) { count++; currentSum = 0; } i++; } return false; } } ","permalink":"https://volyx.in/posts/2021-06-10-partition-array-into-three-parts-with-equal-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/\"\u003e1013. Partition Array Into Three Parts With Equal Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.\u003c/p\u003e\n\u003cp\u003eFormally, we can partition the array if we can find indexes i + 1 \u0026lt; j with (arr[0] + arr[1] + \u0026hellip; + arr[i] == arr[i + 1] + arr[i + 2] + \u0026hellip; + arr[j - 1] == arr[j] + arr[j + 1] + \u0026hellip; + arr[arr.length - 1])\u003c/p\u003e","title":"1013. Partition Array Into Three Parts With Equal Sum"},{"content":"243. Shortest Word Distance\nGiven an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.\n1 2 3 4 5 6 7 8 9 Example 1: Input: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;coding\u0026#34;, word2 = \u0026#34;practice\u0026#34; Output: 3 Example 2: Input: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;makes\u0026#34;, word2 = \u0026#34;coding\u0026#34; Output: 1 Constraints:\n1 \u0026lt;= wordsDict.length \u0026lt;= 3 * 104 1 \u0026lt;= wordsDict[i].length \u0026lt;= 10 wordsDict[i] consists of lowercase English letters. word1 and word2 are in wordsDict. word1 != word2 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int shortestDistance(String[] wordsDict, String word1, String word2) { int first = -1; int second = -1; int min = wordsDict.length; for (int i = 0; i \u0026lt; wordsDict.length; i++) { if (wordsDict[i].equals(word1)) { first = i; } if (wordsDict[i].equals(word2)) { second = i; } if (first != -1 \u0026amp;\u0026amp; second != -1) { min = Math.min(min, Math.abs(first - second)); } } return min; } } ","permalink":"https://volyx.in/posts/2021-06-08-shortest-word-distance/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/shortest-word-distance/\"\u003e243. Shortest Word Distance\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;coding\u0026#34;, word2 = \u0026#34;practice\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;makes\u0026#34;, word2 = \u0026#34;coding\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"243. Shortest Word Distance"},{"content":"244. Shortest Word Distance II\nDesign a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\nImplement the WordDistance class:\nWordDistance(String[] wordsDict) initializes the object with the strings array wordsDict. int shortest(String word1, String word2) returns the shortest distance between word1 and word2 in the array wordsDict. 1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input [\u0026#34;WordDistance\u0026#34;, \u0026#34;shortest\u0026#34;, \u0026#34;shortest\u0026#34;] [[[\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;]], [\u0026#34;coding\u0026#34;, \u0026#34;practice\u0026#34;], [\u0026#34;makes\u0026#34;, \u0026#34;coding\u0026#34;]] Output [null, 3, 1] Explanation WordDistance wordDistance = new WordDistance([\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;]); wordDistance.shortest(\u0026#34;coding\u0026#34;, \u0026#34;practice\u0026#34;); // return 3 wordDistance.shortest(\u0026#34;makes\u0026#34;, \u0026#34;coding\u0026#34;); // return 1 Constraints:\n1 \u0026lt;= wordsDict.length \u0026lt;= 3 * 104 1 \u0026lt;= wordsDict[i].length \u0026lt;= 10 wordsDict[i] consists of lowercase English letters. word1 and word2 are in wordsDict. word1 != word2 At most 5000 calls will be made to shortest. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class WordDistance { Map\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); public WordDistance(String[] wordsDict) { for (int i = 0; i \u0026lt; wordsDict.length; i++) { String word = wordsDict[i]; List\u0026lt;Integer\u0026gt; indexes = map.getOrDefault(word, new ArrayList\u0026lt;\u0026gt;()); indexes.add(i); map.put(word, indexes); } } public int shortest(String word1, String word2) { int min = Integer.MAX_VALUE; for (Integer i: map.get(word1)) { for (Integer j: map.get(word2)) { min = Math.min(min, Math.abs(i - j)); } } return min; } } /** * Your WordDistance object will be instantiated and called as such: * WordDistance obj = new WordDistance(wordsDict); * int param_1 = obj.shortest(word1,word2); */ ","permalink":"https://volyx.in/posts/2021-06-08-shortest-word-distance-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/shortest-word-distance-ii/\"\u003e244. Shortest Word Distance II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDesign a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.\u003c/p\u003e\n\u003cp\u003eImplement the WordDistance class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWordDistance(String[] wordsDict) initializes the object with the strings array wordsDict.\u003c/li\u003e\n\u003cli\u003eint shortest(String word1, String word2) returns the shortest distance between word1 and word2 in the array wordsDict.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;WordDistance\u0026#34;, \u0026#34;shortest\u0026#34;, \u0026#34;shortest\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;]], [\u0026#34;coding\u0026#34;, \u0026#34;practice\u0026#34;], [\u0026#34;makes\u0026#34;, \u0026#34;coding\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 3, 1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWordDistance wordDistance = new WordDistance([\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDistance.shortest(\u0026#34;coding\u0026#34;, \u0026#34;practice\u0026#34;); // return 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDistance.shortest(\u0026#34;makes\u0026#34;, \u0026#34;coding\u0026#34;);    // return 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"244. Shortest Word Distance II"},{"content":"245. Shortest Word Distance III\nGiven an array of strings wordsDict and two strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.\nNote that word1 and word2 may be the same. It is guaranteed that they represent two individual words in the list.\n1 2 3 4 5 6 7 8 9 Example 1: Input: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;makes\u0026#34;, word2 = \u0026#34;coding\u0026#34; Output: 1 Example 2: Input: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;makes\u0026#34;, word2 = \u0026#34;makes\u0026#34; Output: 3 Constraints:\n1 \u0026lt;= wordsDict.length \u0026lt;= 3 * 104 1 \u0026lt;= wordsDict[i].length \u0026lt;= 10 wordsDict[i] consists of lowercase English letters. word1 and word2 are in wordsDict. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int shortestWordDistance(String[] wordsDict, String word1, String word2) { Map\u0026lt;String, List\u0026lt;Integer\u0026gt;\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; wordsDict.length; i++) { String word = wordsDict[i]; List\u0026lt;Integer\u0026gt; indexes = map.getOrDefault(word, new ArrayList\u0026lt;\u0026gt;()); indexes.add(i); map.put(word, indexes); } int min = Integer.MAX_VALUE; for (Integer idx1: map.get(word1)) { for (Integer idx2: map.get(word2)) { if (idx1 != idx2) { min = Math.min(min, Math.abs(idx1 - idx2)); } } } return min; } } ","permalink":"https://volyx.in/posts/2021-06-08-shortest-word-distance-iii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/shortest-word-distance-iii/\"\u003e245. Shortest Word Distance III\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of strings wordsDict and two strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.\u003c/p\u003e\n\u003cp\u003eNote that word1 and word2 may be the same. It is guaranteed that they represent two individual words in the list.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;makes\u0026#34;, word2 = \u0026#34;coding\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: wordsDict = [\u0026#34;practice\u0026#34;, \u0026#34;makes\u0026#34;, \u0026#34;perfect\u0026#34;, \u0026#34;coding\u0026#34;, \u0026#34;makes\u0026#34;], word1 = \u0026#34;makes\u0026#34;, word2 = \u0026#34;makes\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"245. Shortest Word Distance III"},{"content":"191. Number of 1 Bits\nWrite a function that takes an unsigned integer and returns the number of \u0026lsquo;1\u0026rsquo; bits it has (also known as the Hamming weight).\nNote:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer\u0026rsquo;s internal binary representation is the same, whether it is signed or unsigned. In Java, the compiler represents the signed integers using 2\u0026rsquo;s complement notation. Therefore, in Example 3, the input represents the signed integer. -3. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: n = 00000000000000000000000000001011 Output: 3 Explanation: The input binary string 00000000000000000000000000001011 has a total of three \u0026#39;1\u0026#39; bits. Example 2: Input: n = 00000000000000000000000010000000 Output: 1 Explanation: The input binary string 00000000000000000000000010000000 has a total of one \u0026#39;1\u0026#39; bit. Example 3: Input: n = 11111111111111111111111111111101 Output: 31 Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one \u0026#39;1\u0026#39; bits. Constraints:\nThe input must be a binary string of length 32. Follow up: If this function is called many times, how would you optimize it?\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class Solution { // 00000000000000000000000000001011 // 00000000000000000000000000000001 // 11 \u0026amp; 1 != 0 // 00000000000000000000000000001011 // 00000000000000000000000000000010 // 11 \u0026amp; 2 != 0 // 00000000000000000000000000001011 // 00000000000000000000000000000100 // 11 \u0026amp; 4 = 0 // 00000000000000000000000000001011 // 00000000000000000000000000001000 // 11 \u0026amp; 8 != 0 public int hammingWeight(int n) { int bits = 0; int mask = 1; for (int i = 0; i \u0026lt; 32; i++) { if ((n \u0026amp; mask) != 0) { bits++; } mask \u0026lt;\u0026lt;= 1; } return bits; } public int hammingWeight2(int n) { int count = 0; for (int i = 0; i \u0026lt; 32; i++) { if ( (n \u0026amp; (1 \u0026lt;\u0026lt; i) ) != 0) { count++; } } return count; } } ","permalink":"https://volyx.in/posts/2021-06-07-number-of-1-bits/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/number-of-1-bits\"\u003e191. Number of 1 Bits\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eWrite a function that takes an unsigned integer and returns the number of \u0026lsquo;1\u0026rsquo; bits it has (also known as the Hamming weight).\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer\u0026rsquo;s internal binary representation is the same, whether it is signed or unsigned.\u003c/li\u003e\n\u003cli\u003eIn Java, the compiler represents the signed integers using 2\u0026rsquo;s complement notation. Therefore, in Example 3, the input represents the signed integer. -3.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 00000000000000000000000000001011\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The input binary string 00000000000000000000000000001011 has a total of three \u0026#39;1\u0026#39; bits.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 00000000000000000000000010000000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The input binary string 00000000000000000000000010000000 has a total of one \u0026#39;1\u0026#39; bit.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 11111111111111111111111111111101\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 31\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one \u0026#39;1\u0026#39; bits.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"191. Number of 1 Bits"},{"content":"231. Power of Two\nGiven an integer n, return true if it is a power of two. Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2x.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: n = 1 Output: true Explanation: 20 = 1 Example 2: Input: n = 16 Output: true Explanation: 24 = 16 Example 3: Input: n = 3 Output: false Example 4: Input: n = 4 Output: true Example 5: Input: n = 5 Output: false Constraints:\n-231 \u0026lt;= n \u0026lt;= 231 - 1 Follow up: Could you solve it without loops/recursion?\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { // reset rightmost 1-bit // 00000100 4 // 00000011 3 // 00000000 0 public boolean isPowerOfTwo(int n) { if (n == 0) return false; long x = (long) n; return (x \u0026amp; (x - 1)) == 0; } // 00000100 4 // 11111011 -4 // 00000100 4 get rightmost 1-bit public boolean isPowerOfTwo3(int n) { if (n == 0) return false; long x = (long) n; return (x \u0026amp; (-x)) == x; } public boolean isPowerOfTwo2(int n) { if (n == 0) return false; while (n % 2 == 0) { n /= 2; } return n == 1; } } ","permalink":"https://volyx.in/posts/2021-06-07-power-of-two/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/power-of-two/\"\u003e231. Power of Two\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer n, return true if it is a power of two. Otherwise, return false.\u003c/p\u003e\n\u003cp\u003eAn integer n is a power of two, if there exists an integer x such that n == 2x.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 20 = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 24 = 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"231. Power of Two"},{"content":"835. Image Overlap\nYou are given two images img1 and img2 both of size n x n, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)\nWe translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image. After, the overlap of this translation is the number of positions that have a 1 in both images.\n(Note also that a translation does not include any kind of rotation.)\nWhat is the largest possible overlap?\n1 2 3 4 5 6 7 Example 1: Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]] Output: 3 Explanation: We slide img1 to right by 1 unit and down by 1 unit. The number of positions that have a 1 in both images is 3. (Shown in red) 1 2 3 4 Example 2: Input: img1 = [[1]], img2 = [[1]] Output: 1 1 2 3 4 Example 3: Input: img1 = [[0]], img2 = [[0]] Output: 0 Constraints:\nn == img1.length n == img1[i].length n == img2.length n == img2[i].length 1 \u0026lt;= n \u0026lt;= 30 img1[i][j] is 0 or 1. img2[i][j] is 0 or 1. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Solution { /* [[0,0,0,0,1], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]] [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [1,0,0,0,0]] */ public int largestOverlap(int[][] img1, int[][] img2) { int n = img1.length; int max = 0; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { max = Math.max(max, intersectRightBottom(i, j, img1, img2)); max = Math.max(max, intersectRightBottom(i, j, img2, img1)); } } for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { max = Math.max(max, intersectLeftBottom(i, j, img1, img2)); max = Math.max(max, intersectLeftBottom(i, j, img2, img1)); } } return max; } int intersectLeftBottom(int row, int col, int[][] img1, int[][] img2) { int count = 0; int n = img1.length; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { if (i + row \u0026lt; n \u0026amp;\u0026amp; j - col \u0026gt;= 0 \u0026amp;\u0026amp; img2[i + row][j - col] == img1[i][j] \u0026amp;\u0026amp; img1[i][j] == 1) { count++; } } } return count; } int intersectRightBottom(int row, int col, int[][] img1, int[][] img2) { int count = 0; int n = img1.length; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { if (i + row \u0026lt; n \u0026amp;\u0026amp; j + col \u0026lt; n \u0026amp;\u0026amp; img2[i + row][j + col] == img1[i][j] \u0026amp;\u0026amp; img1[i][j] == 1) { count++; } } } return count; } } ","permalink":"https://volyx.in/posts/2021-06-07-image-overlap/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/image-overlap\"\u003e835. Image Overlap\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two images img1 and img2 both of size n x n, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)\u003c/p\u003e\n\u003cp\u003eWe translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.\u003c/p\u003e","title":"835. Image Overlap"},{"content":"131. Palindrome Partitioning\nGiven a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\nA palindrome string is a string that reads the same backward as forward.\n1 2 3 4 5 6 7 8 9 Example 1: Input: s = \u0026#34;aab\u0026#34; Output: [[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;aa\u0026#34;,\u0026#34;b\u0026#34;]] Example 2: Input: s = \u0026#34;a\u0026#34; Output: [[\u0026#34;a\u0026#34;]] Constraints:\n1 \u0026lt;= s.length \u0026lt;= 16 s contains only lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; partition(String s) { List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); back(0, s.toCharArray(), current, res); return res; } void back(int index, char[] s, List\u0026lt;String\u0026gt; current, List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res) { if (index == s.length) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); return; } for (int i = index + 1; i \u0026lt;= s.length; i++) { if (isPalindrom(s, index, i)) { current.add(new String(Arrays.copyOfRange(s, index, i))); back(i, s, current, res); current.remove(current.size() - 1); } } } boolean isPalindrom(char[] s, int i, int j) { if (i == j) return false; if (j - i == 1) return true; while (i \u0026lt; j) { if (s[i++] != s[--j]) { return false; } } return true; } } ","permalink":"https://volyx.in/posts/2021-06-06-palindrome-partitioning/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/palindrome-partitioning\"\u003e131. Palindrome Partitioning\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\u003c/p\u003e\n\u003cp\u003eA palindrome string is a string that reads the same backward as forward.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aab\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;],[\u0026#34;aa\u0026#34;,\u0026#34;b\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[\u0026#34;a\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"131. Palindrome Partitioning"},{"content":"301. Remove Invalid Parentheses\nGiven a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\nReturn all the possible results. You may return the answer in any order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: s = \u0026#34;()())()\u0026#34; Output: [\u0026#34;(())()\u0026#34;,\u0026#34;()()()\u0026#34;] Example 2: Input: s = \u0026#34;(a)())()\u0026#34; Output: [\u0026#34;(a())()\u0026#34;,\u0026#34;(a)()()\u0026#34;] Example 3: Input: s = \u0026#34;)(\u0026#34; Output: [\u0026#34;\u0026#34;] Constraints:\n1 \u0026lt;= s.length \u0026lt;= 25 s consists of lowercase English letters and parentheses \u0026lsquo;(\u0026rsquo; and \u0026lsquo;)\u0026rsquo;. There will be at most 20 parentheses in s. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public List\u0026lt;String\u0026gt; removeInvalidParentheses(String s) { TreeMap\u0026lt;Integer, Set\u0026lt;String\u0026gt;\u0026gt; res = new TreeMap\u0026lt;\u0026gt;(); back(0, s, \u0026#34;\u0026#34;, res, 0, 0); return new ArrayList\u0026lt;\u0026gt;(res.firstEntry().getValue()); } void back(int index, String s, String current, Map\u0026lt;Integer, Set\u0026lt;String\u0026gt;\u0026gt; res, int open, int closed) { if (index == s.length()) { if (open == closed) { int removed = s.length() - current.length(); Set\u0026lt;String\u0026gt; values = res.getOrDefault(removed, new TreeSet\u0026lt;\u0026gt;()); values.add(current); res.put(removed, values); } return; } if (closed \u0026gt; open) return; char c = s.charAt(index); if (c == \u0026#39;(\u0026#39; || c == \u0026#39;)\u0026#39;) { back(index + 1, s, current + c, res, (c == \u0026#39;(\u0026#39;) ? open + 1: open, (c == \u0026#39;)\u0026#39;) ? closed + 1: closed); back(index + 1, s, current, res, open, closed); } else { back(index + 1, s, current + c, res, open, closed); } } } Solution 2021-10-15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class Solution { public List\u0026lt;String\u0026gt; removeInvalidParentheses(String s) { int opened = 0; int closed = 0; for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); if (c == \u0026#39;(\u0026#39;) { opened++; } else if (c == \u0026#39;)\u0026#39;) { if (opened \u0026gt; 0) { opened--; } else { closed++; } } } List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); StringBuilder sb = new StringBuilder(); backtrack(0, s, res, opened, closed, 0, sb); return res; } void backtrack(int pos, String s, List\u0026lt;String\u0026gt; res, int opened, int closed, int currOpened, StringBuilder sb) { if (opened \u0026lt; 0 || closed \u0026lt; 0 || currOpened \u0026lt; 0) return; if (pos == s.length()) { if (opened == 0 \u0026amp;\u0026amp; closed == 0 \u0026amp;\u0026amp; currOpened == 0) { if (!res.contains(sb.toString())) { res.add(sb.toString()); } } return; } if (opened \u0026lt; 0 || closed \u0026lt; 0 || currOpened \u0026lt; 0) return; // \u0026#34;()())()\u0026#34; // 0123456 // (())() 0 0 0 pos = 2 char c = s.charAt(pos); if (c != \u0026#39;(\u0026#39; \u0026amp;\u0026amp; c != \u0026#39;)\u0026#39;) { sb.append(c); backtrack(pos + 1, s, res, opened, closed, currOpened, sb); } if (c == \u0026#39;(\u0026#39;) { // remove backtrack(pos + 1, s, res, opened - 1, closed, currOpened, sb); //skip sb.append(c); backtrack(pos + 1, s, res, opened, closed, currOpened + 1, sb); } else if (c == \u0026#39;)\u0026#39;) { // remove backtrack(pos + 1, s, res, opened, closed - 1, currOpened, sb); //skip sb.append(c); backtrack(pos + 1, s, res, opened, closed, currOpened - 1, sb); } sb.deleteCharAt(sb.length() - 1); } } Solution 2021-10-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Solution { public List\u0026lt;String\u0026gt; removeInvalidParentheses(String s) { int opened = 0; int closed = 0; for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); if (c == \u0026#39;(\u0026#39;) { opened++; } else if (c == \u0026#39;)\u0026#39;) { if (opened \u0026gt; 0) { opened--; } else { closed++; } } } List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); StringBuilder sb = new StringBuilder(); back(s, 0, opened, closed, sb, res, 0, 0); return res; } void back(String s, int index, int opened, int closed, StringBuilder sb, List\u0026lt;String\u0026gt; res, int currOpen, int currClose) { if (opened \u0026lt; 0 || closed \u0026lt; 0) return; if (currClose \u0026gt; currOpen) return; if (index == s.length()) { if (closed == 0 \u0026amp;\u0026amp; opened == 0) { String str = sb.toString(); if (!res.contains(str)) { res.add(str); } } return; } char c = s.charAt(index); if (c == \u0026#39;(\u0026#39;) { back(s, index + 1, opened - 1, closed, sb, res, currOpen, currClose); } else if (c == \u0026#39;)\u0026#39;) { back(s, index + 1, opened, closed - 1, sb, res, currOpen, currClose); } sb.append(c); back(s, index + 1, opened, closed, sb, res, c == \u0026#39;(\u0026#39;? currOpen + 1: currOpen, c == \u0026#39;)\u0026#39;? currClose + 1: currClose); sb.deleteCharAt(sb.length() - 1); } } Solution 2022-01-24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class Solution { public List\u0026lt;String\u0026gt; removeInvalidParentheses(String s) { StringBuilder sb = new StringBuilder(); Set\u0026lt;String\u0026gt; res = new HashSet\u0026lt;\u0026gt;(); int open = 0; for (char c: s.toCharArray()) { if (c == \u0026#39;(\u0026#39;) { open++; } else if (c == \u0026#39;)\u0026#39;) { if (open \u0026gt; 0) { open--; } } } int close = 0; for (int i = s.length() - 1; i \u0026gt;= 0; i--) { char c = s.charAt(i); if (c == \u0026#39;(\u0026#39;) { if (close \u0026gt; 0) { close--; } } else if (c == \u0026#39;)\u0026#39;) { close++; } } // System.out.println(open + \u0026#34; \u0026#34; + close); backtrack(0, s, 0, open, close, sb, res); return new ArrayList\u0026lt;\u0026gt;(res); } void backtrack(int index, String s, int openClosed, int open, int close, StringBuilder sb, Set\u0026lt;String\u0026gt; res) { if (open \u0026lt; 0 || close \u0026lt; 0) return; if (index == s.length()) { if (open == 0 \u0026amp;\u0026amp; close == 0) { res.add(sb.toString()); } return; } char c = s.charAt(index); if (c == \u0026#39;(\u0026#39;) { sb.append(c); // add open backtrack(index + 1, s, openClosed + 1, open, close, sb, res); sb.deleteCharAt(sb.length() - 1); // skip open backtrack(index + 1, s, openClosed, open - 1, close, sb, res); } else if (c == \u0026#39;)\u0026#39;) { if (openClosed \u0026gt; 0) { sb.append(c); // add close backtrack(index + 1, s, openClosed - 1, open, close, sb, res); sb.deleteCharAt(sb.length() - 1); } // skip close backtrack(index + 1, s, openClosed, open, close - 1, sb, res); } else { sb.append(c); backtrack(index + 1, s, openClosed, open, close, sb, res); sb.deleteCharAt(sb.length() - 1); } } } ","permalink":"https://volyx.in/posts/2021-06-06-remove-invalid-parentheses/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/remove-invalid-parentheses\"\u003e301. Remove Invalid Parentheses\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\u003c/p\u003e\n\u003cp\u003eReturn all the possible results. You may return the answer in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;()())()\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;(())()\u0026#34;,\u0026#34;()()()\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;(a)())()\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;(a())()\u0026#34;,\u0026#34;(a)()()\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;)(\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"301. Remove Invalid Parentheses"},{"content":"832. Flipping an Image\nGiven an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.\nFor example, flipping [1,1,0] horizontally results in [0,1,1]. To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\nFor example, inverting [0,1,1] results in [1,0,0]. 1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: image = [[1,1,0],[1,0,1],[0,0,0]] Output: [[1,0,0],[0,1,0],[1,1,1]] Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]]. Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]] Example 2: Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] Constraints:\nn == image.length n == image[i].length 1 \u0026lt;= n \u0026lt;= 20 images[i][j] is either 0 or 1. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public int[][] flipAndInvertImage(int[][] image) { int n = image.length; int m = image[0].length; for (int i = 0; i \u0026lt; n; i++) { int l = 0; int r = m - 1; while (l \u0026lt; r) { swap(image[i], l, r); l++; r--; } for (int j = 0; j \u0026lt; m; j++) { image[i][j] = image[i][j] ^ 1; } } return image; } void swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } ","permalink":"https://volyx.in/posts/2021-06-06-flipping-an-image/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/flipping-an-image\"\u003e832. Flipping an Image\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\u003c/p\u003e\n\u003cp\u003eTo flip an image horizontally means that each row of the image is reversed.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, flipping [1,1,0] horizontally results in [0,1,1].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, inverting [0,1,1] results in [1,0,0].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: image = [[1,1,0],[1,0,1],[0,0,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,0,0],[0,1,0],[1,1,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"832. Flipping an Image"},{"content":"833. Find And Replace in String\nTo some string s, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).\nEach replacement operation has 3 parameters: a starting index i, a source word x and a target word y. The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y. If not, we do nothing.\nFor example, if we have s = \u0026ldquo;abcd\u0026rdquo; and we have some replacement operation i = 2, x = \u0026ldquo;cd\u0026rdquo;, y = \u0026ldquo;ffff\u0026rdquo;, then because \u0026ldquo;cd\u0026rdquo; starts at position 2 in the original string s, we will replace it with \u0026ldquo;ffff\u0026rdquo;.\nUsing another example on s = \u0026ldquo;abcd\u0026rdquo;, if we have both the replacement operation i = 0, x = \u0026ldquo;ab\u0026rdquo;, y = \u0026ldquo;eee\u0026rdquo;, as well as another replacement operation i = 2, x = \u0026ldquo;ec\u0026rdquo;, y = \u0026ldquo;ffff\u0026rdquo;, this second operation does nothing because in the original string s[2] = \u0026lsquo;c\u0026rsquo;, which doesn\u0026rsquo;t match x[0] = \u0026rsquo;e\u0026rsquo;.\nAll these operations occur simultaneously. It\u0026rsquo;s guaranteed that there won\u0026rsquo;t be any overlap in replacement: for example, s = \u0026ldquo;abc\u0026rdquo;, indexes = [0, 1], sources = [\u0026ldquo;ab\u0026rdquo;,\u0026ldquo;bc\u0026rdquo;] is not a valid test case.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: s = \u0026#34;abcd\u0026#34;, indexes = [0, 2], sources = [\u0026#34;a\u0026#34;, \u0026#34;cd\u0026#34;], targets = [\u0026#34;eee\u0026#34;, \u0026#34;ffff\u0026#34;] Output: \u0026#34;eeebffff\u0026#34; Explanation: \u0026#34;a\u0026#34; starts at index 0 in s, so it\u0026#39;s replaced by \u0026#34;eee\u0026#34;. \u0026#34;cd\u0026#34; starts at index 2 in s, so it\u0026#39;s replaced by \u0026#34;ffff\u0026#34;. Example 2: Input: s = \u0026#34;abcd\u0026#34;, indexes = [0, 2], sources = [\u0026#34;ab\u0026#34;,\u0026#34;ec\u0026#34;], targets = [\u0026#34;eee\u0026#34;,\u0026#34;ffff\u0026#34;] Output: \u0026#34;eeecd\u0026#34; Explanation: \u0026#34;ab\u0026#34; starts at index 0 in s, so it\u0026#39;s replaced by \u0026#34;eee\u0026#34;. \u0026#34;ec\u0026#34; doesn\u0026#39;t starts at index 2 in the original s, so we do nothing. Constraints:\n0 \u0026lt;= s.length \u0026lt;= 1000 s consists of only lowercase English letters. 0 \u0026lt;= indexes.length \u0026lt;= 100 0 \u0026lt;= indexes[i] \u0026lt; s.length sources.length == indexes.length targets.length == indexes.length 1 \u0026lt;= sources[i].length, targets[i].length \u0026lt;= 50 sources[i] and targets[i] consist of only lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public String findReplaceString(String s, int[] indexes, String[] sources, String[] targets) { int n = s.length(); StringBuilder sb = new StringBuilder(s); int shift = 0; List\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt; pairs = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; indexes.length; i++) { pairs.add(new Pair(i, indexes[i])); } pairs.sort((p1, p2) -\u0026gt; { return Integer.compare(p1.getValue(), p2.getValue()); }); for (Pair\u0026lt;Integer, Integer\u0026gt; pair : pairs) { System.out.println(pair); int i = pair.getKey(); int index = indexes[i]; var source = sources[i]; var target = targets[i]; if (s.startsWith(source, index)) { index = index + shift; sb = sb.replace(index, index + source.length(), target); if (source.length() \u0026lt; target.length()) { shift += Math.abs(target.length() - source.length()); } else if (source.length() \u0026gt; target.length()) { shift -= Math.abs(target.length() - source.length()); } } } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-06-06-find-and-replace-in-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-and-replace-in-string/\"\u003e833. Find And Replace in String\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eTo some string s, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).\u003c/p\u003e\n\u003cp\u003eEach replacement operation has 3 parameters: a starting index i, a source word x and a target word y. The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y. If not, we do nothing.\u003c/p\u003e","title":"833. Find And Replace in String"},{"content":"1441. Build an Array With Stack Operations\nGiven an array target and an integer n. In each iteration, you will read a number from list = {1,2,3\u0026hellip;, n}.\nBuild the target array using the following operations:\nPush: Read a new element from the beginning list, and push it in the array. Pop: delete the last element of the array. If the target array is already built, stop reading more elements. Return the operations to build the target array. You are guaranteed that the answer is unique.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: target = [1,3], n = 3 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Pop\u0026#34;,\u0026#34;Push\u0026#34;] Explanation: Read number 1 and automatically push in the array -\u0026gt; [1] Read number 2 and automatically push in the array then Pop it -\u0026gt; [1] Read number 3 and automatically push in the array -\u0026gt; [1,3] Example 2: Input: target = [1,2,3], n = 3 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;] Example 3: Input: target = [1,2], n = 4 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;] Explanation: You only need to read the first 2 numbers and stop. Example 4: Input: target = [2,3,4], n = 4 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Pop\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;] Constraints:\n1 \u0026lt;= target.length \u0026lt;= 100 1 \u0026lt;= target[i] \u0026lt;= n 1 \u0026lt;= n \u0026lt;= 100 target is strictly increasing. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public List\u0026lt;String\u0026gt; buildArray(int[] target, int n) { List\u0026lt;String\u0026gt; operations = new ArrayList\u0026lt;\u0026gt;(); int j = 0; for (int i = 1; i \u0026lt;= n \u0026amp;\u0026amp; j \u0026lt; target.length; i++) { if (i == target[j]) { operations.add(\u0026#34;Push\u0026#34;); j++; } else { operations.add(\u0026#34;Push\u0026#34;); operations.add(\u0026#34;Pop\u0026#34;); } } return operations; } } ","permalink":"https://volyx.in/posts/2021-06-05-build-an-array-with-stack-operations/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/build-an-array-with-stack-operations\"\u003e1441. Build an Array With Stack Operations\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array target and an integer n. In each iteration, you will read a number from  list = {1,2,3\u0026hellip;, n}.\u003c/p\u003e\n\u003cp\u003eBuild the target array using the following operations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePush: Read a new element from the beginning list, and push it in the array.\u003c/li\u003e\n\u003cli\u003ePop: delete the last element of the array.\u003c/li\u003e\n\u003cli\u003eIf the target array is already built, stop reading more elements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the operations to build the target array. You are guaranteed that the answer is unique.\u003c/p\u003e","title":"1441. Build an Array With Stack Operations"},{"content":"77. Combinations\nGiven two integers n and k, return all possible combinations of k numbers out of the range [1, n].\nYou may return the answer in any order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: n = 4, k = 2 Output: [ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4], ] Example 2: Input: n = 1, k = 1 Output: [[1]] Constraints:\n1 \u0026lt;= n \u0026lt;= 20 1 \u0026lt;= k \u0026lt;= n Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combine(int n, int k) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); back(1, n, k, current, res); return res; } void back(int value, int n, int k, List\u0026lt;Integer\u0026gt; current, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { if (current.size() == k) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); return; } for (int i = value; i \u0026lt;= n; i++) { current.add(i); back(i + 1, n, k, current, res); current.remove(current.size() - 1); } } } ","permalink":"https://volyx.in/posts/2021-06-04-combinations/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/combinations\"\u003e77. Combinations\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two integers n and k, return all possible combinations of k numbers out of the range [1, n].\u003c/p\u003e\n\u003cp\u003eYou may return the answer in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 4, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [2,4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [3,4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [2,3],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [1,2],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [1,3],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [1,4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 1, k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"77. Combinations"},{"content":"1041. Robot Bounded In Circle\nOn an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:\n\u0026ldquo;G\u0026rdquo;: go straight 1 unit; \u0026ldquo;L\u0026rdquo;: turn 90 degrees to the left; \u0026ldquo;R\u0026rdquo;: turn 90 degrees to the right. The robot performs the instructions given in order, and repeats them forever.\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input: instructions = \u0026#34;GGLLGG\u0026#34; Output: true Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0). When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin. Example 2: Input: instructions = \u0026#34;GG\u0026#34; Output: false Explanation: The robot moves north indefinitely. Example 3: Input: instructions = \u0026#34;GL\u0026#34; Output: true Explanation: The robot moves from (0, 0) -\u0026gt; (0, 1) -\u0026gt; (-1, 1) -\u0026gt; (-1, 0) -\u0026gt; (0, 0) -\u0026gt; ... Constraints:\n1 \u0026lt;= instructions.length \u0026lt;= 100 instructions[i] is \u0026lsquo;G\u0026rsquo;, \u0026lsquo;L\u0026rsquo; or, \u0026lsquo;R\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Solution { public boolean isRobotBounded(String instructions) { int[][] directions = new int[][] { {0,1}, // north {1,0}, // east {0,-1}, // south {-1,0} // west }; int x = 0; int y = 0; int idx = 0; for (int i: instructions.toCharArray()) { if (i == \u0026#39;L\u0026#39;) { idx = (idx + 3) % 4; } else if (i == \u0026#39;R\u0026#39;) { idx = (idx + 1) % 4; } else { x += directions[idx][0]; y += directions[idx][1]; } } // after one cycle: // robot returns into initial position // or robot doesn\u0026#39;t face north return (x == 0 \u0026amp;\u0026amp; y == 0) || (idx != 0); } public boolean isRobotBounded2(String instructions) { char direction = \u0026#39;G\u0026#39;; int i = 0; int j = 0; int n = instructions.length(); for (int k = 0; k \u0026lt; 4 * n; k++) { char c = instructions.charAt(k % n); if (c == \u0026#39;G\u0026#39;) { if (direction == \u0026#39;G\u0026#39;) { i++; } else if (direction == \u0026#39;L\u0026#39;) { j--; } else if (direction == \u0026#39;D\u0026#39;) { i--; } else if (direction == \u0026#39;R\u0026#39;) { j++; } } else if (c == \u0026#39;L\u0026#39;) { if (direction == \u0026#39;G\u0026#39;) { direction = \u0026#39;L\u0026#39;; } else if (direction == \u0026#39;L\u0026#39;) { direction = \u0026#39;D\u0026#39;; } else if (direction == \u0026#39;D\u0026#39;) { direction = \u0026#39;R\u0026#39;; } else if (direction == \u0026#39;R\u0026#39;) { direction = \u0026#39;G\u0026#39;; } } else if (c == \u0026#39;R\u0026#39;) { if (direction == \u0026#39;G\u0026#39;) { direction = \u0026#39;R\u0026#39;; } else if (direction == \u0026#39;R\u0026#39;) { direction = \u0026#39;D\u0026#39;; } else if (direction == \u0026#39;D\u0026#39;) { direction = \u0026#39;L\u0026#39;; } else if (direction == \u0026#39;L\u0026#39;) { direction = \u0026#39;G\u0026#39;; } } } return (i == 0 \u0026amp;\u0026amp; j == 0); } } ","permalink":"https://volyx.in/posts/2021-06-03-robot-bounded-in-circle/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/robot-bounded-in-circle/\"\u003e1041. Robot Bounded In Circle\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eOn an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;G\u0026rdquo;: go straight 1 unit;\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;L\u0026rdquo;: turn 90 degrees to the left;\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;R\u0026rdquo;: turn 90 degrees to the right.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe robot performs the instructions given in order, and repeats them forever.\u003c/p\u003e\n\u003cp\u003eReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.\u003c/p\u003e","title":"1041. Robot Bounded In Circle"},{"content":"17. Letter Combinations of a Phone Number\nGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: digits = \u0026#34;23\u0026#34; Output: [\u0026#34;ad\u0026#34;,\u0026#34;ae\u0026#34;,\u0026#34;af\u0026#34;,\u0026#34;bd\u0026#34;,\u0026#34;be\u0026#34;,\u0026#34;bf\u0026#34;,\u0026#34;cd\u0026#34;,\u0026#34;ce\u0026#34;,\u0026#34;cf\u0026#34;] Example 2: Input: digits = \u0026#34;\u0026#34; Output: [] Example 3: Input: digits = \u0026#34;2\u0026#34; Output: [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;] Constraints:\n0 \u0026lt;= digits.length \u0026lt;= 4 digits[i] is a digit in the range [\u0026lsquo;2\u0026rsquo;, \u0026lsquo;9\u0026rsquo;] Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public List\u0026lt;String\u0026gt; letterCombinations(String digits) { Map\u0026lt;Character, String\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); map.put(\u0026#39;1\u0026#39;, \u0026#34;\u0026#34;); map.put(\u0026#39;2\u0026#39;, \u0026#34;abc\u0026#34;); map.put(\u0026#39;3\u0026#39;, \u0026#34;def\u0026#34;); map.put(\u0026#39;4\u0026#39;, \u0026#34;ghi\u0026#34;); map.put(\u0026#39;5\u0026#39;, \u0026#34;jkl\u0026#34;); map.put(\u0026#39;6\u0026#39;, \u0026#34;mno\u0026#34;); map.put(\u0026#39;7\u0026#39;, \u0026#34;pqrs\u0026#34;); map.put(\u0026#39;8\u0026#39;, \u0026#34;tuv\u0026#34;); map.put(\u0026#39;9\u0026#39;, \u0026#34;wxyz\u0026#34;); List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); if (digits.length() == 0) return res; dfs(digits, 0, \u0026#34;\u0026#34;, map, res); return res; } void dfs(String digits, int index, String s, Map\u0026lt;Character, String\u0026gt; map, List\u0026lt;String\u0026gt; res) { if (index == digits.length()) { res.add(s); return; } String options = map.get(digits.charAt(index)); for (int i = 0; i \u0026lt; options.length(); i++) { dfs(digits, index + 1, s + options.charAt(i), map, res); } } } ","permalink":"https://volyx.in/posts/2021-06-03-letter-combinations-of-a-phone-number/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\"\u003e17. Letter Combinations of a Phone Number\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\u003c/p\u003e\n\u003cp\u003eA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: digits = \u0026#34;23\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;ad\u0026#34;,\u0026#34;ae\u0026#34;,\u0026#34;af\u0026#34;,\u0026#34;bd\u0026#34;,\u0026#34;be\u0026#34;,\u0026#34;bf\u0026#34;,\u0026#34;cd\u0026#34;,\u0026#34;ce\u0026#34;,\u0026#34;cf\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: digits = \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: digits = \u0026#34;2\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-06-03-ex1.png\"\u003e\u003c/p\u003e","title":"17. Letter Combinations of a Phone Number"},{"content":"189. Rotate Array\nGiven an array, rotate the array to the right by k steps, where k is non-negative.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: nums = [1,2,3,4,5,6,7], k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] Example 2: Input: nums = [-1,-100,3,99], k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 105 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 0 \u0026lt;= k \u0026lt;= 105 Follow up:\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem. Could you do it in-place with O(1) extra space? Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public void rotate(int[] nums, int k) { if (k \u0026gt;= nums.length) { k = k % nums.length; }; reverse(nums, 0, nums.length); reverse(nums, 0, k); reverse(nums, k, nums.length); } void reverse(int[] nums, int l, int r) { int j = 0; int i = l; while (i \u0026lt; l + (r - l) / 2) { swap(nums, i, r - j - 1); i++; j++; } } void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } ","permalink":"https://volyx.in/posts/2021-06-03-rotate-array/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/rotate-array/\"\u003e189. Rotate Array\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array, rotate the array to the right by k steps, where k is non-negative.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3,4,5,6,7], k = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [5,6,7,1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erotate 1 steps to the right: [7,1,2,3,4,5,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erotate 2 steps to the right: [6,7,1,2,3,4,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erotate 3 steps to the right: [5,6,7,1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-1,-100,3,99], k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [3,99,-1,-100]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erotate 1 steps to the right: [99,-1,-100,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erotate 2 steps to the right: [3,99,-1,-100]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"189. Rotate Array"},{"content":"22. Generate Parentheses\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\n1 2 3 4 5 6 7 8 9 Example 1: Input: n = 3 Output: [\u0026#34;((()))\u0026#34;,\u0026#34;(()())\u0026#34;,\u0026#34;(())()\u0026#34;,\u0026#34;()(())\u0026#34;,\u0026#34;()()()\u0026#34;] Example 2: Input: n = 1 Output: [\u0026#34;()\u0026#34;] Constraints:\n1 \u0026lt;= n \u0026lt;= 8 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public List\u0026lt;String\u0026gt; generateParenthesis(int n) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); backtracking(\u0026#34;(\u0026#34;, 1, 0, n, res); return res; } void backtracking(String s, int open, int closed, int n, List\u0026lt;String\u0026gt; res) { if (open + closed == 2 * n) { res.add(s); return; } if (open \u0026lt; n) backtracking(s + \u0026#34;(\u0026#34;, open + 1, closed, n, res); if (open \u0026gt; closed) backtracking(s + \u0026#34;)\u0026#34;, open, closed + 1, n, res); } } ","permalink":"https://volyx.in/posts/2021-06-03-generate-parentheses/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/generate-parentheses/\"\u003e22. Generate Parentheses\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;((()))\u0026#34;,\u0026#34;(()())\u0026#34;,\u0026#34;(())()\u0026#34;,\u0026#34;()(())\u0026#34;,\u0026#34;()()()\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;()\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"22. Generate Parentheses"},{"content":"90. Subsets II\nGiven an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n1 2 3 4 5 6 7 8 9 Example 1: Input: nums = [1,2,2] Output: [[],[1],[1,2],[1,2,2],[2],[2,2]] Example 2: Input: nums = [0] Output: [[],[0]] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10 -10 \u0026lt;= nums[i] \u0026lt;= 10 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsetsWithDup(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); Arrays.sort(nums); backtrack(nums, 0, current, res); return res; } void backtrack(int[] nums, int index, List\u0026lt;Integer\u0026gt; current, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); for (int i = index; i \u0026lt; nums.length; i++) { if (i \u0026gt; index \u0026amp;\u0026amp; nums[i - 1] == nums[i]) { continue; } current.add(nums[i]); backtrack(nums, i + 1, current, res); current.remove(current.size() - 1); } } } ","permalink":"https://volyx.in/posts/2021-06-03-subsets-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/subsets-ii\"\u003e90. Subsets II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums that may contain duplicates, return all possible subsets (the power set).\u003c/p\u003e\n\u003cp\u003eThe solution set must not contain duplicate subsets. Return the solution in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[],[0]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"90. Subsets II"},{"content":"343. Integer Break\nGiven an integer n, break it into the sum of k positive integers, where k \u0026gt;= 2, and maximize the product of those integers.\nReturn the maximum product you can get.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: n = 2 Output: 1 Explanation: 2 = 1 + 1, 1 × 1 = 1. Example 2: Input: n = 10 Output: 36 Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36. Constraints:\n2 \u0026lt;= n \u0026lt;= 58 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public int integerBreak(int n) { /* 2 = 1 3 = 2 * 1; 4 = 2 * 2 = 4 5 = 2 * 3 = 6 6 = 3 * 3 = 9 7 = 2 * 2 * 3 = 12 8 = 2 * 3 * 3= 18 9 = 3 * 3 * 3 = 27 10 = 2 * 2 * 3 * 3 = 36 11 = 2 * 2 * 2 * 2 * 3 12 = 2 * 2 * 2 * 2 * 2 * 2 13 = 2 * 2 * 2 * 2 * 3 * 3 */ if (n == 2) return 1; if (n == 3) return 2; int product = 1; while (n \u0026gt; 1) { if (n % 2 == 1 || n % 3 == 0) { product *= 3; n -= 3; } else { product *= 2; n -= 2; } } return product; } } ","permalink":"https://volyx.in/posts/2021-05-30-integer-break/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/integer-break/\"\u003e343. Integer Break\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer n, break it into the sum of k positive integers, where k \u0026gt;= 2, and maximize the product of those integers.\u003c/p\u003e\n\u003cp\u003eReturn the maximum product you can get.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 2 = 1 + 1, 1 × 1 = 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 36\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"343. Integer Break"},{"content":"46. Permutations\nGiven an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: nums = [1,2,3] Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] Example 2: Input: nums = [0,1] Output: [[0,1],[1,0]] Example 3: Input: nums = [1] Output: [[1]] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 6 -10 \u0026lt;= nums[i] \u0026lt;= 10 All the integers of nums are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permute(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); backtrack(res, nums, 0); return res; } void backtrack(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res, int[] nums, int index) { if (index == nums.length - 1) { res.add(toList(nums)); return; } for (int i = index; i \u0026lt; nums.length; i++) { swap(nums, i, index); backtrack(res, nums, index + 1); swap(nums, i, index); } } List\u0026lt;Integer\u0026gt; toList(int[] nums) { List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { list.add(nums[i]); } return list; } void swap(int[] nums, int i, int j) { int temp = nums[i]; nums[i] = nums[j]; nums[j] = temp; } } Solution 2021-11-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; permute(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); permuteAt(0, nums, res); return res; } void permuteAt(int i, int[] nums, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { if (i == nums.length - 1) { res.add(toList(nums)); return; } for (int j = i; j \u0026lt; nums.length; j++) { swap(i, j, nums); permuteAt(i + 1, nums, res); swap(i, j, nums); } } void swap(int i, int j, int[] arr) { int t = arr[i]; arr[i] = arr[j]; arr[j] = t; } List\u0026lt;Integer\u0026gt; toList(int[] values) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(values.length); for (int val : values) { res.add(val); } return res; } } ","permalink":"https://volyx.in/posts/2021-05-30-permutations/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/permutations/\"\u003e46. Permutations\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[0,1],[1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"46. Permutations"},{"content":"78. Subsets\nGiven an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.\n1 2 3 4 5 6 7 8 9 Example 1: Input: nums = [1,2,3] Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] Example 2: Input: nums = [0] Output: [[],[0]] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10 -10 \u0026lt;= nums[i] \u0026lt;= 10 All the numbers of nums are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets = new ArrayList\u0026lt;\u0026gt;(); int n = nums.length; for (int i = (int) Math.pow(2, n); i \u0026lt; (int) Math.pow(2, n + 1); i++) { // generate bitmasks from 00.000 to 111..111 String bitmask = Integer.toBinaryString(i).substring(1); List\u0026lt;Integer\u0026gt; curr = new ArrayList\u0026lt;\u0026gt;(); for (int j = 0; j \u0026lt; n; j++) { if (bitmask.charAt(j) == \u0026#39;1\u0026#39;) curr.add(nums[j]); } subsets.add(curr); } return subsets; } public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets3(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); dfs(0, nums, current, subsets); return subsets; } void dfs(int index, int[] nums, List\u0026lt;Integer\u0026gt; current, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets) { if (index == nums.length) { subsets.add(new ArrayList\u0026lt;\u0026gt;(current)); return; } current.add(nums[index]); dfs(index + 1, nums, current, subsets); current.remove(current.size() - 1); dfs(index + 1, nums, current, subsets); } public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets2(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); generateSubsets(0, nums, current, subsets); return subsets; } void generateSubsets(int index, int[] nums, List\u0026lt;Integer\u0026gt; current, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets) { subsets.add(new ArrayList\u0026lt;\u0026gt;(current)); for (int i = index; i \u0026lt; nums.length; i++) { current.add(nums[i]); generateSubsets(i + 1, nums, current, subsets); current.remove(current.size() - 1); } } } Solution 2021-11-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; subsets(int[] nums) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; curr = new ArrayList\u0026lt;\u0026gt;(); dfs(0, nums, res, curr); return res; } void dfs(int index, int[] nums, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res, List\u0026lt;Integer\u0026gt; curr) { if (index == nums.length) { res.add(List.copyOf(curr)); return; } curr.add(nums[index]); dfs(index + 1, nums, res, curr); curr.remove(curr.size() - 1); dfs(index + 1, nums, res, curr); } } ","permalink":"https://volyx.in/posts/2021-05-30-subsets/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/subsets/\"\u003e78. Subsets\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums of unique elements, return all possible subsets (the power set).\u003c/p\u003e\n\u003cp\u003eThe solution set must not contain duplicate subsets. Return the solution in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[],[0]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"78. Subsets"},{"content":"1876. Substrings of Size Three with Distinct Characters\nA string is good if there are no repeated characters.\nGiven a string s​​​​​, return the number of good substrings of length three in s​​​​​​.\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\nA substring is a contiguous sequence of characters in a string.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: s = \u0026#34;xyzzaz\u0026#34; Output: 1 Explanation: There are 4 substrings of size 3: \u0026#34;xyz\u0026#34;, \u0026#34;yzz\u0026#34;, \u0026#34;zza\u0026#34;, and \u0026#34;zaz\u0026#34;. The only good substring of length 3 is \u0026#34;xyz\u0026#34;. Example 2: Input: s = \u0026#34;aababcabc\u0026#34; Output: 4 Explanation: There are 7 substrings of size 3: \u0026#34;aab\u0026#34;, \u0026#34;aba\u0026#34;, \u0026#34;bab\u0026#34;, \u0026#34;abc\u0026#34;, \u0026#34;bca\u0026#34;, \u0026#34;cab\u0026#34;, and \u0026#34;abc\u0026#34;. The good substrings are \u0026#34;abc\u0026#34;, \u0026#34;bca\u0026#34;, \u0026#34;cab\u0026#34;, and \u0026#34;abc\u0026#34;. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 100 s​​​​​​ consists of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int countGoodSubstrings(String s) { int n = s.length(); if (n \u0026lt; 3) { return 0; } int count = 0; for (int i = 2; i \u0026lt; n; i++) { if (s.charAt(i - 2) != s.charAt(i - 1) \u0026amp;\u0026amp; s.charAt(i - 1) != s.charAt(i) \u0026amp;\u0026amp; s.charAt(i - 2) != s.charAt(i)) { count++; } } return count; } } ","permalink":"https://volyx.in/posts/2021-05-29-substrings-of-size-three-with-distinct-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/substrings-of-size-three-with-distinct-characters/\"\u003e1876. Substrings of Size Three with Distinct Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA string is good if there are no repeated characters.\u003c/p\u003e\n\u003cp\u003eGiven a string s​​​​​, return the number of good substrings of length three in s​​​​​​.\u003c/p\u003e\n\u003cp\u003eNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\u003c/p\u003e\n\u003cp\u003eA substring is a contiguous sequence of characters in a string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;xyzzaz\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are 4 substrings of size 3: \u0026#34;xyz\u0026#34;, \u0026#34;yzz\u0026#34;, \u0026#34;zza\u0026#34;, and \u0026#34;zaz\u0026#34;. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe only good substring of length 3 is \u0026#34;xyz\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aababcabc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are 7 substrings of size 3: \u0026#34;aab\u0026#34;, \u0026#34;aba\u0026#34;, \u0026#34;bab\u0026#34;, \u0026#34;abc\u0026#34;, \u0026#34;bca\u0026#34;, \u0026#34;cab\u0026#34;, and \u0026#34;abc\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe good substrings are \u0026#34;abc\u0026#34;, \u0026#34;bca\u0026#34;, \u0026#34;cab\u0026#34;, and \u0026#34;abc\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1876. Substrings of Size Three with Distinct Characters"},{"content":"1877. Minimize Maximum Pair Sum in Array\nThe pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\nFor example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8. Given an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\nEach element of nums is in exactly one pair, and The maximum pair sum is minimized. Return the minimized maximum pair sum after optimally pairing up the elements.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: nums = [3,5,2,3] Output: 7 Explanation: The elements can be paired up into pairs (3,3) and (5,2). The maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7. Example 2: Input: nums = [3,5,4,2,4,6] Output: 8 Explanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2). The maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8. Constraints:\nn == nums.length 2 \u0026lt;= n \u0026lt;= 105 n is even. 1 \u0026lt;= nums[i] \u0026lt;= 105 Solution 1 2 3 4 5 6 7 8 9 10 11 class Solution { public int minPairSum(int[] nums) { Arrays.sort(nums); int max = 0; int n = nums.length ; for (int i = 0 ; i \u0026lt; n/ 2; i++) { max = Math.max(nums[i] + nums[n - i - 1], max); } return max; } } ","permalink":"https://volyx.in/posts/2021-05-29-minimize-maximum-pair-sum-in-array/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/\"\u003e1877. Minimize Maximum Pair Sum in Array\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\u003c/p\u003e","title":"1877. Minimize Maximum Pair Sum in Array"},{"content":"1878. Get Biggest Three Rhombus Sums in a Grid\nYou are given an m x n integer matrix grid​​​.\nA rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\nReturn the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.\n1 2 3 4 5 6 7 8 Example 1: Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]] Output: [228,216,211] Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above. - Blue: 20 + 3 + 200 + 5 = 228 - Red: 200 + 2 + 10 + 4 = 216 - Green: 5 + 200 + 4 + 2 = 211 1 2 3 4 5 6 7 8 Example 2: Input: grid = [[1,2,3],[4,5,6],[7,8,9]] Output: [20,9,8] Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above. - Blue: 4 + 2 + 6 + 8 = 20 - Red: 9 (area 0 rhombus in the bottom right corner) - Green: 8 (area 0 rhombus in the bottom middle) 1 2 3 4 5 Example 3: Input: grid = [[7,7,7]] Output: [7] Explanation: All three possible rhombus sums are the same, so return [7]. Constraints:\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 100 1 \u0026lt;= grid[i][j] \u0026lt;= 105 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Solution { public int[] getBiggestThree(int[][] grid) { int n = grid.length; int m = grid[0].length; TreeSet\u0026lt;Integer\u0026gt; pq = new TreeSet\u0026lt;Integer\u0026gt;((r1,r2) -\u0026gt; -Integer.compare(r1,r2)); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { pq.add(grid[i][j]); if (pq.size() \u0026gt; 3) { pq.pollLast(); } } } int k = 1; while (k \u0026lt; n) { for (int i = k; i \u0026lt; n - k; i++) { for (int j = k; j \u0026lt; m - k; j++) { pq.add(getSum(grid, i, j, k)); if (pq.size() \u0026gt; 3) { pq.pollLast(); } } } k++; } int[] res = new int[Math.min(pq.size(), 3)]; for (int i = 0; i \u0026lt; res.length; i++) { res[i] = pq.pollFirst(); } return res; } int getSum(int[][] grid, int i, int j, int k) { int sum = 0; int row = i; int col = j - k; // left - down while (row \u0026gt; i - k \u0026amp;\u0026amp; col \u0026lt; j) { sum += grid[row][col]; row--; col++; } // down - right while (row \u0026lt; i \u0026amp;\u0026amp; col \u0026lt; j + k) { sum += grid[row][col]; row++; col++; } // right - top while (row \u0026lt; i + k \u0026amp;\u0026amp; col \u0026gt; j) { sum += grid[row][col]; row++; col--; } // top-left while (row \u0026gt; i \u0026amp;\u0026amp; col \u0026gt; j - k) { sum += grid[row][col]; row--; col--; } return sum; } } ","permalink":"https://volyx.in/posts/2021-05-29-get-biggest-three-rhombus-sums-in-a-grid/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid/\"\u003e1878. Get Biggest Three Rhombus Sums in a Grid\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an m x n integer matrix grid​​​.\u003c/p\u003e\n\u003cp\u003eA rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:\u003c/p\u003e","title":"1878. Get Biggest Three Rhombus Sums in a Grid"},{"content":"221. Maximal Square\nGiven an m x n binary matrix filled with 0\u0026rsquo;s and 1\u0026rsquo;s, find the largest square containing only 1\u0026rsquo;s and return its area.\n1 2 3 4 Example 1: Input: matrix = [[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;]] Output: 4 1 2 3 4 Example 2: Input: matrix = [[\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;]] Output: 1 1 2 3 4 Example 3: Input: matrix = [[\u0026#34;0\u0026#34;]] Output: 0 Constraints:\nm == matrix.length n == matrix[i].length 1 \u0026lt;= m, n \u0026lt;= 300 matrix[i][j] is \u0026lsquo;0\u0026rsquo; or \u0026lsquo;1\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public int maximalSquare(char[][] matrix) { int n = matrix.length; int m = matrix[0].length; int[][] dp = new int[n][m]; int max = 0; for (int j = 0; j \u0026lt; m; j++) { dp[0][j] = matrix[0][j] == \u0026#39;0\u0026#39; ? 0 : 1; max = Math.max(dp[0][j], max); } for (int i = 0; i \u0026lt; n; i++) { dp[i][0] = matrix[i][0] == \u0026#39;0\u0026#39; ? 0: 1; max = Math.max(dp[i][0], max); } for (int i = 1; i \u0026lt; n; i++) { for (int j = 1; j \u0026lt; m; j++) { if (matrix[i][j] == \u0026#39;0\u0026#39;) { dp[i][j] = 0; } else { dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1]) + 1; } max = Math.max(dp[i][j], max); } } return max * max; } int min(int a, int b, int c) { return Math.min(a, Math.min(b,c)); } } ","permalink":"https://volyx.in/posts/2021-05-28-maximal-square/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximal-square/\"\u003e221. Maximal Square\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an m x n binary matrix filled with 0\u0026rsquo;s and 1\u0026rsquo;s, find the largest square containing only 1\u0026rsquo;s and return its area.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;1\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[\u0026#34;0\u0026#34;,\u0026#34;1\u0026#34;],[\u0026#34;1\u0026#34;,\u0026#34;0\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[\u0026#34;0\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"221. Maximal Square"},{"content":"1852. Distinct Numbers in Each Subarray\nGiven an integer array nums and an integer k, you are asked to construct the array ans of size n-k+1 where ans[i] is the number of distinct numbers in the subarray nums[i:i+k-1] = [nums[i], nums[i+1], \u0026hellip;, nums[i+k-1]].\nReturn the array ans.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: nums = [1,2,3,2,2,1,3], k = 3 Output: [3,2,2,2,3] Explanation: The number of distinct elements in each subarray goes as follows: - nums[0:2] = [1,2,3] so ans[0] = 3 - nums[1:3] = [2,3,2] so ans[1] = 2 - nums[2:4] = [3,2,2] so ans[2] = 2 - nums[3:5] = [2,2,1] so ans[3] = 2 - nums[4:6] = [2,1,3] so ans[4] = 3 Example 2: Input: nums = [1,1,1,1,2,3,4], k = 4 Output: [1,2,3,4] Explanation: The number of distinct elements in each subarray goes as follows: - nums[0:3] = [1,1,1,1] so ans[0] = 1 - nums[1:4] = [1,1,1,2] so ans[1] = 2 - nums[2:5] = [1,1,2,3] so ans[2] = 3 - nums[3:6] = [1,2,3,4] so ans[3] = 4 Constraints:\n1 \u0026lt;= k \u0026lt;= nums.length \u0026lt;= 105 1 \u0026lt;= nums[i] \u0026lt;= 105 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { // [1,2,3,3] k = 3 public int[] distinctNumbers(int[] nums, int k) { int n = nums.length; int[] ans = new int[n - k + 1]; int j = 0; Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;Integer, Integer\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { if (i \u0026lt; k - 1) { freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1); } else if (i == k - 1) { freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1); ans[j] = freq.size(); j++; } else { int prevNum = nums[i - k]; Integer prevFreq = freq.get(prevNum); if (prevFreq == 1) { freq.remove(prevNum); } else { freq.put(prevNum, prevFreq - 1); } freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1); ans[j] = freq.size(); j++; } } return ans; } } ","permalink":"https://volyx.in/posts/2021-05-27-distinct-numbers-in-each-subarray/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/distinct-numbers-in-each-subarray/\"\u003e1852. Distinct Numbers in Each Subarray\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums and an integer k, you are asked to construct the array ans of size n-k+1 where ans[i] is the number of distinct numbers in the subarray nums[i:i+k-1] = [nums[i], nums[i+1], \u0026hellip;, nums[i+k-1]].\u003c/p\u003e\n\u003cp\u003eReturn the array ans.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,2,3,2,2,1,3], k = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [3,2,2,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The number of distinct elements in each subarray goes as follows:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[0:2] = [1,2,3] so ans[0] = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[1:3] = [2,3,2] so ans[1] = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[2:4] = [3,2,2] so ans[2] = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[3:5] = [2,2,1] so ans[3] = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[4:6] = [2,1,3] so ans[4] = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,1,1,2,3,4], k = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The number of distinct elements in each subarray goes as follows:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[0:3] = [1,1,1,1] so ans[0] = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[1:4] = [1,1,1,2] so ans[1] = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[2:5] = [1,1,2,3] so ans[2] = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e- nums[3:6] = [1,2,3,4] so ans[3] = 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1852. Distinct Numbers in Each Subarray"},{"content":"938. Range Sum of BST\nGiven the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\n1 2 3 4 5 Example 1: Input: root = [10,5,15,3,7,null,18], low = 7, high = 15 Output: 32 Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32. 1 2 3 4 5 Example 2: Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10 Output: 23 Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23. Constraints:\nThe number of nodes in the tree is in the range [1, 2 * 104]. 1 \u0026lt;= Node.val \u0026lt;= 105 1 \u0026lt;= low \u0026lt;= high \u0026lt;= 105 All Node.val are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int sum = 0; public int rangeSumBST(TreeNode root, int low, int high) { rangeSum(root, low, high); return sum; } void rangeSum(TreeNode node, int lo, int hi) { if (node == null) return; if (node.val \u0026gt;= lo \u0026amp;\u0026amp; node.val \u0026lt;= hi) { sum+=node.val; } rangeSum(node.left, lo, hi); rangeSum(node.right, lo, hi); } } Solution 2022-01-23 Cut nodes 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int rangeSumBST(TreeNode root, int low, int high) { return rangeSum(root, low, high); } int rangeSum(TreeNode node, int lo, int hi) { if (node == null) return 0; if (lo \u0026lt;= node.val \u0026amp;\u0026amp; node.val \u0026lt;= hi) { return node.val + rangeSum(node.left, lo, hi) + rangeSum(node.right, lo, hi); } if (node.val \u0026lt; lo) { return rangeSum(node.right, lo, hi); } if (node.val \u0026gt; hi) { return rangeSum(node.left, lo, hi); } return node.val; } } ","permalink":"https://volyx.in/posts/2021-05-25-range-sum-of-bst/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/range-sum-of-bst/\"\u003e938. Range Sum of BST\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [10,5,15,3,7,null,18], low = 7, high = 15\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 32\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-25-ex1.jpg\"\u003e\u003c/p\u003e","title":"938. Range Sum of BST"},{"content":"472. Concatenated Words\nGiven an array of strings words (without duplicates), return all the concatenated words in the given list of words.\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: words = [\u0026#34;cat\u0026#34;,\u0026#34;cats\u0026#34;,\u0026#34;catsdogcats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;hippopotamuses\u0026#34;,\u0026#34;rat\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;] Output: [\u0026#34;catsdogcats\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;] Explanation: \u0026#34;catsdogcats\u0026#34; can be concatenated by \u0026#34;cats\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cats\u0026#34;; \u0026#34;dogcatsdog\u0026#34; can be concatenated by \u0026#34;dog\u0026#34;, \u0026#34;cats\u0026#34; and \u0026#34;dog\u0026#34;; \u0026#34;ratcatdogcat\u0026#34; can be concatenated by \u0026#34;rat\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cat\u0026#34;. Example 2: Input: words = [\u0026#34;cat\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;catdog\u0026#34;] Output: [\u0026#34;catdog\u0026#34;] Constraints:\n1 \u0026lt;= words.length \u0026lt;= 104 0 \u0026lt;= words[i].length \u0026lt;= 1000 words[i] consists of only lowercase English letters. 0 \u0026lt;= sum(words[i].length) \u0026lt;= 105 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class Solution { public List\u0026lt;String\u0026gt; findAllConcatenatedWordsInADict(String[] words) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); Set\u0026lt;String\u0026gt; set = new HashSet\u0026lt;\u0026gt;(Arrays.asList(words)); for (String word: words) { if (word.length() == 0) continue; set.remove(word); boolean[] dp = new boolean[word.length() + 1]; dp[0] = true; for (int i = 1; i \u0026lt; dp.length; i++) { for (int j = i - 1; j \u0026gt;= 0; j--) { if (dp[j] \u0026amp;\u0026amp; set.contains(word.substring(j, i))) { dp[i] = true; break; } } } if (dp[word.length()]) { res.add(word); } set.add(word); } return res; } public List\u0026lt;String\u0026gt; findAllConcatenatedWordsInADict2(String[] words) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); Arrays.sort(words, (w1, w2) -\u0026gt; Integer.compare(w1.length(), w2.length())); Set\u0026lt;String\u0026gt; set = new HashSet\u0026lt;\u0026gt;(Arrays.asList(words)); for (String word: words) { set.remove(word); if (dfs(word, set, \u0026#34;\u0026#34;)) { res.add(word); } set.add(word); } return res; } boolean dfs(String word, Set\u0026lt;String\u0026gt; set, String prev) { if (set.contains(word)) return true; for (int i = 1; i \u0026lt; word.length(); i++) { String prefix = word.substring(0, i); if (set.contains(prefix)) { String newPrefix = prev + prefix; set.add(newPrefix); if (dfs(word.substring(prefix.length(), word.length()), set, newPrefix)) { return true; } } } return false; } } ","permalink":"https://volyx.in/posts/2021-05-23-concatenated-words/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/concatenated-words/\"\u003e472. Concatenated Words\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of strings words (without duplicates), return all the concatenated words in the given list of words.\u003c/p\u003e\n\u003cp\u003eA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;cat\u0026#34;,\u0026#34;cats\u0026#34;,\u0026#34;catsdogcats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;hippopotamuses\u0026#34;,\u0026#34;rat\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;catsdogcats\u0026#34;,\u0026#34;dogcatsdog\u0026#34;,\u0026#34;ratcatdogcat\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;catsdogcats\u0026#34; can be concatenated by \u0026#34;cats\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cats\u0026#34;; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;dogcatsdog\u0026#34; can be concatenated by \u0026#34;dog\u0026#34;, \u0026#34;cats\u0026#34; and \u0026#34;dog\u0026#34;; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;ratcatdogcat\u0026#34; can be concatenated by \u0026#34;rat\u0026#34;, \u0026#34;cat\u0026#34;, \u0026#34;dog\u0026#34; and \u0026#34;cat\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;cat\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;catdog\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;catdog\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"472. Concatenated Words"},{"content":"216. Combination Sum III\nFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\nOnly numbers 1 through 9 are used. Each number is used at most once. Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 Example 1: Input: k = 3, n = 7 Output: [[1,2,4]] Explanation: 1 + 2 + 4 = 7 There are no other valid combinations. Example 2: Input: k = 3, n = 9 Output: [[1,2,6],[1,3,5],[2,3,4]] Explanation: 1 + 2 + 6 = 9 1 + 3 + 5 = 9 2 + 3 + 4 = 9 There are no other valid combinations. Example 3: Input: k = 4, n = 1 Output: [] Explanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice. Example 4: Input: k = 3, n = 2 Output: [] Explanation: There are no valid combinations. Example 5: Input: k = 9, n = 45 Output: [[1,2,3,4,5,6,7,8,9]] Explanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45 ​​​​​​​There are no other valid combinations. Constraints:\n2 \u0026lt;= k \u0026lt;= 9 1 \u0026lt;= n \u0026lt;= 60 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum3(int k, int n) { List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); search(k, n, 1, current); return res; } void search(int k, int n, int start, List\u0026lt;Integer\u0026gt; current) { if (n \u0026lt; 0) return; if (current.size() \u0026gt; k) return; if (n == 0 \u0026amp;\u0026amp; current.size() == k) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); return; } for (int i = start; i \u0026lt; 10; i++) { int remainder = n - i; if (remainder \u0026lt; 0) continue; current.add(i); search(k, remainder, i + 1, current); current.remove(current.size() - 1); } } } ","permalink":"https://volyx.in/posts/2021-05-22-combination-sum-iii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/combination-sum-iii/\"\u003e216. Combination Sum III\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eFind all valid combinations of k numbers that sum up to n such that the following conditions are true:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eOnly numbers 1 through 9 are used.\u003c/li\u003e\n\u003cli\u003eEach number is used at most once.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: k = 3, n = 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,2,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 + 2 + 4 = 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThere are no other valid combinations.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: k = 3, n = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,2,6],[1,3,5],[2,3,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 + 2 + 6 = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 + 3 + 5 = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2 + 3 + 4 = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThere are no other valid combinations.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: k = 4, n = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: k = 3, n = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are no valid combinations.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: k = 9, n = 45\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,2,3,4,5,6,7,8,9]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e​​​​​​​There are no other valid combinations.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"216. Combination Sum III"},{"content":"39. Combination Sum\nGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Example 1: Input: candidates = [2,3,6,7], target = 7 Output: [[2,2,3],[7]] Explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. These are the only two combinations. Example 2: Input: candidates = [2,3,5], target = 8 Output: [[2,2,2,2],[2,3,3],[3,5]] Example 3: Input: candidates = [2], target = 1 Output: [] Example 4: Input: candidates = [1], target = 1 Output: [[1]] Example 5: Input: candidates = [1], target = 2 Output: [[1,1]] Constraints:\n1 \u0026lt;= candidates.length \u0026lt;= 30 1 \u0026lt;= candidates[i] \u0026lt;= 200 All elements of candidates are distinct. 1 \u0026lt;= target \u0026lt;= 500 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum(int[] candidates, int target) { List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); search(candidates, target, current); return res; } void search(int[] candidates, int target, List\u0026lt;Integer\u0026gt; current) { if (target == 0) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); return; } for (int candidate : candidates) { int remained = target - candidate; if (remained \u0026lt; 0) continue; if (current.size() \u0026gt; 0 \u0026amp;\u0026amp; current.get(current.size() - 1) \u0026gt; candidate) continue; current.add(candidate); search(candidates, remained, current); Integer prev = current.remove(current.size() - 1); } } } Solution 04.06.2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum(int[] candidates, int target) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); back(candidates, 0, target, current, res); return res; } void back(int[] candidates, int index, int target, List\u0026lt;Integer\u0026gt; current, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res ) { if (target == 0) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); return; } for (int i = index; i \u0026lt; candidates.length; i++) { int candidate = candidates[i]; int remainder = target - candidate; if (remainder \u0026lt; 0) continue; if (current.size() \u0026gt; 0 \u0026amp;\u0026amp; candidate \u0026lt; current.get(current.size() - 1)) { continue; } current.add(candidate); back(candidates, index, remainder, current, res); current.remove(current.size() - 1); } } } Solution 2021-10-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum(int[] candidates, int target) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; curr = new ArrayList\u0026lt;\u0026gt;(); Arrays.sort(candidates); back(0, target, candidates, curr, res); return res; } void back(int pos, int target, int[] candidates, List\u0026lt;Integer\u0026gt; curr, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { if (target \u0026lt; 0) return; if (pos == candidates.length) { if (target == 0) { res.add(List.copyOf(curr)); } return; } if (curr.size() \u0026gt; 1 \u0026amp;\u0026amp; (curr.get(curr.size() - 2) \u0026gt; curr.get(curr.size() - 1))) { return; } curr.add(candidates[pos]); // add same back(pos, target - candidates[pos], candidates, curr, res); Integer prev = curr.remove(curr.size() - 1); // skip next back(pos + 1, target, candidates, curr, res); } } ","permalink":"https://volyx.in/posts/2021-05-22-combination-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/combination-sum/\"\u003e39. Combination Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\u003c/p\u003e\n\u003cp\u003eThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\u003c/p\u003e\n\u003cp\u003eIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\u003c/p\u003e","title":"39. Combination Sum"},{"content":"40. Combination Sum II\nGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\nEach number in candidates may only be used once in the combination.\nNote: The solution set must not contain duplicate combinations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: candidates = [10,1,2,7,6,1,5], target = 8 Output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] Example 2: Input: candidates = [2,5,2,1,2], target = 5 Output: [ [1,2,2], [5] ] Constraints:\n1 \u0026lt;= candidates.length \u0026lt;= 100 1 \u0026lt;= candidates[i] \u0026lt;= 50 1 \u0026lt;= target \u0026lt;= 30 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { Set\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new HashSet\u0026lt;\u0026gt;(); // !SET public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum2(int[] candidates, int target) { List\u0026lt;Integer\u0026gt; current = new ArrayList\u0026lt;\u0026gt;(); Arrays.sort(candidates); // !SET search(candidates, 0, target, current); return new ArrayList\u0026lt;\u0026gt;(res); } void search(int[] candidates, int start, int target, List\u0026lt;Integer\u0026gt; current) { if (target == 0) { res.add(new ArrayList\u0026lt;\u0026gt;(current)); // !SET we only add unique arrays lists, order is preserved because we had sorted candidates previously return; } for (int i = start; i \u0026lt; candidates.length; i++) { int remainder = target - candidates[i]; if (remainder \u0026lt; 0) continue; current.add(candidates[i]); search(candidates, i + 1, remainder, current); Integer prev = current.remove(current.size() - 1); } } } ","permalink":"https://volyx.in/posts/2021-05-22-combination-sum-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/combination-sum-ii/\"\u003e40. Combination Sum II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\u003c/p\u003e\n\u003cp\u003eEach number in candidates may only be used once in the combination.\u003c/p\u003e\n\u003cp\u003eNote: The solution set must not contain duplicate combinations.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: candidates = [10,1,2,7,6,1,5], target = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[1,1,6],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[1,2,5],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[1,7],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[2,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: candidates = [2,5,2,1,2], target = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[1,2,2],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"40. Combination Sum II"},{"content":"473. Matchsticks to Square\nYou are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.\n1 2 3 4 5 Example 1: Input: matchsticks = [1,1,2,2,2] Output: true Explanation: You can form a square with length 2, one side of the square came two sticks with length 1. 1 2 3 4 5 Example 2: Input: matchsticks = [3,3,3,3,4] Output: false Explanation: You cannot find a way to form a square with all the matchsticks. Constraints:\n1 \u0026lt;= matchsticks.length \u0026lt;= 15 0 \u0026lt;= matchsticks[i] \u0026lt;= 109 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public boolean makesquare(int[] matchsticks) { if (matchsticks.length \u0026lt; 4) return false; int sum = 0; for (int m: matchsticks) { sum+=m; } Arrays.sort(matchsticks); reverse(matchsticks); if (sum % 4 != 0) return false; int[] sums = new int[4]; return dfs(matchsticks, 0, sums, sum / 4); } boolean dfs(int[] matchsticks, int index, int[] sums, int target) { if (index== matchsticks.length) { return target == sums[0] \u0026amp;\u0026amp; sums[0] == sums[1] \u0026amp;\u0026amp; sums[1] == sums[2] \u0026amp;\u0026amp; sums[2] == sums[3]; } for (int i = 0; i \u0026lt; 4; i++) { if (sums[i] + matchsticks[index] \u0026gt; target) continue; sums[i] += matchsticks[index]; if (dfs(matchsticks, index + 1, sums, target)) return true; sums[i] -= matchsticks[index]; } return false; } void reverse(int[] a) { for (int i = 0; i \u0026lt; a.length / 2; i++) { int j = a.length - i - 1; int temp = a[j]; a[j] = a[i]; a[i] = temp; } } } ","permalink":"https://volyx.in/posts/2021-05-22-matchsticks-to-square/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/matchsticks-to-square/\"\u003e473. Matchsticks to Square\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\u003c/p\u003e\n\u003cp\u003eReturn true if you can make this square and false otherwise.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matchsticks = [1,1,2,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-22-ex1.jpg\"\u003e\u003c/p\u003e","title":"473. Matchsticks to Square"},{"content":"477. Total Hamming Distance\nThe Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: nums = [4,14,2] Output: 6 Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case). The answer will be: HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6. Example 2: Input: nums = [4,14,4] Output: 4 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 105 0 \u0026lt;= nums[i] \u0026lt;= 109 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { /* 0100 1110 0010 ---- 2220 */ public int totalHammingDistance(int[] nums) { int count = 0; for (int k = 0; k \u0026lt; 32; k++) { int zero = 0; int nonZero = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if ((nums[i] \u0026amp; (1 \u0026lt;\u0026lt; k)) \u0026gt; 0) { nonZero++; } else { zero++; } } if (nums.length == zero || nums.length == nonZero) continue; // System.out.println(\u0026#34;k bit zero \u0026#34; + zero + \u0026#34; nonZero \u0026#34; + nonZero); count += nonZero * zero; } return count; } } ","permalink":"https://volyx.in/posts/2021-05-22-total-hamming-distance/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/total-hamming-distance/\"\u003e477. Total Hamming Distance\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe Hamming distance between two integers is the number of positions at which the corresponding bits are different.\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [4,14,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eshowing the four bits relevant in this case).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe answer will be:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [4,14,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"477. Total Hamming Distance"},{"content":"494. Target Sum\nYou are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols \u0026lsquo;+\u0026rsquo; and \u0026lsquo;-\u0026rsquo; before each integer in nums and then concatenate all the integers.\nFor example, if nums = [2, 1], you can add a \u0026lsquo;+\u0026rsquo; before 2 and a \u0026lsquo;-\u0026rsquo; before 1 and concatenate them to build the expression \u0026ldquo;+2-1\u0026rdquo;. Return the number of different expressions that you can build, which evaluates to target.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: nums = [1,1,1,1,1], target = 3 Output: 5 Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3. -1 + 1 + 1 + 1 + 1 = 3 +1 - 1 + 1 + 1 + 1 = 3 +1 + 1 - 1 + 1 + 1 = 3 +1 + 1 + 1 - 1 + 1 = 3 +1 + 1 + 1 + 1 - 1 = 3 Example 2: Input: nums = [1], target = 1 Output: 1 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 20 0 \u0026lt;= nums[i] \u0026lt;= 1000 0 \u0026lt;= sum(nums[i]) \u0026lt;= 1000 -1000 \u0026lt;= target \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { int count = 0; public int findTargetSumWays(int[] nums, int target) { search(nums, 0, 0, target); return count; } void search(int[] nums, int start, int sum, int target) { if (target == sum \u0026amp;\u0026amp; start == nums.length) { count++; return; } if (start \u0026gt;= nums.length) return; search(nums, start + 1, sum + nums[start], target); search(nums, start + 1, sum - nums[start], target); } } ","permalink":"https://volyx.in/posts/2021-05-22-target-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/target-sum/\"\u003e494. Target Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array nums and an integer target.\u003c/p\u003e\n\u003cp\u003eYou want to build an expression out of nums by adding one of the symbols \u0026lsquo;+\u0026rsquo; and \u0026lsquo;-\u0026rsquo; before each integer in nums and then concatenate all the integers.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, if nums = [2, 1], you can add a \u0026lsquo;+\u0026rsquo; before 2 and a \u0026lsquo;-\u0026rsquo; before 1 and concatenate them to build the expression \u0026ldquo;+2-1\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the number of different expressions that you can build, which evaluates to target.\u003c/p\u003e","title":"494. Target Sum"},{"content":"93. Restore IP Addresses\nGiven a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.\nA valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, \u0026ldquo;0.1.2.201\u0026rdquo; and \u0026ldquo;192.168.1.1\u0026rdquo; are valid IP addresses and \u0026ldquo;0.011.255.245\u0026rdquo;, \u0026ldquo;192.168.1.312\u0026rdquo; and \u0026ldquo;192.168@1.1\u0026rdquo; are invalid IP addresses.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: s = \u0026#34;25525511135\u0026#34; Output: [\u0026#34;255.255.11.135\u0026#34;,\u0026#34;255.255.111.35\u0026#34;] Example 2: Input: s = \u0026#34;0000\u0026#34; Output: [\u0026#34;0.0.0.0\u0026#34;] Example 3: Input: s = \u0026#34;1111\u0026#34; Output: [\u0026#34;1.1.1.1\u0026#34;] Example 4: Input: s = \u0026#34;010010\u0026#34; Output: [\u0026#34;0.10.0.10\u0026#34;,\u0026#34;0.100.1.0\u0026#34;] Example 5: Input: s = \u0026#34;101023\u0026#34; Output: [\u0026#34;1.0.10.23\u0026#34;,\u0026#34;1.0.102.3\u0026#34;,\u0026#34;10.1.0.23\u0026#34;,\u0026#34;10.10.2.3\u0026#34;,\u0026#34;101.0.2.3\u0026#34;] Constraints:\n0 \u0026lt;= s.length \u0026lt;= 3000 s consists of digits only. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public List\u0026lt;String\u0026gt; restoreIpAddresses(String s) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); restore(s, \u0026#34;\u0026#34;, 0, res); return res; } void restore(String s, String ip, int index, List\u0026lt;String\u0026gt; res) { if (s.length() == 0) { if (index == 4) res.add(ip); return; } if (index \u0026gt; 4) return; String digit = s.substring(0, 1); String octet = ip.length() == 0 ? digit: ip + \u0026#34;.\u0026#34; + digit; restore(s.substring(1, s.length()), octet, index + 1, res); if (s.startsWith(\u0026#34;0\u0026#34;)) return; if (s.length() \u0026gt; 1) { String twoDigits = s.substring(0, 2); octet = ip.length() == 0 ? twoDigits: ip + \u0026#34;.\u0026#34; + twoDigits; restore(s.substring(2, s.length()), octet, index + 1, res); } if (s.length() \u0026gt; 2) { String threeDigits = s.substring(0, 3); octet = ip.length() == 0 ? threeDigits: ip + \u0026#34;.\u0026#34; + threeDigits; if (Integer.valueOf(threeDigits) \u0026lt;= 255) { restore(s.substring(3, s.length()), octet, index + 1, res); } } } } ","permalink":"https://volyx.in/posts/2021-05-21-restore-ip-addresses/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/restore-ip-addresses/\"\u003e93. Restore IP Addresses\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.\u003c/p\u003e\n\u003cp\u003eA valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, \u0026ldquo;0.1.2.201\u0026rdquo; and \u0026ldquo;192.168.1.1\u0026rdquo; are valid IP addresses and \u0026ldquo;0.011.255.245\u0026rdquo;, \u0026ldquo;192.168.1.312\u0026rdquo; and \u0026ldquo;\u003ca href=\"mailto:192.168@1.1\"\u003e192.168@1.1\u003c/a\u003e\u0026rdquo; are invalid IP addresses.\u003c/p\u003e","title":"93. Restore IP Addresses"},{"content":"139. Word Break\nGiven a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: s = \u0026#34;leetcode\u0026#34;, wordDict = [\u0026#34;leet\u0026#34;,\u0026#34;code\u0026#34;] Output: true Explanation: Return true because \u0026#34;leetcode\u0026#34; can be segmented as \u0026#34;leet code\u0026#34;. Example 2: Input: s = \u0026#34;applepenapple\u0026#34;, wordDict = [\u0026#34;apple\u0026#34;,\u0026#34;pen\u0026#34;] Output: true Explanation: Return true because \u0026#34;applepenapple\u0026#34; can be segmented as \u0026#34;apple pen apple\u0026#34;. Note that you are allowed to reuse a dictionary word. Example 3: Input: s = \u0026#34;catsandog\u0026#34;, wordDict = [\u0026#34;cats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;sand\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;cat\u0026#34;] Output: false Constraints:\n1 \u0026lt;= s.length \u0026lt;= 300 1 \u0026lt;= wordDict.length \u0026lt;= 1000 1 \u0026lt;= wordDict[i].length \u0026lt;= 20 s and wordDict[i] consist of only lowercase English letters. All the strings of wordDict are unique. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public boolean wordBreak2(String s, List\u0026lt;String\u0026gt; wordDict) { Map\u0026lt;String, Boolean\u0026gt; memo = new HashMap\u0026lt;\u0026gt;(); return search(s, wordDict, memo); } private boolean search(String s, List\u0026lt;String\u0026gt; wordDict, Map\u0026lt;String, Boolean\u0026gt; memo ) { if (s.length() == 0) { return true; } for (String key: wordDict) { if (s.startsWith(key)) { boolean find; String substr = s.substring(key.length(), s.length()); if (memo.containsKey(substr)) { find = memo.get(substr); } else { find = search(substr, wordDict, memo); } memo.put(substr, find); if (find) return true; } } return false; } public boolean wordBreak(String s, List\u0026lt;String\u0026gt; wordDict) { boolean[] dp = new boolean[s.length() + 1]; dp[0] = true; for (int i = 1; i \u0026lt; s.length() + 1; i++) { for (int j = 0; j \u0026lt; i; j++) { if (dp[j] \u0026amp;\u0026amp; wordDict.indexOf(s.substring(j, i)) \u0026gt;=0 ) { dp[i] = true; break; } } } System.out.println(Arrays.toString(dp)); return dp[s.length()]; } } Solution 2021-10-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public boolean wordBreak(String s, List\u0026lt;String\u0026gt; wordDict) { Map\u0026lt;String, Boolean\u0026gt; memo = new HashMap\u0026lt;\u0026gt;(); return wordBreak(s, 0, wordDict, memo); } boolean wordBreak(String s, int index, List\u0026lt;String\u0026gt; words, Map\u0026lt;String, Boolean\u0026gt; memo) { if (s.length() == index) { return true; } for (String word: words) { if (s.startsWith(word, index)) { boolean isBreak = false; String subStr = s.substring(index, index + word.length()); if (memo.containsKey(subStr)) { isBreak = memo.get(subStr); } else { isBreak = wordBreak(s, index + word.length(), words, memo); } memo.put(subStr, isBreak); if (isBreak) { return true; } } } return false; } } Solution Boolean[] array dp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public boolean wordBreak(String s, List\u0026lt;String\u0026gt; wordDict) { Boolean[] memo = new Boolean[s.length() + 1]; return wordBreak(s, 0, wordDict, memo); } boolean wordBreak(String s, int index, List\u0026lt;String\u0026gt; words, Boolean[] memo) { if (s.length() == index) { return true; } for (String word: words) { if (s.startsWith(word, index)) { boolean isBreak = false; if (memo[index + word.length()] != null) { isBreak = memo[index + word.length()]; } else { isBreak = wordBreak(s, index + word.length(), words, memo); } memo[index + word.length()] = isBreak; if (isBreak) { return true; } } } return false; } } Solution 2022-01-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public boolean wordBreak(String s, List\u0026lt;String\u0026gt; wordDict) { Boolean[] memo = new Boolean[s.length() + 1]; return wordBreak(0, s, wordDict, memo); } boolean wordBreak(int index, String s, List\u0026lt;String\u0026gt; wordDict, Boolean[] memo) { if (index == s.length()) { return true; } for (String prefix: wordDict) { if (s.startsWith(prefix, index)) { int remainIndex = index + prefix.length(); boolean res = false; if (memo[remainIndex] != null) { res = memo[remainIndex]; } else { res = wordBreak(remainIndex, s, wordDict, memo); } memo[remainIndex] = res; if (res) { return true; } } } return false; } } Solution BFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 public boolean wordBreak(String s, List\u0026lt;String\u0026gt; wordDict) { Set\u0026lt;String\u0026gt; wordSet = new HashSet(wordDict); boolean[] visited = new boolean[s.length()]; Queue\u0026lt;Integer\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(0); while (q.size() \u0026gt; 0) { int start = q.poll(); if (visited[start]) { continue; } for (String word: wordDict) { if (s.startsWith(word, start)) { q.add(start + word.length()); if (start + word.length() == s.length()) { return true; } } } visited[start] = true; } return false; } ","permalink":"https://volyx.in/posts/2021-05-20-word-break/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/word-break/\"\u003e139. Word Break\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\u003c/p\u003e\n\u003cp\u003eNote that the same word in the dictionary may be reused multiple times in the segmentation.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;leetcode\u0026#34;, wordDict = [\u0026#34;leet\u0026#34;,\u0026#34;code\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Return true because \u0026#34;leetcode\u0026#34; can be segmented as \u0026#34;leet code\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;applepenapple\u0026#34;, wordDict = [\u0026#34;apple\u0026#34;,\u0026#34;pen\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Return true because \u0026#34;applepenapple\u0026#34; can be segmented as \u0026#34;apple pen apple\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that you are allowed to reuse a dictionary word.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;catsandog\u0026#34;, wordDict = [\u0026#34;cats\u0026#34;,\u0026#34;dog\u0026#34;,\u0026#34;sand\u0026#34;,\u0026#34;and\u0026#34;,\u0026#34;cat\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"139. Word Break"},{"content":"322. Coin Change\nYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Example 1: Input: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2: Input: coins = [2], amount = 3 Output: -1 Example 3: Input: coins = [1], amount = 0 Output: 0 Example 4: Input: coins = [1], amount = 1 Output: 1 Example 5: Input: coins = [1], amount = 2 Output: 2 Constraints:\n1 \u0026lt;= coins.length \u0026lt;= 12 1 \u0026lt;= coins[i] \u0026lt;= 231 - 1 0 \u0026lt;= amount \u0026lt;= 104 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int coinChange(int[] coins, int n) { int[] dp = new int[n + 1]; Arrays.fill(dp, 10_000); dp[0] = 0; for (int i = 1; i \u0026lt; n + 1; i++) { for (int coin: coins) { if (i - coin \u0026gt;= 0) { if (dp[i-coin] == 10_000) { continue; } dp[i] = Math.min(dp[i-coin] + 1, dp[i]); } } } System.out.println(Arrays.toString(dp)); return dp[n] == 10_000 ? -1: dp[n]; } } ","permalink":"https://volyx.in/posts/2021-05-20-coin-change/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/word-break/\"\u003e322. Coin Change\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\u003c/p\u003e\n\u003cp\u003eReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\u003c/p\u003e\n\u003cp\u003eYou may assume that you have an infinite number of each kind of coin.\u003c/p\u003e","title":"322. Coin Change"},{"content":"328. Odd Even Linked List\nGiven the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\n1 2 3 4 Example 1: Input: head = [1,2,3,4,5] Output: [1,3,5,2,4] 1 2 3 4 Example 2: Input: head = [2,1,3,5,6,4,7] Output: [2,3,6,7,1,5,4] Constraints:\nThe number of nodes in the linked list is in the range [0, 104]. -106 \u0026lt;= Node.val \u0026lt;= 106 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode oddEvenList(ListNode head) { if (head == null || head.next == null) return head; /// 0 1 2 3 4 5 /// ListNode odd = head; // 0 --\u0026gt; 2 -- 4 ListNode oddHead = odd; // 0 ListNode even = head.next; // 1 -- 3 -- 5 ListNode evenHead = even; // 1 int counter = 2; ListNode node = even.next; // 2 // 2 while (node != null) { if (counter % 2 == 0) { odd.next = node; odd = odd.next; } else { even.next = node; even = even.next; } counter++; node = node.next; } // oddHead--\u0026gt;...----\u0026gt; evenHead---\u0026gt;....--\u0026gt;--------\u0026gt;null // 0 --\u0026gt; 2 -- 4 -- 1 -- 3 -- 5 odd.next = evenHead; even.next = null; head = oddHead; return oddHead; } } ","permalink":"https://volyx.in/posts/2021-05-20-odd-even-linked-list/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/odd-even-linked-list/\"\u003e328. Odd Even Linked List\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\u003c/p\u003e\n\u003cp\u003eThe first node is considered odd, and the second node is even, and so on.\u003c/p\u003e\n\u003cp\u003eNote that the relative order inside both the even and odd groups should remain as it was in the input.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [1,2,3,4,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3,5,2,4]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-20-ex1.jpg\"\u003e\u003c/p\u003e","title":"328. Odd Even Linked List"},{"content":"91. Decode Ways\nA message containing letters from A-Z can be encoded into numbers using the following mapping:\n\u0026lsquo;A\u0026rsquo; -\u0026gt; \u0026ldquo;1\u0026rdquo; \u0026lsquo;B\u0026rsquo; -\u0026gt; \u0026ldquo;2\u0026rdquo; \u0026hellip; \u0026lsquo;Z\u0026rsquo; -\u0026gt; \u0026ldquo;26\u0026rdquo;\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \u0026ldquo;11106\u0026rdquo; can be mapped into:\n\u0026ldquo;AAJF\u0026rdquo; with the grouping (1 1 10 6) \u0026ldquo;KJF\u0026rdquo; with the grouping (11 10 6) Note that the grouping (1 11 06) is invalid because \u0026ldquo;06\u0026rdquo; cannot be mapped into \u0026lsquo;F\u0026rsquo; since \u0026ldquo;6\u0026rdquo; is different from \u0026ldquo;06\u0026rdquo;.\nGiven a string s containing only digits, return the number of ways to decode it.\nThe answer is guaranteed to fit in a 32-bit integer.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Example 1: Input: s = \u0026#34;12\u0026#34; Output: 2 Explanation: \u0026#34;12\u0026#34; could be decoded as \u0026#34;AB\u0026#34; (1 2) or \u0026#34;L\u0026#34; (12). Example 2: Input: s = \u0026#34;226\u0026#34; Output: 3 Explanation: \u0026#34;226\u0026#34; could be decoded as \u0026#34;BZ\u0026#34; (2 26), \u0026#34;VF\u0026#34; (22 6), or \u0026#34;BBF\u0026#34; (2 2 6). Example 3: Input: s = \u0026#34;0\u0026#34; Output: 0 Explanation: There is no character that is mapped to a number starting with 0. The only valid mappings with 0 are \u0026#39;J\u0026#39; -\u0026gt; \u0026#34;10\u0026#34; and \u0026#39;T\u0026#39; -\u0026gt; \u0026#34;20\u0026#34;, neither of which start with 0. Hence, there are no valid ways to decode this since all digits need to be mapped. Example 4: Input: s = \u0026#34;06\u0026#34; Output: 0 Explanation: \u0026#34;06\u0026#34; cannot be mapped to \u0026#34;F\u0026#34; because of the leading zero (\u0026#34;6\u0026#34; is different from \u0026#34;06\u0026#34;). Constraints:\n1 \u0026lt;= s.length \u0026lt;= 100 s contains only digits and may contain leading zero(s). Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { Map\u0026lt;String, Integer\u0026gt; memo = new HashMap\u0026lt;\u0026gt;(); public int numDecodings(String s) { if (s.length() == 0) return 1; if (s.startsWith(\u0026#34;0\u0026#34;)) return 0; if (memo.containsKey(s)) return memo.get(s); if (s.length() == 1) return 1; String oneDigitString = s.substring(1, s.length()); int value = numDecodings(oneDigitString); memo.put(oneDigitString, value); if (s.length() \u0026gt; 1 \u0026amp;\u0026amp; Integer.valueOf(s.substring(0, 2)) \u0026lt; 27) { String twoDigitString = s.substring(2, s.length()); int value2= numDecodings(twoDigitString); memo.put(twoDigitString, value2); value += value2; } memo.put(s, value); return value; } } ","permalink":"https://volyx.in/posts/2021-05-20-decode-ways/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/decode-ways/\"\u003e91. Decode Ways\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA message containing letters from A-Z can be encoded into numbers using the following mapping:\u003c/p\u003e\n\u003cp\u003e\u0026lsquo;A\u0026rsquo; -\u0026gt; \u0026ldquo;1\u0026rdquo;\n\u0026lsquo;B\u0026rsquo; -\u0026gt; \u0026ldquo;2\u0026rdquo;\n\u0026hellip;\n\u0026lsquo;Z\u0026rsquo; -\u0026gt; \u0026ldquo;26\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \u0026ldquo;11106\u0026rdquo; can be mapped into:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;AAJF\u0026rdquo; with the grouping (1 1 10 6)\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;KJF\u0026rdquo; with the grouping (11 10 6)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote that the grouping (1 11 06) is invalid because \u0026ldquo;06\u0026rdquo; cannot be mapped into \u0026lsquo;F\u0026rsquo; since \u0026ldquo;6\u0026rdquo; is different from \u0026ldquo;06\u0026rdquo;.\u003c/p\u003e","title":"91. Decode Ways"},{"content":"276. Paint Fence\nYou are painting a fence of n posts with k different colors. You must paint the posts following these rules:\nEvery post must be painted exactly one color. At most one pair of adjacent fence posts can have the same color. Given the two integers n and k, return the number of ways you can paint the fence.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: n = 3, k = 2 Output: 6 Explanation: All the possibilities are shown. Note that painting all the posts red or all the posts green is invalid because there can only be at most one pair of adjacent posts that are the same color. Example 2: Input: n = 1, k = 1 Output: 1 Example 3: Input: n = 7, k = 2 Output: 42 Constraints:\n1 \u0026lt;= n \u0026lt;= 50 1 \u0026lt;= k \u0026lt;= 105 The answer is guaranteed to be in the range [0, 231 - 1] for the given n and k. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int uniquePathsWithObstacles(int[][] obstacleGrid) { int n = obstacleGrid.length; int m = obstacleGrid[0].length; int[][] dp = new int[n][m]; dp[0][0] = 1; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (obstacleGrid[i][j] == 1) { dp[i][j] = 0; continue; } if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { dp[i][j] = dp[i-1][j]+dp[i][j-1]; } else if (i \u0026gt; 0) { dp[i][j] = dp[i-1][j]; } else if (j \u0026gt; 0) { dp[i][j] = dp[i][j-1]; } } } return dp[n-1][m-1]; } } ","permalink":"https://volyx.in/posts/2021-05-17-paint-fence/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/paint-fence/\"\u003e276. Paint Fence\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are painting a fence of n posts with k different colors. You must paint the posts following these rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEvery post must be painted exactly one color.\u003c/li\u003e\n\u003cli\u003eAt most one pair of adjacent fence posts can have the same color.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven the two integers n and k, return the number of ways you can paint the fence.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 3, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: All the possibilities are shown.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that painting all the posts red or all the posts green is invalid because there can only be at most one pair of adjacent posts that are the same color.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 1, k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 7, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 42\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-17-ex1.png\"\u003e\u003c/p\u003e","title":"276. Paint Fence"},{"content":"63. Unique Paths II\nA robot is located at the top-left corner of a m x n grid (marked \u0026lsquo;Start\u0026rsquo; in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \u0026lsquo;Finish\u0026rsquo; in the diagram below).\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\nAn obstacle and space is marked as 1 and 0 respectively in the grid.\n1 2 3 4 5 6 7 8 Example 1: Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2 Explanation: There is one obstacle in the middle of the 3x3 grid above. There are two ways to reach the bottom-right corner: 1. Right -\u0026gt; Right -\u0026gt; Down -\u0026gt; Down 2. Down -\u0026gt; Down -\u0026gt; Right -\u0026gt; Right 1 2 3 4 Example 2: Input: obstacleGrid = [[0,1],[0,0]] Output: 1 Constraints:\nm == obstacleGrid.length n == obstacleGrid[i].length 1 \u0026lt;= m, n \u0026lt;= 100 obstacleGrid[i][j] is 0 or 1. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int uniquePathsWithObstacles(int[][] obstacleGrid) { int n = obstacleGrid.length; int m = obstacleGrid[0].length; int[][] dp = new int[n][m]; dp[0][0] = 1; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (obstacleGrid[i][j] == 1) { dp[i][j] = 0; continue; } if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { dp[i][j] = dp[i-1][j]+dp[i][j-1]; } else if (i \u0026gt; 0) { dp[i][j] = dp[i-1][j]; } else if (j \u0026gt; 0) { dp[i][j] = dp[i][j-1]; } } } return dp[n-1][m-1]; } } ","permalink":"https://volyx.in/posts/2021-05-16-unique-paths-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/unique-paths-ii/\"\u003e63. Unique Paths II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA robot is located at the top-left corner of a m x n grid (marked \u0026lsquo;Start\u0026rsquo; in the diagram below).\u003c/p\u003e\n\u003cp\u003eThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \u0026lsquo;Finish\u0026rsquo; in the diagram below).\u003c/p\u003e\n\u003cp\u003eNow consider if some obstacles are added to the grids. How many unique paths would there be?\u003c/p\u003e","title":"63. Unique Paths II"},{"content":"64. Minimum Path Sum\nGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\n1 2 3 4 5 Example 1: Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7 Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum. 1 2 3 4 Example 2: Input: grid = [[1,2,3],[4,5,6]] Output: 12 Constraints:\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 200 0 \u0026lt;= grid[i][j] \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int minPathSum(int[][] grid) { int n = grid.length; int m = grid[0].length; int[][] dp = new int[n][m]; dp[0][0] = grid[0][0]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { dp[i][j] = grid[i][j] + Math.min(dp[i-1][j],dp[i][j-1]); } else if (i \u0026gt; 0) { dp[i][j] = grid[i][j] + dp[i-1][j]; } else if (j \u0026gt; 0) { dp[i][j] = grid[i][j] + dp[i][j-1]; } } } return dp[n - 1][m - 1]; } } ","permalink":"https://volyx.in/posts/2021-05-16-minimum-path-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-path-sum/\"\u003e64. Minimum Path Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\u003c/p\u003e\n\u003cp\u003eNote: You can only move either down or right at any point in time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-16-ex1.jpg\"\u003e\u003c/p\u003e","title":"64. Minimum Path Sum"},{"content":"1859. Sorting the Sentence\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\nFor example, the sentence \u0026ldquo;This is a sentence\u0026rdquo; can be shuffled as \u0026ldquo;sentence4 a3 is2 This1\u0026rdquo; or \u0026ldquo;is2 sentence4 This1 a3\u0026rdquo;. Given a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: s = \u0026#34;is2 sentence4 This1 a3\u0026#34; Output: \u0026#34;This is a sentence\u0026#34; Explanation: Sort the words in s to their original positions \u0026#34;This1 is2 a3 sentence4\u0026#34;, then remove the numbers. Example 2: Input: s = \u0026#34;Myself2 Me1 I4 and3\u0026#34; Output: \u0026#34;Me Myself and I\u0026#34; Explanation: Sort the words in s to their original positions \u0026#34;Me1 Myself2 and3 I4\u0026#34;, then remove the numbers. Constraints:\n2 \u0026lt;= s.length \u0026lt;= 200 s consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9. The number of words in s is between 1 and 9. The words in s are separated by a single space. s contains no leading or trailing spaces. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public String sortSentence(String s) { String[] words = s.split(\u0026#34; \u0026#34;); int n = words.length; String[] newWords = new String[n]; for (int i = 0; i \u0026lt; words.length; i++) { Integer index = Integer.valueOf(words[i].substring(words[i].length() - 1, words[i].length())); newWords[index - 1] = words[i].substring(0, words[i].length() - 1); } StringBuilder sb = new StringBuilder(); int i = 0; for (String w: newWords) { sb.append(w); if (i != n - 1) { sb.append(\u0026#34; \u0026#34;); } i++; } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-05-15-sorting-the-sentence/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/sorting-the-sentence/\"\u003e1859. Sorting the Sentence\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\u003c/p\u003e\n\u003cp\u003eA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, the sentence \u0026ldquo;This is a sentence\u0026rdquo; can be shuffled as \u0026ldquo;sentence4 a3 is2 This1\u0026rdquo; or \u0026ldquo;is2 sentence4 This1 a3\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.\u003c/p\u003e","title":"1859. Sorting the Sentence"},{"content":"1860. Incremental Memory Leak\nYou are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: memory1 = 2, memory2 = 2 Output: [3,1,0] Explanation: The memory is allocated as follows: - At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory. - At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory. - At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively. Example 2: Input: memory1 = 8, memory2 = 11 Output: [6,0,4] Explanation: The memory is allocated as follows: - At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory. - At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory. - At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory. - At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory. - At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory. - At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively. Constraints:\n0 \u0026lt;= memory1, memory2 \u0026lt;= 231 - 1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int[] memLeak(int memory1, int memory2) { int count = 0; int bits = 1; while (memory1 - bits \u0026gt;= 0 || memory2 - bits \u0026gt;= 0) { if (memory1 \u0026gt;= memory2) { memory1 -= bits; } else { memory2 -= bits; } count++; bits++; } return new int[] {count + 1, memory1, memory2}; } } ","permalink":"https://volyx.in/posts/2021-05-15-incremental-memory-leak/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/incremental-memory-leak/\"\u003e1860. Incremental Memory Leak\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\u003c/p\u003e\n\u003cp\u003eAt the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\u003c/p\u003e","title":"1860. Incremental Memory Leak"},{"content":"1861. Rotating the Box\nYou are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\nA stone \u0026lsquo;#\u0026rsquo; A stationary obstacle \u0026lsquo;*\u0026rsquo; Empty \u0026lsquo;.\u0026rsquo; The box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles\u0026rsquo; positions, and the inertia from the box\u0026rsquo;s rotation does not affect the stones\u0026rsquo; horizontal positions.\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.\n1 2 3 4 5 6 Example 1: Input: box = [[\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;#\u0026#34;]] Output: [[\u0026#34;.\u0026#34;], [\u0026#34;#\u0026#34;], [\u0026#34;#\u0026#34;]] 1 2 3 4 5 6 7 8 Example 2: Input: box = [[\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;.\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;.\u0026#34;]] Output: [[\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;], [\u0026#34;*\u0026#34;,\u0026#34;*\u0026#34;], [\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;]] 1 2 3 4 5 6 7 8 9 10 11 Example 3: Input: box = [[\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;.\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;]] Output: [[\u0026#34;.\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;], [\u0026#34;.\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;#\u0026#34;,\u0026#34;*\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;*\u0026#34;,\u0026#34;.\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;*\u0026#34;], [\u0026#34;#\u0026#34;,\u0026#34;.\u0026#34;,\u0026#34;.\u0026#34;]] Constraints:\nm == box.length n == box[i].length 1 \u0026lt;= m, n \u0026lt;= 500 box[i][j] is either \u0026lsquo;#\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, or \u0026lsquo;.\u0026rsquo;. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public char[][] rotateTheBox(char[][] box) { int n = box.length; int m = box[0].length; char[][] res = new char[m][n]; for(int i = 0; i \u0026lt; n; ++i){ for(int j = m - 1; j \u0026gt;= 0; --j) res[j][n-i-1] = box[i][j]; } for (int j = res[0].length - 1; j \u0026gt;= 0; j--) { int cut = res.length - 1; for (int i = res.length - 1; i \u0026gt;= 0; i--) { char c = res[i][j]; if (c == \u0026#39;*\u0026#39;) { cut = i - 1; } else if (c == \u0026#39;#\u0026#39;) { res[i][j] = \u0026#39;.\u0026#39;; res[cut][j] = \u0026#39;#\u0026#39;; cut--; } } } return res; } } ","permalink":"https://volyx.in/posts/2021-05-15-rotating-the-box/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/rotating-the-box/\"\u003e1861. Rotating the Box\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA stone \u0026lsquo;#\u0026rsquo;\u003c/li\u003e\n\u003cli\u003eA stationary obstacle \u0026lsquo;*\u0026rsquo;\u003c/li\u003e\n\u003cli\u003eEmpty \u0026lsquo;.\u0026rsquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles\u0026rsquo; positions, and the inertia from the box\u0026rsquo;s rotation does not affect the stones\u0026rsquo; horizontal positions.\u003c/p\u003e","title":"1861. Rotating the Box"},{"content":"198. House Robber\nYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example 1: Input: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2: Input: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 400 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int rob(int[] nums) { int n = nums.length; if (n == 1) return nums[0]; int[] dp = new int[n + 1]; dp[0] = nums[0]; dp[1] = nums[1]; int max = Math.max(dp[0], dp[1]); for (int i = 2; i \u0026lt; n + 1; i++) { int value = (i \u0026lt; n) ? nums[i]: 0; for (int j = i - 2; j \u0026gt;= 0; j--) { dp[i] = Math.max(dp[j] + value, dp[i]); } max = Math.max(dp[i], max); } return max; } } ","permalink":"https://volyx.in/posts/2021-05-15-house-robber/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/house-robber/\"\u003e198. House Robber\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\u003c/p\u003e","title":"198. House Robber"},{"content":"746. Min Cost Climbing Stairs\nYou are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: cost = [10,15,20] Output: 15 Explanation: Cheapest is: start on cost[1], pay that cost, and go to the top. Example 2: Input: cost = [1,100,1,1,1,100,1,1,100,1] Output: 6 Explanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3]. Constraints:\n2 \u0026lt;= cost.length \u0026lt;= 1000 0 \u0026lt;= cost[i] \u0026lt;= 999 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public int minCostClimbingStairs2(int[] cost) { int n = cost.length; int[] dp = new int[n + 1]; dp[0] = cost[0]; dp[1] = cost[1]; for (int i = 2; i \u0026lt; n + 1; i++) { int value = i \u0026lt; n ? cost[i]: 0; dp[i] = value + Math.min(dp[i - 1], dp[i - 2]); } return dp[n]; } // [a, b, c] // [..,a, b, c] // public int minCostClimbingStairs(int[] cost) { int n = cost.length; int a = 0; int b = 0; int curr = 0; for (int i = 0; i \u0026lt; n + 1; i++) { int value = i \u0026lt; n ? cost[i]: 0; curr = value + Math.min(a, b); a = b; b = curr; } return curr; } } ","permalink":"https://volyx.in/posts/2021-05-15-min-cost-climbing-stairs/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/min-cost-climbing-stairs/\"\u003e746. Min Cost Climbing Stairs\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\u003c/p\u003e\n\u003cp\u003eYou can either start from the step with index 0, or the step with index 1.\u003c/p\u003e\n\u003cp\u003eReturn the minimum cost to reach the top of the floor.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: cost = [10,15,20]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 15\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Cheapest is: start on cost[1], pay that cost, and go to the top.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: cost = [1,100,1,1,1,100,1,1,100,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"746. Min Cost Climbing Stairs"},{"content":"438. Find All Anagrams in a String\nGiven two strings s and p, return an array of all the start indices of p\u0026rsquo;s anagrams in s. You may return the answer in any order.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: s = \u0026#34;cbaebabacd\u0026#34;, p = \u0026#34;abc\u0026#34; Output: [0,6] Explanation: The substring with start index = 0 is \u0026#34;cba\u0026#34;, which is an anagram of \u0026#34;abc\u0026#34;. The substring with start index = 6 is \u0026#34;bac\u0026#34;, which is an anagram of \u0026#34;abc\u0026#34;. Example 2: Input: s = \u0026#34;abab\u0026#34;, p = \u0026#34;ab\u0026#34; Output: [0,1,2] Explanation: The substring with start index = 0 is \u0026#34;ab\u0026#34;, which is an anagram of \u0026#34;ab\u0026#34;. The substring with start index = 1 is \u0026#34;ba\u0026#34;, which is an anagram of \u0026#34;ab\u0026#34;. The substring with start index = 2 is \u0026#34;ab\u0026#34;, which is an anagram of \u0026#34;ab\u0026#34;. Constraints:\n1 \u0026lt;= s.length, p.length \u0026lt;= 3 * 104 s and p consist of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public List\u0026lt;Integer\u0026gt; findAnagrams(String s, String p) { int[] freq = new int[26]; int[] sfreq = new int[26]; int len = p.length(); List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); if (len \u0026gt; s.length()) { return res; } for (int i = 0; i \u0026lt; len; i++) { sfreq[s.charAt(i) - \u0026#39;a\u0026#39;]++; freq[p.charAt(i) - \u0026#39;a\u0026#39;]++; } if (Arrays.equals(freq, sfreq)) { res.add(0); } for (int i = len; i \u0026lt; s.length(); i++) { sfreq[s.charAt(i) - \u0026#39;a\u0026#39;]++; sfreq[s.charAt(i - len) - \u0026#39;a\u0026#39;]--; if (Arrays.equals(freq, sfreq)) { res.add(i - len + 1); } } return res; } } ","permalink":"https://volyx.in/posts/2021-05-11-find-all-anagrams-in-a-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/\"\u003e438. Find All Anagrams in a String\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings s and p, return an array of all the start indices of p\u0026rsquo;s anagrams in s. You may return the answer in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;cbaebabacd\u0026#34;, p = \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe substring with start index = 0 is \u0026#34;cba\u0026#34;, which is an anagram of \u0026#34;abc\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe substring with start index = 6 is \u0026#34;bac\u0026#34;, which is an anagram of \u0026#34;abc\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abab\u0026#34;, p = \u0026#34;ab\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe substring with start index = 0 is \u0026#34;ab\u0026#34;, which is an anagram of \u0026#34;ab\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe substring with start index = 1 is \u0026#34;ba\u0026#34;, which is an anagram of \u0026#34;ab\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe substring with start index = 2 is \u0026#34;ab\u0026#34;, which is an anagram of \u0026#34;ab\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"438. Find All Anagrams in a String"},{"content":"66. Plus One\nGiven a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Example 1: Input: digits = [1,2,3] Output: [1,2,4] Explanation: The array represents the integer 123. Example 2: Input: digits = [4,3,2,1] Output: [4,3,2,2] Explanation: The array represents the integer 4321. Example 3: Input: digits = [0] Output: [1] Constraints:\n1 \u0026lt;= digits.length \u0026lt;= 100 0 \u0026lt;= digits[i] \u0026lt;= 9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int[] plusOne(int[] digits) { for (int i = digits.length - 1; i \u0026gt;=0; i--) { if (digits[i] \u0026lt; 9) { digits[i]++; return digits; } digits[i] = 0; } int[] res = new int[digits.length + 1]; res[0] = 1; return res; } } ","permalink":"https://volyx.in/posts/2021-05-11-plus-one/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/plus-one/\"\u003e66. Plus One\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\u003c/p\u003e\n\u003cp\u003eThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\u003c/p\u003e\n\u003cp\u003eYou may assume the integer does not contain any leading zero, except the number 0 itself.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: digits = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The array represents the integer 123.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: digits = [4,3,2,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,3,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The array represents the integer 4321.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: digits = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"66. Plus One"},{"content":"1208. Get Equal Substrings Within Budget\nYou are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.\nYou are also given an integer maxCost.\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.\nIf there is no substring from s that can be changed to its corresponding substring from t, return 0.\n1 2 3 4 5 Example 1: Input: s = \u0026#34;abcd\u0026#34;, t = \u0026#34;bcdf\u0026#34;, maxCost = 3 Output: 3 Explanation: \u0026#34;abc\u0026#34; of s can change to \u0026#34;bcd\u0026#34;. That costs 3, so the maximum length is 3. 1 2 3 4 5 Example 2: Input: s = \u0026#34;abcd\u0026#34;, t = \u0026#34;cdef\u0026#34;, maxCost = 3 Output: 1 Explanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1. 1 2 3 4 5 Example 3: Input: s = \u0026#34;abcd\u0026#34;, t = \u0026#34;acde\u0026#34;, maxCost = 0 Output: 1 Explanation: You can\u0026#39;t make any change, so the maximum length is 1. Constraints:\n1 \u0026lt;= s.length, t.length \u0026lt;= 10^5 0 \u0026lt;= maxCost \u0026lt;= 10^6 s and t only contain lower case English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public int equalSubstring(String s, String t, int maxCost) { int n = s.length(); char[] source = s.toCharArray(); char[] target = t.toCharArray(); int max = 0; int cost = 0; int j = 0; for (int i = 0; i \u0026lt; n; i++) { while (i + j \u0026lt; n) { int diff = Math.abs(source[i + j] - target[i + j]); if (diff + cost \u0026gt; maxCost) { break; } cost += diff; j++; } if (j \u0026gt; 0) { max = Math.max(max, j); cost = cost - Math.abs(source[i] - target[i]); j--; } } return max; } } ","permalink":"https://volyx.in/posts/2021-05-10-get-equal-substrings-within-budget/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/get-equal-substrings-within-budget/\"\u003e1208. Get Equal Substrings Within Budget\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two strings s and t of the same length. You want to change s to t. Changing the i-th character of s to i-th character of t costs |s[i] - t[i]| that is, the absolute difference between the ASCII values of the characters.\u003c/p\u003e\n\u003cp\u003eYou are also given an integer maxCost.\u003c/p\u003e\n\u003cp\u003eReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of twith a cost less than or equal to maxCost.\u003c/p\u003e","title":"1208. Get Equal Substrings Within Budget"},{"content":"1342. Number of Steps to Reduce a Number to Zero\nGiven a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: num = 14 Output: 6 Explanation: Step 1) 14 is even; divide by 2 and obtain 7. Step 2) 7 is odd; subtract 1 and obtain 6. Step 3) 6 is even; divide by 2 and obtain 3. Step 4) 3 is odd; subtract 1 and obtain 2. Step 5) 2 is even; divide by 2 and obtain 1. Step 6) 1 is odd; subtract 1 and obtain 0. 1 2 3 4 5 6 7 8 9 Example 2: Input: num = 8 Output: 4 Explanation: Step 1) 8 is even; divide by 2 and obtain 4. Step 2) 4 is even; divide by 2 and obtain 2. Step 3) 2 is even; divide by 2 and obtain 1. Step 4) 1 is odd; subtract 1 and obtain 0. 1 2 3 4 Example 3: Input: num = 123 Output: 12 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int numberOfSteps(int num) { int count = 0; while (num != 0) { if (num % 2 == 0) { num = num / 2; } else { num-= 1; } count++; } return count; } } ","permalink":"https://volyx.in/posts/2021-05-10-number-of-steps-to-reduce-a-number-to-zero/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero/\"\u003e1342. Number of Steps to Reduce a Number to Zero\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a non-negative integer num, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = 14\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 1) 14 is even; divide by 2 and obtain 7. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 2) 7 is odd; subtract 1 and obtain 6.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 3) 6 is even; divide by 2 and obtain 3. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 4) 3 is odd; subtract 1 and obtain 2. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 5) 2 is even; divide by 2 and obtain 1. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 6) 1 is odd; subtract 1 and obtain 0.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 1) 8 is even; divide by 2 and obtain 4. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 2) 4 is even; divide by 2 and obtain 2. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 3) 2 is even; divide by 2 and obtain 1. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eStep 4) 1 is odd; subtract 1 and obtain 0.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = 123\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 12\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumberOfSteps\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (num \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (num \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e 2 \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                num \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e num \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e 2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                num\u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"1342. Number of Steps to Reduce a Number to Zero"},{"content":"1344. Angle Between Hands of a Clock\nGiven two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.\n1 2 3 4 Example 1: Input: hour = 12, minutes = 30 Output: 165 1 2 3 4 Example 2: Input: hour = 3, minutes = 30 Output: 75 1 2 3 4 Example 3: Input: hour = 3, minutes = 15 Output: 7.5 1 2 3 4 Example 4: Input: hour = 4, minutes = 50 Output: 155 1 2 3 4 Example 5: Input: hour = 12, minutes = 0 Output: 0 Constraints:\n1 \u0026lt;= hour \u0026lt;= 12 0 \u0026lt;= minutes \u0026lt;= 59 Answers within 10^-5 of the actual value will be accepted as correct. Solution 1 2 3 4 5 6 7 8 9 class Solution { public double angleClock(int hour, int minutes) { hour = hour % 12; double degree1 = (hour * 60 + minutes) / 60.0 / 12.0 * 360.0; double degree2 = (double) minutes / 60.0 * 360.0; double diff = Math.abs(degree1 - degree2); return Math.min(360.0 - diff, diff); } } ","permalink":"https://volyx.in/posts/2021-05-10-angle-between-hands-of-a-clock/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/angle-between-hands-of-a-clock/\"\u003e1344. Angle Between Hands of a Clock\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two numbers, hour and minutes. Return the smaller angle (in degrees) formed between the hour and the minute hand.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: hour = 12, minutes = 30\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 165\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-10-clock-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: hour = 3, minutes = 30\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 75\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-05-10-clock-ex2.png\"\u003e\u003c/p\u003e","title":"1344. Angle Between Hands of a Clock"},{"content":"1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold\nGiven an array of integers arr and two integers k and threshold.\nReturn the number of sub-arrays of size k and average greater than or equal to threshold.\n1 2 3 4 5 Example 1: Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4 Output: 3 Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold). 1 2 3 4 Example 2: Input: arr = [1,1,1,1,1], k = 1, threshold = 0 Output: 5 1 2 3 4 5 Example 3: Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5 Output: 6 Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers. 1 2 3 4 5 6 7 8 9 10 Example 4: Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7 Output: 1 Example 5: Input: arr = [4,4,4,4], k = 4, threshold = 1 Output: 1 Constraints:\n1 \u0026lt;= arr.length \u0026lt;= 10^5 1 \u0026lt;= arr[i] \u0026lt;= 10^4 1 \u0026lt;= k \u0026lt;= arr.length 0 \u0026lt;= threshold \u0026lt;= 10^4 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int numOfSubarrays(int[] arr, int k, int threshold) { int n = arr.length; int count = 0; double avg = 0; for (int i = 0; i \u0026lt; k \u0026amp;\u0026amp; i \u0026lt; n; i++) { avg = avg + arr[i]; } avg = avg / (double) k; if (avg \u0026gt;= threshold) count++; int i = k; while (i \u0026lt; n) { avg = avg - arr[i - k] / k + arr[i] / k; if (avg \u0026gt;= threshold) count++; i++; } return count; } } ","permalink":"https://volyx.in/posts/2021-05-10-number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold/\"\u003e1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers arr and two integers k and threshold.\u003c/p\u003e\n\u003cp\u003eReturn the number of sub-arrays of size k and average greater than or equal to threshold.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [1,1,1,1,1], k = 1, threshold = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [4,4,4,4], k = 4, threshold = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"443. String Compression"},{"content":"443. String Compression\nGiven an array of characters chars, compress it using the following algorithm:\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\nIf the group\u0026rsquo;s length is 1, append the character to s. Otherwise, append the character followed by the group\u0026rsquo;s length. The compressed string s should not be returned separately, but instead be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.\nFollow up: Could you solve it using only O(1) extra space?\n1 2 3 4 5 Example 1: Input: chars = [\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;c\u0026#34;] Output: Return 6, and the first 6 characters of the input array should be: [\u0026#34;a\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;c\u0026#34;,\u0026#34;3\u0026#34;] Explanation: The groups are \u0026#34;aa\u0026#34;, \u0026#34;bb\u0026#34;, and \u0026#34;ccc\u0026#34;. This compresses to \u0026#34;a2b2c3\u0026#34;. 1 2 3 4 5 Example 2: Input: chars = [\u0026#34;a\u0026#34;] Output: Return 1, and the first character of the input array should be: [\u0026#34;a\u0026#34;] Explanation: The only group is \u0026#34;a\u0026#34;, which remains uncompressed since it\u0026#39;s a single character. 1 2 3 4 5 Example 3: Input: chars = [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;] Output: Return 4, and the first 4 characters of the input array should be: [\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;1\u0026#34;,\u0026#34;2\u0026#34;]. Explanation: The groups are \u0026#34;a\u0026#34; and \u0026#34;bbbbbbbbbbbb\u0026#34;. This compresses to \u0026#34;ab12\u0026#34;. 1 2 3 4 5 Example 4: Input: chars = [\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;a\u0026#34;] Output: Return 6, and the first 6 characters of the input array should be: [\u0026#34;a\u0026#34;,\u0026#34;3\u0026#34;,\u0026#34;b\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;a\u0026#34;,\u0026#34;2\u0026#34;]. Explanation: The groups are \u0026#34;aaa\u0026#34;, \u0026#34;bb\u0026#34;, and \u0026#34;aa\u0026#34;. This compresses to \u0026#34;a3b2a2\u0026#34;. Note that each group is independent even if two groups have the same character. Constraints:\n1 \u0026lt;= chars.length \u0026lt;= 2000 chars[i] is a lower-case English letter, upper-case English letter, digit, or symbol. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int compress(char[] chars) { int i = 0; int index = 0; int n = chars.length; while (i \u0026lt; n) { int j = 1; while (i + j \u0026lt; n \u0026amp;\u0026amp; chars[i] == chars[i + j]) { j++; } chars[index++] = chars[i]; if (j \u0026gt; 1) { char[] number = Integer.toString(j).toCharArray(); for (char c: number) { chars[index++] = c; } } i = i + j; } return index; } } ","permalink":"https://volyx.in/posts/2021-05-10-string-compression/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/string-compression/\"\u003e443. String Compression\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of characters chars, compress it using the following algorithm:\u003c/p\u003e\n\u003cp\u003eBegin with an empty string s. For each group of consecutive repeating characters in chars:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf the group\u0026rsquo;s length is 1, append the character to s.\u003c/li\u003e\n\u003cli\u003eOtherwise, append the character followed by the group\u0026rsquo;s length.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe compressed string s should not be returned separately, but instead be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\u003c/p\u003e","title":"443. String Compression"},{"content":"1207. Unique Number of Occurrences\nGiven an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.\n1 2 3 4 5 Example 1: Input: arr = [1,2,2,1,1,3] Output: true Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences. 1 2 3 4 Example 2: Input: arr = [1,2] Output: false 1 2 3 4 Example 3: Input: arr = [-3,0,1,-3,1,1,1,-3,10,0] Output: true Constraints:\n1 \u0026lt;= arr.length \u0026lt;= 1000 -1000 \u0026lt;= arr[i] \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public boolean uniqueOccurrences(int[] arr) { int[] freq = new int[2001]; for (int i = 0; i \u0026lt; arr.length; i++) { freq[arr[i] + 1000]++; } Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; freq.length; i++) { if (freq[i] \u0026gt; 0) { boolean prev = set.add(freq[i]); if (!prev) { return false; } } } return true; } } ","permalink":"https://volyx.in/posts/2021-05-09-unique-number-of-occurrences/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/unique-number-of-occurrences/\"\u003e1207. Unique Number of Occurrences\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers arr, write a function that returns true if and only if the number of occurrences of each value in the array is unique.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [1,2,2,1,1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [-3,0,1,-3,1,1,1,-3,10,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1207. Unique Number of Occurrences"},{"content":"1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence\nGiven a sentence that consists of some words separated by a single space, and a searchWord.\nYou have to check if searchWord is a prefix of any word in sentence.\nReturn the index of the word in sentence where searchWord is a prefix of this word (1-indexed).\nIf searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\nA prefix of a string S is any leading contiguous substring of S.\n1 2 3 4 5 Example 1: Input: sentence = \u0026#34;i love eating burger\u0026#34;, searchWord = \u0026#34;burg\u0026#34; Output: 4 Explanation: \u0026#34;burg\u0026#34; is prefix of \u0026#34;burger\u0026#34; which is the 4th word in the sentence. 1 2 3 4 5 Example 2: Input: sentence = \u0026#34;this problem is an easy problem\u0026#34;, searchWord = \u0026#34;pro\u0026#34; Output: 2 Explanation: \u0026#34;pro\u0026#34; is prefix of \u0026#34;problem\u0026#34; which is the 2nd and the 6th word in the sentence, but we return 2 as it\u0026#39;s the minimal index. 1 2 3 4 5 Example 3: Input: sentence = \u0026#34;i am tired\u0026#34;, searchWord = \u0026#34;you\u0026#34; Output: -1 Explanation: \u0026#34;you\u0026#34; is not a prefix of any word in the sentence. 1 2 3 4 Example 4: Input: sentence = \u0026#34;i use triple pillow\u0026#34;, searchWord = \u0026#34;pill\u0026#34; Output: 4 1 2 3 4 Example 5: Input: sentence = \u0026#34;hello from the other side\u0026#34;, searchWord = \u0026#34;they\u0026#34; Output: -1 Constraints:\n1 \u0026lt;= sentence.length \u0026lt;= 100 1 \u0026lt;= searchWord.length \u0026lt;= 10 sentence consists of lowercase English letters and spaces. searchWord consists of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 class Solution { public int isPrefixOfWord(String sentence, String searchWord) { int wordsCount = 0; for (int i = 0; i \u0026lt; sentence.length(); i++) { if (i == 0 || sentence.charAt(i - 1) == \u0026#39; \u0026#39;) { wordsCount++; int j = 0; while (j \u0026lt; searchWord.length() \u0026amp;\u0026amp; sentence.charAt(i) == searchWord.charAt(j)) { i++; j++; } if (j == searchWord.length()) { return wordsCount; } } } return -1; } public int isPrefixOfWord2(String sentence, String searchWord) { int wordsCount = 0; int j = 0; boolean start = true; for (int i = 0; i \u0026lt; sentence.length(); i++) { char c = sentence.charAt(i); if (c == \u0026#39; \u0026#39;) { wordsCount++; j = 0; start = true; } else { if (start \u0026amp;\u0026amp; c == searchWord.charAt(j)) { j++; } else { start = false; } if (j == searchWord.length()) { return wordsCount + 1; } } } return -1; } } ","permalink":"https://volyx.in/posts/2021-05-08-check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/\"\u003e1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a sentence that consists of some words separated by a single space, and a searchWord.\u003c/p\u003e\n\u003cp\u003eYou have to check if searchWord is a prefix of any word in sentence.\u003c/p\u003e\n\u003cp\u003eReturn the index of the word in sentence where searchWord is a prefix of this word (1-indexed).\u003c/p\u003e\n\u003cp\u003eIf searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\u003c/p\u003e","title":"1455. Check If a Word Occurs As a Prefix of Any Word in a Sentence"},{"content":"1844. Replace All Digits with Characters\nYou are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\nThere is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c.\nFor example, shift(\u0026lsquo;a\u0026rsquo;, 5) = \u0026lsquo;f\u0026rsquo; and shift(\u0026lsquo;x\u0026rsquo;, 0) = \u0026lsquo;x\u0026rsquo;. For every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]).\nReturn s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed \u0026lsquo;z\u0026rsquo;.\n1 2 3 4 5 6 7 8 Example 1: Input: s = \u0026#34;a1c1e1\u0026#34; Output: \u0026#34;abcdef\u0026#34; Explanation: The digits are replaced as follows: - s[1] -\u0026gt; shift(\u0026#39;a\u0026#39;,1) = \u0026#39;b\u0026#39; - s[3] -\u0026gt; shift(\u0026#39;c\u0026#39;,1) = \u0026#39;d\u0026#39; - s[5] -\u0026gt; shift(\u0026#39;e\u0026#39;,1) = \u0026#39;f\u0026#39; 1 2 3 4 5 6 7 8 9 Example 2: Input: s = \u0026#34;a1b2c3d4e\u0026#34; Output: \u0026#34;abbdcfdhe\u0026#34; Explanation: The digits are replaced as follows: - s[1] -\u0026gt; shift(\u0026#39;a\u0026#39;,1) = \u0026#39;b\u0026#39; - s[3] -\u0026gt; shift(\u0026#39;b\u0026#39;,2) = \u0026#39;d\u0026#39; - s[5] -\u0026gt; shift(\u0026#39;c\u0026#39;,3) = \u0026#39;f\u0026#39; - s[7] -\u0026gt; shift(\u0026#39;d\u0026#39;,4) = \u0026#39;h\u0026#39; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 100 s consists only of lowercase English letters and digits. shift(s[i-1], s[i]) \u0026lt;= \u0026lsquo;z\u0026rsquo; for all odd indices i. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public String replaceDigits(String s) { char[] charArr = s.toCharArray(); for (int i = 1; i \u0026lt; charArr.length; i = i + 2) { charArr[i] = (char) (charArr[i - 1] + charArr[i] - \u0026#39;0\u0026#39;); } return String.valueOf(charArr); } public String replaceDigits2(String s) { char[] ALPHABET = new char[256]; for (char i = \u0026#39;a\u0026#39;; i \u0026lt;= \u0026#39;z\u0026#39;; i++) { ALPHABET[i] = i; } StringBuilder sb = new StringBuilder(); int n = s.length(); for (int i = 0; i \u0026lt; n; i++) { char c = s.charAt(i); if (c \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;z\u0026#39;) { sb.append(c); } else { int d = c - \u0026#39;0\u0026#39;; int prev = ALPHABET[s.charAt(i - 1)]; char newChar = ALPHABET[prev + d]; sb.append(newChar); } } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-05-08-replace-all-digits-with-characters/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/replace-all-digits-with-characters/\"\u003e1844. Replace All Digits with Characters\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\u003c/p\u003e\n\u003cp\u003eThere is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, shift(\u0026lsquo;a\u0026rsquo;, 5) = \u0026lsquo;f\u0026rsquo; and shift(\u0026lsquo;x\u0026rsquo;, 0) = \u0026lsquo;x\u0026rsquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]).\u003c/p\u003e","title":"1844. Replace All Digits with Characters"},{"content":"1845. Seat Reservation Manager\nDesign a system that manages the reservation state of n seats that are numbered from 1 to n.\nImplement the SeatManager class:\nSeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available. int reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number. void unreserve(int seatNumber) Unreserves the seat with the given seatNumber. 1 2 3 4 5 6 7 Example 1: Input [\u0026#34;SeatManager\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;unreserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;unreserve\u0026#34;] [[5], [], [], [2], [], [], [], [], [5]] Output [null, 1, 2, null, 2, 3, 4, 5, null] Explanation SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats. seatManager.reserve(); // All seats are available, so return the lowest numbered seat, which is 1. seatManager.reserve(); // The available seats are [2,3,4,5], so return the lowest of them, which is 2. seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5]. seatManager.reserve(); // The available seats are [2,3,4,5], so return the lowest of them, which is 2. seatManager.reserve(); // The available seats are [3,4,5], so return the lowest of them, which is 3. seatManager.reserve(); // The available seats are [4,5], so return the lowest of them, which is 4. seatManager.reserve(); // The only available seat is seat 5, so return 5. seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].\nConstraints:\n1 \u0026lt;= n \u0026lt;= 105 1 \u0026lt;= seatNumber \u0026lt;= n For each call to reserve, it is guaranteed that there will be at least one unreserved seat. For each call to unreserve, it is guaranteed that seatNumber will be reserved. At most 105 calls in total will be made to reserve and unreserve. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 cclass SeatManager { BitSet bits; public SeatManager(int n) { bits = new BitSet(n); } public int reserve() { int pos = bits.nextClearBit(1); bits.set(pos); return pos; } public void unreserve(int seatNumber) { bits.flip(seatNumber); } } class SeatManager1 { PriorityQueue\u0026lt;Integer\u0026gt; pq = new PriorityQueue\u0026lt;\u0026gt;(); int curr = 1; public SeatManager1(int n) { // for (int i = 1; i \u0026lt;= n; i++) { // pq.add(i); // } } public int reserve() { if (pq.size() \u0026gt; 0) { return pq.poll(); } return curr++; } public void unreserve(int seatNumber) { pq.add(seatNumber); } } class SeatManager2 { PriorityQueue\u0026lt;Integer\u0026gt; pq = new PriorityQueue\u0026lt;\u0026gt;(); public SeatManager2(int n) { for (int i = 1; i \u0026lt;= n; i++) { pq.add(i); } } public int reserve() { return pq.poll(); } public void unreserve(int seatNumber) { pq.add(seatNumber); } } /** [null, 1, 2, null, 2, 3, 4, 5, null] [null,1,2,null,2,3,4,5,null] * Your SeatManager object will be instantiated and called as such: * SeatManager obj = new SeatManager(n); * int param_1 = obj.reserve(); * obj.unreserve(seatNumber); */ ","permalink":"https://volyx.in/posts/2021-05-08-seat-reservation-manager/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/seat-reservation-manager/\"\u003e1845. Seat Reservation Manager\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDesign a system that manages the reservation state of n seats that are numbered from 1 to n.\u003c/p\u003e\n\u003cp\u003eImplement the SeatManager class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available.\u003c/li\u003e\n\u003cli\u003eint reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number.\u003c/li\u003e\n\u003cli\u003evoid unreserve(int seatNumber) Unreserves the seat with the given seatNumber.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;SeatManager\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;unreserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;reserve\u0026#34;, \u0026#34;unreserve\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[5], [], [], [2], [], [], [], [], [5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 1, 2, null, 2, 3, 4, 5, null]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExplanation\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve();    // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].\u003c/p\u003e","title":"1845. Seat Reservation Manager"},{"content":"1846. Maximum Element After Decreasing and Rearranging\nYou are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:\nThe value of the first element in arr must be 1. The absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) \u0026lt;= 1 for each i where 1 \u0026lt;= i \u0026lt; arr.length (0-indexed). abs(x) is the absolute value of x. There are 2 types of operations that you can perform any number of times:\nDecrease the value of any element of arr to a smaller positive integer. Rearrange the elements of arr to be in any order. Return the maximum possible value of an element in arr after performing the operations to satisfy the conditions.\n1 2 3 4 5 6 7 Example 1: Input: arr = [2,2,1,2,1] Output: 2 Explanation: We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1]. The largest element in arr is 2. 1 2 3 4 5 6 7 8 9 10 11 Example 2: Input: arr = [100,1,1000] Output: 3 Explanation: One possible way to satisfy the conditions is by doing the following: 1. Rearrange arr so it becomes [1,100,1000]. 2. Decrease the value of the second element to 2. 3. Decrease the value of the third element to 3. Now arr = [1,2,3], which satisfies the conditions. The largest element in arr is 3. 1 2 3 4 5 Example 3: Input: arr = [1,2,3,4,5] Output: 5 Explanation: The array already satisfies the conditions, and the largest element is 5. Constraints:\n1 \u0026lt;= arr.length \u0026lt;= 10^5 1 \u0026lt;= arr[i] \u0026lt;= 10^9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int maximumElementAfterDecrementingAndRearranging(int[] arr) { Arrays.sort(arr); int n = arr.length; if (n == 1) { return 1; } int max = 0; arr[0] = 1; for (int i = 1; i \u0026lt; n; i++) { if (Math.abs(arr[i] - arr[i - 1]) \u0026gt; 1) { arr[i] = arr[i - 1] + 1; } max = Math.max(arr[i], max); } return max; } } ","permalink":"https://volyx.in/posts/2021-05-08-maximum-element-after-decreasing-and-rearranging/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-element-after-decreasing-and-rearranging/\"\u003e1846. Maximum Element After Decreasing and Rearranging\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe value of the first element in arr must be 1.\u003c/li\u003e\n\u003cli\u003eThe absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) \u0026lt;= 1 for each i where 1 \u0026lt;= i \u0026lt; arr.length (0-indexed). abs(x) is the absolute value of x.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThere are 2 types of operations that you can perform any number of times:\u003c/p\u003e","title":"1846. Maximum Element After Decreasing and Rearranging"},{"content":"859. Buddy Strings\nGiven two strings a and b, return true if you can swap two letters in a so the result is equal to b, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at a[i] and a[j].\nFor example, swapping at indices 0 and 2 in \u0026ldquo;abcd\u0026rdquo; results in \u0026ldquo;cbad\u0026rdquo;. 1 2 3 4 5 Example 1: Input: a = \u0026#34;ab\u0026#34;, b = \u0026#34;ba\u0026#34; Output: true Explanation: You can swap a[0] = \u0026#39;a\u0026#39; and a[1] = \u0026#39;b\u0026#39; to get \u0026#34;ba\u0026#34;, which is equal to b. 1 2 3 4 5 Example 2: Input: a = \u0026#34;ab\u0026#34;, b = \u0026#34;ab\u0026#34; Output: false Explanation: The only letters you can swap are a[0] = \u0026#39;a\u0026#39; and a[1] = \u0026#39;b\u0026#39;, which results in \u0026#34;ba\u0026#34; != b. 1 2 3 4 5 Example 3: Input: a = \u0026#34;aa\u0026#34;, b = \u0026#34;aa\u0026#34; Output: true Explanation: You can swap a[0] = \u0026#39;a\u0026#39; and a[1] = \u0026#39;a\u0026#39; to get \u0026#34;aa\u0026#34;, which is equal to b. 1 2 3 4 Example 4: Input: a = \u0026#34;aaaaaaabc\u0026#34;, b = \u0026#34;aaaaaaacb\u0026#34; Output: true Constraints:\n1 \u0026lt;= a.length, b.length \u0026lt;= 2 * 10^4 a and b consist of lowercase letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public boolean buddyStrings(String a, String b) { if (a.length() != b.length()) return false; int n = a.length(); int i = -1; int j = -1; int count = 0; int[] freq = new int[256]; for (int k = 0; k \u0026lt; n; k++) { if (a.charAt(k) != b.charAt(k)) { count++; if (count \u0026gt; 2) { return false; } if (i == -1) { i = k; } else if (j == -1) { j = k; } } freq[a.charAt(k)]++; } if (count == 0) { for (int f: freq) { if (f \u0026gt; 1) return true; } } if (count != 2) { return false; } return a.charAt(i) == b.charAt(j) \u0026amp;\u0026amp; a.charAt(j) == b.charAt(i); } } Solution 2021-08-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution { public boolean buddyStrings(String s, String goal) { int len1 = s.length(); int len2 = goal.length(); if (len1 != len2) return false; int a = -1; int b = -1; int[] freq1 = new int[26]; int[] freq2 = new int[26]; for (int i = 0; i \u0026lt; len1; i++) { char c1 = s.charAt(i); char c2 = goal.charAt(i); freq1[c1 - \u0026#39;a\u0026#39;]++; freq2[c2 - \u0026#39;a\u0026#39;]++; if (c1 == c2) continue; if (a == -1) { a = i; continue; } if (b == -1) { b = i; continue; } return false; } if (a == -1 \u0026amp;\u0026amp; b == -1) { for (int count: freq1) { if (count \u0026gt; 1) { return true; } } return false; } if (a == -1 || b == -1) return false; return s.charAt(a) == goal.charAt(b) \u0026amp;\u0026amp; s.charAt(b) == goal.charAt(a); } } ","permalink":"https://volyx.in/posts/2021-05-08-buddy-strings/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/buddy-strings/\"\u003e859. Buddy Strings\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings a and b, return true if you can swap two letters in a so the result is equal to b, otherwise, return false.\u003c/p\u003e\n\u003cp\u003eSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at a[i] and a[j].\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, swapping at indices 0 and 2 in \u0026ldquo;abcd\u0026rdquo; results in \u0026ldquo;cbad\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: a = \u0026#34;ab\u0026#34;, b = \u0026#34;ba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You can swap a[0] = \u0026#39;a\u0026#39; and a[1] = \u0026#39;b\u0026#39; to get \u0026#34;ba\u0026#34;, which is equal to b.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: a = \u0026#34;ab\u0026#34;, b = \u0026#34;ab\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The only letters you can swap are a[0] = \u0026#39;a\u0026#39; and a[1] = \u0026#39;b\u0026#39;, which results in \u0026#34;ba\u0026#34; != b.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: a = \u0026#34;aa\u0026#34;, b = \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You can swap a[0] = \u0026#39;a\u0026#39; and a[1] = \u0026#39;a\u0026#39; to get \u0026#34;aa\u0026#34;, which is equal to b.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: a = \u0026#34;aaaaaaabc\u0026#34;, b = \u0026#34;aaaaaaacb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"859. Buddy Strings"},{"content":"98. Validate Binary Search Tree\nGiven the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key. Both the left and right subtrees must also be binary search trees. 1 2 3 4 Example 1: Input: root = [2,1,3] Output: true 1 2 3 4 5 Example 2: Input: root = [5,1,4,null,null,3,6] Output: false Explanation: The root node\u0026#39;s value is 5 but its right child\u0026#39;s value is 4. Constraints:\nThe number of nodes in the tree is in the range [1, 104]. -231 \u0026lt;= Node.val \u0026lt;= 231 - 1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isValidBST(TreeNode root) { return isValid(root, null, null); } boolean isValid(TreeNode node, Integer low, Integer max) { if (node == null) return true; if (low != null \u0026amp;\u0026amp; node.val \u0026lt;= low) return false; if (max != null \u0026amp;\u0026amp; node.val \u0026gt;= max) return false; return isValid(node.left, low, node.val) \u0026amp;\u0026amp; isValid(node.right, node.val, max); } } ","permalink":"https://volyx.in/posts/2021-05-07-validate-binary-search-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/validate-binary-search-tree/\"\u003e98. Validate Binary Search Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, determine if it is a valid binary search tree (BST).\u003c/p\u003e\n\u003cp\u003eA valid BST is defined as follows:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key.\u003c/li\u003e\n\u003cli\u003eThe right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key.\u003c/li\u003e\n\u003cli\u003eBoth the left and right subtrees must also be binary search trees.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [2,1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-05-07-ex1.jpg\"\u003e\u003c/p\u003e","title":"98. Validate Binary Search Tree"},{"content":"211. Design Add and Search Words Data Structure\nDesign a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\nWordDictionary() Initializes the object. void addWord(word) Adds word to the data structure, it can be matched later. bool search(word) Returns true if there is any string in the data structure that - matches word or false otherwise. word may contain dots \u0026lsquo;.\u0026rsquo; where dots can be matched with any letter. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example: Input [\u0026#34;WordDictionary\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;] [[],[\u0026#34;bad\u0026#34;],[\u0026#34;dad\u0026#34;],[\u0026#34;mad\u0026#34;],[\u0026#34;pad\u0026#34;],[\u0026#34;bad\u0026#34;],[\u0026#34;.ad\u0026#34;],[\u0026#34;b..\u0026#34;]] Output [null,null,null,null,false,true,true,true] Explanation WordDictionary wordDictionary = new WordDictionary(); wordDictionary.addWord(\u0026#34;bad\u0026#34;); wordDictionary.addWord(\u0026#34;dad\u0026#34;); wordDictionary.addWord(\u0026#34;mad\u0026#34;); wordDictionary.search(\u0026#34;pad\u0026#34;); // return False wordDictionary.search(\u0026#34;bad\u0026#34;); // return True wordDictionary.search(\u0026#34;.ad\u0026#34;); // return True wordDictionary.search(\u0026#34;b..\u0026#34;); // return True Constraints:\n1 \u0026lt;= word.length \u0026lt;= 500 word in addWord consists lower-case English letters. word in search consist of \u0026lsquo;.\u0026rsquo; or lower-case English letters. At most 50000 calls will be made to addWord and search. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class WordDictionary { static int R = 256; Trie trie = new Trie(); /** Initialize your data structure here. */ public WordDictionary() { } public void addWord(String word) { Trie node = trie; for (char c: word.toCharArray()) { Trie curr = node.next[c]; if (curr == null) { curr = new Trie(); } node.next[c] = curr; node = curr; } node.isWord = true; } public boolean search(String word) { return patternSearch(word, trie, 0); } boolean patternSearch(String word, Trie node, int index) { if (node == null) return false; if (index == word.length()) return node.isWord; char c = word.charAt(index); if (c == \u0026#39;.\u0026#39;) { for (Trie t: node.next) { if (patternSearch(word, t, index + 1)) return true; } } else { if (patternSearch(word, node.next[c], index + 1)) return true; } return false; } class Trie { Trie[] next = new Trie[R]; boolean isWord; } } /** * Your WordDictionary object will be instantiated and called as such: * WordDictionary obj = new WordDictionary(); * obj.addWord(word); * boolean param_2 = obj.search(word); */ Solution 2021-10-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class WordDictionary { TreeNode root = new TreeNode(); public WordDictionary() { } /* bad * [b] [a] */ public void addWord(String word) { TreeNode node = root; for (char c: word.toCharArray()) { if (node.nodes[c - \u0026#39;a\u0026#39;] == null) { node.nodes[c - \u0026#39;a\u0026#39;] = new TreeNode(); } node = node.nodes[c - \u0026#39;a\u0026#39;]; } node.isTerminal = true; } public boolean search(String word) { return search(root, 0, word); } boolean search(TreeNode node, int index, String word) { if (node == null) { return false; } if (index == word.length()) { return node.isTerminal; } char c = word.charAt(index); if (c == \u0026#39;.\u0026#39;) { for (TreeNode searchNode: node.nodes) { boolean find = search(searchNode, index + 1, word); if (find) { return true; } } } else { return search(node.nodes[c - \u0026#39;a\u0026#39;], index + 1, word); } return false; } class TreeNode { TreeNode[] nodes = new TreeNode[26]; boolean isTerminal; } } /** * Your WordDictionary object will be instantiated and called as such: * WordDictionary obj = new WordDictionary(); * obj.addWord(word); * boolean param_2 = obj.search(word); */ Solution 2021-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class WordDictionary { Node root = new Node(); public WordDictionary() { } public void addWord(String word) { Node curr = root; for (char c: word.toCharArray()) { if (curr.child[c] == null) { curr.child[c] = new Node(); } curr = curr.child[c]; } curr.isTerminal = true; } public boolean search(String word) { return search(root, 0, word); } boolean search(Node curr, int index, String word) { if (curr == null) return false; if (index == word.length()) { return curr.isTerminal; } char c = word.charAt(index); if (c == \u0026#39;.\u0026#39;) { for (Node n: curr.child) { if (search(n, index + 1, word)) { return true; } } return false; } else { return search(curr.child[c], index + 1, word); } } class Node { Node[] child = new Node[256]; boolean isTerminal; } } /** * Your WordDictionary object will be instantiated and called as such: * WordDictionary obj = new WordDictionary(); * obj.addWord(word); * boolean param_2 = obj.search(word); */ ","permalink":"https://volyx.in/posts/2021-05-06-design-add-and-search-words-data-structure/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/design-add-and-search-words-data-structure/\"\u003e211. Design Add and Search Words Data Structure\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eDesign a data structure that supports adding new words and finding if a string matches any previously added string.\u003c/p\u003e\n\u003cp\u003eImplement the WordDictionary class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWordDictionary() Initializes the object.\u003c/li\u003e\n\u003cli\u003evoid addWord(word) Adds word to the data structure, it can be matched later.\u003c/li\u003e\n\u003cli\u003ebool search(word) Returns true if there is any string in the data structure that - matches word or false otherwise. word may contain dots \u0026lsquo;.\u0026rsquo; where dots can be matched with any letter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;WordDictionary\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;addWord\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;,\u0026#34;search\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[],[\u0026#34;bad\u0026#34;],[\u0026#34;dad\u0026#34;],[\u0026#34;mad\u0026#34;],[\u0026#34;pad\u0026#34;],[\u0026#34;bad\u0026#34;],[\u0026#34;.ad\u0026#34;],[\u0026#34;b..\u0026#34;]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,null,null,null,false,true,true,true]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWordDictionary wordDictionary = new WordDictionary();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.addWord(\u0026#34;bad\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.addWord(\u0026#34;dad\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.addWord(\u0026#34;mad\u0026#34;);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.search(\u0026#34;pad\u0026#34;); // return False\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.search(\u0026#34;bad\u0026#34;); // return True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.search(\u0026#34;.ad\u0026#34;); // return True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewordDictionary.search(\u0026#34;b..\u0026#34;); // return True\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"211. Design Add and Search Words Data Structure"},{"content":"72. Edit Distance\nGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\nInsert a character Delete a character Replace a character 1 2 3 4 5 6 7 8 Example 1: Input: word1 = \u0026#34;horse\u0026#34;, word2 = \u0026#34;ros\u0026#34; Output: 3 Explanation: horse -\u0026gt; rorse (replace \u0026#39;h\u0026#39; with \u0026#39;r\u0026#39;) rorse -\u0026gt; rose (remove \u0026#39;r\u0026#39;) rose -\u0026gt; ros (remove \u0026#39;e\u0026#39;) 1 2 3 4 5 6 7 8 9 10 Example 2: Input: word1 = \u0026#34;intention\u0026#34;, word2 = \u0026#34;execution\u0026#34; Output: 5 Explanation: intention -\u0026gt; inention (remove \u0026#39;t\u0026#39;) inention -\u0026gt; enention (replace \u0026#39;i\u0026#39; with \u0026#39;e\u0026#39;) enention -\u0026gt; exention (replace \u0026#39;n\u0026#39; with \u0026#39;x\u0026#39;) exention -\u0026gt; exection (replace \u0026#39;n\u0026#39; with \u0026#39;c\u0026#39;) exection -\u0026gt; execution (insert \u0026#39;u\u0026#39;) Constraints:\n0 \u0026lt;= word1.length, word2.length \u0026lt;= 500 word1 and word2 consist of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int minDistance(String word1, String word2) { int n = word1.length(); int m = word2.length(); int[][] d = new int[n + 1][m + 1]; for (int i = 0; i \u0026lt; n + 1; i++) { d[i][0] = i; } for (int i = 0; i \u0026lt; m + 1; i++) { d[0][i] = i; } for (int i = 1; i \u0026lt; n + 1; i++) { for (int j = 1; j \u0026lt; m + 1; j++) { int editCost = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1); int diff = (word1.charAt(i - 1) == word2.charAt(j - 1)) ? 0: 1; d[i][j] = Math.min(editCost, d[i - 1][ j - 1] + diff); } } return d[n][m]; } } ","permalink":"https://volyx.in/posts/2021-05-05-edit-distance/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/edit-distance/\"\u003e72. Edit Distance\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\u003c/p\u003e\n\u003cp\u003eYou have the following three operations permitted on a word:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eInsert a character\u003c/li\u003e\n\u003cli\u003eDelete a character\u003c/li\u003e\n\u003cli\u003eReplace a character\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: word1 = \u0026#34;horse\u0026#34;, word2 = \u0026#34;ros\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehorse -\u0026gt; rorse (replace \u0026#39;h\u0026#39; with \u0026#39;r\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erorse -\u0026gt; rose (remove \u0026#39;r\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erose -\u0026gt; ros (remove \u0026#39;e\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: word1 = \u0026#34;intention\u0026#34;, word2 = \u0026#34;execution\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eintention -\u0026gt; inention (remove \u0026#39;t\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einention -\u0026gt; enention (replace \u0026#39;i\u0026#39; with \u0026#39;e\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eenention -\u0026gt; exention (replace \u0026#39;n\u0026#39; with \u0026#39;x\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexention -\u0026gt; exection (replace \u0026#39;n\u0026#39; with \u0026#39;c\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eexection -\u0026gt; execution (insert \u0026#39;u\u0026#39;)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"72. Edit Distance"},{"content":"720. Longest Word in Dictionary\nGiven an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\n1 2 3 4 5 Example 1: Input: words = [\u0026#34;w\u0026#34;,\u0026#34;wo\u0026#34;,\u0026#34;wor\u0026#34;,\u0026#34;worl\u0026#34;,\u0026#34;world\u0026#34;] Output: \u0026#34;world\u0026#34; Explanation: The word \u0026#34;world\u0026#34; can be built one character at a time by \u0026#34;w\u0026#34;, \u0026#34;wo\u0026#34;, \u0026#34;wor\u0026#34;, and \u0026#34;worl\u0026#34;. 1 2 3 4 5 Example 2: Input: words = [\u0026#34;a\u0026#34;,\u0026#34;banana\u0026#34;,\u0026#34;app\u0026#34;,\u0026#34;appl\u0026#34;,\u0026#34;ap\u0026#34;,\u0026#34;apply\u0026#34;,\u0026#34;apple\u0026#34;] Output: \u0026#34;apple\u0026#34; Explanation: Both \u0026#34;apply\u0026#34; and \u0026#34;apple\u0026#34; can be built from other words in the dictionary. However, \u0026#34;apple\u0026#34; is lexicographically smaller than \u0026#34;apply\u0026#34;. Constraints:\n1 \u0026lt;= words.length \u0026lt;= 1000 1 \u0026lt;= words[i].length \u0026lt;= 30 words[i] consists of lowercase English letters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Solution { static int R = 256; int max = 0; String longest = \u0026#34;\u0026#34;; public String longestWord(String[] words) { Trie trie = new Trie(\u0026#39;#\u0026#39;); trie.isWord = true; for (String word: words) { trie.insert(word); } dfs(trie, \u0026#34;\u0026#34;, 0); return longest; } void dfs(Trie node, String word, int counter) { if (node == null) return ; if (node.isWord == false) return; if (counter \u0026gt; max) { max = counter; longest = word; } for (Trie t: node.next) { if (t != null) { dfs(t, word + \u0026#34;\u0026#34; + t.symbol, counter + 1); } } } class Trie { Trie[] next = new Trie[R]; char symbol; boolean isWord; public Trie(char symbol) { this.symbol = symbol; } void insert(String word) { Trie node = this; int n = word.length(); for (char c: word.toCharArray()) { Trie curr = node.next[c]; if (curr == null) { curr = new Trie(c); } node.next[c] = curr; node = curr; } node.isWord = true; } } } ","permalink":"https://volyx.in/posts/2021-05-04-longest-word-in-dictionary/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/longest-word-in-dictionary/\"\u003e720. Longest Word in Dictionary\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\u003c/p\u003e\n\u003cp\u003eIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;w\u0026#34;,\u0026#34;wo\u0026#34;,\u0026#34;wor\u0026#34;,\u0026#34;worl\u0026#34;,\u0026#34;world\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;world\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The word \u0026#34;world\u0026#34; can be built one character at a time by \u0026#34;w\u0026#34;, \u0026#34;wo\u0026#34;, \u0026#34;wor\u0026#34;, and \u0026#34;worl\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;a\u0026#34;,\u0026#34;banana\u0026#34;,\u0026#34;app\u0026#34;,\u0026#34;appl\u0026#34;,\u0026#34;ap\u0026#34;,\u0026#34;apply\u0026#34;,\u0026#34;apple\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;apple\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both \u0026#34;apply\u0026#34; and \u0026#34;apple\u0026#34; can be built from other words in the dictionary. However, \u0026#34;apple\u0026#34; is lexicographically smaller than \u0026#34;apply\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"720. Longest Word in Dictionary"},{"content":"535. Encode and Decode TinyURL\nNote: This is a companion problem to the System Design problem: Design TinyURL.\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\nImplement the Solution class:\nSolution() Initializes the object of the system. String encode(String longUrl) Returns a tiny URL for the given longUrl. String decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object. 1 2 3 4 5 6 7 8 9 Example 1: Input: url = \u0026#34;https://leetcode.com/problems/design-tinyurl\u0026#34; Output: \u0026#34;https://leetcode.com/problems/design-tinyurl\u0026#34; Explanation: Solution obj = new Solution(); string tiny = obj.encode(url); // returns the encoded tiny url. string ans = obj.decode(tiny); // returns the original url after deconding it. Constraints:\n1 \u0026lt;= url.length \u0026lt;= 104 url is guranteed to be a valid URL. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 public class Codec { char[] symbols = new char[256]; int[] freq = new int[256]; String[] huffman = new String[256]; Node root = null; // Encodes a URL to a shortened URL. public String encode(String longUrl) { for (char c: longUrl.toCharArray()) { freq[c]++; symbols[c] = c; } Queue\u0026lt;Node\u0026gt; pq = new PriorityQueue\u0026lt;\u0026gt;((a,b) -\u0026gt; { return Integer.compare(a.val, b.val); }); for (int i = 0; i \u0026lt; freq.length; i++) { if (freq[i] \u0026gt; 0) { pq.add(new Node(symbols[i], freq[i])); } } root = null; while (pq.size() \u0026gt; 1) { Node left = pq.poll(); Node right = pq.poll(); Node node = new Node(\u0026#39; \u0026#39;, left.val + right.val, left, right); root = node; pq.add(node); } createHuffman(root, \u0026#34;\u0026#34;); StringBuilder sb = new StringBuilder(\u0026#34;http://tinyurl.com/\u0026#34;); for (char c: longUrl.toCharArray()) { sb.append(huffman[c]); } return sb.toString(); } void createHuffman(Node node, String val) { if (node.left == null \u0026amp;\u0026amp; node.right == null) { huffman[node.c] = val; return; } createHuffman(node.left, val + \u0026#34;0\u0026#34;); createHuffman(node.right, val + \u0026#34;1\u0026#34;); } // Decodes a shortened URL to its original URL. public String decode(String shortUrl) { int len = shortUrl.length(); StringBuilder url = new StringBuilder(); // {0..18} is \u0026#34;http://tinyurl.com/\u0026#34; so ignore it during decoding for (int i = 19; i \u0026lt; len;) { Node node = root; while (node.left != null \u0026amp;\u0026amp; node.right != null) { if (shortUrl.charAt(i) == \u0026#39;0\u0026#39;) { node = node.left; } else { node = node.right; } i++; } url.append(node.c); } return url.toString(); } class Node { char c; int val; Node left; Node right; public Node(char c, int val) { this.c = c; this.val = val; } public Node(char c, int val, Node left, Node right) { this.c = c; this.val = val; this.left = left; this.right = right; } } } // Your Codec object will be instantiated and called as such: // Codec codec = new Codec(); // codec.decode(codec.encode(url)); ","permalink":"https://volyx.in/posts/2021-04-30-encode-and-decode-tinyurl/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/encode-and-decode-tinyurl/\"\u003e535. Encode and Decode TinyURL\u003c/a\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNote: This is a companion problem to the System Design problem: Design TinyURL.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTinyURL is a URL shortening service where you enter a URL such as \u003ca href=\"https://leetcode.com/problems/design-tinyurl\"\u003ehttps://leetcode.com/problems/design-tinyurl\u003c/a\u003e and it returns a short URL such as \u003ca href=\"http://tinyurl.com/4e9iAk\"\u003ehttp://tinyurl.com/4e9iAk\u003c/a\u003e. Design a class to encode a URL and decode a tiny URL.\u003c/p\u003e\n\u003cp\u003eThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\u003c/p\u003e","title":"535. Encode and Decode TinyURL"},{"content":"28. Implement strStr()\nImplement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nClarification:\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\u0026rsquo;s strstr() and Java\u0026rsquo;s indexOf().\n1 2 3 4 Example 1: Input: haystack = \u0026#34;hello\u0026#34;, needle = \u0026#34;ll\u0026#34; Output: 2 1 2 3 4 Example 2: Input: haystack = \u0026#34;aaaaa\u0026#34;, needle = \u0026#34;bba\u0026#34; Output: -1 1 2 3 4 Example 3: Input: haystack = \u0026#34;\u0026#34;, needle = \u0026#34;\u0026#34; Output: 0 Constraints:\n0 \u0026lt;= haystack.length, needle.length \u0026lt;= 5 * 104 haystack and needle consist of only lower-case English characters. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 class Solution { public int strStr(String haystack, String needle) { int[] zi = ziFunction(needle + \u0026#34;#\u0026#34; + haystack); int m = needle.length(); if (m == 0) return 0; for (int i = 0; i \u0026lt; zi.length; i++) { if (zi[i] == m) { return i - m - 1; } } return -1; } public int strStrNaive(String haystack, String needle) { int n = haystack.length(); int m = needle.length(); if (m == 0) return 0; int i = 0; int j = 0; while (i \u0026lt; n) { if (haystack.charAt(i) == needle.charAt(j)) { i++; j++; } else { i = i - j + 1; j = 0; } if (j == m) { return i - j; } } return -1; } public int strStrKmp(String haystack, String needle) { int[] pi = prefixFunction(needle); int n = haystack.length(); int m = needle.length(); if (m == 0) return 0; int i = 0; int j = 0; while (i \u0026lt; n) { if (haystack.charAt(i) == needle.charAt(j)) { i++; j++; } else { if (j != 0) { j = pi[j - 1]; } else { i++; } } if (j == m){ return i - j; } } return -1; } public int strStrPrefix(String haystack, String needle) { int[] pi = prefixFunction(needle + \u0026#34;#\u0026#34; + haystack); int m = needle.length(); for (int i = 0; i \u0026lt; pi.length; i++) { if (pi[i] == m) { return i - m - m; } } return -1; } int[] prefixFunction(String s) { int n = s.length(); int[] pi = new int[n]; for (int i = 1; i \u0026lt; n; i++) { // текущая длина префикса, который мы хотим продолжить // гарантируется, что s[0..j-1] = s[i-j..i-1]. int j = pi[i - 1]; //пока мы не можем продолжить текущий префикс while (j \u0026gt; 0 \u0026amp;\u0026amp; s.charAt(i) != s.charAt(j)) { j = pi[j - 1]; //уменьшаем его длину до следующей возможной } //Теперь j - максимальная длина префикса, который мы можем продолжить, //или 0, если такового не существует. if (s.charAt(i) == s.charAt(j)) { pi[i] = j + 1; } else { pi[i] = 0; } } return pi; } int[] ziFunction(String s) { int n = s.length(); int[] zi = new int[n]; int l = 0; for (int i = 1; i \u0026lt; n; i++) { //если i входит в уже обработанный отрезок //используем предыдущие вычисления zi[i] = Math.min(zi[l] + l - i, zi[i - l]); zi[i] = Math.max(0, zi[i]); // иначе начальным значением z[i] остаётся 0 // пытаемся увеличить z[i] наивным алгоритмом while (i + zi[i] \u0026lt; n \u0026amp;\u0026amp; s.charAt(i + zi[i]) == s.charAt(zi[i])) { zi[i]++; } //если мы можем увеличить r, делаем это if (i + zi[i] \u0026gt; l + zi[l]) { l = i; } } return zi; } } ","permalink":"https://volyx.in/posts/2021-04-27-implement-strstr/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/implement-strstr/\"\u003e28. Implement strStr()\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eImplement strStr().\u003c/p\u003e\n\u003cp\u003eReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\u003c/p\u003e\n\u003cp\u003eClarification:\u003c/p\u003e\n\u003cp\u003eWhat should we return when needle is an empty string? This is a great question to ask during an interview.\u003c/p\u003e\n\u003cp\u003eFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C\u0026rsquo;s strstr() and Java\u0026rsquo;s indexOf().\u003c/p\u003e","title":"28. Implement strStr()"},{"content":"567. Permutation in String\nGiven two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string\u0026rsquo;s permutations is the substring of the second string.\n1 2 3 4 5 Example 1: Input: s1 = \u0026#34;ab\u0026#34; s2 = \u0026#34;eidbaooo\u0026#34; Output: True Explanation: s2 contains one permutation of s1 (\u0026#34;ba\u0026#34;). 1 2 3 4 Example 2: Input:s1= \u0026#34;ab\u0026#34; s2 = \u0026#34;eidboaoo\u0026#34; Output: False Constraints:\nThe input strings only contain lower case letters. The length of both given strings is in range [1, 10,000]. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 class Solution { public boolean checkInclusion(String s1, String s2) { int len1 = s1.length(); int len2 = s2.length(); int[] count1 = new int[256]; int[] count2 = new int[256]; for (int i = 0; i \u0026lt; len1; i++) { count1[s1.charAt(i)]++; } for (int i = 0; i \u0026lt; len2; i++) { count2[s2.charAt(i)]++; if (i \u0026gt;= len1) { count2[s2.charAt(i - len1)]--; } if (Arrays.equals(count1, count2)) { return true; } } return false; } public boolean checkInclusion_RollingHash(String s1, String s2) { int len1 = s1.length(); int len2 = s2.length(); if (len1 \u0026gt; len2) return false; int hash1 = 0; int hash2 = 0; for (int i = 0; i \u0026lt; len1; i++) { char c1 = s1.charAt(i); char c2 = s2.charAt(i); hash1 += pow(c1); hash2 += pow(c2); } if (hash1 == hash2) { return true; } for (int i = len1; i \u0026lt; len2; i++) { hash2 = hash2 - pow(s2.charAt(i - len1)) + pow(s2.charAt(i)); if (hash1 == hash2) { return true; } } return false; } int pow(int v) { return (int) Math.pow(v, 3); } } ","permalink":"https://volyx.in/posts/2021-04-27-permutation-in-string/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/permutation-in-string/\"\u003e567. Permutation in String\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string\u0026rsquo;s permutations is the substring of the second string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s1 = \u0026#34;ab\u0026#34; s2 = \u0026#34;eidbaooo\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: s2 contains one permutation of s1 (\u0026#34;ba\u0026#34;).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:s1= \u0026#34;ab\u0026#34; s2 = \u0026#34;eidboaoo\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: False\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"567. Permutation in String"},{"content":"1828. Queries on Number of Points Inside a Circle\nYou are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.\nYou are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.\nFor each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.\nReturn an array answer, where answer[j] is the answer to the jth query.\n1 2 3 4 5 6 Example 1: Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]] Output: [3,2,2] Explanation: The points and circles are shown above. queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle. 1 2 3 4 5 6 Example 2: Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]] Output: [2,3,2,4] Explanation: The points and circles are shown above. queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple. Constraints:\n1 \u0026lt;= points.length \u0026lt;= 500 points[i].length == 2 0 \u0026lt;= x​​​​​​i, y​​​​​​i \u0026lt;= 500 1 \u0026lt;= queries.length \u0026lt;= 500 queries[j].length == 3 0 \u0026lt;= xj, yj \u0026lt;= 500 1 \u0026lt;= rj \u0026lt;= 500 All coordinates are integers. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int[] countPoints(int[][] points, int[][] queries) { int[] counts = new int[queries.length]; for (int i = 0; i \u0026lt; queries.length; i++) { for (int[] p: points) { if (isInside(queries[i], p)) counts[i]++; } } return counts; } boolean isInside(int[] q, int[] p) { int xc = q[0]; int yc = q[1]; int r = q[2]; int x = p[0]; int y = p[1]; return ((x - xc) * (x - xc) + (y - yc) * (y - yc)) \u0026lt;= r * r; } } ","permalink":"https://volyx.in/posts/2021-04-24-binary-string-with-substrings-representing-1-to-n/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/queries-on-number-of-points-inside-a-circle/\"\u003e1828. Queries on Number of Points Inside a Circle\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2D plane. Multiple points can have the same coordinates.\u003c/p\u003e\n\u003cp\u003eYou are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.\u003c/p\u003e\n\u003cp\u003eFor each query queries[j], compute the number of points inside the jth circle. Points on the border of the circle are considered inside.\u003c/p\u003e","title":"1828. Queries on Number of Points Inside a Circle"},{"content":"1016. Binary String With Substrings Representing 1 To N\nGiven a binary string S (a string consisting only of \u0026lsquo;0\u0026rsquo; and \u0026lsquo;1\u0026rsquo;s) and a positive integer N, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.\n1 2 3 4 Example 1: Input: S = \u0026#34;0110\u0026#34;, N = 3 Output: true 1 2 3 4 Example 2: Input: S = \u0026#34;0110\u0026#34;, N = 4 Output: false Note:\n1 \u0026lt;= S.length \u0026lt;= 1000 1 \u0026lt;= N \u0026lt;= 10^9 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Solution { public boolean queryString(String S, int N) { for (int i = 1; i \u0026lt;= N; i++) { String binary = Integer.toBinaryString(i); if (!searchRK(S, binary)) { return false; } } return true; } boolean search(String s, String p) { return s.contains(p); } boolean searchRK(String s, String p) { int n = s.length(); int m = p.length(); int x = 3; int ht = hash(p, 0, m, x, m); int hs = hash(s, 0, m, x, m); for (int i = 0; i \u0026lt; n - m; i++) { if (hs == ht) { return true; } hs = (hs * x - code(s, i) * pow(x, m) + code(s, i + m)); } return ht == hs; } int code(String s, int i) { return s.charAt(i) - \u0026#39;0\u0026#39;; } static int pow(int a, int b) { return (int) Math.pow(a, b); } int hash(String str, int s, int e, int x, int m) { int h = 0; int degree = m - 1; for (int i = s; i \u0026lt; e; i++) { h = h + code(str, i) * pow(x, degree); degree--; } return h; } } ","permalink":"https://volyx.in/posts/2021-04-17-queries-on-number-of-points-inside-a-circle/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n/\"\u003e1016. Binary String With Substrings Representing 1 To N\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a binary string S (a string consisting only of \u0026lsquo;0\u0026rsquo; and \u0026lsquo;1\u0026rsquo;s) and a positive integer N, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;0110\u0026#34;, N = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;0110\u0026#34;, N = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"1016. Binary String With Substrings Representing 1 To N"},{"content":"1365. How Many Numbers Are Smaller Than the Current Number\nGiven the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j\u0026rsquo;s such that j != i and nums[j] \u0026lt; nums[i].\nReturn the answer in an array.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: nums = [8,1,2,2,3] Output: [4,0,1,1,3] Explanation: For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). For nums[1]=1 does not exist any smaller number than it. For nums[2]=2 there exist one smaller number than it (1). For nums[3]=2 there exist one smaller number than it (1). For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2). 1 2 3 4 Example 2: Input: nums = [6,5,4,8] Output: [2,1,0,3] 1 2 3 4 Example 3: Input: nums = [7,7,7,7] Output: [0,0,0,0] Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 500 0 \u0026lt;= nums[i] \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int[] smallerNumbersThanCurrent(int[] nums) { int[] count = new int[101]; for (int n: nums) { count[n]++; } for (int i = 1; i \u0026lt; count.length; i++) { count[i] = count[i] + count[i - 1]; } int[] order = new int[nums.length]; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == 0) continue; order[i] = count[nums[i] - 1]; } return order; } } ","permalink":"https://volyx.in/posts/2021-04-17-how-many-numbers-are-smaller-than-the-current-number/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/\"\u003e1365. How Many Numbers Are Smaller Than the Current Number\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j\u0026rsquo;s such that j != i and nums[j] \u0026lt; nums[i].\u003c/p\u003e\n\u003cp\u003eReturn the answer in an array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [8,1,2,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,0,1,1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor nums[1]=1 does not exist any smaller number than it.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor nums[2]=2 there exist one smaller number than it (1). \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor nums[3]=2 there exist one smaller number than it (1). \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [6,5,4,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1,0,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [7,7,7,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,0,0,0]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1365. How Many Numbers Are Smaller Than the Current Number"},{"content":"1827. Minimum Operations to Make the Array Increasing\nYou are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\nFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3]. Return the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] \u0026lt; nums[i+1] for all 0 \u0026lt;= i \u0026lt; nums.length - 1. An array of length 1 is trivially strictly increasing.\n1 2 3 4 5 6 7 8 Example 1: Input: nums = [1,1,1] Output: 3 Explanation: You can do the following operations: 1) Increment nums[2], so nums becomes [1,1,2]. 2) Increment nums[1], so nums becomes [1,2,2]. 3) Increment nums[2], so nums becomes [1,2,3]. 1 2 3 4 Example 2: Input: nums = [1,5,2,4,1] Output: 14 1 2 3 4 Example 3: Input: nums = [8] Output: 0 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 5000 1 \u0026lt;= nums[i] \u0026lt;= 104 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { // nums = [1,5,2,4,1] // nums = [1,5,6,4,1] public int minOperations(int[] nums) { if (nums.length == 1) { return 0; } int count = 0; for (int i = 1; i \u0026lt; nums.length; i++) { if (nums[i - 1] \u0026gt;= nums[i]) { int diff = nums[i - 1] - nums[i] + 1; count = count + diff; nums[i] = nums[i] + diff; } } return count; } } ","permalink":"https://volyx.in/posts/2021-04-17-minimum-operations-to-make-the-array-increasing/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-operations-to-make-the-array-increasing/\"\u003e1827. Minimum Operations to Make the Array Increasing\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the minimum number of operations needed to make nums strictly increasing.\u003c/p\u003e\n\u003cp\u003eAn array nums is strictly increasing if nums[i] \u0026lt; nums[i+1] for all 0 \u0026lt;= i \u0026lt; nums.length - 1. An array of length 1 is trivially strictly increasing.\u003c/p\u003e","title":"1827. Minimum Operations to Make the Array Increasing"},{"content":"1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance\nThere are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.\nNotice that the distance of a path connecting cities i and j is equal to the sum of the edges\u0026rsquo; weights along that path.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4 Output: 3 Explanation: The figure above describes the graph. The neighboring cities at a distanceThreshold = 4 for each city are: City 0 -\u0026gt; [City 1, City 2] City 1 -\u0026gt; [City 0, City 2, City 3] City 2 -\u0026gt; [City 0, City 1, City 3] City 3 -\u0026gt; [City 1, City 2] Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number. 1 2 3 4 5 6 7 8 9 10 11 12 Example 2: Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2 Output: 0 Explanation: The figure above describes the graph. The neighboring cities at a distanceThreshold = 2 for each city are: City 0 -\u0026gt; [City 1] City 1 -\u0026gt; [City 0, City 4] City 2 -\u0026gt; [City 3, City 4] City 3 -\u0026gt; [City 2, City 4] City 4 -\u0026gt; [City 1, City 2, City 3] The city 0 has 1 neighboring city at a distanceThreshold = 2. Constraints:\n2 \u0026lt;= n \u0026lt;= 100 1 \u0026lt;= edges.length \u0026lt;= n * (n - 1) / 2 edges[i].length == 3 0 \u0026lt;= fromi \u0026lt; toi \u0026lt; n 1 \u0026lt;= weighti, distanceThreshold \u0026lt;= 10^4 All pairs (fromi, toi) are distinct. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /* // Definition for a Node. class Node { public int val; public List\u0026lt;Node\u0026gt; neighbors; public Node() { val = 0; neighbors = new ArrayList\u0026lt;Node\u0026gt;(); } public Node(int _val) { val = _val; neighbors = new ArrayList\u0026lt;Node\u0026gt;(); } public Node(int _val, ArrayList\u0026lt;Node\u0026gt; _neighbors) { val = _val; neighbors = _neighbors; } } */ class Solution { Node[] map = new Node[101]; public Node cloneGraph(Node node) { if (node == null) return null; if (map[node.val] != null) { return map[node.val]; } Node clone = new Node(node.val); map[clone.val] = clone; for (Node n: node.neighbors) { clone.neighbors.add(cloneGraph(n)); } return clone; } } ","permalink":"https://volyx.in/posts/2021-04-11-find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/\"\u003e1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.\u003c/p\u003e\n\u003cp\u003eReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.\u003c/p\u003e","title":"1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance"},{"content":"1631. Path With Minimum Effort\nYou are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\nA route\u0026rsquo;s effort is the maximum absolute difference in heights between two consecutive cells of the route.\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.\n1 2 3 4 5 6 Example 1: Input: heights = [[1,2,2],[3,8,2],[5,3,5]] Output: 2 Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells. This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3. 1 2 3 4 5 Example 2: Input: heights = [[1,2,3],[3,8,4],[5,3,5]] Output: 1 Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]. 1 2 3 4 5 Example 3: Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] Output: 0 Explanation: This route does not require any effort. Constraints:\nrows == heights.length columns == heights[i].length 1 \u0026lt;= rows, columns \u0026lt;= 100 1 \u0026lt;= heights[i][j] \u0026lt;= 106 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { int[][] DIRS = new int[][] {{-1, 0},{1, 0},{0, -1},{0, 1}}; public int minimumEffortPath(int[][] heights) { int n = heights.length; int m = heights[0].length; int[][] d = new int[n][m]; for (int i = 0; i \u0026lt; n; i++) { Arrays.fill(d[i], Integer.MAX_VALUE); } d[0][0] = 0; PriorityQueue\u0026lt;int[]\u0026gt; pq = new PriorityQueue\u0026lt;\u0026gt;((a, b) -\u0026gt; { return a[2] - b[2]; }); pq.add(new int[] {0, 0, 0}); // i - j - cost while (pq.size() \u0026gt; 0) { int[] s = pq.poll(); int row = s[0]; int col = s[1]; int eff = s[2]; if (row == n - 1 \u0026amp;\u0026amp; col == m - 1) return eff; for (int[] dir: DIRS) { int r = row + dir[0]; int c = col + dir[1]; if (r \u0026gt;= 0 \u0026amp;\u0026amp; r \u0026lt; n \u0026amp;\u0026amp; c \u0026gt;= 0 \u0026amp;\u0026amp; c \u0026lt; m) { int newEffort = Math.max(eff, Math.abs(heights[r][c] - heights[row][col])); if (newEffort \u0026lt; d[r][c]) { d[r][c] = newEffort; pq.add(new int[] {r, c, newEffort}); } } } } return -1; } } ","permalink":"https://volyx.in/posts/2021-04-13-path-with-minimum-effort/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/path-with-minimum-effort/\"\u003e1631. Path With Minimum Effort\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\u003c/p\u003e","title":"1631. Path With Minimum Effort"},{"content":"1779. Find Nearest Point That Has the Same X or Y Coordinate\nYou are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).\n1 2 3 4 5 Example 1: Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]] Output: 2 Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2. 1 2 3 4 5 Example 2: Input: x = 3, y = 4, points = [[3,4]] Output: 0 Explanation: The answer is allowed to be on the same location as your current location. 1 2 3 4 5 Example 3: Input: x = 3, y = 4, points = [[2,3]] Output: -1 Explanation: There are no valid points. Constraints:\n1 \u0026lt;= points.length \u0026lt;= 104 points[i].length == 2 1 \u0026lt;= x, y, ai, bi \u0026lt;= 104 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int nearestValidPoint(int x, int y, int[][] points) { int[] target = new int[] {x, y}; Integer max = Integer.MAX_VALUE; Integer distance = null; int index = -1; for (int i = 0; i \u0026lt; points.length; i++) { int[] p = points[i]; distance = distance(p, target); if ((target[0] == p[0] || target[1] == p[1]) \u0026amp;\u0026amp; distance \u0026lt; max) { max = distance; index = i; } } return index; } int distance(int[] a, int[] b) { return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]); } } ","permalink":"https://volyx.in/posts/2021-04-12-find-nearest-point-that-has-the-same-x-or-y-coordinate/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/\"\u003e1779. Find Nearest Point That Has the Same X or Y Coordinate\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\u003c/p\u003e\n\u003cp\u003eReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\u003c/p\u003e","title":"1779. Find Nearest Point That Has the Same X or Y Coordinate"},{"content":"133. Clone Graph\nGiven a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a val (int) and a list (List[Node]) of its neighbors.\n1 2 3 4 class Node { public int val; public List\u0026lt;Node\u0026gt; neighbors; } Test case format:\nFor simplicity sake, each node\u0026rsquo;s value is the same as the node\u0026rsquo;s index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.\nAdjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\n1 2 3 4 5 6 7 8 9 Example 1: Input: adjList = [[2,4],[1,3],[2,4],[1,3]] Output: [[2,4],[1,3],[2,4],[1,3]] Explanation: There are 4 nodes in the graph. 1st node (val = 1)\u0026#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)\u0026#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)\u0026#39;s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)\u0026#39;s neighbors are 1st node (val = 1) and 3rd node (val = 3). 1 2 3 4 5 Example 2: Input: adjList = [[]] Output: [[]] Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors. 1 2 3 4 5 Example 3: Input: adjList = [] Output: [] Explanation: This an empty graph, it does not have any nodes. 1 2 3 4 Example 4: Input: adjList = [[2],[1]] Output: [[2],[1]] Constraints:\n1 \u0026lt;= Node.val \u0026lt;= 100 Node.val is unique for each node. Number of Nodes will not exceed 100. There is no repeated edges and no self-loops in the graph. The Graph is connected and all nodes can be visited starting from the given node. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /* // Definition for a Node. class Node { public int val; public List\u0026lt;Node\u0026gt; neighbors; public Node() { val = 0; neighbors = new ArrayList\u0026lt;Node\u0026gt;(); } public Node(int _val) { val = _val; neighbors = new ArrayList\u0026lt;Node\u0026gt;(); } public Node(int _val, ArrayList\u0026lt;Node\u0026gt; _neighbors) { val = _val; neighbors = _neighbors; } } */ class Solution { Node[] map = new Node[101]; public Node cloneGraph(Node node) { if (node == null) return null; if (map[node.val] != null) { return map[node.val]; } Node clone = new Node(node.val); map[clone.val] = clone; for (Node n: node.neighbors) { clone.neighbors.add(cloneGraph(n)); } return clone; } } Solution 2021-11-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { Map\u0026lt;Integer, Node\u0026gt; cache = new HashMap\u0026lt;\u0026gt;(); public Node cloneGraph(Node node) { if (node == null) return null; Node curr = cache.get(node.val); if (curr != null) return curr; curr = new Node(node.val); cache.put(curr.val, curr); for (Node nei: node.neighbors) { curr.neighbors.add(cloneGraph(nei)); } return curr; } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { Map\u0026lt;Integer, Node\u0026gt; cache = new HashMap\u0026lt;\u0026gt;(); public Node cloneGraph(Node node) { if (node == null) return null; if (cache.containsKey(node.val)) { return cache.get(node.val); } Node newNode = new Node(node.val); cache.put(newNode.val, newNode); for (Node nei: node.neighbors) { newNode.neighbors.add(cloneGraph(nei)); } return newNode; } } ","permalink":"https://volyx.in/posts/2021-04-09-clone-graph/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/clone-graph/\"\u003e133. Clone Graph\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a reference of a node in a connected undirected graph.\u003c/p\u003e\n\u003cp\u003eReturn a deep copy (clone) of the graph.\u003c/p\u003e\n\u003cp\u003eEach node in the graph contains a val (int) and a list (List[Node]) of its neighbors.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e neighbors;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eTest case format:\u003c/p\u003e\n\u003cp\u003eFor simplicity sake, each node\u0026rsquo;s value is the same as the node\u0026rsquo;s index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.\u003c/p\u003e","title":"133. Clone Graph"},{"content":"1514. Path with Maximum Probability\nThere are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some server unable to reach some other server.\nReturn all critical connections in the network in any order.\n1 2 3 4 5 Example 1: Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]] Output: [[1,3]] Explanation: [[3,1]] is also accepted. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class Solution { // Brute Force, many DFS , O(E * (N + E)) Time Limit Exceeded public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; criticalConnections2(int n, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; connections) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int skip = 0; skip \u0026lt; connections.size(); skip++) { boolean[] visited = new boolean[n]; int count = 0; for (int i = 0; i \u0026lt; n; i++) { if (!visited[i]) { dfs1(i, skip, connections, visited); count++; } } if (count != 1) { res.add(connections.get(skip)); } } return res; } void dfs1(int i, int skip, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; connections, boolean[] visited) { visited[i] = true; for (int edgeIndex = 0; edgeIndex \u0026lt; connections.size(); edgeIndex++) { if (edgeIndex == skip) continue; List\u0026lt;Integer\u0026gt; edge = connections.get(edgeIndex); int a = edge.get(0); int b = edge.get(1); if (a == i \u0026amp;\u0026amp; !visited[b]) { dfs1(b, skip, connections, visited); } if (b == i \u0026amp;\u0026amp; !visited[a]) { dfs1(a, skip, connections, visited); } } } List\u0026lt;Integer\u0026gt;[] G; int[] disc; int[] low; List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; criticalConnections(int n, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; connections) { disc = new int[n]; low = new int[n]; G = build(n, connections); dfs(0, -1, 1); return res; } void dfs(int node, int parent, int time) { disc[node] = time; low[node] = time; for (int n : G[node]) { if (n == parent) continue; if (disc[n] == 0) { dfs(n, node, ++time); } low[node] = Math.min(low[node], low[n]); if (disc[node] \u0026lt; low[n]) { res.add(Arrays.asList(node, n)); } } } List\u0026lt;Integer\u0026gt;[] build(int n, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; connections) { G = new List[n]; for (int i = 0; i \u0026lt; n; i++) { G[i] = new ArrayList\u0026lt;\u0026gt;(); } for (var con: connections) { G[con.get(0)].add(con.get(1)); G[con.get(1)].add(con.get(0)); } return G; } } ","permalink":"https://volyx.in/posts/2021-04-08-critical-connections-in-a-network/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/critical-connections-in-a-network/\"\u003e1514. Path with Maximum Probability\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.\u003c/p\u003e\n\u003cp\u003eA critical connection is a connection that, if removed, will make some server unable to reach some other server.\u003c/p\u003e\n\u003cp\u003eReturn all critical connections in the network in any order.\u003c/p\u003e","title":"1192. Critical Connections in a Network"},{"content":"1514. Path with Maximum Probability\nYou are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].\nGiven two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.\nIf there is no path from start to end, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.\n1 2 3 4 5 Example 1: Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2 Output: 0.25000 Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25. 1 2 3 4 Example 2: Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2 Output: 0.30000 1 2 3 4 5 Example 3: Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2 Output: 0.00000 Explanation: There is no path between 0 and 2. Constraints:\n2 \u0026lt;= n \u0026lt;= 10^4 0 \u0026lt;= start, end \u0026lt; n start != end 0 \u0026lt;= a, b \u0026lt; n a != b 0 \u0026lt;= succProb.length == edges.length \u0026lt;= 2*10^4 0 \u0026lt;= succProb[i] \u0026lt;= 1 There is at most one edge between every two nodes. Solution 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { boolean[] visited = new boolean[10_0000]; public boolean canReach(int[] arr, int start) { if (start \u0026lt; 0 || start \u0026gt;= arr.length) return false; if (visited[start]) return false; visited[start] = true; if (arr[start] == 0) return true; int right = start + arr[start]; int left = start - arr[start]; return canReach(arr, left) || canReach(arr, right); } } ","permalink":"https://volyx.in/posts/2021-04-07-path-with-maximum-probability/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/path-with-maximum-probability/\"\u003e1514. Path with Maximum Probability\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succProb[i].\u003c/p\u003e\n\u003cp\u003eGiven two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.\u003c/p\u003e","title":"1514. Path with Maximum Probability"},{"content":"1306. Jump Game III\nGiven an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.\nNotice that you can not jump outside of the array at any time.\n1 2 3 4 5 6 7 8 Example 1: Input: arr = [4,2,3,0,3,1,2], start = 5 Output: true Explanation: All possible ways to reach at index 3 with value 0 are: index 5 -\u0026gt; index 4 -\u0026gt; index 1 -\u0026gt; index 3 index 5 -\u0026gt; index 6 -\u0026gt; index 4 -\u0026gt; index 1 -\u0026gt; index 3 1 2 3 4 5 6 7 Example 2: Input: arr = [4,2,3,0,3,1,2], start = 0 Output: true Explanation: One possible way to reach at index 3 with value 0 is: index 0 -\u0026gt; index 4 -\u0026gt; index 1 -\u0026gt; index 3 1 2 3 4 5 Example 3: Input: arr = [3,0,2,1,2], start = 2 Output: false Explanation: There is no way to reach at index 1 with value 0. Constraints:\n1 \u0026lt;= arr.length \u0026lt;= 5 * 104 0 \u0026lt;= arr[i] \u0026lt; arr.length 0 \u0026lt;= start \u0026lt; arr.length Solution 1 2 3 4 5 6 7 8 9 10 11 12 class Solution { boolean[] visited = new boolean[10_0000]; public boolean canReach(int[] arr, int start) { if (start \u0026lt; 0 || start \u0026gt;= arr.length) return false; if (visited[start]) return false; visited[start] = true; if (arr[start] == 0) return true; int right = start + arr[start]; int left = start - arr[start]; return canReach(arr, left) || canReach(arr, right); } } ","permalink":"https://volyx.in/posts/2021-04-06-jump-game-iii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/jump-game-iii/\"\u003e1306. Jump Game III\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of non-negative integers arr, you are initially positioned at start index of the array. When you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.\u003c/p\u003e\n\u003cp\u003eNotice that you can not jump outside of the array at any time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [4,2,3,0,3,1,2], start = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAll possible ways to reach at index 3 with value 0 are: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eindex 5 -\u0026gt; index 4 -\u0026gt; index 1 -\u0026gt; index 3 \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eindex 5 -\u0026gt; index 6 -\u0026gt; index 4 -\u0026gt; index 1 -\u0026gt; index 3 \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [4,2,3,0,3,1,2], start = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOne possible way to reach at index 3 with value 0 is: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eindex 0 -\u0026gt; index 4 -\u0026gt; index 1 -\u0026gt; index 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: arr = [3,0,2,1,2], start = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There is no way to reach at index 1 with value 0.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1306. Jump Game III"},{"content":"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree\nGiven two binary trees original and cloned and given a reference to a node target in the original tree.\nThe cloned tree is a copy of the original tree.\nReturn a reference to the same node in the cloned tree.\nNote that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.\nFollow up: Solve the problem if repeated values on the tree are allowed.\n1 2 3 4 5 Example 1: Input: tree = [7,4,3,null,null,6,19], target = 3 Output: 3 Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree. 1 2 3 4 Example 2: Input: tree = [7], target = 7 Output: 7 1 2 3 4 Example 3: Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4 Output: 4 1 2 3 4 Example 4: Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5 Output: 5 1 2 3 4 Example 5: Input: tree = [1,2,null,3], target = 2 Output: 2 Constraints:\nThe number of nodes in the tree is in the range [1, 10^4]. The values of the nodes of the tree are unique. target node is a node from the original tree and is not null. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { TreeNode ans = null; public final TreeNode getTargetCopy( final TreeNode original, final TreeNode cloned, final TreeNode target) { if (original == null) return null; if (original.val == target.val) { ans = cloned; return cloned; } getTargetCopy(original.left, cloned.left, target); getTargetCopy(original.right, cloned.right, target); return ans; } } ","permalink":"https://volyx.in/posts/2021-04-06-find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree/\"\u003e1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two binary trees original and cloned and given a reference to a node target in the original tree.\u003c/p\u003e\n\u003cp\u003eThe cloned tree is a copy of the original tree.\u003c/p\u003e\n\u003cp\u003eReturn a reference to the same node in the cloned tree.\u003c/p\u003e\n\u003cp\u003eNote that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.\u003c/p\u003e","title":"1379. Find a Corresponding Node of a Binary Tree in a Clone of That Tree"},{"content":"1584. Min Cost to Connect All Points\nYou are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.\n1 2 3 4 5 6 7 8 Example 1: Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]] Output: 20 Explanation: We can connect the points as shown above to get the minimum cost of 20. Notice that there is a unique path between every pair of points. 1 2 3 4 Example 2: Input: points = [[3,12],[-2,5],[-4,1]] Output: 18 1 2 3 4 Example 3: Input: points = [[0,0],[1,1],[1,0],[-1,1]] Output: 4 1 2 3 4 Example 4: Input: points = [[-1000000,-1000000],[1000000,1000000]] Output: 4000000 1 2 3 4 Example 5: Input: points = [[0,0]] Output: 0 Constraints:\n1 \u0026lt;= points.length \u0026lt;= 1000 -106 \u0026lt;= xi, yi \u0026lt;= 106 All pairs (xi, yi) are distinct. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class Solution { int[] a; public int minCostConnectPoints(int[][] points) { int n = points.length; a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } PriorityQueue\u0026lt;Edge\u0026gt; pq = new PriorityQueue\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { if (i != j) { int[] a = points[i]; int[] b = points[j]; int w = Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]); pq.add(new Edge(i, j, w)); } } } int sum = 0; while (pq.size() \u0026gt; 0) { Edge e = pq.poll(); if (!same(e.a, e.b)) { union(e.a, e.b); sum += e.w; } } return sum; } boolean same(int p, int q) { return find(p) == find(q); } int find(int p) { while (a[p] != p) { p = a[p]; a[p] = a[a[p]]; } return p; } void union(int p, int q) { int pid = find(p); int qid = find(q); a[qid] = pid; } class Edge implements Comparable\u0026lt;Edge\u0026gt; { int a; int b; int w; public Edge(int a, int b, int w) { this.a = a; this.b = b; this.w = w; } public int compareTo(Edge other) { return Integer.compare(this.w, other.w); } } } ","permalink":"https://volyx.in/posts/2021-04-06-min-cost-to-connect-all-points/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/min-cost-to-connect-all-points/\"\u003e1584. Min Cost to Connect All Points\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\u003c/p\u003e\n\u003cp\u003eThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\u003c/p\u003e\n\u003cp\u003eReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.\u003c/p\u003e","title":"1584. Min Cost to Connect All Points"},{"content":"538. Convert BST to Greater Tree\nGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key. The right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key. Both the left and right subtrees must also be binary search trees. Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\n1 2 3 4 Example 1: Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] 1 2 3 4 Example 2: Input: root = [0,null,1] Output: [1,null,1] 1 2 3 4 Example 3: Input: root = [1,0,2] Output: [3,3,2] 1 2 3 4 Example 4: Input: root = [3,2,4,1] Output: [7,9,4,10] Constraints:\nThe number of nodes in the tree is in the range [0, 104]. -104 \u0026lt;= Node.val \u0026lt;= 104 All the values in the tree are unique. root is guaranteed to be a valid binary search tree. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int sum = 0; public TreeNode convertBST(TreeNode root) { if (root == null) return null; convertBST(root.right); sum += root.val; root.val = sum; convertBST(root.left); return root; } } ","permalink":"https://volyx.in/posts/2021-04-06-convert-bst-to-greater-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/convert-bst-to-greater-tree/\"\u003e538. Convert BST to Greater Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.\u003c/p\u003e\n\u003cp\u003eAs a reminder, a binary search tree is a tree that satisfies these constraints:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe left subtree of a node contains only nodes with keys less than the node\u0026rsquo;s key.\u003c/li\u003e\n\u003cli\u003eThe right subtree of a node contains only nodes with keys greater than the node\u0026rsquo;s key.\u003c/li\u003e\n\u003cli\u003eBoth the left and right subtrees must also be binary search trees.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNote: This question is the same as 1038: \u003ca href=\"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\"\u003ehttps://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\u003c/a\u003e\u003c/p\u003e","title":"538. Convert BST to Greater Tree"},{"content":"897. Increasing Order Search Tree\nGiven the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\n1 2 3 4 Example 1: Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9] Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9] 1 2 3 4 Example 2: Input: root = [5,1,7] Output: [1,null,5,null,7] Constraints:\nThe number of nodes in the given tree will be in the range [1, 100]. 0 \u0026lt;= Node.val \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { TreeNode res = null; TreeNode next = null; public TreeNode increasingBST(TreeNode root) { if (root == null) return null; dfs(root); return res; } void dfs(TreeNode node) { if (node == null) return; dfs(node.left); if (res == null) { res = new TreeNode(node.val); next = res; } else { next.right = new TreeNode(node.val); next = next.right; } dfs(node.right); } } ","permalink":"https://volyx.in/posts/2021-04-06-increasing-order-search-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/increasing-order-search-tree/\"\u003e897. Increasing Order Search Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-04-06-ex1.jpg\"\u003e\u003c/p\u003e","title":"897. Increasing Order Search Tree"},{"content":"1813. Sentence Similarity III\nA sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, \u0026ldquo;Hello World\u0026rdquo;, \u0026ldquo;HELLO\u0026rdquo;, \u0026ldquo;hello world hello world\u0026rdquo; are all sentences. Words consist of only uppercase and lowercase English letters.\nTwo sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, sentence1 = \u0026ldquo;Hello my name is Jane\u0026rdquo; and sentence2 = \u0026ldquo;Hello Jane\u0026rdquo; can be made equal by inserting \u0026ldquo;my name is\u0026rdquo; between \u0026ldquo;Hello\u0026rdquo; and \u0026ldquo;Jane\u0026rdquo; in sentence2.\nGiven two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.\n1 2 3 4 5 Example 1: Input: sentence1 = \u0026#34;My name is Haley\u0026#34;, sentence2 = \u0026#34;My Haley\u0026#34; Output: true Explanation: sentence2 can be turned to sentence1 by inserting \u0026#34;name is\u0026#34; between \u0026#34;My\u0026#34; and \u0026#34;Haley\u0026#34;. 1 2 3 4 5 Example 2: Input: sentence1 = \u0026#34;of\u0026#34;, sentence2 = \u0026#34;A lot of words\u0026#34; Output: false Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other. 1 2 3 4 5 Example 3: Input: sentence1 = \u0026#34;Eating right now\u0026#34;, sentence2 = \u0026#34;Eating\u0026#34; Output: true Explanation: sentence2 can be turned to sentence1 by inserting \u0026#34;right now\u0026#34; at the end of the sentence. 1 2 3 4 Example 4: Input: sentence1 = \u0026#34;Luky\u0026#34;, sentence2 = \u0026#34;Lucccky\u0026#34; Output: false Constraints:\n1 \u0026lt;= sentence1.length, sentence2.length \u0026lt;= 100 sentence1 and sentence2 consist of lowercase and uppercase English letters and spaces. The words in sentence1 and sentence2 are separated by a single space. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public boolean areSentencesSimilar(String sentence1, String sentence2) { String[] words1 = sentence1.split(\u0026#34; \u0026#34;); String[] words2 = sentence2.split(\u0026#34; \u0026#34;); int n1 = words1.length; int n2 = words2.length; if (n2 \u0026lt; n1) { return areSentencesSimilar(sentence2, sentence1); } int i = 0; while (i \u0026lt; n1 \u0026amp;\u0026amp; words1[i].equals(words2[i])) { i++; } while (i \u0026lt; n1 \u0026amp;\u0026amp; words1[i].equals(words2[n2 - n1 + i])) { i++; } return n1 == i; } } ","permalink":"https://volyx.in/posts/2021-04-05-sentence-similarity-iii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/sentence-similarity-iii/\"\u003e1813. Sentence Similarity III\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eA sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, \u0026ldquo;Hello World\u0026rdquo;, \u0026ldquo;HELLO\u0026rdquo;, \u0026ldquo;hello world hello world\u0026rdquo; are all sentences. Words consist of only uppercase and lowercase English letters.\u003c/p\u003e\n\u003cp\u003eTwo sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, sentence1 = \u0026ldquo;Hello my name is Jane\u0026rdquo; and sentence2 = \u0026ldquo;Hello Jane\u0026rdquo; can be made equal by inserting \u0026ldquo;my name is\u0026rdquo; between \u0026ldquo;Hello\u0026rdquo; and \u0026ldquo;Jane\u0026rdquo; in sentence2.\u003c/p\u003e","title":"1813. Sentence Similarity III"},{"content":"690. Employee Importance\nYou are given a data structure of employee information, which includes the employee\u0026rsquo;s unique id, their importance value and their direct subordinates\u0026rsquo; id.\nFor example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.\nNow given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their subordinates.\n1 2 3 4 5 6 Example 1: Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1 Output: 11 Explanation: Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11. Note:\nOne employee has at most one direct leader and may have several subordinates. The maximum number of employees won\u0026rsquo;t exceed 2000. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /* // Definition for Employee. class Employee { public int id; public int importance; public List\u0026lt;Integer\u0026gt; subordinates; }; */ class Solution { int sum = 0; boolean[] visited = new boolean[2001]; public int getImportance(List\u0026lt;Employee\u0026gt; employees, int id) { for (var e: employees) { if (e.id == id) { dfs(employees, id); } } return sum; } void dfs(List\u0026lt;Employee\u0026gt; employees, int id) { visited[id] = true; for (var e: employees) { if (e.id == id) { sum += e.importance; for (Integer sub: e.subordinates) { if (!visited[sub]) { dfs(employees, sub); } } } } } } ","permalink":"https://volyx.in/posts/2021-04-05-employee-importance/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/employee-importance/\"\u003e690. Employee Importance\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a data structure of employee information, which includes the employee\u0026rsquo;s unique id, their importance value and their direct subordinates\u0026rsquo; id.\u003c/p\u003e\n\u003cp\u003eFor example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.\u003c/p\u003e","title":"690. Employee Importance"},{"content":"1387. Sort Integers by The Power Value\nThe power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:\nif x is even then x = x / 2 if x is odd then x = 3 * x + 1 For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 \u0026ndash;\u0026gt; 10 \u0026ndash;\u0026gt; 5 \u0026ndash;\u0026gt; 16 \u0026ndash;\u0026gt; 8 \u0026ndash;\u0026gt; 4 \u0026ndash;\u0026gt; 2 \u0026ndash;\u0026gt; 1).\nGiven three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.\nReturn the k-th integer in the range [lo, hi] sorted by the power value.\nNotice that for any integer x (lo \u0026lt;= x \u0026lt;= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in 32 bit signed integer.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: lo = 12, hi = 15, k = 2 Output: 13 Explanation: The power of 12 is 9 (12 --\u0026gt; 6 --\u0026gt; 3 --\u0026gt; 10 --\u0026gt; 5 --\u0026gt; 16 --\u0026gt; 8 --\u0026gt; 4 --\u0026gt; 2 --\u0026gt; 1) The power of 13 is 9 The power of 14 is 17 The power of 15 is 17 The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13. Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15. 1 2 3 4 Example 2: Input: lo = 1, hi = 1, k = 1 Output: 1 1 2 3 4 5 6 7 Example 3: Input: lo = 7, hi = 11, k = 4 Output: 7 Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14]. The interval sorted by power is [8, 10, 11, 7, 9]. The fourth number in the sorted array is 7. 1 2 3 4 Example 4: Input: lo = 10, hi = 20, k = 5 Output: 13 1 2 3 4 Example 5: Input: lo = 1, hi = 1000, k = 777 Output: 570 Constraints:\n1 \u0026lt;= lo \u0026lt;= hi \u0026lt;= 1000 1 \u0026lt;= k \u0026lt;= hi - lo + 1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { Map\u0026lt;Integer, Integer\u0026gt; cache = new HashMap\u0026lt;\u0026gt;(); public int getKth(int lo, int hi, int k) { var powIndex = new PriorityQueue\u0026lt;int[]\u0026gt;((a, b) -\u0026gt; { int c = Integer.compare(a[0], b[0]); if (c != 0) return c; return Integer.compare(a[1], b[1]); }); cache.put(0, 0); cache.put(1, 0); for (int i = lo; i \u0026lt;= hi; i++) { int steps = power(i); powIndex.add(new int[] {steps, i}); } while (--k \u0026gt; 0) { powIndex.poll(); } return powIndex.poll()[1]; } int power(int x) { if (x == 1) return 0; if (cache.containsKey(x)) { return cache.get(x); } int power = 1 + ((x % 2 == 0) ? power(x / 2) : power( 3 * x + 1)); cache.put(x, power); return power; } } ","permalink":"https://volyx.in/posts/2021-04-03-sort-integers-by-the-power-value/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/sort-integers-by-the-power-value/\"\u003e1387. Sort Integers by The Power Value\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eif x is even then x = x / 2\u003c/li\u003e\n\u003cli\u003eif x is odd then x = 3 * x + 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 \u0026ndash;\u0026gt; 10 \u0026ndash;\u0026gt; 5 \u0026ndash;\u0026gt; 16 \u0026ndash;\u0026gt; 8 \u0026ndash;\u0026gt; 4 \u0026ndash;\u0026gt; 2 \u0026ndash;\u0026gt; 1).\u003c/p\u003e","title":"1387. Sort Integers by The Power Value"},{"content":"1557. Minimum Number of Vertices to Reach All Nodes\nGiven a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\nFind the smallest set of vertices from which all nodes in the graph are reachable. It\u0026rsquo;s guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.\n1 2 3 4 5 Example 1: Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]] Output: [0,3] Explanation: It\u0026#39;s not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]. 1 2 3 4 5 Example 2: Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]] Output: [0,2,3] Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4. Constraints:\n2 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= edges.length \u0026lt;= min(10^5, n * (n - 1) / 2) edges[i].length == 2 0 \u0026lt;= fromi, toi \u0026lt; n All pairs (fromi, toi) are distinct. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public List\u0026lt;Integer\u0026gt; findSmallestSetOfVertices(int n, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; edges) { int[] indegree = new int[n]; for (var e: edges) { indegree[e.get(1)]++; } List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; indegree.length; i++) { int v = indegree[i]; if (v == 0) { res.add(i); } } return res; } } ","permalink":"https://volyx.in/posts/2021-04-03-minimum-number-of-vertices-to-reach-all-nodes/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/\"\u003e1557. Minimum Number of Vertices to Reach All Nodes\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\u003c/p\u003e\n\u003cp\u003eFind the smallest set of vertices from which all nodes in the graph are reachable. It\u0026rsquo;s guaranteed that a unique solution exists.\u003c/p\u003e\n\u003cp\u003eNotice that you can return the vertices in any order.\u003c/p\u003e","title":"1557. Minimum Number of Vertices to Reach All Nodes"},{"content":"1812. Determine Color of a Chessboard Square\nYou are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\n1 2 3 4 5 Example 1: Input: coordinates = \u0026#34;a1\u0026#34; Output: false Explanation: From the chessboard above, the square with coordinates \u0026#34;a1\u0026#34; is black, so return false. 1 2 3 4 5 Example 2: Input: coordinates = \u0026#34;h3\u0026#34; Output: true Explanation: From the chessboard above, the square with coordinates \u0026#34;h3\u0026#34; is white, so return true. 1 2 3 4 Example 3: Input: coordinates = \u0026#34;c7\u0026#34; Output: false Constraints:\ncoordinates.length == 2 \u0026lsquo;a\u0026rsquo; \u0026lt;= coordinates[0] \u0026lt;= \u0026lsquo;h\u0026rsquo; \u0026lsquo;1\u0026rsquo; \u0026lt;= coordinates[1] \u0026lt;= \u0026lsquo;8\u0026rsquo; Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public boolean squareIsWhite(String coordinates) { int col = coordinates.charAt(0) - \u0026#39;a\u0026#39;; int row = coordinates.charAt(1) - \u0026#39;1\u0026#39;; System.out.println(col + \u0026#34; \u0026#34; + row); if (col % 2 == 0) { if (row % 2 != 0) { return true; // white } else { return false; } } else { // h3 if (row % 2 == 0) { return true; // white } else { return false; } } } } ","permalink":"https://volyx.in/posts/2021-04-03-determine-color-of-a-chessboard-square/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/determine-color-of-a-chessboard-square/\"\u003e1812. Determine Color of a Chessboard Square\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-04-03-chess-ex1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eReturn true if the square is white, and false if the square is black.\u003c/p\u003e\n\u003cp\u003eThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: coordinates = \u0026#34;a1\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: From the chessboard above, the square with coordinates \u0026#34;a1\u0026#34; is black, so return false.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: coordinates = \u0026#34;h3\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: From the chessboard above, the square with coordinates \u0026#34;h3\u0026#34; is white, so return true.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: coordinates = \u0026#34;c7\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1812. Determine Color of a Chessboard Square"},{"content":"1814. Count Nice Pairs in an Array\nYou are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\n0 \u0026lt;= i \u0026lt; j \u0026lt; nums.length nums[i] + rev(nums[j]) == nums[j] + rev(nums[i]) Return the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.\n1 2 3 4 5 6 7 Example 1: Input: nums = [42,11,1,97] Output: 2 Explanation: The two pairs are: - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121. - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12. 1 2 3 4 Example 2: Input: nums = [13,10,35,24,76] Output: 4 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 105 0 \u0026lt;= nums[i] \u0026lt;= 109 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { int MODULO = 1_000_000_007; public int countNicePairs(int[] nums) { Map\u0026lt;Integer, Integer\u0026gt; diffsMap = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { int rev = rev(nums[i]); int diff = nums[i] - rev; diffsMap.put(diff, diffsMap.getOrDefault(diff, 0) + 1); } long count = 0; for (var e: diffsMap.entrySet()) { long v = e.getValue(); if (v \u0026gt; 1) { v = (v * (v - 1)) / 2; count = (count + v) % MODULO; } } return (int) count; } int rev(int x) { int n = 0; while (x \u0026gt; 0) { int t = x % 10; n = n * 10 + t; x = x / 10; } return n; } } ","permalink":"https://volyx.in/posts/2021-04-03-count-nice-pairs-in-an-array/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/count-nice-pairs-in-an-array/\"\u003e1814. Count Nice Pairs in an Array\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e0 \u0026lt;= i \u0026lt; j \u0026lt; nums.length\u003c/li\u003e\n\u003cli\u003enums[i] + rev(nums[j]) == nums[j] + rev(nums[i])\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the number of nice pairs of indices. Since that number can be too large, return it modulo 109 + 7.\u003c/p\u003e","title":"1814. Count Nice Pairs in an Array"},{"content":"872. Leaf-Similar Trees\nGiven a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\nFind the smallest set of vertices from which all nodes in the graph are reachable. It\u0026rsquo;s guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.\n1 2 3 4 5 Example 1: Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]] Output: [0,3] Explanation: It\u0026#39;s not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]. 1 2 3 4 5 Example 2: Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]] Output: [0,2,3] Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4. Constraints:\n2 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= edges.length \u0026lt;= min(10^5, n * (n - 1) / 2) edges[i].length == 2 0 \u0026lt;= fromi, toi \u0026lt; n All pairs (fromi, toi) are distinct. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public List\u0026lt;Integer\u0026gt; findSmallestSetOfVertices(int n, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; edges) { int[] indegree = new int[n]; for (var e: edges) { indegree[e.get(1)]++; } List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; indegree.length; i++) { int v = indegree[i]; if (v == 0) { res.add(i); } } return res; } } ","permalink":"https://volyx.in/posts/2021-04-03-leaf-similar-trees/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/\"\u003e872. Leaf-Similar Trees\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.\u003c/p\u003e\n\u003cp\u003eFind the smallest set of vertices from which all nodes in the graph are reachable. It\u0026rsquo;s guaranteed that a unique solution exists.\u003c/p\u003e\n\u003cp\u003eNotice that you can return the vertices in any order.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: It\u0026#39;s not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-04-03-reach-ex1.png\"\u003e\u003c/p\u003e","title":"872. Leaf-Similar Trees"},{"content":"563. Binary Tree Tilt\nGiven the root of a binary tree, return the sum of every tree node\u0026rsquo;s tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if there the node does not have a right child.\n1 2 3 4 5 6 7 8 9 Example 1: Input: root = [1,2,3] Output: 1 Explanation: Tilt of node 2 : |0-0| = 0 (no children) Tilt of node 3 : |0-0| = 0 (no children) Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3) Sum of every tilt : 0 + 0 + 1 = 1 1 2 3 4 5 6 7 8 9 10 11 12 Example 2: Input: root = [4,2,9,3,5,null,7] Output: 15 Explanation: Tilt of node 3 : |0-0| = 0 (no children) Tilt of node 5 : |0-0| = 0 (no children) Tilt of node 7 : |0-0| = 0 (no children) Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5) Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7) Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16) Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15 1 2 3 4 Example 3: Input: root = [21,7,14,1,1,2,2,3,3] Output: 9 Constraints:\nThe number of nodes in the tree is in the range [0, 104]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { int[][] dirs = new int [][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1} }; public int closedIsland(int[][] grid) { int count = 0; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 0 \u0026amp;\u0026amp; dfs(i, j, grid)) count++; } } return count; } boolean dfs(int i, int j, int[][] grid) { if (i \u0026lt; 0 || i \u0026gt;= grid.length || j \u0026lt; 0 || j \u0026gt;= grid[0].length) { return false; } if (grid[i][j] == 1) { return true; } grid[i][j] = 1; boolean closed = true; for (int[] dir: dirs) { closed = closed \u0026amp; dfs(dir[0] + i, dir[1] + j, grid); } return closed; } } ","permalink":"https://volyx.in/posts/2021-04-02-binary-tree-tilt/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-tilt/\"\u003e563. Binary Tree Tilt\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the sum of every tree node\u0026rsquo;s tilt.\u003c/p\u003e\n\u003cp\u003eThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if there the node does not have a right child.\u003c/p\u003e","title":"563. Binary Tree Tilt"},{"content":"1254. Number of Closed Islands\nGiven a 2D grid consists of 0s (land) and 1s (water). An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.\nReturn the number of closed islands.\n1 2 3 4 5 6 Example 1: Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]] Output: 2 Explanation: Islands in gray are closed because they are completely surrounded by water (group of 1s). 1 2 3 4 Example 2: Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]] Output: 1 1 2 3 4 5 6 7 8 9 10 Example 3: Input: grid = [[1,1,1,1,1,1,1], [1,0,0,0,0,0,1], [1,0,1,1,1,0,1], [1,0,1,0,1,0,1], [1,0,1,1,1,0,1], [1,0,0,0,0,0,1], [1,1,1,1,1,1,1]] Output: 2 Constraints:\n1 \u0026lt;= grid.length, grid[0].length \u0026lt;= 100 0 \u0026lt;= grid[i][j] \u0026lt;=1 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { int[][] dirs = new int [][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1} }; public int closedIsland(int[][] grid) { int count = 0; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 0 \u0026amp;\u0026amp; dfs(i, j, grid)) count++; } } return count; } boolean dfs(int i, int j, int[][] grid) { if (i \u0026lt; 0 || i \u0026gt;= grid.length || j \u0026lt; 0 || j \u0026gt;= grid[0].length) { return false; } if (grid[i][j] == 1) { return true; } grid[i][j] = 1; boolean closed = true; for (int[] dir: dirs) { closed = closed \u0026amp; dfs(dir[0] + i, dir[1] + j, grid); } return closed; } } ","permalink":"https://volyx.in/posts/2021-04-01-number-of-closed-islands/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/number-of-closed-islands/\"\u003e1254. Number of Closed Islands\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a 2D grid consists of 0s (land) and 1s (water).  An island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.\u003c/p\u003e\n\u003cp\u003eReturn the number of closed islands.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIslands in gray are closed because they are completely surrounded by water (group of 1s).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-04-01-ex1.png\"\u003e\u003c/p\u003e","title":"1254. Number of Closed Islands"},{"content":"695. Max Area of Island\nGiven a non-empty 2D array grid of 0\u0026rsquo;s and 1\u0026rsquo;s, an island is a group of 1\u0026rsquo;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\n1 2 3 4 5 6 7 8 9 10 Example 1: [[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]] Given the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.\n1 2 3 Example 2: [[0,0,0,0,0,0,0,0]] Given the above grid, return 0.\nNote: The length of each dimension in the given grid does not exceed 50.\nSolution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int maxAreaOfIsland(int[][] grid) { int max = 0; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[i].length; j++) { if (grid[i][j] == 1) { max = Math.max(max, dfs(i, j, grid)); } } } return max; } int dfs(int i, int j, int[][] grid) { if (i \u0026lt; 0 || i \u0026gt;= grid.length || j \u0026lt; 0 || j \u0026gt;= grid[i].length || grid[i][j] == 0) { return 0; } grid[i][j] = 0; return 1 + dfs(i + 1, j, grid) + dfs(i - 1, j, grid) + dfs(i, j - 1, grid) + dfs(i, j + 1, grid); } } ","permalink":"https://volyx.in/posts/2021-04-01-max-area-of-island/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/max-area-of-island/\"\u003e695. Max Area of Island\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a non-empty 2D array grid of 0\u0026rsquo;s and 1\u0026rsquo;s, an island is a group of 1\u0026rsquo;s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\u003c/p\u003e\n\u003cp\u003eFind the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[0,0,1,0,0,0,0,1,0,0,0,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,0,0,0,0,0,0,1,1,1,0,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,1,1,0,1,0,0,0,0,0,0,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,1,0,0,1,1,0,0,1,0,1,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,1,0,0,1,1,0,0,1,1,1,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,0,0,0,0,0,0,0,0,0,1,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,0,0,0,0,0,0,1,1,1,0,0,0],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [0,0,0,0,0,0,0,1,1,0,0,0,0]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eGiven the above grid, return 6. Note the answer is not 11, because the island must be connected 4-directionally.\u003c/p\u003e","title":"695. Max Area of Island"},{"content":"1302. Deepest Leaves Sum\nGiven the root of a binary tree, return the sum of values of its deepest leaves.\n1 2 3 4 Example 1: Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] Output: 15 1 2 3 4 Example 2: Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] Output: 19 Constraints:\nThe number of nodes in the tree is in the range [1, 104]. 1 \u0026lt;= Node.val \u0026lt;= 100 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { TreeNode[] q = new TreeNode[10_000]; int head; int tail; public int deepestLeavesSum(TreeNode root) { if (root == null) return 0; q[tail++] = root; int sum = 0; while (head != tail) { TreeNode node = q[head]; sum = 0; int size = tail - head; for (int i = 0; i \u0026lt; size; i++) { node = q[head++]; sum += node.val; if (node.left != null) q[tail++] = node.left; if (node.right != null) q[tail++] = node.right; } } return sum; } } ","permalink":"https://volyx.in/posts/2021-03-31-deepest-leaves-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/deepest-leaves-sum/\"\u003e1302. Deepest Leaves Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the sum of values of its deepest leaves.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 15\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-31-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 19\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1302. Deepest Leaves Sum"},{"content":"797. All Paths From Source to Target\nGiven a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\n1 2 3 4 5 Example 1: Input: graph = [[1,2],[3],[3],[]] Output: [[0,1,3],[0,2,3]] Explanation: There are two paths: 0 -\u0026gt; 1 -\u0026gt; 3 and 0 -\u0026gt; 2 -\u0026gt; 3. 1 2 3 4 Example 2: Input: graph = [[4,3,1],[3,2,4],[3],[4],[]] Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] 1 2 3 4 Example 3: Input: graph = [[1],[]] Output: [[0,1]] 1 2 3 4 Example 4: Input: graph = [[1,2,3],[2],[3],[]] Output: [[0,1,2,3],[0,2,3],[0,3]] 1 2 3 4 Example 5: Input: graph = [[1,3],[2],[3],[]] Output: [[0,1,2,3],[0,3]] Constraints:\nn == graph.length 2 \u0026lt;= n \u0026lt;= 15 0 \u0026lt;= graph[i][j] \u0026lt; n graph[i][j] != i (i.e., there will be no self-loops). The input graph is guaranteed to be a DAG. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; allPathsSourceTarget(int[][] graph) { List\u0026lt;Integer\u0026gt; paths = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); build(0, graph, paths, res); return res; } void build(int s, int[][] g, List\u0026lt;Integer\u0026gt; paths, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { paths.add(s); if (s == g.length - 1) { res.add(new ArrayList\u0026lt;\u0026gt;(paths)); } else { for (int v : g[s]) { build(v, g, paths, res); } } paths.remove(paths.size() - 1); } } Solution 08.05.2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; allPathsSourceTarget(int[][] graph) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); int[] visited = new int[graph.length]; dfs(0, graph, visited, path, res); return res; } void dfs(int v, int[][] graph, int[] visited, List\u0026lt;Integer\u0026gt; path, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { if (visited[v] == 1) return; visited[v] = 1; path.add(v); if (v == graph.length - 1) { res.add(List.copyOf(path)); } for (int e: graph[v]) { dfs(e, graph, visited, path, res); } visited[v] = 0; path.remove(path.size() - 1); } } Solution 19.10.2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; allPathsSourceTarget(int[][] graph) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; paths = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; curr = new ArrayList\u0026lt;\u0026gt;(); curr.add(0); dfs(0, graph.length - 1, graph, curr, paths); return paths; } void dfs(int source, int target, int[][] graph, List\u0026lt;Integer\u0026gt; curr, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; paths) { if (source == target) { paths.add(List.copyOf(curr)); return; } for (int dest: graph[source]) { curr.add(dest); dfs(dest, target, graph, curr, paths); Integer last = curr.remove(curr.size() - 1); } } } ","permalink":"https://volyx.in/posts/2021-03-31-all-paths-from-source-to-target/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/all-paths-from-source-to-target/\"\u003e797. All Paths From Source to Target\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.\u003c/p\u003e\n\u003cp\u003eThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).\u003c/p\u003e","title":"797. All Paths From Source to Target"},{"content":"207. Course Schedule\nThere are a total of n courses you have to take labelled from 0 to n - 1.\nSome courses may have prerequisites, for example, if prerequisites[i] = [ai, bi] this means you must take the course bi before the course ai.\nGiven the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses.\nIf there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.\n1 2 3 4 5 Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: [0,1] Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]. 1 2 3 4 5 6 Example 2: Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] Output: [0,2,1,3] Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]. 1 2 3 4 Example 3: Input: numCourses = 1, prerequisites = [] Output: [0] Constraints:\n1 \u0026lt;= numCourses \u0026lt;= 2000 0 \u0026lt;= prerequisites.length \u0026lt;= numCourses * (numCourses - 1) prerequisites[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; numCourses ai != bi All the pairs [ai, bi] are distinct. Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Solution { int[] q = new int[5_000]; int head = 0; int tail = 0; public boolean canFinish(int n, int[][] prerequisites) { boolean[] visited = new boolean[n]; List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; G = new ArrayList\u0026lt;\u0026gt;(); int[] indegree = new int[n]; for (int i = 0; i \u0026lt; n; i++) { G.add(new ArrayList\u0026lt;\u0026gt;()); } for (int i = 0; i \u0026lt; prerequisites.length; i++) { int[] course = prerequisites[i]; G.get(course[1]).add(course[0]); indegree[course[0]]++; } for (int i = 0; i \u0026lt; n; i++) { if (indegree[i] == 0) q[tail++] = i; } int count = 0; while (head != tail) { int v = q[head++]; for (Integer e: G.get(v)) { indegree[e]--; if (indegree[e] == 0) q[tail++] = e; } count++; } return count == n; } // 0/1/2 unprocessed, processing, processed int[] visited; int[][] g; public boolean canFinish2(int n, int[][] prerequisites) { visited = new int[n]; g = prerequisites; for (int i = 0; i \u0026lt; n; i++) { if (visited[i] == 0) { boolean cycle = dfs(i); if (cycle) return false; } } return true; } boolean dfs(int s) { visited[s] = 1; for (int i = 0; i \u0026lt; g.length; i++) { int[] course = g[i]; if (course[1] == s) { int v = course[0]; if (visited[v] == 0) { boolean cycle = dfs(v); if (cycle) return true; } else if (visited[v] != 2) { return true; } } } visited[s] = 2; return false; } } Solution - Kosaraju Algorithm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class Solution { int[] visited; int[] who; Stack\u0026lt;Integer\u0026gt; st = new Stack\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt;[] G; List\u0026lt;Integer\u0026gt;[] revG; int count = 0; public boolean canFinish(int numCourses, int[][] prerequisites) { visited = new int[numCourses]; who = new int[numCourses]; G = new List[numCourses]; revG = new List[numCourses]; for (int i = 0; i \u0026lt; numCourses; i++) { G[i] = new ArrayList\u0026lt;\u0026gt;(); revG[i] = new ArrayList\u0026lt;\u0026gt;(); } for (int[] pr: prerequisites) { int before = pr[0]; int after = pr[1]; G[before].add(after); revG[after].add(before); } for (int i = 0; i \u0026lt; numCourses; i++) { if (visited[i] == 0) { dfs(i); } } Arrays.fill(visited, 0); while (st.size() \u0026gt; 0) { int n = st.pop(); if (visited[n] == 0) { count++; dfs1(n, n); } } System.out.println(Arrays.toString(who)); return numCourses == count; } void dfs(int i) { visited[i] = 1; for (int u: G[i]) { if (visited[u] == 0) { dfs(u); } } st.push(i); } void dfs1(int i, int rep) { visited[i] = 1; who[i] = rep; for (int u: revG[i]) { if (visited[u] == 0) { dfs1(u, rep); } } } } ","permalink":"https://volyx.in/posts/2021-03-30-course-schedule/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/course-schedule/\"\u003e207. Course Schedule\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are a total of n courses you have to take labelled from 0 to n - 1.\u003c/p\u003e\n\u003cp\u003eSome courses may have prerequisites, for example, if prerequisites[i] = [ai, bi] this means you must take the course bi before the course ai.\u003c/p\u003e\n\u003cp\u003eGiven the total number of courses numCourses and a list of the prerequisite pairs, return the ordering of courses you should take to finish all courses.\u003c/p\u003e","title":"207. Course Schedule"},{"content":"210. Course Schedule II\nThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\nReturn true if you can finish all courses. Otherwise, return false.\n1 2 3 4 5 6 Example 1: Input: numCourses = 2, prerequisites = [[1,0]] Output: true Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible. 1 2 3 4 5 6 Example 2: Input: numCourses = 2, prerequisites = [[1,0],[0,1]] Output: false Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible. Constraints:\n1 \u0026lt;= numCourses \u0026lt;= 105 0 \u0026lt;= prerequisites.length \u0026lt;= 5000 prerequisites[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; numCourses All the pairs prerequisites[i] are unique. Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { int[] ans; int n = 0; int[][] g; int[] visited; boolean cycle; public int[] findOrder(int numCourses, int[][] prerequisites) { n = numCourses; ans = new int[numCourses]; visited = new int[numCourses]; g = prerequisites; for (int i = 0; i \u0026lt; numCourses; i++) { if (visited[i] == 0) { dfs(i); if (cycle) break; } } return cycle ? new int[0] : ans; } void dfs(int s) { visited[s] = 1; for (int[] course: g) { if (course[1] == s) { int e = course[0]; if (visited[e] == 0) { dfs(e); if (cycle) break; } else if (visited[e] != 2) { cycle = true; break; } } } if (cycle) return; visited[s] = 2; ans[--n] = s; } } Solution 2021-11-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { int[] res; int size; public int[] findOrder(int numCourses, int[][] prerequisites) { int n = numCourses; Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; g = buildGraph(n, prerequisites); res = new int[n]; size = n - 1; int[] visited = new int[n]; for (int i = 0; i \u0026lt; n; i++) { if (visited[i] == 0) { boolean hasCycle = dfs(i, visited, g, res); if (hasCycle) { return new int[0]; } } } return res; } boolean dfs(int index, int[] visited, Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; g, int[] res) { visited[index] = 1; for (int nei: g.get(index)) { if (visited[nei] == 0) { if (dfs(nei, visited, g, res)) { return true; } } else if (visited[nei] == 1){ return true; } } visited[index] = 2; res[size--] = index; return false; } Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; buildGraph(int n, int[][] prerequisites) { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; g = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { g.put(i, new ArrayList\u0026lt;\u0026gt;()); } for (int[] prer: prerequisites) { g.get(prer[1]).add(prer[0]); } return g; } } ","permalink":"https://volyx.in/posts/2021-03-30-course-schedule-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/course-schedule-ii/\"\u003e210. Course Schedule II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\u003c/p\u003e\n\u003cp\u003eFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\u003c/p\u003e\n\u003cp\u003eReturn true if you can finish all courses. Otherwise, return false.\u003c/p\u003e","title":"210. Course Schedule II"},{"content":"235. Lowest Common Ancestor of a Binary Search Tree\nGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n1 2 3 4 5 Example 1: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 Output: 6 Explanation: The LCA of nodes 2 and 8 is 6. 1 2 3 4 5 Example 2: Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 Output: 2 Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition. 1 2 3 4 Example 3: Input: root = [2,1], p = 2, q = 1 Output: 2 Constraints:\nThe number of nodes in the tree is in the range [2, 105]. -109 \u0026lt;= Node.val \u0026lt;= 109 All Node.val are unique. p != q p and q will exist in the BST. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if (root.val \u0026lt; p.val \u0026amp;\u0026amp; root.val \u0026lt; q.val) { return lowestCommonAncestor(root.right, p, q); } if (root.val \u0026gt; p.val \u0026amp;\u0026amp; root.val \u0026gt; q.val) { return lowestCommonAncestor(root.left, p, q); } return root; } } ","permalink":"https://volyx.in/posts/2021-03-29-lowest-common-ancestor-of-a-binary-search-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\"\u003e235. Lowest Common Ancestor of a Binary Search Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\u003c/p\u003e\n\u003cp\u003eAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\u003c/p\u003e","title":"235. Lowest Common Ancestor of a Binary Search Tree"},{"content":"114. Flatten Binary Tree to Linked List\nGiven the root of a binary tree, flatten the tree into a \u0026ldquo;linked list\u0026rdquo;:\nThe \u0026ldquo;linked list\u0026rdquo; should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null. The \u0026ldquo;linked list\u0026rdquo; should be in the same order as a pre-order traversal of the binary tree. 1 2 3 4 Example 1: Input: root = [1,2,5,3,4,null,6] Output: [1,null,2,null,3,null,4,null,5,null,6] 1 2 3 4 Example 2: Input: root = [] Output: [] 1 2 3 4 Example 3: Input: root = [0] Output: [0] Constraints:\nThe number of nodes in the tree is in the range [0, 2000]. -100 \u0026lt;= Node.val \u0026lt;= 100 Follow up: Can you flatten the tree in-place (with O(1) extra space)?\nRecursive Iterative Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public void flatten(TreeNode root) { if (root == null) return; flatten(root.left); flatten(root.right); if (root.left == null) return; TreeNode rightLeaf = root.left; while (rightLeaf.right != null) { rightLeaf = rightLeaf.right; } TreeNode rightBranch = root.right; root.right = root.left; rightLeaf.right = rightBranch; root.left = null; } public void flatten2(TreeNode root) { TreeNode node = root; while (node != null) { if (node.left != null) { // find leftNode last right child TreeNode rightLeaf = node.left; while (rightLeaf.right != null) { rightLeaf = rightLeaf.right; } TreeNode rightBranch = node.right; node.right = node.left; rightLeaf.right = rightBranch; node.left = null; } node = node.right; } } } Solution 2021-11-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public void flatten(TreeNode root) { TreeNode node = root; while (node != null) { if (node.left != null) { TreeNode rightChild = node.right; TreeNode leftChild = node.left; node.right = leftChild; node.left = null; TreeNode leftRightDown = leftChild; while (leftRightDown.right != null) { leftRightDown = leftRightDown.right; } leftRightDown.right = rightChild; } node = node.right; } } } ","permalink":"https://volyx.in/posts/2021-03-28-flatten-binary-tree-to-linked-list/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/\"\u003e114. Flatten Binary Tree to Linked List\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, flatten the tree into a \u0026ldquo;linked list\u0026rdquo;:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u0026ldquo;linked list\u0026rdquo; should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\u003c/li\u003e\n\u003cli\u003eThe \u0026ldquo;linked list\u0026rdquo; should be in the same order as a pre-order traversal of the binary tree.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,5,3,4,null,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,null,2,null,3,null,4,null,5,null,6]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"114. Flatten Binary Tree to Linked List"},{"content":"1441. Build an Array With Stack Operations\nGiven an array target and an integer n. In each iteration, you will read a number from list = {1,2,3\u0026hellip;, n}.\nBuild the target array using the following operations:\nPush: Read a new element from the beginning list, and push it in the array. Pop: delete the last element of the array. If the target array is already built, stop reading more elements. Return the operations to build the target array. You are guaranteed that the answer is unique.\n1 2 3 4 5 6 7 8 Example 1: Input: target = [1,3], n = 3 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Pop\u0026#34;,\u0026#34;Push\u0026#34;] Explanation: Read number 1 and automatically push in the array -\u0026gt; [1] Read number 2 and automatically push in the array then Pop it -\u0026gt; [1] Read number 3 and automatically push in the array -\u0026gt; [1,3] 1 2 3 4 Example 2: Input: target = [1,2,3], n = 3 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;] 1 2 3 4 5 Example 3: Input: target = [1,2], n = 4 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;] Explanation: You only need to read the first 2 numbers and stop. 1 2 3 4 Example 4: Input: target = [2,3,4], n = 4 Output: [\u0026#34;Push\u0026#34;,\u0026#34;Pop\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;,\u0026#34;Push\u0026#34;] Constraints:\n1 \u0026lt;= target.length \u0026lt;= 100 1 \u0026lt;= target[i] \u0026lt;= n 1 \u0026lt;= n \u0026lt;= 100 target is strictly increasing. Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public List\u0026lt;String\u0026gt; buildArray(int[] target, int n) { List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int i = 0; int j = 1; while (i \u0026lt; target.length) { res.add(\u0026#34;Push\u0026#34;); if (target[i] != j) { res.add(\u0026#34;Pop\u0026#34;); } else { i++; } j++; } return res; } } ","permalink":"https://volyx.in/posts/2021-03-27-build-an-array-with-stack-operations/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/build-an-array-with-stack-operations/\"\u003e1441. Build an Array With Stack Operations\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array target and an integer n. In each iteration, you will read a number from  list = {1,2,3\u0026hellip;, n}.\u003c/p\u003e\n\u003cp\u003eBuild the target array using the following operations:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePush: Read a new element from the beginning list, and push it in the array.\u003c/li\u003e\n\u003cli\u003ePop: delete the last element of the array.\nIf the target array is already built, stop reading more elements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the operations to build the target array. You are guaranteed that the answer is unique.\u003c/p\u003e","title":"1441. Build an Array With Stack Operations"},{"content":"199. Binary Tree Right Side View\nGiven the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\n1 2 3 4 Example 1: Input: root = [1,2,3,null,5,null,4] Output: [1,3,4] 1 2 3 4 Example 2: Input: root = [1,null,3] Output: [1,3] 1 2 3 4 Example 3: Input: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Recursive Iterative Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int head = 0; int tail = 0; TreeNode[] q = new TreeNode[101]; public List\u0026lt;Integer\u0026gt; rightSideView(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); if (root == null) return Collections.emptyList(); add(root); while (!isEmpty()) { res.add(peek().val); int n = size(); // remove prev level for (int i = 0; i \u0026lt; n; i++) { TreeNode node = poll(); if (node.right != null) add(node.right); if (node.left != null) add(node.left); } } return res; } boolean isEmpty() { return tail == head; } int size() { return tail - head; } TreeNode poll() { if (!isEmpty()) { return q[head++]; } throw new RuntimeException(); } void add(TreeNode a) { q[tail] = a; tail++; } TreeNode peek() { return q[head]; } public List\u0026lt;Integer\u0026gt; rightSideView2(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); visit(root, res, 0); return res; } void visit(TreeNode node, List\u0026lt;Integer\u0026gt; res, int depth) { if (node == null) return; if (res.size() == depth) { res.add(depth, node.val); } visit(node.right, res, depth + 1); visit(node.left, res, depth + 1); } } Solution 15-06-2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;Integer\u0026gt; rightSideView(TreeNode root) { List\u0026lt;Integer\u0026gt; levels = new ArrayList\u0026lt;\u0026gt;(); dfs(0, root, levels); return levels; } void dfs(int level, TreeNode root, List\u0026lt;Integer\u0026gt; levels) { if (root == null) { return; } add(level, root.val, levels); // 2 5 dfs(level + 1, root.left, levels); dfs(level + 1, root.right, levels); } // 0 1 2 3 4 -\u0026gt; 5 // [] void add(int level, int val, List\u0026lt;Integer\u0026gt; levels) { // first element on level if (levels.size() == level) { levels.add(val); return; } // remove previous, add new element levels.remove(level); levels.add(level, val); } } ","permalink":"https://volyx.in/posts/2021-03-27-binary-tree-right-side-view/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-right-side-view/\"\u003e199. Binary Tree Right Side View\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,3,null,5,null,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-27-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"199. Binary Tree Right Side View"},{"content":"107. Binary Tree Level Order Traversal II\nGiven the root of a binary tree, return the bottom-up level order traversal of its nodes\u0026rsquo; values. (i.e., from left to right, level by level from leaf to root).\n1 2 3 4 Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[15,7],[9,20],[3]] 1 2 3 4 Example 2: Input: root = [1] Output: [[1]] 1 2 3 4 Example 3: Input: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 2000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levelOrderBottom(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levels = new ArrayList\u0026lt;\u0026gt;(); level(root, levels, 0); return levels; } void level(TreeNode node, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levels, int k) { if (node == null) return; if (levels.size() == k) { levels.add(0, new ArrayList\u0026lt;\u0026gt;()); } level(node.left, levels, k + 1); level(node.right, levels, k + 1); levels.get(levels.size() - k - 1).add(node.val); } } ","permalink":"https://volyx.in/posts/2021-03-26-binary-tree-level-order-traversal-ii/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/\"\u003e107. Binary Tree Level Order Traversal II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the bottom-up level order traversal of its nodes\u0026rsquo; values. (i.e., from left to right, level by level from leaf to root).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[15,7],[9,20],[3]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-26-traversal-ii-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"102. Binary Tree Level Order Traversal"},{"content":"102. Binary Tree Level Order Traversal\nGiven the root of a binary tree, return the level order traversal of its nodes\u0026rsquo; values. (i.e., from left to right, level by level).\n1 2 3 4 Example 1: Input: root = [3,9,20,null,null,15,7] Output: [[3],[9,20],[15,7]] 1 2 3 4 Example 2: Input: root = [1] Output: [[1]] 1 2 3 4 Example 3: Input: root = [] Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 2000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levelOrder(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levels = new ArrayList\u0026lt;\u0026gt;(); levelOrder(root, levels, 0); return levels; } void levelOrder(TreeNode node, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; paths, int k) { if (node == null) return; if (paths.size() == k) { paths.add(new ArrayList\u0026lt;\u0026gt;()); } paths.get(k).add(node.val); levelOrder(node.left, paths, k + 1); levelOrder(node.right, paths, k + 1); } } ","permalink":"https://volyx.in/posts/2021-03-26-binary-tree-level-order-traversal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-level-order-traversal/\"\u003e102. Binary Tree Level Order Traversal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the level order traversal of its nodes\u0026rsquo; values. (i.e., from left to right, level by level).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[3],[9,20],[15,7]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-26-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"102. Binary Tree Level Order Traversal"},{"content":"743. Network Delay Time\nYou are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\nWe will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\n1 2 3 4 Example 1: Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2 Output: 2 1 2 3 4 Example 2: Input: times = [[1,2,1]], n = 2, k = 1 Output: 1 1 2 3 4 Example 3: Input: times = [[1,2,1]], n = 2, k = 2 Output: -1 Constraints:\n1 \u0026lt;= k \u0026lt;= n \u0026lt;= 100 1 \u0026lt;= times.length \u0026lt;= 6000 times[i].length == 3 1 \u0026lt;= ui, vi \u0026lt;= n ui != vi 0 \u0026lt;= wi \u0026lt;= 100 All the pairs (ui, vi) are unique. (i.e., no multiple edges.) Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class Solution { public int networkDelayTime(int[][] times, int n, int k) { int[] costs = new int[n + 1]; Arrays.fill(costs, -1); costs[k] = 0; Queue\u0026lt;int[]\u0026gt; q = new PriorityQueue\u0026lt;int[]\u0026gt;((a, b) -\u0026gt; a[1] - b[1]); q.add(new int[]{k, 0}); List\u0026lt;Integer\u0026gt;[] visited = new List[n + 1]; while (!q.isEmpty()) { int[] x = q.poll(); for (int[] time: times) { if (x[0] == time[0]) { if (visited[x[0]] == null) { visited[x[0]] = new ArrayList\u0026lt;\u0026gt;(); visited[x[0]].add(x[0]); } if (visited[x[0]].contains(time[1])) { continue; } visited[x[0]].add(time[1]); int newTime = x[1] + time[2]; int prevTime = costs[time[1]]; if (prevTime == -1 || newTime \u0026lt; prevTime) { costs[time[1]] = newTime; } q.add(new int[]{time[1], costs[time[1]]}); } } } int maxTime = 0; for (int i = 1; i \u0026lt; costs.length; i++) { if (costs[i] == -1) { return -1; } maxTime = Math.max(maxTime, costs[i]); } return maxTime; } } class Solution { // Belman-Ford public int networkDelayTime(int[][] times, int n, int s) { int[] d = new int[n + 1]; Arrays.fill(d, Integer.MAX_VALUE); d[s] = 0; for (int i = 1; i \u0026lt; n + 1; i++) { for (int j = 0; j \u0026lt; times.length; j++) { int[] e = times[j]; int a = e[0]; int b = e[1]; int w = e[2]; if (d[a] != Integer.MAX_VALUE) { d[b] = Math.min(d[b], d[a] + w); } } } int max = 0; for (int i = 1; i \u0026lt; d.length; i++) { int t = d[i]; if (t == Integer.MAX_VALUE) return -1; max = Math.max(max, t); } return max; } } Solution 2021-12-07 Bellman-Ford/Dikjstra 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class Solution { // Dikjstra public int networkDelayTime(int[][] times, int n, int k) { Map\u0026lt;Integer, Map\u0026lt;Integer, Integer\u0026gt;\u0026gt; g = new HashMap\u0026lt;\u0026gt;(); for (int[] time: times) { g.putIfAbsent(time[0], new HashMap\u0026lt;\u0026gt;()); g.get(time[0]).put(time[1], time[2]); } Queue\u0026lt;int[]\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;((a,b) -\u0026gt; a[0] - b[0]); q.add(new int[] {0, k}); int[] visited = new int[n + 1]; int res = 0; while (q.size() \u0026gt; 0) { int[] curr = q.poll(); int node = curr[1]; int dist = curr[0]; if (visited[node] == 1) continue; // System.out.println(\u0026#34;visit \u0026#34; + node + \u0026#34; \u0026#34; + dist); res = dist; visited[node] = 1; n--; if (g.containsKey(node)) { for (Integer next: g.get(node).keySet()) { int nextWeight = g.get(node).get(next); q.add(new int[] {dist + nextWeight, next}); } } } return n == 0 ? res: -1; } // Bellman-Ford public int networkDelayTime2(int[][] times, int n, int k) { int[] dist = new int[n + 1]; Arrays.fill(dist, Integer.MAX_VALUE); dist[k] = 0; for (int i = 0; i \u0026lt; n; i++) { for (int[] time: times) { int u = time[0]; int v = time[1]; int w = time[2]; if (dist[u] != Integer.MAX_VALUE) { dist[v] = Math.min(dist[v], dist[u] + w); } } } int max = 0; for (int i = 1; i \u0026lt; dist.length; i++) { int v = dist[i]; if (v == Integer.MAX_VALUE) return -1; max = Math.max(v, max); } return max; } } ","permalink":"https://volyx.in/posts/2021-03-25-network-delay-time/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/network-delay-time/\"\u003e743. Network Delay Time\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\u003c/p\u003e\n\u003cp\u003eWe will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.\u003c/p\u003e","title":"743. Network Delay Time"},{"content":"787. Cheapest Flights Within K Stops\nThere are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.\nNow given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.\n1 2 3 4 5 6 7 Example 1: Input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 1 Output: 200 Explanation: The graph looks like this: The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.\n1 2 3 4 5 6 7 Example 2: Input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 0 Output: 500 Explanation: The graph looks like this: The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.\nConstraints:\nThe number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1. The size of flights will be in range [0, n * (n - 1) / 2]. The format of each flight will be (src, dst, price). The price of each flight will be in the range [1, 10000]. k is in the range of [0, n - 1]. There will not be any duplicated flights or self cycles. Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int[] preorder; int preorderIndex; Map\u0026lt;Integer, Integer\u0026gt; order; public TreeNode buildTree(int[] preorder, int[] inorder) { this.preorder = preorder; order = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; inorder.length; i++) { order.put(inorder[i], i); } return build(0, preorder.length - 1); } TreeNode build(int start, int end) { if (start \u0026gt; end) return null; TreeNode node = new TreeNode(preorder[preorderIndex]); int pos = order.get(preorder[preorderIndex++]); node.left = build(start, pos - 1); node.right = build(pos + 1, end); return node; } public TreeNode buildTree2(int[] preorder, int[] inorder) { TreeNode root = new TreeNode(preorder[0]); Map\u0026lt;Integer, Integer\u0026gt; order = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; inorder.length; i++) { order.put(inorder[i], i); } for (int i = 1; i \u0026lt; preorder.length; i++) { addNode(root, preorder[i], order); } return root; } void addNode(TreeNode node, int val, Map\u0026lt;Integer, Integer\u0026gt; order) { if (order.get(val) \u0026lt; order.get(node.val)) { if (node.left == null) { node.left = new TreeNode(val); } else { addNode(node.left, val, order); } } else { if (node.right == null) { node.right = new TreeNode(val); } else { addNode(node.right, val, order); } } } } ","permalink":"https://volyx.in/posts/2021-03-24-cheapest-flights-within-k-stops/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/cheapest-flights-within-k-stops/\"\u003e787. Cheapest Flights Within K Stops\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThere are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.\u003c/p\u003e\n\u003cp\u003eNow given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003en = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esrc = 0, dst = 2, k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 200\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe graph looks like this:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-24-ex1.png\"\u003e\u003c/p\u003e","title":"787. Cheapest Flights Within K Stops"},{"content":"105. Construct Binary Tree from Preorder and Inorder Traversal\nGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\n1 2 3 4 Example 1: Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] Output: [3,9,20,null,null,15,7] 1 2 3 4 Example 2: Input: preorder = [-1], inorder = [-1] Output: [-1] Constraints:\n1 \u0026lt;= preorder.length \u0026lt;= 3000 inorder.length == preorder.length -3000 \u0026lt;= preorder[i], inorder[i] \u0026lt;= 3000 preorder and inorder consist of unique values. Each value of inorder also appears in preorder. preorder is guaranteed to be the preorder traversal of the tree. inorder is guaranteed to be the inorder traversal of the tree. Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int[] preorder; int preorderIndex; Map\u0026lt;Integer, Integer\u0026gt; order; public TreeNode buildTree(int[] preorder, int[] inorder) { this.preorder = preorder; order = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; inorder.length; i++) { order.put(inorder[i], i); } return build(0, preorder.length - 1); } TreeNode build(int start, int end) { if (start \u0026gt; end) return null; TreeNode node = new TreeNode(preorder[preorderIndex]); int pos = order.get(preorder[preorderIndex++]); node.left = build(start, pos - 1); node.right = build(pos + 1, end); return node; } public TreeNode buildTree2(int[] preorder, int[] inorder) { TreeNode root = new TreeNode(preorder[0]); Map\u0026lt;Integer, Integer\u0026gt; order = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; inorder.length; i++) { order.put(inorder[i], i); } for (int i = 1; i \u0026lt; preorder.length; i++) { addNode(root, preorder[i], order); } return root; } void addNode(TreeNode node, int val, Map\u0026lt;Integer, Integer\u0026gt; order) { if (order.get(val) \u0026lt; order.get(node.val)) { if (node.left == null) { node.left = new TreeNode(val); } else { addNode(node.left, val, order); } } else { if (node.right == null) { node.right = new TreeNode(val); } else { addNode(node.right, val, order); } } } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int preorderIndex = 0; int[] preorder; Map\u0026lt;Integer, Integer\u0026gt; order = new HashMap\u0026lt;\u0026gt;(); public TreeNode buildTree(int[] preorder, int[] inorder) { this.preorder = preorder; for (int i = 0; i \u0026lt; inorder.length; i++) { order.put(inorder[i], i); } return buildTree(0, order.size() - 1); } TreeNode buildTree(int lo, int hi) { if (lo \u0026gt; hi) return null; TreeNode node = new TreeNode(preorder[preorderIndex]); int pos = order.get(preorder[preorderIndex]); preorderIndex++; System.out.println(\u0026#34;pos = \u0026#34; + pos + \u0026#34; lo \u0026#34; + lo + \u0026#34; \u0026#34; + hi); node.left = buildTree(lo, pos - 1); node.right = buildTree(pos + 1, hi); return node; } } ","permalink":"https://volyx.in/posts/2021-03-23-construct-binary-tree-from-preorder-and-inorder-traversal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/\"\u003e105. Construct Binary Tree from Preorder and Inorder Traversal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-23-ex1.jpg\"\u003e\u003c/p\u003e","title":"105. Construct Binary Tree from Preorder and Inorder Traversal"},{"content":"145. Binary Tree Postorder Traversal\nGiven the root of a binary tree, return the postorder traversal of its nodes\u0026rsquo; values.\n1 2 3 4 Example 1: Input: root = [1,null,2,3] Output: [3,2,1] 1 2 3 4 Example 2: Input: root = [] Output: [] 1 2 3 4 Example 3: Input: root = [1] Output: [1] 1 2 3 4 Example 4: Input: root = [1,2] Output: [2,1] 1 2 3 4 Example 5: Input: root = [1,null,2] Output: [2,1] Constraints:\nThe number of the nodes in the tree is in the range [0, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Follow up:\nRecursive solution is trivial, could you do it iteratively? Jamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;Integer\u0026gt; postorderTraversal(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;TreeNode\u0026gt; s = new ArrayList\u0026lt;\u0026gt;(); TreeNode curr = root; TreeNode lastVisited = null; while (curr != null || !s.isEmpty()) { if (curr != null) { s.add(curr); curr = curr.left; } else { TreeNode peek = s.get(s.size() - 1); if (peek.right != null \u0026amp;\u0026amp; peek.right != lastVisited) { curr = peek.right; } else { res.add(peek.val); lastVisited = s.remove(s.size() - 1); } } } return res; } public List\u0026lt;Integer\u0026gt; postorderTraversal3(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;TreeNode\u0026gt; s = new ArrayList\u0026lt;\u0026gt;(); if (root != null) { s.add(root); } while (!s.isEmpty()) { TreeNode node = s.remove(s.size() - 1); res.add(0, node.val); if (node.left != null) { s.add(node.left); } if (node.right != null) { s.add(node.right); } } return res; } public List\u0026lt;Integer\u0026gt; postorderTraversal2(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); visit(root, res); return res; } void visit(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) return; visit(node.left, res); visit(node.right, res); res.add(node.val); } } ","permalink":"https://volyx.in/posts/2021-03-22-binary-tree-postorder-traversal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-postorder-traversal\"\u003e145. Binary Tree Postorder Traversal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the postorder traversal of its nodes\u0026rsquo; values.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [3,2,1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-22-postorder-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex4\" loading=\"lazy\" src=\"/images/2021-03-22-postorder-ex4.jpg\"\u003e\u003c/p\u003e","title":"145. Binary Tree Postorder Traversal"},{"content":"94. Binary Tree Inorder Traversal\nGiven the root of a binary tree, return the inorder traversal of its nodes\u0026rsquo; values.\n1 2 3 4 Example 1: Input: root = [1,null,2,3] Output: [1,3,2] 1 2 3 4 Example 2: Input: root = [] Output: [] 1 2 3 4 Example 3: Input: root = [1] Output: [1] 1 2 3 4 Example 4: Input: root = [1,2] Output: [2,1] 1 2 3 4 Example 5: Input: root = [1,null,2] Output: [1,2] Constraints:\nThe number of nodes in the tree is in the range [0, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Follow up:\nRecursive solution is trivial, could you do it iteratively? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;Integer\u0026gt; inorderTraversal(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;TreeNode\u0026gt; s = new ArrayList\u0026lt;\u0026gt;(); TreeNode curr = root; while (curr != null || !s.isEmpty()) { if (curr != null) { s.add(curr); curr = curr.left; } else { curr = s.remove(s.size() - 1); res.add(curr.val); curr = curr.right; } } return res; } public List\u0026lt;Integer\u0026gt; inorderTraversal2(TreeNode root) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); visit(root, res); return res; } void visit(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) return; if (node.left != null) { visit(node.left, res); } res.add(node.val); if (node.right != null) { visit(node.right, res); } } } ","permalink":"https://volyx.in/posts/2021-03-22-binary-tree-inorder-traversal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-inorder-traversal/\"\u003e94. Binary Tree Inorder Traversal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the inorder traversal of its nodes\u0026rsquo; values.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3,2]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-22-inorder-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex4\" loading=\"lazy\" src=\"/images/2021-03-22-inorder-ex4.jpg\"\u003e\u003c/p\u003e","title":"94. Binary Tree Inorder Traversal"},{"content":"144. Binary Tree Preorder Traversal\nGiven the root of a binary tree, return the preorder traversal of its nodes\u0026rsquo; values.\n1 2 3 4 Example 1: Input: root = [1,null,2,3] Output: [1,2,3] 1 2 3 4 Example 2: Input: root = [] Output: [] 1 2 3 4 Example 3: Input: root = [1] Output: [1] 1 2 3 4 Example 4: Input: root = [1,2] Output: [1,2] 1 2 3 4 Example 5: Input: root = [1,null,2] Output: [1,2] Constraints:\nThe number of nodes in the tree is in the range [0, 100]. -100 \u0026lt;= Node.val \u0026lt;= 100 Follow up: Recursive solution is trivial, could you do it iteratively?\nJamboard Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;Integer\u0026gt; preorderTraversal(TreeNode node) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); if (node == null) return res; TreeNode[] q = new TreeNode[1000]; int n = 0; q[n++] = node; while (n \u0026gt; 0) { TreeNode t = q[--n]; res.add(t.val); if (t.right != null) q[n++] = t.right; // add left as last element to retrive it first from the q if (t.left != null) q[n++] = t.left; } return res; } public List\u0026lt;Integer\u0026gt; preorderTraversal2(TreeNode node) { List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); visit(node, res); return res; } void visit(TreeNode node, List\u0026lt;Integer\u0026gt; res) { if (node == null) return; res.add(node.val); visit(node.left, res); visit(node.right, res); } } ","permalink":"https://volyx.in/posts/2021-03-16-binary-tree-preorder-traversal/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/binary-tree-preorder-traversal/\"\u003e144. Binary Tree Preorder Traversal\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return the preorder traversal of its nodes\u0026rsquo; values.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-16-preorder-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-03-16-preorder-ex2.jpg\"\u003e\u003c/p\u003e","title":"144. Binary Tree Preorder Traversal"},{"content":"149. Max Points on a Line\nGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\n1 2 3 4 Example 1: Input: points = [[1,1],[2,2],[3,3]] Output: 3 1 2 3 4 Example 2: Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] Output: 4 Constraints:\n1 \u0026lt;= points.length \u0026lt;= 300 points[i].length == 2 -104 \u0026lt;= xi, yi \u0026lt;= 104 All the points are unique. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode sortedArrayToBST(int[] nums) { if (nums.length == 0) return null; return buildBST(nums, 0, nums.length - 1); } TreeNode buildBST(int[] nums, int lo, int hi) { if (hi \u0026lt; lo) { return null; } TreeNode node = new TreeNode(); int mid = lo + (hi - lo) / 2; node.val = nums[mid]; node.left = buildBST(nums, lo, mid - 1); node.right = buildBST(nums, mid + 1, hi); return node; } } ","permalink":"https://volyx.in/posts/2021-03-16-max-points-on-a-line/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/max-points-on-a-line/\"\u003e149. Max Points on a Line\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[1,1],[2,2],[3,3]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-16-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-03-16-ex2.jpg\"\u003e\u003c/p\u003e","title":"149. Max Points on a Line"},{"content":"108. Convert Sorted Array to Binary Search Tree\nGiven an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\n1 2 3 4 5 Example 1: Input: nums = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5] Explanation: [0,-10,5,null,-3,null,9] is also accepted: 1 2 3 4 5 Example 2: Input: nums = [1,3] Output: [3,1] Explanation: [1,3] and [3,1] are both a height-balanced BSTs. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 104 -104 \u0026lt;= nums[i] \u0026lt;= 104 nums is sorted in a strictly increasing order. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode sortedArrayToBST(int[] nums) { if (nums.length == 0) return null; return buildBST(nums, 0, nums.length - 1); } TreeNode buildBST(int[] nums, int lo, int hi) { if (hi \u0026lt; lo) { return null; } TreeNode node = new TreeNode(); int mid = lo + (hi - lo) / 2; node.val = nums[mid]; node.left = buildBST(nums, lo, mid - 1); node.right = buildBST(nums, mid + 1, hi); return node; } } ","permalink":"https://volyx.in/posts/2021-03-13-convert-sorted-array-to-binary-search-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\"\u003e108. Convert Sorted Array to Binary Search Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\u003c/p\u003e\n\u003cp\u003eA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-13-convert-binary-tree-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [-10,-3,0,5,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,-3,9,-10,null,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [0,-10,5,null,-3,null,9] is also accepted:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-03-13-convert-binary-tree-ex2.jpg\"\u003e\u003c/p\u003e","title":"108. Convert Sorted Array to Binary Search Tree"},{"content":"110. Balanced Binary Tree\nGiven a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\n1 2 3 4 Example 1: Input: root = [3,9,20,null,null,15,7] Output: true 1 2 3 4 Example 2: Input: root = [1,2,2,3,3,null,null,4,4] Output: false 1 2 3 4 Example 3: Input: root = [] Output: true Constraints:\nThe number of nodes in the tree is in the range [0, 5000]. -104 \u0026lt;= Node.val \u0026lt;= 104 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode sortedArrayToBST(int[] nums) { if (nums.length == 0) return null; return buildBST(nums, 0, nums.length - 1); } TreeNode buildBST(int[] nums, int lo, int hi) { if (hi \u0026lt; lo) { return null; } TreeNode node = new TreeNode(); int mid = lo + (hi - lo) / 2; node.val = nums[mid]; node.left = buildBST(nums, lo, mid - 1); node.right = buildBST(nums, mid + 1, hi); return node; } } Solution 2021-11-08 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isBalanced(TreeNode root) { return getHeight(root) != -1; } int getHeight(TreeNode node) { if (node == null) return 0; int left = getHeight(node.left); int right = getHeight(node.right); if (left == -1 || right == -1) return -1; if (Math.abs(left - right) \u0026gt; 1) { return -1; } return Math.max(left, right) + 1; } public boolean isBalancedTopDown(TreeNode root) { if (root == null) return true; int left = longest(root.left); int right = longest(root.right); return Math.abs(left - right) \u0026lt;= 1 \u0026amp;\u0026amp; isBalanced(root.left) \u0026amp;\u0026amp; isBalanced(root.right); } int longest(TreeNode node) { if (node == null) return 0; return Math.max(longest(node.left), longest(node.right)) + 1; } } Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public boolean isBalanced(TreeNode root) { if (root == null) return true; int left = height(root.left); int right = height(root.right); // BOTTOM-UP return isBalanced(root.left) \u0026amp;\u0026amp; isBalanced(root.right) \u0026amp;\u0026amp; Math.abs(left - right) \u0026lt;= 1; // TOP-DOWN // return Math.abs(left - right) \u0026lt;= 1 \u0026amp;\u0026amp; isBalanced(root.left) \u0026amp;\u0026amp; isBalanced(root.right); } int height(TreeNode node) { if (node == null) return 0; return Math.max(height(node.left), height(node.right)) + 1; } } ","permalink":"https://volyx.in/posts/2021-03-13-balanced-binary-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/balanced-binary-tree/\"\u003e110. Balanced Binary Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a binary tree, determine if it is height-balanced.\u003c/p\u003e\n\u003cp\u003eFor this problem, a height-balanced binary tree is defined as:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003ea binary tree in which the left and right subtrees of every node differ in height by no more than 1.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-13-balanced-binary-tree-ex1.jpg\"\u003e\u003c/p\u003e","title":"110. Balanced Binary Tree"},{"content":"111. Minimum Depth of Binary Tree\nGiven a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote: A leaf is a node with no children.\n1 2 3 4 Example 1: Input: root = [3,9,20,null,null,15,7] Output: 2 1 2 3 4 Example 2: Input: root = [2,null,3,null,4,null,5,null,6] Output: 5 Constraints:\nThe number of nodes in the tree is in the range [0, 105]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int min = Integer.MAX_VALUE; public int minDepth(TreeNode root) { if (root == null) return 0; findMinDepth(root, 1); return min; } void findMinDepth(TreeNode node, int depth) { if (node == null) return; if (node.left == null \u0026amp;\u0026amp; node.right == null) { min = Math.min(depth, min); } findMinDepth(node.left, depth + 1); findMinDepth(node.right, depth + 1); } } Solution 2021-08-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int min = Integer.MAX_VALUE; public int minDepth(TreeNode root) { findMinDepth(root, 1); return min == Integer.MAX_VALUE ? 0: min; } void findMinDepth(TreeNode node, int level) { if (node == null) { return; } if (node.left == null \u0026amp;\u0026amp; node.right == null) { min = Math.min(min, level); return; } findMinDepth(node.left, level + 1); findMinDepth(node.right, level + 1); } } Solution with Stack 2021-11-11 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int minDepth(TreeNode root) { Stack\u0026lt;Pair\u0026lt;TreeNode, Integer\u0026gt;\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); if (root == null) { return 0; } stack.push(new Pair\u0026lt;\u0026gt;(root, 1)); int min = Integer.MAX_VALUE; while (stack.size() \u0026gt; 0) { Pair\u0026lt;TreeNode, Integer\u0026gt; pair = stack.pop(); TreeNode node = pair.getKey(); Integer currentMin = pair.getValue(); if (node.left == null \u0026amp;\u0026amp; node.right == null) { min = Math.min(min, currentMin); continue; } if (node.left != null) { stack.push(new Pair\u0026lt;\u0026gt;(node.left, currentMin + 1)); } if (node.right != null) { stack.push(new Pair\u0026lt;\u0026gt;(node.right, currentMin + 1)); } } return min; } } ","permalink":"https://volyx.in/posts/2021-03-12-minimum-depth-of-binary-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/\"\u003e111. Minimum Depth of Binary Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven a binary tree, find its minimum depth.\u003c/p\u003e\n\u003cp\u003eThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\u003c/p\u003e\n\u003cp\u003eNote: A leaf is a node with no children.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [2,null,3,null,4,null,5,null,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"111. Minimum Depth of Binary Tree"},{"content":"![https://leetcode.com/problems/same-tree/]\nGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\n1 2 3 4 Example 1: Input: p = [1,2,3], q = [1,2,3] Output: true 1 2 3 4 Example 2: Input: p = [1,2], q = [1,null,2] Output: false 1 2 3 4 Example 3: Input: p = [1,2,1], q = [1,1,2] Output: false Constraints:\nThe number of nodes in both trees is in the range [0, 100]. -104 \u0026lt;= Node.val \u0026lt;= 104 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSameTree(TreeNode p, TreeNode q) { List\u0026lt;TreeNode\u0026gt; queue1 = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;TreeNode\u0026gt; queue2 = new ArrayList\u0026lt;\u0026gt;(); queue1.add(p); queue2.add(q); while (!queue1.isEmpty() || !queue2.isEmpty()) { if (queue1.isEmpty()) { return false; } if (queue2.isEmpty()) { return false; } TreeNode a = queue1.remove(0); TreeNode b = queue2.remove(0); if (a == null \u0026amp;\u0026amp; a == b) { continue; } if (a == null || b == null) { return false; } if (a.val != b.val) { return false; } queue1.add(a.left); queue2.add(b.left); queue1.add(a.right); queue2.add(b.right); } return true; } public boolean isSameTree2(TreeNode p, TreeNode q) { if (p == null \u0026amp;\u0026amp; p == q) { return true; } if (p == null || q == null) { return false; } if (p.val != q.val) { return false; } return isSameTree(p.left, q.left) \u0026amp;\u0026amp; isSameTree(p.right, q.right); } } ","permalink":"https://volyx.in/posts/2021-03-11-same-tree/","summary":"\u003cp\u003e![https://leetcode.com/problems/same-tree/]\u003c/p\u003e\n\u003cp\u003eGiven the roots of two binary trees p and q, write a function to check if they are the same or not.\u003c/p\u003e\n\u003cp\u003eTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: p = [1,2,3], q = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-11-same-tree-ex1.jpg\"\u003e\u003c/p\u003e","title":"100. Same Tree"},{"content":"!()[https://leetcode.com/problems/symmetric-tree/]\nGiven the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\n1 2 3 4 Example 1: Input: root = [1,2,2,3,4,4,3] Output: true 1 2 3 4 Example 2: Input: root = [1,2,2,null,3,null,3] Output: false Constraints:\nThe number of nodes in the tree is in the range [1, 1000]. -100 \u0026lt;= Node.val \u0026lt;= 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } List\u0026lt;TreeNode\u0026gt; q = new ArrayList\u0026lt;\u0026gt;(); q.add(root.left); q.add(root.right); while (q.size() \u0026gt; 1) { TreeNode left = q.remove(0); TreeNode right = q.remove(0); if (left == null \u0026amp;\u0026amp; left == right) { continue; } if (left == null || right == null) { return false; } if (left.val != right.val) { return false; } q.add(left.left); q.add(right.right); q.add(left.right); q.add(right.left); } return true; } public boolean isSymmetricRecursive(TreeNode root) { if (root == null) { return true; } return isSymmetric(root.left, root.right); } boolean isSymmetric(TreeNode left, TreeNode right) { if (left == null \u0026amp;\u0026amp; right == null) { return true; } if (left == null || right == null) { return false; } if (left.val != right.val) { return false; } return isSymmetric(left.left, right.right) \u0026amp;\u0026amp; isSymmetric(right.left, left.right); } } ","permalink":"https://volyx.in/posts/2021-03-11-symmetric-tree/","summary":"\u003cp\u003e!()[https://leetcode.com/problems/symmetric-tree/]\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-11-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,2,3,4,4,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-03-11-ex2.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,2,null,3,null,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"101. Symmetric Tree"},{"content":"104. Maximum Depth of Binary Tree\nGiven the root of a binary tree, return its maximum depth.\nA binary tree\u0026rsquo;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\n1 2 3 4 Example 1: Input: root = [3,9,20,null,null,15,7] Output: 3 1 2 3 4 Example 2: Input: root = [1,null,2] Output: 2 1 2 3 4 Example 3: Input: root = [] Output: 0 1 2 3 4 Example 4: Input: root = [0] Output: 1 Constraints:\nThe number of nodes in the tree is in the range [0, 104]. -100 \u0026lt;= Node.val \u0026lt;= 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int maxDepth(TreeNode root) { List\u0026lt;TreeNode\u0026gt; nodes = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; depths = new ArrayList\u0026lt;\u0026gt;(); if (root == null) return 0; nodes.add(root); depths.add(1); int max = 0; while (!nodes.isEmpty()) { TreeNode node = nodes.remove(0); int depth = depths.remove(0); max = Math.max(max, depth); if (node.left != null) { nodes.add(node.left); depths.add(depth + 1); } if (node.right != null) { nodes.add(node.right); depths.add(depth + 1); } } return max; } int max = 0; public int maxDepth2(TreeNode root) { if (root == null) return 0; depth(root, 1); return max; } void depth(TreeNode node, int depth) { if (node == null) return; max = Math.max(max, depth); depth(node.left, depth + 1); depth(node.right, depth + 1); } } ","permalink":"https://volyx.in/posts/2021-03-11-maximum-depth-of-binary-tree/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\"\u003e104. Maximum Depth of Binary Tree\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree, return its maximum depth.\u003c/p\u003e\n\u003cp\u003eA binary tree\u0026rsquo;s maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,9,20,null,null,15,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-11-maximum-depth-of-binary-tree-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,null,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"104. Maximum Depth of Binary Tree"},{"content":"112. Path Sum\nGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.\n1 2 3 4 Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22 Output: true 1 2 3 4 Example 2: Input: root = [1,2,3], targetSum = 5 Output: false 1 2 3 4 Example 3: Input: root = [1,2], targetSum = 0 Output: false Constraints:\nThe number of nodes in the tree is in the range [0, 5000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 -1000 \u0026lt;= targetSum \u0026lt;= 1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } List\u0026lt;TreeNode\u0026gt; q = new ArrayList\u0026lt;\u0026gt;(); q.add(root.left); q.add(root.right); while (q.size() \u0026gt; 1) { TreeNode left = q.remove(0); TreeNode right = q.remove(0); if (left == null \u0026amp;\u0026amp; left == right) { continue; } if (left == null || right == null) { return false; } if (left.val != right.val) { return false; } q.add(left.left); q.add(right.right); q.add(left.right); q.add(right.left); } return true; } public boolean isSymmetricRecursive(TreeNode root) { if (root == null) { return true; } return isSymmetric(root.left, root.right); } boolean isSymmetric(TreeNode left, TreeNode right) { if (left == null \u0026amp;\u0026amp; right == null) { return true; } if (left == null || right == null) { return false; } if (left.val != right.val) { return false; } return isSymmetric(left.left, right.right) \u0026amp;\u0026amp; isSymmetric(right.left, left.right); } } ","permalink":"https://volyx.in/posts/2021-03-11-path-sum/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/path-sum/\"\u003e112. Path Sum\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\u003c/p\u003e\n\u003cp\u003eA leaf is a node with no children.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-11-path-sum-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-03-11-path-sum-ex2.jpg\"\u003e\u003c/p\u003e","title":"112. Path Sum"},{"content":"113. Path Sum II\nGiven the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path\u0026rsquo;s sum equals targetSum.\nA leaf is a node with no children.\n1 2 3 4 Example 1: Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22 Output: [[5,4,11,2],[5,8,4,5]] 1 2 3 4 Example 2: Input: root = [1,2,3], targetSum = 5 Output: [] 1 2 3 4 Example 3: Input: root = [1,2], targetSum = 0 Output: [] Constraints:\nThe number of nodes in the tree is in the range [0, 5000]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 -1000 \u0026lt;= targetSum \u0026lt;= 1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isSymmetric(TreeNode root) { if (root == null) { return true; } List\u0026lt;TreeNode\u0026gt; q = new ArrayList\u0026lt;\u0026gt;(); q.add(root.left); q.add(root.right); while (q.size() \u0026gt; 1) { TreeNode left = q.remove(0); TreeNode right = q.remove(0); if (left == null \u0026amp;\u0026amp; left == right) { continue; } if (left == null || right == null) { return false; } if (left.val != right.val) { return false; } q.add(left.left); q.add(right.right); q.add(left.right); q.add(right.left); } return true; } public boolean isSymmetricRecursive(TreeNode root) { if (root == null) { return true; } return isSymmetric(root.left, root.right); } boolean isSymmetric(TreeNode left, TreeNode right) { if (left == null \u0026amp;\u0026amp; right == null) { return true; } if (left == null || right == null) { return false; } if (left.val != right.val) { return false; } return isSymmetric(left.left, right.right) \u0026amp;\u0026amp; isSymmetric(right.left, left.right); } } ","permalink":"https://volyx.in/posts/2021-03-11-path-sum-copy/","summary":"\u003cp\u003e\u003ca href=\"https://leetcode.com/problems/path-sum-ii/\"\u003e113. Path Sum II\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eGiven the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path\u0026rsquo;s sum equals targetSum.\u003c/p\u003e\n\u003cp\u003eA leaf is a node with no children.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[5,4,11,2],[5,8,4,5]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-11-path-sum-2-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [1,2,3], targetSum = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: []\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-11-path-sum-2-ex2.jpg\"\u003e\u003c/p\u003e","title":"113. Path Sum II"},{"content":"![https://leetcode.com/problems/sort-characters-by-frequency/]\nGiven a string, sort it in decreasing order based on the frequency of characters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Example 1: Input: \u0026#34;tree\u0026#34; Output: \u0026#34;eert\u0026#34; Explanation: \u0026#39;e\u0026#39; appears twice while \u0026#39;r\u0026#39; and \u0026#39;t\u0026#39; both appear once. So \u0026#39;e\u0026#39; must appear before both \u0026#39;r\u0026#39; and \u0026#39;t\u0026#39;. Therefore \u0026#34;eetr\u0026#34; is also a valid answer. Example 2: Input: \u0026#34;cccaaa\u0026#34; Output: \u0026#34;cccaaa\u0026#34; Explanation: Both \u0026#39;c\u0026#39; and \u0026#39;a\u0026#39; appear three times, so \u0026#34;aaaccc\u0026#34; is also a valid answer. Note that \u0026#34;cacaca\u0026#34; is incorrect, as the same characters must be together. Example 3: Input: \u0026#34;Aabb\u0026#34; Output: \u0026#34;bbAa\u0026#34; Explanation: \u0026ldquo;bbaA\u0026rdquo; is also a valid answer, but \u0026ldquo;Aabb\u0026rdquo; is incorrect. Note that \u0026lsquo;A\u0026rsquo; and \u0026lsquo;a\u0026rsquo; are treated as two different characters.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class Solution { int[][] heap; int n; public String frequencySort(String s) { heap = new int[128][]; Arrays.fill(heap, new int[] {0, 0}); int[] counts = new int[128]; for (char c : s.toCharArray()) { counts[c]++; } for (int i = 0; i \u0026lt; counts.length; i++) { int count = counts[i]; if (count != 0) { heap[++n] = new int[] {i, count}; swim(n); } } StringBuilder sb = new StringBuilder(); while (n \u0026gt; 0) { int[] val = delMax(); char c = (char) val[0]; for (int i = 0; i \u0026lt; val[1]; i++) { sb.append(c); } } return sb.toString(); } // max heap propery -\u0026gt; parent \u0026gt; child; j \u0026gt; i // violates i \u0026gt; j void swim(int i) { int j = i / 2; if (j \u0026gt; 0 \u0026amp;\u0026amp; less(j, i)) { swap(i, j); swim(j); } } void sink(int i) { int left = 2 * i; int right = 2 * i + 1; int largest = i; if (left \u0026lt; heap.length \u0026amp;\u0026amp; !less(left, largest)) { largest = left; } if (right \u0026lt; heap.length \u0026amp;\u0026amp; !less(right, largest)) { largest = right; } if (i != largest) { swap(i, largest); sink(largest); } } boolean less(int i, int j) { return heap[i][1] \u0026lt; heap[j][1]; } int[] delMax() { int[] max = heap[1]; heap[1] = heap[n--]; heap[n + 1] = new int[]{0,0}; sink(1); return max; } void swap(int i, int j) { int[] temp = heap[i]; heap[i] = heap[j]; heap[j] = temp; } public String frequencySort2(String s) { Map\u0026lt;Character, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); char[] symbols = s.toCharArray(); for (char c: symbols) { freq.put(c, freq.getOrDefault(c, 0) + 1); } Queue\u0026lt;Map.Entry\u0026lt;Character, Integer\u0026gt;\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;((e1, e2) -\u0026gt; -Integer.compare(e1.getValue(), e2.getValue())); q.addAll(freq.entrySet()); StringBuilder sb = new StringBuilder(); while (!q.isEmpty()) { var entry = q.poll(); // System.out.println(entry); for (int i = 0; i \u0026lt; entry.getValue(); i++) { sb.append(entry.getKey()); } } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-03-07-sort-characters-by-frequency-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/sort-characters-by-frequency/]\u003c/p\u003e\n\u003cp\u003eGiven a string, sort it in decreasing order based on the frequency of characters.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;tree\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;eert\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#39;e\u0026#39; appears twice while \u0026#39;r\u0026#39; and \u0026#39;t\u0026#39; both appear once.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSo \u0026#39;e\u0026#39; must appear before both \u0026#39;r\u0026#39; and \u0026#39;t\u0026#39;. Therefore \u0026#34;eetr\u0026#34; is also a valid answer.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;cccaaa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;cccaaa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBoth \u0026#39;c\u0026#39; and \u0026#39;a\u0026#39; appear three times, so \u0026#34;aaaccc\u0026#34; is also a valid answer.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that \u0026#34;cacaca\u0026#34; is incorrect, as the same characters must be together.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;Aabb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;bbAa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExplanation:\n\u0026ldquo;bbaA\u0026rdquo; is also a valid answer, but \u0026ldquo;Aabb\u0026rdquo; is incorrect.\nNote that \u0026lsquo;A\u0026rsquo; and \u0026lsquo;a\u0026rsquo; are treated as two different characters.\u003c/p\u003e","title":"451. Sort Characters By Frequency"},{"content":"\nGiven a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.\nIf possible, output any possible result. If not possible, return the empty string.\n1 2 3 4 5 6 7 8 9 Example 1: Input: S = \u0026#34;aab\u0026#34; Output: \u0026#34;aba\u0026#34; Example 2: Input: S = \u0026#34;aaab\u0026#34; Output: \u0026#34;\u0026#34; Note:\nS will consist of lowercase letters and have length in range [1, 500]. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 class Solution { int n = 0; int[][] heap = new int[27][2]; // Queue\u0026lt;int[]\u0026gt; q = new PriorityQueue\u0026lt;int[]\u0026gt;((a, b) -\u0026gt; -Integer.compare(a[1], b[1])); public String reorganizeString(String S) { int[] freq = new int[26]; Arrays.fill(heap, new int[] {0, 0}); for (char c: S.toCharArray()) { freq[c - \u0026#39;a\u0026#39;]++; } for (int i = 0; i \u0026lt; freq.length; i++) { if (freq[i] != 0) { add(new int[]{i, freq[i]}); } } StringBuilder sb = new StringBuilder(); // while (!isEmpty()) { while (size() \u0026gt; 1) { int[] a = poll(); char aa = (char) (\u0026#39;a\u0026#39; + a[0]); int[] b = poll(); char bb = (char) (\u0026#39;a\u0026#39; + b[0]); char select; if (sb.length() == 0) { select = aa; a[1]--; } else if (sb.charAt(sb.length() - 1) == aa) { select = bb; b[1]--; } else { select = aa; a[1]--; } sb.append(select); if (a[1] != 0) { add(a); } if (b[1] != 0) { add(b); } } while (!isEmpty()) { // System.out.println(Arrays.deepToString(heap)); var a = poll(); char aa = (char) (\u0026#39;a\u0026#39; + a[0]); if (sb.length() \u0026gt; 0 \u0026amp;\u0026amp; sb.charAt(sb.length() - 1) == aa) { sb.setLength(0); break; } else { a[1]--; sb.append(aa); if (a[1] != 0) { // System.out.println(\u0026#34;add = \u0026#34; + Arrays.toString(a)); add(a); } } } return sb.toString(); } int[] poll() { // return q.poll(); int[] max = Arrays.copyOf(heap[1], 2); heap[1][0] = 0; heap[1][1] = 0; heap[1][0] = heap[n][0]; heap[1][1] = heap[n][1]; n--; heap[n + 1][0] = 0; heap[n + 1][1] = 0; sink(1); return max; } void add(int[] val) { // q.add(val); heap[++n] = Arrays.copyOf(val, 2); swim(n); } boolean isEmpty() { return size() == 0; } int size() { return n; // return q.size(); } // max heap parent \u0026gt; child; j \u0026gt; i // wrong j \u0026lt; i void swim(int i) { int j = i / 2; if (j \u0026gt; 0 \u0026amp;\u0026amp; less(j, i)) { swap(i, j); swim(j); } } void swap(int i, int j) { int[] temp = heap[i]; heap[i] = heap[j]; heap[j] = temp; } void sink(int i) { int left = 2 * i; int right = 2 * i + 1; int largest = i; if (left \u0026lt; heap.length \u0026amp;\u0026amp; less(largest, left)) { largest = left; } if (right \u0026lt; heap.length \u0026amp;\u0026amp; less(largest, right)) { largest = right; } if (largest != i) { swap(i, largest); sink(largest); } } boolean less(int i, int j) { return heap[i][1] \u0026lt; heap[j][1]; } } Solution 2022-01-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class Solution { public String reorganizeString(String s) { if (s.length() == 0) return \u0026#34;\u0026#34;; Queue\u0026lt;int[]\u0026gt; heap = buildQHeap(s); StringBuilder sb = new StringBuilder(); while (heap.size() \u0026gt; 0) { int[] first = heap.poll(); if (sb.length() == 0) { sb.append((char) (\u0026#39;a\u0026#39; + first[0])); first[1]--; if (first[1] != 0) { heap.add(first); } } else { int prev = sb.charAt(sb.length() - 1) - \u0026#39;a\u0026#39;; if (prev != first[0]) { sb.append((char) (\u0026#39;a\u0026#39; + first[0])); first[1]--; if (first[1] != 0) { heap.add(first); } } else { if (heap.size() == 0) return \u0026#34;\u0026#34;; int[] second = heap.poll(); sb.append((char) (\u0026#39;a\u0026#39; + second[0])); second[1]--; if (second[1] != 0) { heap.add(second); } heap.add(first); } } } return sb.toString(); } Queue\u0026lt;int[]\u0026gt; buildHeap(String s) { int[] freq = new int[26]; for (char c: s.toCharArray()) { int index = (int)(c - \u0026#39;a\u0026#39;); freq[index]++; } Queue\u0026lt;int[]\u0026gt; heap = new PriorityQueue \u0026lt;\u0026gt;((a, b) -\u0026gt; - a[1] + b[1]); for (int i = 0; i \u0026lt; 26; i++) { if (freq[i] \u0026gt; 0) { heap.add(new int[] {i, freq[i]}); } } return heap; } } ","permalink":"https://volyx.in/posts/2021-03-07-reorganize-string-imported/","summary":"\u003cp\u003e\u003cimg alt=\"767. Reorganize String\" loading=\"lazy\" src=\"https://leetcode.com/problems/reorganize-string/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.\u003c/p\u003e\n\u003cp\u003eIf possible, output any possible result.  If not possible, return the empty string.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;aab\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;aba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;aaab\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"767. Reorganize String"},{"content":"![https://leetcode.com/problems/find-the-town-judge/]\nIn a town, there are N people labelled from 1 to N. There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody. Everybody (except for the town judge) trusts the town judge. There is exactly one person that satisfies properties 1 and 2. You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.\nIf the town judge exists and can be identified, return the label of the town judge. Otherwise, return -1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: N = 2, trust = [[1,2]] Output: 2 Example 2: Input: N = 3, trust = [[1,3],[2,3]] Output: 3 Example 3: Input: N = 3, trust = [[1,3],[2,3],[3,1]] Output: -1 Example 4: Input: N = 3, trust = [[1,2],[2,3]] Output: -1 Example 5: Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]] Output: 3 Constraints:\n1 \u0026lt;= N \u0026lt;= 1000 0 \u0026lt;= trust.length \u0026lt;= 10^4 trust[i].length == 2 trust[i] are all different trust[i][0] != trust[i][1] 1 \u0026lt;= trust[i][0], trust[i][1] \u0026lt;= N 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int findJudge(int N, int[][] trust) { int[] in = new int[N + 1]; for (int[] edge: trust) { int from = edge[0]; int to = edge[1]; in[to]++; in[from]--; } for (int i = 1; i \u0026lt; N + 1; i++) { if (in[i] == N - 1) { return i; } } return -1; } } ","permalink":"https://volyx.in/posts/2021-03-06-find-the-town-judge-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/find-the-town-judge/]\u003c/p\u003e\n\u003cp\u003eIn a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.\u003c/p\u003e\n\u003cp\u003eIf the town judge exists, then:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe town judge trusts nobody.\u003c/li\u003e\n\u003cli\u003eEverybody (except for the town judge) trusts the town judge.\u003c/li\u003e\n\u003cli\u003eThere is exactly one person that satisfies properties 1 and 2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.\u003c/p\u003e","title":"997. Find the Town Judge"},{"content":"![https://leetcode.com/problems/last-stone-weight/]\nWe have a collection of stones, each stone has a positive integer weight.\nEach turn, we choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x \u0026lt;= y. The result of this smash is:\nIf x == y, both stones are totally destroyed; If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x. At the end, there is at most 1 stone left. Return the weight of this stone (or 0 if there are no stones left.)\n1 2 3 4 5 6 7 8 9 Example 1: Input: [2,7,4,1,8,1] Output: 1 Explanation: We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that\u0026#39;s the value of last stone. Note:\n1 \u0026lt;= stones.length \u0026lt;= 30 1 \u0026lt;= stones[i] \u0026lt;= 1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Solution { int[] heap; int n; public int lastStoneWeight(int[] stones) { heap = new int[stones.length + 1]; for (int stone: stones) { add(stone); } while (size() \u0026gt; 1) { int y = delMax(); int x = delMax(); if (x == y) { continue; } else { add(y - x); } } return size() \u0026gt; 0 ? delMax(): 0; } void add(int i) { heap[++n] = i; swim(n); } void sink(int i) { int left = 2 * i; int right = 2 * i + 1; int smallest = i; if (left \u0026lt; heap.length - 1 \u0026amp;\u0026amp; heap[left] \u0026gt; heap[smallest]) { smallest = left; } if (right \u0026lt; heap.length - 1 \u0026amp;\u0026amp; heap[right] \u0026gt; heap[smallest]) { smallest = right; } if (smallest != i) { swap(i, smallest); sink(smallest); } } void swim(int i) { int j = i / 2; if (j \u0026gt; 0 \u0026amp;\u0026amp; heap[j] \u0026lt; heap[i]) { swap(i, j); swim(j); } } int delMax() { int max = heap[1]; heap[1] = heap[n--]; heap[n + 1] = 0; sink(1); return max; } int size() { return n; } void swap(int i, int j) { int t = heap[i]; heap[i] = heap[j]; heap[j] = t; } } ","permalink":"https://volyx.in/posts/2021-03-05-last-stone-weight-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/last-stone-weight/]\u003c/p\u003e\n\u003cp\u003eWe have a collection of stones, each stone has a positive integer weight.\u003c/p\u003e\n\u003cp\u003eEach turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x \u0026lt;= y.  The result of this smash is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf x == y, both stones are totally destroyed;\u003c/li\u003e\n\u003cli\u003eIf x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)\u003c/p\u003e","title":"1046. Last Stone Weight"},{"content":"![https://leetcode.com/problems/kth-largest-element-in-an-array/]\nFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n1 2 3 4 5 6 7 8 9 10 11 12 Example 1: Input: [3,2,1,5,6,4] and k = 2 Output: 5 Example 2: Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4 Note: You may assume k is always valid, 1 ≤ k ≤ array\u0026#39;s length. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class Solution { public int findKthLargest(int[] nums, int k) { MinPQ pq = new MinPQ(k); for (int a: nums) { pq.add(a); } return pq.min(); } static class MinPQ { final int[] pq; int n = 0; MinPQ(int size) { this.pq = new int[size + 1]; } int min() { return pq[1]; } void add(int i) { if (n \u0026lt; pq.length - 1) { pq[++n] = i; swim(n); } else { if (i \u0026gt; pq[1]) { pq[1] = i; sink(1); } } } void sink(int i) { int left = 2 * i; int right = 2 * i + 1; int smallest = i; if (left \u0026lt; pq.length \u0026amp;\u0026amp; pq[left] \u0026lt; pq[i]) { smallest = left; } if (right \u0026lt; pq.length \u0026amp;\u0026amp; pq[right] \u0026lt; pq[smallest]) { smallest = right; } if (smallest != i) { swap(i, smallest); sink(smallest); } } void swim(int i) { int j = i / 2; if (j \u0026gt; 0 \u0026amp;\u0026amp; pq[i] \u0026lt; pq[j]) { swap(i, j); swim(j); } } void swap(int i, int j) { int t = pq[i]; pq[i] = pq[j]; pq[j] = t; } } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public int findKthLargest(int[] nums, int k) { int n = nums.length; sort(nums, 0, n - 1); return nums[n - k]; } void sort(int[] nums, int lo, int hi) { if (lo \u0026gt;= hi) return; int j = partition(nums, lo, hi); sort(nums, lo, j - 1); sort(nums, j + 1, hi); } int partition(int[] nums, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (nums[++i] \u0026lt; nums[lo]) { if (i == hi) break; } while (nums[lo] \u0026lt; nums[--j]) { if (j == lo) break; } if (i \u0026lt; j) { swap(nums, i, j); } else { break; } } swap(nums, lo, j); return j; } void swap(int[] nums, int i, int j) { int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } } Solution 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int findKthLargest(int[] nums, int k) { PriorityQueue\u0026lt;Integer\u0026gt; pq = new PriorityQueue\u0026lt;Integer\u0026gt;(); for (int value: nums) { pq.add(value); if (pq.size() == k + 1) { pq.poll(); } // System.out.println(pq); } return pq.peek(); } } Solution - Quick Select 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { public int findKthLargest(int[] nums, int k) { int n = nums.length; int lo = 0; int hi = n - 1; while (lo \u0026lt; hi) { int j = partition(nums, lo, hi); if (j \u0026lt; n - k) { lo = j + 1; } else if (n - k \u0026lt; j) { hi = j - 1; } else { return nums[n - k]; } } return nums[n - k]; } int partition(int[] nums, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (nums[++i] \u0026lt; nums[lo]) { if (i == hi) break; } while (nums[lo] \u0026lt; nums[--j]) { if (j == lo) break; } if (i \u0026lt; j) { swap(nums, i, j); } else { break; } } swap(nums, lo, j); return j; } void swap(int[] nums, int i, int j) { int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; } } Solution 2022-01-24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution { public int findKthLargest(int[] nums, int k) { int n = nums.length; int lo = 0; int hi = n - 1; k = n - k; while (lo \u0026lt; hi) { int m = partition(nums, lo, hi); if (m \u0026gt; k) { hi = m - 1; } else if (m \u0026lt; k) { lo = m + 1; } else { return nums[m]; } } return nums[lo]; } int partition(int[] nums, int lo, int hi) { int swapIndex = lo; while (lo \u0026lt; hi) { while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[hi] \u0026gt;= nums[swapIndex]) { hi--; } while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[lo] \u0026lt;= nums[swapIndex]) { lo++; } swap(nums, lo, hi); } swap(nums, lo, swapIndex); return lo; } void swap(int[] nums, int i, int j) { int t = nums[i]; nums[i] = nums[j]; nums[j] = t; } } ","permalink":"https://volyx.in/posts/2021-03-05-kth-largest-element-in-an-array-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/kth-largest-element-in-an-array/]\u003c/p\u003e\n\u003cp\u003eFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [3,2,1,5,6,4] and k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [3,2,3,1,2,4,5,5,6] and k = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eYou may assume k is always valid, 1 ≤ k ≤ array\u0026#39;s length.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e69\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e70\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindKthLargest\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        MinPQ pq \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e MinPQ(k);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a: nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            pq.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(a);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e pq.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMinPQ\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e pq;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        MinPQ(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e size) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epq\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esize \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e pq.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                pq\u003cspan style=\"color:#f92672\"\u003e[++\u003c/span\u003en\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                swim(n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    sink(1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esink\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2 \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2 \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e smallest \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e pq.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eleft\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                smallest \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e pq.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eright\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esmallest\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                smallest \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (smallest \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                swap(i, smallest);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                sink(smallest);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswim\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e 2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                swap(i, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                swim(j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            pq\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e t;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution-2\"\u003eSolution 2\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindKthLargest\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sort(nums, 0, n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lo, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (lo \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e hi) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e partition(nums, lo, hi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sort(nums, lo, j \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sort(nums, j \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1, hi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epartition\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lo, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lo;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (nums\u003cspan style=\"color:#f92672\"\u003e[++\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003elo\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e hi) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003elo\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[--\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e lo) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              swap(nums, i, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums, lo, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e j;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution-3\"\u003eSolution 3\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindKthLargest\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        PriorityQueue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInteger\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e PriorityQueue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInteger\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e value: nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            pq.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(value);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (pq.\u003cspan style=\"color:#a6e22e\"\u003esize\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                pq.\u003cspan style=\"color:#a6e22e\"\u003epoll\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// System.out.println(pq);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e pq.\u003cspan style=\"color:#a6e22e\"\u003epeek\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution---quick-select\"\u003eSolution - Quick Select\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindKthLargest\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lo \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (lo \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e partition(nums, lo, hi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                lo \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                hi \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epartition\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lo, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lo;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (nums\u003cspan style=\"color:#f92672\"\u003e[++\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003elo\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e hi) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003elo\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[--\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e lo) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              swap(nums, i, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums, lo, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e j;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution-2022-01-24\"\u003eSolution 2022-01-24\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindKthLargest\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lo \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        k \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (lo \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e partition(nums, lo, hi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (m \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                hi \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (m \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                lo \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003em\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003elo\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epartition\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e lo, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e swapIndex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lo;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (lo \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e hi) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (lo \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ehi\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eswapIndex\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                hi\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (lo \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003elo\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eswapIndex\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                lo\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            swap(nums, lo, hi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums, lo, swapIndex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e lo;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eswap\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e t;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"215. Kth Largest Element in an Array"},{"content":"![https://leetcode.com/problems/top-k-frequent-elements/]\nGiven a non-empty array of integers, return the k most frequent elements.\n1 2 3 4 5 6 7 8 9 Example 1: Input: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Example 2: Input: nums = [1], k = 1 Output: [1] Note:\nYou may assume k is always valid, 1 ≤ k ≤ number of unique elements. Your algorithm\u0026rsquo;s time complexity must be better than O(n log n), where n is the array\u0026rsquo;s size. It\u0026rsquo;s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique. You can return the answer in any order. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Solution { public int[] topKFrequent(int[] nums, int k) { List\u0026lt;Integer\u0026gt;[] buckets = new List[nums.length + 1]; Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (int num: nums) { freq.put(num, freq.getOrDefault(num, 0) + 1); } for (var entry: freq.entrySet()) { List\u0026lt;Integer\u0026gt; bucket = buckets[entry.getValue()]; if (bucket == null) { bucket = new ArrayList\u0026lt;\u0026gt;(); } bucket.add(entry.getKey()); buckets[entry.getValue()] = bucket; } int[] res = new int[k]; int j = 0; for (int i = buckets.length - 1; i \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; k; i--) { if (buckets[i] != null) { for (Integer val : buckets[i]) { res[j++] = val; } } } return res; } public int[] topKFrequent2(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (int num: nums) { freq.put(num, freq.getOrDefault(num, 0) + 1); } PriorityQueue\u0026lt;Map.Entry\u0026lt;Integer, Integer\u0026gt;\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;((e1, e2) -\u0026gt; e1.getValue() - e2.getValue()); for (Map.Entry\u0026lt;Integer, Integer\u0026gt; entry: freq.entrySet()) { q.add(entry); if (q.size() \u0026gt; k) { q.poll(); } System.out.println(q); } int[] res = new int[q.size()]; int i = 0; for (var entry: q) { res[i++] = entry.getKey(); } return res; } } ","permalink":"https://volyx.in/posts/2021-03-05-top-k-frequent-elements-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/top-k-frequent-elements/]\u003c/p\u003e\n\u003cp\u003eGiven a non-empty array of integers, return the k most frequent elements.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,1,2,2,3], k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1], k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"347. Top K Frequent Elements"},{"content":"![https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/]\nGiven an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.\nNote that it is the kth smallest element in the sorted order, not the kth distinct element.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8 Output: 13 Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13 Example 2: Input: matrix = [[-5]], k = 1 Output: -5 Constraints:\nn == matrix.length n == matrix[i].length 1 \u0026lt;= n \u0026lt;= 300 -109 \u0026lt;= matrix[i][j] \u0026lt;= -109 All the rows and columns of matrix are guaranteed to be sorted in non-degreasing order. 1 \u0026lt;= k \u0026lt;= n2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class Solution { public int kthSmallest(int[][] matrix, int k) { int n = matrix.length; int lo = matrix[0][0]; int hi = matrix[n - 1][n - 1]; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; if (smallestK(matrix, mid, n) \u0026lt; k) { lo = mid + 1; } else { hi = mid; } } return lo; } int smallestK(int[][] matrix, int mid, int n) { int row = 0; int col = n - 1; int count = 0; while (row \u0026lt; n \u0026amp;\u0026amp; col \u0026gt;= 0) { if (matrix[row][col] \u0026lt;= mid) { count += col + 1; row++; } else { col--; } } return count; } int[] heap; public int kthSmallest2(int[][] matrix, int k) { heap = new int[k + 1]; int n = 0; for (int i = 0; i \u0026lt; matrix.length; i++) { for (int j = 0; j \u0026lt; matrix[0].length; j++) { if (n \u0026lt; k) { heap[++n] = matrix[i][j]; swim(n); } else { if (matrix[i][j] \u0026lt; heap[1]) { heap[1] = matrix[i][j]; sink(1); } } } } return heap[1]; } void swim(int i) { int j = i / 2; if (j \u0026gt; 0 \u0026amp;\u0026amp; heap[i] \u0026gt; heap[j]) { swap(i, j); swim(j); } } void sink(int i) { int left = 2 * i; int right = 2 * i + 1; int largest = i; if (left \u0026lt; heap.length \u0026amp;\u0026amp; heap[left] \u0026gt; heap[largest]) { largest = left; } if (right \u0026lt; heap.length \u0026amp;\u0026amp; heap[right] \u0026gt; heap[largest]) { largest = right; } if (largest != i) { swap(i, largest); sink(largest); } } void swap(int i, int j) { int t = heap[i]; heap[i] = heap[j]; heap[j] = t; } } ","permalink":"https://volyx.in/posts/2021-03-05-kth-smallest-element-in-a-sorted-matrix-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/]\u003c/p\u003e\n\u003cp\u003eGiven an n x n matrix where each of the rows and columns are sorted in ascending order, return the kth smallest element in the matrix.\u003c/p\u003e\n\u003cp\u003eNote that it is the kth smallest element in the sorted order, not the kth distinct element.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 13\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[-5]], k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: -5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"378. Kth Smallest Element in a Sorted Matrix"},{"content":"![https://leetcode.com/problems/insert-interval/]\nGiven a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\nYou may assume that the intervals were initially sorted according to their start times.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Example 1: Input: intervals = [[1,3],[6,9]], newInterval = [2,5] Output: [[1,5],[6,9]] Example 2: Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8] Output: [[1,2],[3,10],[12,16]] Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]. Example 3: Input: intervals = [], newInterval = [5,7] Output: [[5,7]] Example 4: Input: intervals = [[1,5]], newInterval = [2,3] Output: [[1,5]] Example 5: Input: intervals = [[1,5]], newInterval = [2,7] Output: [[1,7]] Constraints:\n0 \u0026lt;= intervals.length \u0026lt;= 104 intervals[i].length == 2 0 \u0026lt;= intervals[i][0] \u0026lt;= intervals[i][1] \u0026lt;= 105 intervals is sorted by intervals[i][0] in ascending order. newInterval.length == 2 0 \u0026lt;= newInterval[0] \u0026lt;= newInterval[1] \u0026lt;= 105 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public int[][] insert(int[][] intervals, int[] newInterval) { List\u0026lt;int[]\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int index = 0; int n = intervals.length; while (index \u0026lt; n \u0026amp;\u0026amp; !overlaps(intervals[index], newInterval) \u0026amp;\u0026amp; intervals[index][1] \u0026lt; newInterval[0]) { res.add(intervals[index]); index++; } int overlapIndex = index; while (overlapIndex \u0026lt; n \u0026amp;\u0026amp; overlaps(intervals[overlapIndex], newInterval)) { newInterval = merge(intervals[overlapIndex], newInterval); overlapIndex++; } res.add(index, newInterval); index = overlapIndex; while (index \u0026lt; n \u0026amp;\u0026amp; !overlaps(intervals[index], newInterval)) { res.add(intervals[index]); index++; } return res.toArray(new int[res.size()][]); } int[] merge(int[] a, int[] b) { return new int[] {Math.min(a[0], b[0]), Math.max(a[1], b[1])}; } boolean overlaps(int[] a, int[] b) { return Math.max(a[0], b[0]) \u0026lt;= Math.min(a[1],b[1]); } } ","permalink":"https://volyx.in/posts/2021-03-05-insert-interval-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/insert-interval/]\u003c/p\u003e\n\u003cp\u003eGiven a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\u003c/p\u003e\n\u003cp\u003eYou may assume that the intervals were initially sorted according to their start times.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,5],[6,9]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,2],[3,10],[12,16]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [], newInterval = [5,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[5,7]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[1,5]], newInterval = [2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[1,5]], newInterval = [2,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,7]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"57. Insert Interval"},{"content":"\nDesign a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums. int add(int val) Returns the element representing the kth largest element in the stream. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input [\u0026#34;KthLargest\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] Output [null, 4, 5, 5, 8, 8] Explanation KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]); kthLargest.add(3); // return 4 kthLargest.add(5); // return 5 kthLargest.add(10); // return 5 kthLargest.add(9); // return 8 kthLargest.add(4); // return 8 Constraints:\n1 \u0026lt;= k \u0026lt;= 104 0 \u0026lt;= nums.length \u0026lt;= 104 -104 \u0026lt;= nums[i] \u0026lt;= 104 -104 \u0026lt;= val \u0026lt;= 104 At most 104 calls will be made to add. It is guaranteed that there will be at least k elements in the array when you search for the kth element. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 class KthLargest { int[] pq; // k + 1 int n = 0; int k; public KthLargest(int k, int[] nums) { this.k = k; this.pq = new int[k + 1]; for (int i = 0; i \u0026lt; nums.length; i++) { add(nums[i]); } } public int add(int val) { if (n \u0026lt; k) { pq[++n] = val; swim(n); } else { if (val \u0026gt; pq[1]) { pq[1] = val; sink(1); } } return pq[1]; } void swim(int k) { while (k \u0026gt; 1 \u0026amp;\u0026amp; !less(k/2, k)) { exch(k/2, k); k = k / 2; } } void sink(int k) { while (2 * k \u0026lt; pq.length) { int j = 2 * k; if (j \u0026lt; pq.length - 1 \u0026amp;\u0026amp; !less(j, j+ 1)) j++; if (less(k, j)) break; exch(k, j); k = j; } } int delMin() { int max = pq[1]; exch(1, n--); sink(1); pq[n+1] = -1; return max; } boolean isEmpty() { return n == 0; } boolean less(int i, int j) { return pq[i] \u0026lt; pq[j]; } void exch(int i, int j) { int t = pq[i]; pq[i] = pq[j]; pq[j] = t; } } /** * Your KthLargest object will be instantiated and called as such: * KthLargest obj = new KthLargest(k, nums); * int param_1 = obj.add(val); */ Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class KthLargest { PriorityQueue\u0026lt;Integer\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;(); int k; public KthLargest(int k, int[] nums) { this.k = k; for (int num: nums) { add(num); } } public int add(int val) { q.add(val); if (q.size() \u0026gt; k) { q.poll(); } return q.peek(); } } /** * Your KthLargest object will be instantiated and called as such: * KthLargest obj = new KthLargest(k, nums); * int param_1 = obj.add(val); */ Notes:\nAsk about unique value Ex1: 6,5,4,2 and k = 3 will return 4 Ex2: 6,5,5,2 and k = 3 will return 4 or 5? ","permalink":"https://volyx.in/posts/2021-03-04-kth-largest-element-in-a-stream-imported/","summary":"\u003cp\u003e\u003cimg alt=\"703. Kth Largest Element in a Stream\" loading=\"lazy\" src=\"https://leetcode.com/problems/kth-largest-element-in-a-stream/\"\u003e\u003c/p\u003e\n\u003cp\u003eDesign a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\u003c/p\u003e\n\u003cp\u003eImplement KthLargest class:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\u003c/li\u003e\n\u003cli\u003eint add(int val) Returns the element representing the kth largest element in the stream.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;KthLargest\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;add\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null, 4, 5, 5, 8, 8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekthLargest.add(3);   // return 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekthLargest.add(5);   // return 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekthLargest.add(10);  // return 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekthLargest.add(9);   // return 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ekthLargest.add(4);   // return 8\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"703. Kth Largest Element in a Stream"},{"content":"![https://leetcode.com/problems/sort-the-matrix-diagonally/]\nA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix\u0026rsquo;s end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\n1 2 3 4 5 6 7 8 9 Example 1: Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]] Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]] Example 2: Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]] Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]] Constraints:\nm == mat.length n == mat[i].length 1 \u0026lt;= m, n \u0026lt;= 100 1 \u0026lt;= mat[i][j] \u0026lt;= 100 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { public int[][] diagonalSort(int[][] mat) { int n = mat.length; int m = mat[0].length; int[] freq = new int[101]; for (int i = 0; i \u0026lt; n; i++) { sort(mat, i, 0, freq); } for (int i = 0; i \u0026lt; m; i++) { sort(mat, 0, i, freq); } return mat; } void sort(int[][] mat, int row, int col, int[] freq) { Arrays.fill(freq, 0); int n = mat.length; int m = mat[0].length; int i = row; int j = col; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026lt; m) { freq[mat[i][j]]++; i++; j++; } i = row; j = col; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026lt; m) { mat[i][j] = getNext(freq); i++; j++; } } int getNext(int[] freq) { for (int i = 0; i \u0026lt; freq.length; i++) { if (freq[i] != 0) { freq[i]--; return i; } } throw new RuntimeException(); } } ","permalink":"https://volyx.in/posts/2021-03-03-sort-the-matrix-diagonally-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/sort-the-matrix-diagonally/]\u003c/p\u003e\n\u003cp\u003eA matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix\u0026rsquo;s end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\u003c/p\u003e\n\u003cp\u003eGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.\u003c/p\u003e","title":"1329. Sort the Matrix Diagonally"},{"content":"![https://leetcode.com/problems/sort-colors/]\nGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: nums = [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Example 2: Input: nums = [2,0,1] Output: [0,1,2] Example 3: Input: nums = [0] Output: [0] Example 4: Input: nums = [1] Output: [1] Constraints:\nn == nums.length 1 \u0026lt;= n \u0026lt;= 300 nums[i] is 0, 1, or 2. Follow up:\nCould you solve this problem without using the library\u0026rsquo;s sort function? Could you come up with a one-pass algorithm using only O(1) constant space? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public void sortColors(int[] nums) { int zero = 0; int second = nums.length - 1; for (int i = 0; i \u0026lt;= second; i++) { while (nums[i] == 2 \u0026amp;\u0026amp; i \u0026lt; second) swap(nums, i, second--); while (nums[i] == 0 \u0026amp;\u0026amp; i \u0026gt; zero) swap(nums, i, zero++); } } void swap(int[] a, int i, int j) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } public void sortColors2(int[] nums) { int[] colors = new int[3]; for (int i = 0; i \u0026lt; nums.length; i++) { colors[nums[i]]++; } int j = 0; for (int i = 0; i \u0026lt; colors.length; i++) { while (colors[i]-- \u0026gt; 0) { nums[j++] = i; } } } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public void sortColors(int[] colors) { int c0 = 0; // rightmost boundary of zeros int c2 = colors.length - 1; // the leftmost boundary of twos int curr = 0; // the current element under the consideration. while (curr \u0026lt;= c2) { if (colors[curr] == 0) { swap(c0, curr, colors); c0++; curr++; } else if (colors[curr] == 1) { curr++; } else if (colors[curr] == 2) { swap(c2, curr, colors); c2--; } } } void swap(int i, int j, int[] array) { int temp = array[i]; array[i] = array[j]; array[j] = temp; } } ","permalink":"https://volyx.in/posts/2021-03-03-sort-colors-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/sort-colors/]\u003c/p\u003e\n\u003cp\u003eGiven an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\u003c/p\u003e\n\u003cp\u003eWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,0,2,1,1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,0,1,1,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"75. Sort Colors"},{"content":"![https://leetcode.com/problems/merge-intervals/]\nGiven an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. Example 2: Input: intervals = [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping. Constraints:\n1 \u0026lt;= intervals.length \u0026lt;= 104 intervals[i].length == 2 0 \u0026lt;= starti \u0026lt;= endi \u0026lt;= 104 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class Solution { TreeSet\u0026lt;int[]\u0026gt; bst = new TreeSet\u0026lt;\u0026gt;((a, b) -\u0026gt; a[0] - b[0]); public int[][] merge(int[][] intervals) { for (int[] interval: intervals) { Iterator\u0026lt;int[]\u0026gt; it = bst.iterator(); while (it.hasNext()) { int[] current = it.next(); if (isOverlap(current, interval)) { interval = merge(interval, current); it.remove(); } } bst.add(interval); } return toArray(bst); } public int[][] mergeSort(int[][] intervals) { if (intervals.length \u0026lt;= 1) { return intervals; } sort(intervals, 0, intervals.length - 1); List\u0026lt;int[]\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); int[] current = intervals[0]; for (int i = 1; i \u0026lt; intervals.length; i++) { if (isOverlap(current, intervals[i])) { current = merge(current, intervals[i]); } else { res.add(current); current = intervals[i]; } } res.add(current); return toArray(res); } void sort(int[][] a, int lo, int hi) { if (lo \u0026gt;= hi) { return; } int j = partition(a, lo, hi); sort(a, lo, j - 1); sort(a, j + 1, hi); } int partition(int[][] a, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (a[++i][0] \u0026lt; a[lo][0]) { if (i == hi) break; } while (a[lo][0] \u0026lt; a[--j][0]) { if (j == lo) break; } if (i \u0026gt;= j) { break; } swap(a, i, j); } swap(a, lo, j); return j; } void swap(int[][] a, int i, int j) { int[] temp = a[i]; a[i] = a[j]; a[j] = temp; } public int[][] mergeUf(int[][] intervals) { int n = intervals.length; UF uf = new UF(n); for (int i = 0; i \u0026lt; n; i++) { for (int j = i + 1; j \u0026lt; n; j++) { if (isOverlap(intervals[i], intervals[j])) { uf.union(i, j); } } } Map\u0026lt;Integer, int[]\u0026gt; res = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { int id = uf.find(i); int[] interval = res.get(id); if (interval == null) { interval = intervals[i]; } else { interval = merge(interval, intervals[i]); } res.put(id, interval); } int[][] ans = new int[res.size()][2]; int i = 0; for (int[] interval: res.values()) { ans[i++] = interval; } return ans; } static int[][] toArray(java.util.Collection\u0026lt;int[]\u0026gt; list) { int[][] a = new int[list.size()][2]; int i = 0; for (int[] value: list) { a[i++] = value; } return a; } static int[] merge(int[] a, int[] b) { return new int[] {Math.min(a[0], b[0]), Math.max(a[1], b[1])}; } /* a0---------a1 b0-----------b1 a0-------a1 b0--------b1 a0-----------a1 b0----b1 */ static boolean isOverlap(int[] a, int[] b) { return (a[0] \u0026lt;= b[0] \u0026amp;\u0026amp; b[0] \u0026lt;= a[1]) || (a[0] \u0026lt;= b[1] \u0026amp;\u0026amp; b[1] \u0026lt;= a[1]) || (b[0] \u0026lt;= a[0] \u0026amp;\u0026amp; b[1] \u0026gt;= a[1]); } class UF { int[] a; public UF(int n) { this.a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { return; } a[pid] = qid; } /* [0,1,0,1,3] */ int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } } } ","permalink":"https://volyx.in/posts/2021-03-02-merge-intervals-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/merge-intervals/]\u003c/p\u003e\n\u003cp\u003eGiven an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,6],[8,10],[15,18]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: intervals = [[1,4],[4,5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"56. Merge Intervals"},{"content":"![https://leetcode.com/problems/largest-values-from-labels/]\nWe have a set of items: the i-th item has value values[i] and label labels[i].\nThen, we choose a subset S of these items, such that:\n|S| \u0026lt;= num_wanted For every label L, the number of items in S with label L is \u0026lt;= use_limit. Return the largest possible sum of the subset S.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1 Output: 9 Explanation: The subset chosen is the first, third, and fifth item. Example 2: Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2 Output: 12 Explanation: The subset chosen is the first, second, and third item. Example 3: Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1 Output: 16 Explanation: The subset chosen is the first and fourth item. Example 4: Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2 Output: 24 Explanation: The subset chosen is the first, second, and fourth item. Note:\n1 \u0026lt;= values.length == labels.length \u0026lt;= 20000 0 \u0026lt;= values[i], labels[i] \u0026lt;= 20000 1 \u0026lt;= num_wanted, use_limit \u0026lt;= values.length 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class Solution { public int largestValsFromLabels(int[] values, int[] labels, int num_wanted, int use_limit) { sort(values, labels); int[] labelCount = new int[20001]; int sum = 0; for (int i = values.length - 1; i \u0026gt;= 0 \u0026amp;\u0026amp; num_wanted \u0026gt; 0; i--) { int label = labels[i]; if (labelCount[label] \u0026lt; use_limit) { sum+= values[i]; labelCount[label]++; num_wanted--; } } return sum; } static void sort(int[] values, int[] labels) { sort(values, labels, 0, values.length - 1); } static void sort(int[] values, int[] labels, int lo, int hi) { if (lo \u0026gt;= hi) { return; } int j = partition(values, labels, lo, hi); sort(values, labels, lo, j - 1); sort(values, labels, j + 1, hi); } static int partition(int[] values, int[] labels, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (values[++i] \u0026lt; values[lo]) { if (i == hi) break; } while (values[lo] \u0026lt; values[--j]) { if (j == lo) break; } if (i \u0026gt;= j) { break; } swap(values, labels, i, j); } swap(values, labels, lo, j); return j; } static void swap(int[] values, int[] labels, int i, int j) { int temp = values[i]; values[i] = values[j]; values[j] = temp; temp = labels[i]; labels[i] = labels[j]; labels[j] = temp; } } ","permalink":"https://volyx.in/posts/2021-03-01-largest-values-from-labels-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/largest-values-from-labels/]\u003c/p\u003e\n\u003cp\u003eWe have a set of items: the i-th item has value values[i] and label labels[i].\u003c/p\u003e\n\u003cp\u003eThen, we choose a subset S of these items, such that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e|S| \u0026lt;= num_wanted\u003c/li\u003e\n\u003cli\u003eFor every label L, the number of items in S with label L is \u0026lt;= use_limit.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the largest possible sum of the subset S.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subset chosen is the first, third, and fifth item.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 12\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subset chosen is the first, second, and third item.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subset chosen is the first and fourth item.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 24\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The subset chosen is the first, second, and fourth item.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"1090. Largest Values From Labels"},{"content":"![https://leetcode.com/problems/search-a-2d-matrix-ii/]\nWrite an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:\nIntegers in each row are sorted in ascending from left to right. Integers in each column are sorted in ascending from top to bottom. 1 2 3 4 Example 1: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 Output: true 1 2 3 4 Example 2: Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20 Output: false Constraints:\nm == matrix.length n == matrix[i].length 1 \u0026lt;= n, m \u0026lt;= 300 -109 \u0026lt;= matix[i][j] \u0026lt;= 109 All the integers in each row are sorted in ascending order. All the integers in each column are sorted in ascending order. -109 \u0026lt;= target \u0026lt;= 109 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public boolean searchMatrix(int[][] matrix, int target) { int n = matrix.length; int m = matrix[0].length; int i = 0; int j = m - 1; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026gt;= 0 ) { if (target \u0026lt; matrix[i][j]) { j--; } else if (target \u0026gt; matrix[i][j]) { i++; } else { return true; } } return false; } } ","permalink":"https://volyx.in/posts/2021-03-01-search-a-2d-matrix-ii-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/search-a-2d-matrix-ii/]\u003c/p\u003e\n\u003cp\u003eWrite an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIntegers in each row are sorted in ascending from left to right.\u003c/li\u003e\n\u003cli\u003eIntegers in each column are sorted in ascending from top to bottom.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-03-01-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"/images/2021-03-01-ex2.png\"\u003e\u003c/p\u003e","title":"240. Search a 2D Matrix II"},{"content":"![https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/]\nGiven n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.\n1 2 3 4 5 6 7 8 9 10 11 Example 1: ​ Input: points = [[8,7],[9,9],[7,4],[9,7]] Output: 1 Explanation: Both the red and the blue area are optimal. Example 2: Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]] Output: 3 Constraints:\nn == points.length 2 \u0026lt;= n \u0026lt;= 105 points[i].length == 2 0 \u0026lt;= xi, yi \u0026lt;= 109 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Solution { private static final Random RANDOM = new Random(); public int maxWidthOfVerticalArea(int[][] points) { // shuffle(points); sort(points); int max = 0; for (int i = 0; i \u0026lt; points.length - 1; i++) { max = Math.max(max, points[i + 1][0] - points[i][0]); } return max; } void sort(int[][] points) { sort(points, 0, points.length - 1); } int partition(int[][] a, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (less(a[++i], a[lo])) { if (i == hi) break; } while (less(a[lo], a[--j])) { if (j == lo) break; } if (i \u0026gt;= j) break; swap(a, i, j); } swap(a, lo, j); return j; } boolean less(int[] a, int[] b) { return (a[0] - b[0]) \u0026lt; 0; } void swap(int[][] a, int i, int j) { int x = a[i][0]; int y = a[i][1]; a[i][0] = a[j][0]; a[i][1] = a[j][1]; a[j][0] = x; a[j][1] = y; } void sort(int[][] points, int lo, int hi) { if (lo \u0026gt;= hi) return; int j = partition(points, lo, hi); sort(points, lo, j - 1); sort(points, j + 1, hi); } void shuffle(int[][] a) { for (int i = 0; i \u0026lt; a.length; i++) { swap(a, i, RANDOM.nextInt(a.length)); } } } ","permalink":"https://volyx.in/posts/2021-02-26-widest-vertical-area-between-two-points-containing-no-points-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/]\u003c/p\u003e\n\u003cp\u003eGiven n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.\u003c/p\u003e\n\u003cp\u003eA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\u003c/p\u003e\n\u003cp\u003eNote that points on the edge of a vertical area are not considered included in the area.\u003c/p\u003e","title":"1637. Widest Vertical Area Between Two Points Containing No Points"},{"content":"![https://leetcode.com/problems/k-closest-points-to-origin/]\nWe have a list of points on the plane. Find the K closest points to the origin (0, 0).\n(Here, the distance between two points on a plane is the Euclidean distance.)\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in.)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 Example 1: Input: points = [[1,3],[-2,2]], K = 1 Output: [[-2,2]] Explanation: The distance between (1, 3) and the origin is sqrt(10). The distance between (-2, 2) and the origin is sqrt(8). Since sqrt(8) \u0026lt; sqrt(10), (-2, 2) is closer to the origin. We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]]. Example 2: Input: points = [[3,3],[5,-1],[-2,4]], K = 2 Output: [[3,3],[-2,4]] (The answer [[-2,4],[3,3]] would also be accepted.) Note:\n1 \u0026lt;= K \u0026lt;= points.length \u0026lt;= 10000 -10000 \u0026lt; points[i][0] \u0026lt; 10000 -10000 \u0026lt; points[i][1] \u0026lt; 10000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 /** ------j---------K------ ---------------K--j--- **/ class Solution { private static final Random RANDOM = new Random(); public int[][] kClosest(int[][] points, int K) { int lo = 0; int hi = points.length - 1; shuffle(points); while (lo \u0026lt; hi) { int j = partition(points, lo, hi); if (j \u0026lt; K) { lo = j + 1; } else if (j \u0026gt; K) { hi = j - 1; } else { return copyOf(points,K); } } return copyOf(points, K); } int partition(int[][] a, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (less(a[++i], a[lo])) { if (i == hi) break; } while (less(a[lo], a[--j])) { if (j == lo) break; } if (i \u0026gt;= j) break; swap(a, i, j); } swap(a, lo, j); return j; } static boolean less(int[] a, int[] b) { int diff = b[0] * b[0] + b[1]*b[1] - a[0]* a[0] - a[1] * a[1]; return diff \u0026gt; 0; } void swap(int[][] a, int i, int j) { int[] temp = a[i]; a[i] = a[j]; a[j] = temp; } static int[][] copyOf(int[][] points, int k) { int[][] a = new int[k][]; for (int i = 0; i \u0026lt; k; i++) { a[i] = points[i]; } return a; } void shuffle(int[][] a) { for (int i = 0; i \u0026lt; a.length; i++) { swap(a, i, RANDOM.nextInt(a.length)); } } public int[][] kClosest2(int[][] points, int K) { List\u0026lt;Point\u0026gt; sortedPoints = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0 ; i \u0026lt; points.length; i++) { sortedPoints.add(new Point(points[i][0], points[i][1])); } Collections.sort(sortedPoints); int[][] res = new int[K][2]; for (int i = 0; i \u0026lt; Math.min(points.length, K); i++) { res[i] = new int []{sortedPoints.get(i).x, sortedPoints.get(i).y}; } return res; } class Point implements Comparable\u0026lt;Point\u0026gt; { int x; int y; Point(int x, int y) { this.x = x; this.y = y; } public int compareTo(Point that) { return (this.x * this.x + this.y * this.y) - (that.x * that.x + that.y * that.y) ; } public String toString() { return String.format(\u0026#34;[%d,%d]\u0026#34;, this.x, this.y); } } } Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class Solution { public int[][] kClosest(int[][] points, int k) { int n = points.length; int[] dist = new int[n]; for (int i = 0; i \u0026lt; n; i++) { dist[i] = points[i][0] * points[i][0] + points[i][1] * points[i][1]; } int lo = 0; int hi = n - 1; while (lo \u0026lt; hi) { int m = partition(points, dist, lo, hi); if (m \u0026gt; k) { hi = m - 1; } else if (m \u0026lt; k) { lo = m + 1; } else { break; } } return Arrays.copyOf(points, k); } int partition(int[][] points, int[] dist, int lo, int hi) { int swapIndex = lo; while (lo \u0026lt; hi) { while (lo \u0026lt; hi \u0026amp;\u0026amp; dist[hi] \u0026gt;= dist[swapIndex]) { hi--; } while (lo \u0026lt; hi \u0026amp;\u0026amp; dist[lo] \u0026lt;= dist[swapIndex]) { lo++; } swap(points, dist, lo, hi); } swap(points, dist, swapIndex, lo); return lo; } void swap(int[][] points, int[] dist, int i, int j) { int[] t = points[i]; points[i] = points[j]; points[j] = t; int d = dist[i]; dist[i] = dist[j]; dist[j] = d; } public int[][] kClosest2(int[][] points, int k) { PriorityQueue\u0026lt;int[]\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;((a, b) -\u0026gt; { int dist1 = a[0] * a[0] + a[1] * a[1]; int dist2 = b[0] * b[0] + b[1] * b[1]; return - Integer.compare(dist1, dist2); }); for (int[] point: points) { q.add(point); if (q.size() \u0026gt; k) { q.poll(); } } int[][] res = new int[k][2]; int i = 0; while (q.size() \u0026gt; 0) { res[i++] = q.poll(); } return res; } } Solution 2022-01-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class Solution { public int[][] kClosest(int[][] points, int k) { int n = points.length; int[] dist = new int[n]; for (int i = 0; i \u0026lt; n; i++) { int[] p = points[i]; dist[i] = p[0] * p[0] + p[1] * p[1]; } int lo = 0; int hi = n - 1; System.out.println(Arrays.toString(dist)); while (lo \u0026lt; hi) { int m = partition(points, dist, lo, hi); if (m \u0026gt; k) { hi = m - 1; } else if (m \u0026lt; k) { lo = m + 1; } else { break; } } return Arrays.copyOf(points, k); } int partition(int[][] points, int[] dist, int lo, int hi) { int swapIndex = lo; while (lo \u0026lt; hi) { // ORDER IS IMPORTANT, IT SHOULD BE FIRST while (lo \u0026lt; hi \u0026amp;\u0026amp; dist[hi] \u0026gt;= dist[swapIndex]) { hi--; } // IT SHOULD BE SECOND while (lo \u0026lt; hi \u0026amp;\u0026amp; dist[lo] \u0026lt;= dist[swapIndex]) { lo++; } swap(points, dist, lo, hi); } swap(points, dist, swapIndex, lo); return lo; } void swap(int[][] points, int[] dist, int i, int j) { int[] temp = points[i]; points[i] = points[j]; points[j] = temp; int d = dist[i]; dist[i] = dist[j]; dist[j] = d; } } ","permalink":"https://volyx.in/posts/2021-02-26-k-closest-points-to-origin/","summary":"\u003cp\u003e![https://leetcode.com/problems/k-closest-points-to-origin/]\u003c/p\u003e\n\u003cp\u003eWe have a list of points on the plane.  Find the K closest points to the origin (0, 0).\u003c/p\u003e\n\u003cp\u003e(Here, the distance between two points on a plane is the Euclidean distance.)\u003c/p\u003e\n\u003cp\u003eYou may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[1,3],[-2,2]], K = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[-2,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe distance between (1, 3) and the origin is sqrt(10).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe distance between (-2, 2) and the origin is sqrt(8).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince sqrt(8) \u0026lt; sqrt(10), (-2, 2) is closer to the origin.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eWe only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: points = [[3,3],[5,-1],[-2,4]], K = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[3,3],[-2,4]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(The answer [[-2,4],[3,3]] would also be accepted.)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"973. K Closest Points to Origin"},{"content":"![https://leetcode.com/problems/majority-element/]\nGiven an array nums of size n, return the majority element.\nThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n1 2 3 4 5 6 7 8 9 Example 1: Input: nums = [3,2,3] Output: 3 Example 2: Input: nums = [2,2,1,1,1,2,2] Output: 2 Constraints:\nn == nums.length 1 \u0026lt;= n \u0026lt;= 5 * 104 -231 \u0026lt;= nums[i] \u0026lt;= 231 - 1 Follow-up: Could you solve the problem in linear time and in O(1) space?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class Solution { private static final Random RANDOM = new Random(); public int majorityElement(int[] nums) { sort(nums); return nums[nums.length / 2]; } void sort(int[] nums) { shuffle(nums); sort(nums, 0, nums.length - 1); } void sort(int[] nums, int lo, int hi) { if (hi \u0026lt;= lo) return; int j = partition(nums, lo, hi); sort(nums, lo, j - 1); sort(nums, j + 1, hi); } void shuffle(int[] a) { for (int i = 0; i \u0026lt; a.length; i++) { swap(a, i, RANDOM.nextInt(a.length)); } } int partition(int[] a, int lo, int hi) { int i = lo; int j = hi + 1; while(true) { while (a[++i] \u0026lt; a[lo]) { if (i == hi) break; } while (a[lo] \u0026lt; a[--j]) { if (j == lo) break; } if (j \u0026lt;= i) break; swap(a, i, j); } swap(a, lo, j); return j; } void swap(int[] a, int i, int j) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } } ","permalink":"https://volyx.in/posts/2021-02-25-majority-element-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/majority-element/]\u003c/p\u003e\n\u003cp\u003eGiven an array nums of size n, return the majority element.\u003c/p\u003e\n\u003cp\u003eThe majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [3,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,2,1,1,1,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"169. Majority Element"},{"content":"![https://leetcode.com/problems/kth-largest-element-in-an-array/]\nFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\n1 2 3 4 5 6 7 8 9 Example 1: Input: [3,2,1,5,6,4] and k = 2 Output: 5 Example 2: Input: [3,2,3,1,2,4,5,5,6] and k = 4 Output: 4 Note:\nYou may assume k is always valid, 1 ≤ k ≤ array\u0026rsquo;s length. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Solution { public int findKthLargest(int[] nums, int k) { int lo = 0; int hi = nums.length - 1; k = nums.length - k; while (lo \u0026lt; hi) { int j = partition(nums, lo, hi); if (j \u0026lt; k) { lo = j + 1; } else if (j \u0026gt; k) { hi = j - 1; } else { return nums[k]; } } return nums[k]; } int partition(int[] a, int lo, int hi) { int i = lo; int j = hi + 1; while (true) { while (a[++i] \u0026lt; a[lo]) { if (i == hi) break; } while (a[lo] \u0026lt; a[--j]) { if (j == lo) break; } if (i \u0026gt;= j) break; swap(a, i, j); } swap(a, lo, j); return j; } void swap(int[] a, int i, int j) { int temp = a[i]; a[i] = a[j]; a[j] = temp; } } ","permalink":"https://volyx.in/posts/2021-02-24-kth-largest-element-in-an-array-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/kth-largest-element-in-an-array/]\u003c/p\u003e\n\u003cp\u003eFind the kth largest element in an unsorted array. Note that it is the kth largest element in the sorted order, not the kth distinct element.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [3,2,1,5,6,4] and k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [3,2,3,1,2,4,5,5,6] and k = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"215. Kth Largest Element in an Array"},{"content":"![https://leetcode.com/problems/shuffle-string/]\nGiven a string s and an integer array indices of the same length.\nThe string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: s = \u0026#34;codeleet\u0026#34;, indices = [4,5,6,7,0,2,1,3] Output: \u0026#34;leetcode\u0026#34; Explanation: As shown, \u0026#34;codeleet\u0026#34; becomes \u0026#34;leetcode\u0026#34; after shuffling. Example 2: Input: s = \u0026#34;abc\u0026#34;, indices = [0,1,2] Output: \u0026#34;abc\u0026#34; Explanation: After shuffling, each character remains in its position. Example 3: Input: s = \u0026#34;aiohn\u0026#34;, indices = [3,1,4,2,0] Output: \u0026#34;nihao\u0026#34; Example 4: Input: s = \u0026#34;aaiougrt\u0026#34;, indices = [4,0,2,6,7,3,1,5] Output: \u0026#34;arigatou\u0026#34; Example 5: Input: s = \u0026#34;art\u0026#34;, indices = [1,0,2] Output: \u0026#34;rat\u0026#34; Constraints:\ns.length == indices.length == n 1 \u0026lt;= n \u0026lt;= 100 s contains only lower-case English letters. 0 \u0026lt;= indices[i] \u0026lt; n All values of indices are unique (i.e. indices is a permutation of the integers from 0 to n - 1). 1 2 3 4 5 6 7 8 9 10 class Solution { public String restoreString(String s, int[] indices) { char[] symbols = new char[s.length()]; for (int i = 0; i \u0026lt; indices.length; i++) { symbols[indices[i]] = s.charAt(i); } return new String(symbols); } } ","permalink":"https://volyx.in/posts/2021-02-23-shuffle-string-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/shuffle-string/]\u003c/p\u003e\n\u003cp\u003eGiven a string s and an integer array indices of the same length.\u003c/p\u003e\n\u003cp\u003eThe string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\u003c/p\u003e\n\u003cp\u003eReturn the shuffled string.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2021-02-23-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;codeleet\u0026#34;, indices = [4,5,6,7,0,2,1,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;leetcode\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: As shown, \u0026#34;codeleet\u0026#34; becomes \u0026#34;leetcode\u0026#34; after shuffling.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abc\u0026#34;, indices = [0,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: After shuffling, each character remains in its position.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aiohn\u0026#34;, indices = [3,1,4,2,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;nihao\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;aaiougrt\u0026#34;, indices = [4,0,2,6,7,3,1,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;arigatou\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;art\u0026#34;, indices = [1,0,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;rat\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1528. Shuffle String"},{"content":"About me ","permalink":"https://volyx.in/about/","summary":"\u003ch2 id=\"about-me\"\u003eAbout me\u003c/h2\u003e","title":"About me"},{"content":"![https://leetcode.com/problems/remove-outermost-parentheses/]\nThere are n computers numbered from 0 to n-1 connected by ethernet cables connections forming a network where connections[i] = [a, b] represents a connection between computers a and b. Any computer can reach any other computer directly or indirectly through the network.\nGiven an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it\u0026rsquo;s not possible, return -1.\n1 2 3 4 5 Example 1: Input: n = 4, connections = [[0,1],[0,2],[1,2]] Output: 1 Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3. 1 2 3 4 Example 2: Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]] Output: 2 1 2 3 4 5 6 7 8 9 10 Example 3: Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]] Output: -1 Explanation: There are not enough cables. Example 4: Input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]] Output: 0 Constraints:\n1 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= connections.length \u0026lt;= min(n*(n-1)/2, 10^5) connections[i].length == 2 0 \u0026lt;= connections[i][0], connections[i][1] \u0026lt; n connections[i][0] != connections[i][1] There are no repeated connections. No two computers are connected by more than one cable. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class Solution { public int makeConnected(int n, int[][] connections) { UF uf = new UF(n); int extra = 0; for (int i = 0; i \u0026lt; connections.length; i++) { int a = connections[i][0]; int b = connections[i][1]; if (uf.union(a, b)) extra++; } int group = 0; for (int i = 0; i \u0026lt; n; i++) { if (uf.find(i) == i) { group++; } } return extra \u0026gt;= group - 1 ? group - 1 : -1; } class UF { private int[] a; UF(int n) { this.a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } boolean union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { return true; } a[qid] = pid; return false; } int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } } } class Solution2 { public int makeConnected(int n, int[][] connections) { if (connections.length \u0026lt; n - 1) { return -1; } UF uf = new UF(n); for (int i = 0; i \u0026lt; connections.length; i++) { int a = connections[i][0]; int b = connections[i][1]; uf.union(a, b); } Set\u0026lt;Integer\u0026gt; componentCount = new HashSet\u0026lt;\u0026gt;(); int free = 0; for (int i = 0; i \u0026lt; n; i++) { int id = uf.find(i); if (componentCount.add(id)) { free = free + uf.edges[id] - (uf.size(id) - 1); } } if (componentCount.size() == 1) { return 0; } int needEdges = componentCount.size() - 1; if (free \u0026gt;= needEdges) { return needEdges; } else { return 1; } } class UF { private int[] a; private int[] sz; private int[] edges; UF(int n) { this.a = new int[n]; this.sz = new int[n]; this.edges = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; sz[i] = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { edges[qid]++; return; } if (sz[pid] \u0026gt; sz[qid]) { a[qid] = pid; sz[pid] += sz[qid]; edges[pid] += edges[qid] + 1; } else { a[pid] = qid; sz[qid] += sz[pid]; edges[qid] += edges[pid] + 1; } } int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } int size(int p) { return sz[find(p)]; } } } ","permalink":"https://volyx.in/posts/2021-02-22-number-of-operations-to-make-network-connected-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/remove-outermost-parentheses/]\u003c/p\u003e\n\u003cp\u003eThere are n computers numbered from 0 to n-1 connected by ethernet cables connections forming a network where connections[i] = [a, b] represents a connection between computers a and b. Any computer can reach any other computer directly or indirectly through the network.\u003c/p\u003e\n\u003cp\u003eGiven an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it\u0026rsquo;s not possible, return -1.\u003c/p\u003e","title":"1319. Number of Operations to Make Network Connected"},{"content":"![https://leetcode.com/problems/evaluate-reverse-polish-notation/]\nEvaluate the value of an arithmetic expression in Reverse Polish Notation.\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\nNote:\nDivision between two integers should truncate toward zero. The given RPN expression is always valid. That means the expression would always evaluate to a result and there won\u0026rsquo;t be any divide by zero operation. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 Example 1: Input: [\u0026#34;2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;*\u0026#34;] Output: 9 Explanation: ((2 + 1) * 3) = 9 Example 2: Input: [\u0026#34;4\u0026#34;, \u0026#34;13\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;+\u0026#34;] Output: 6 Explanation: (4 + (13 / 5)) = 6 Example 3: Input: [\u0026#34;10\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;-11\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;17\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;+\u0026#34;] Output: 22 Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public int evalRPN(String[] tokens) { int[] stack = new int[tokens.length]; int size = 0; for (String token: tokens) { if (token.equals(\u0026#34;+\u0026#34;) || token.equals(\u0026#34;-\u0026#34;) || token.equals(\u0026#34;*\u0026#34;) || token.equals(\u0026#34;/\u0026#34;) ) { int b = stack[--size]; int a = stack[--size]; int c; switch (token) { case \u0026#34;+\u0026#34;: c = a + b; break; case \u0026#34;-\u0026#34;: c = a - b; break; case \u0026#34;*\u0026#34;: c = a * b; break; case \u0026#34;/\u0026#34;: c = a / b; break; default: throw new RuntimeException(); } stack[size++] = c; } else { stack[size++] = Integer.valueOf(token); } } return stack[0]; } } ","permalink":"https://volyx.in/posts/2021-02-22-evaluate-reverse-polish-notation-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/evaluate-reverse-polish-notation/]\u003c/p\u003e\n\u003cp\u003eEvaluate the value of an arithmetic expression in Reverse Polish Notation.\u003c/p\u003e\n\u003cp\u003eValid operators are +, -, *, /. Each operand may be an integer or another expression.\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDivision between two integers should truncate toward zero.\u003c/li\u003e\n\u003cli\u003eThe given RPN expression is always valid. That means the expression would always evaluate to a result and there won\u0026rsquo;t be any divide by zero operation.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;2\u0026#34;, \u0026#34;1\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;*\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: ((2 + 1) * 3) = 9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;4\u0026#34;, \u0026#34;13\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;+\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: (4 + (13 / 5)) = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;10\u0026#34;, \u0026#34;6\u0026#34;, \u0026#34;9\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;-11\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;/\u0026#34;, \u0026#34;*\u0026#34;, \u0026#34;17\u0026#34;, \u0026#34;+\u0026#34;, \u0026#34;5\u0026#34;, \u0026#34;+\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 22\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e= ((10 * (6 / (12 * -11))) + 17) + 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e= ((10 * (6 / -132)) + 17) + 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e= ((10 * 0) + 17) + 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e= (0 + 17) + 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e= 17 + 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e= 22\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eevalRPN\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e tokens) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e stack \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003etokens.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e size \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (String token: tokens) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (token.\u003cspan style=\"color:#a6e22e\"\u003eequals\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;+\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e token.\u003cspan style=\"color:#a6e22e\"\u003eequals\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e token.\u003cspan style=\"color:#a6e22e\"\u003eequals\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e token.\u003cspan style=\"color:#a6e22e\"\u003eequals\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e) ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e stack\u003cspan style=\"color:#f92672\"\u003e[--\u003c/span\u003esize\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e stack\u003cspan style=\"color:#f92672\"\u003e[--\u003c/span\u003esize\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e c;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eswitch\u003c/span\u003e (token) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;+\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e RuntimeException();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                stack\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esize\u003cspan style=\"color:#f92672\"\u003e++]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e c;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                stack\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003esize\u003cspan style=\"color:#f92672\"\u003e++]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Integer.\u003cspan style=\"color:#a6e22e\"\u003evalueOf\u003c/span\u003e(token);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e stack\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"150. Evaluate Reverse Polish Notation"},{"content":"![https://leetcode.com/problems/crawler-log-folder/]\nThe Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\u0026ldquo;../\u0026rdquo; : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder). \u0026ldquo;./\u0026rdquo; : Remain in the same folder. \u0026ldquo;x/\u0026rdquo; : Move to the child folder named x (This folder is guaranteed to always exist). You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.\n1 2 3 4 5 Example 1: Input: logs = [\u0026#34;d1/\u0026#34;,\u0026#34;d2/\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;d21/\u0026#34;,\u0026#34;./\u0026#34;] Output: 2 Explanation: Use this change folder operation \u0026#34;../\u0026#34; 2 times and go back to the main folder. 1 2 3 4 5 6 7 8 9 Example 2: Input: logs = [\u0026#34;d1/\u0026#34;,\u0026#34;d2/\u0026#34;,\u0026#34;./\u0026#34;,\u0026#34;d3/\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;d31/\u0026#34;] Output: 3 Example 3: Input: logs = [\u0026#34;d1/\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;../\u0026#34;] Output: 0 Constraints:\n1 \u0026lt;= logs.length \u0026lt;= 103 2 \u0026lt;= logs[i].length \u0026lt;= 10 logs[i] contains lowercase English letters, digits, \u0026lsquo;.\u0026rsquo;, and \u0026lsquo;/\u0026rsquo;. logs[i] follows the format described in the statement. Folder names consist of lowercase English letters and digits. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class Solution { public int makeConnected(int n, int[][] connections) { UF uf = new UF(n); int extra = 0; for (int i = 0; i \u0026lt; connections.length; i++) { int a = connections[i][0]; int b = connections[i][1]; if (uf.union(a, b)) extra++; } int group = 0; for (int i = 0; i \u0026lt; n; i++) { if (uf.find(i) == i) { group++; } } return extra \u0026gt;= group - 1 ? group - 1 : -1; } class UF { private int[] a; UF(int n) { this.a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } boolean union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { return true; } a[qid] = pid; return false; } int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } } } class Solution2 { public int makeConnected(int n, int[][] connections) { if (connections.length \u0026lt; n - 1) { return -1; } UF uf = new UF(n); for (int i = 0; i \u0026lt; connections.length; i++) { int a = connections[i][0]; int b = connections[i][1]; uf.union(a, b); } Set\u0026lt;Integer\u0026gt; componentCount = new HashSet\u0026lt;\u0026gt;(); int free = 0; for (int i = 0; i \u0026lt; n; i++) { int id = uf.find(i); if (componentCount.add(id)) { free = free + uf.edges[id] - (uf.size(id) - 1); } } if (componentCount.size() == 1) { return 0; } int needEdges = componentCount.size() - 1; if (free \u0026gt;= needEdges) { return needEdges; } else { return 1; } } class UF { private int[] a; private int[] sz; private int[] edges; UF(int n) { this.a = new int[n]; this.sz = new int[n]; this.edges = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; sz[i] = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { edges[qid]++; return; } if (sz[pid] \u0026gt; sz[qid]) { a[qid] = pid; sz[pid] += sz[qid]; edges[pid] += edges[qid] + 1; } else { a[pid] = qid; sz[qid] += sz[pid]; edges[qid] += edges[pid] + 1; } } int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } int size(int p) { return sz[find(p)]; } } } ","permalink":"https://volyx.in/posts/2021-02-22-crawler-log-folder-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/crawler-log-folder/]\u003c/p\u003e\n\u003cp\u003eThe Leetcode file system keeps a log each time some user performs a change folder operation.\u003c/p\u003e\n\u003cp\u003eThe operations are described below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;../\u0026rdquo; : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;./\u0026rdquo; : Remain in the same folder.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;x/\u0026rdquo; : Move to the child folder named x (This folder is guaranteed to always exist).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\u003c/p\u003e","title":"1598. Crawler Log Folder"},{"content":"![https://leetcode.com/problems/crawler-log-folder/]\nThe Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\u0026ldquo;../\u0026rdquo; : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder). \u0026ldquo;./\u0026rdquo; : Remain in the same folder. \u0026ldquo;x/\u0026rdquo; : Move to the child folder named x (This folder is guaranteed to always exist). You are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.\n1 2 3 4 5 Example 1: Input: logs = [\u0026#34;d1/\u0026#34;,\u0026#34;d2/\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;d21/\u0026#34;,\u0026#34;./\u0026#34;] Output: 2 Explanation: Use this change folder operation \u0026#34;../\u0026#34; 2 times and go back to the main folder. 1 2 3 4 5 6 7 8 9 Example 2: Input: logs = [\u0026#34;d1/\u0026#34;,\u0026#34;d2/\u0026#34;,\u0026#34;./\u0026#34;,\u0026#34;d3/\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;d31/\u0026#34;] Output: 3 Example 3: Input: logs = [\u0026#34;d1/\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;../\u0026#34;,\u0026#34;../\u0026#34;] Output: 0 Constraints:\n1 \u0026lt;= logs.length \u0026lt;= 103 2 \u0026lt;= logs[i].length \u0026lt;= 10 logs[i] contains lowercase English letters, digits, \u0026lsquo;.\u0026rsquo;, and \u0026lsquo;/\u0026rsquo;. logs[i] follows the format described in the statement. Folder names consist of lowercase English letters and digits. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 class Solution { public int makeConnected(int n, int[][] connections) { UF uf = new UF(n); int extra = 0; for (int i = 0; i \u0026lt; connections.length; i++) { int a = connections[i][0]; int b = connections[i][1]; if (uf.union(a, b)) extra++; } int group = 0; for (int i = 0; i \u0026lt; n; i++) { if (uf.find(i) == i) { group++; } } return extra \u0026gt;= group - 1 ? group - 1 : -1; } class UF { private int[] a; UF(int n) { this.a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } boolean union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { return true; } a[qid] = pid; return false; } int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } } } class Solution2 { public int makeConnected(int n, int[][] connections) { if (connections.length \u0026lt; n - 1) { return -1; } UF uf = new UF(n); for (int i = 0; i \u0026lt; connections.length; i++) { int a = connections[i][0]; int b = connections[i][1]; uf.union(a, b); } Set\u0026lt;Integer\u0026gt; componentCount = new HashSet\u0026lt;\u0026gt;(); int free = 0; for (int i = 0; i \u0026lt; n; i++) { int id = uf.find(i); if (componentCount.add(id)) { free = free + uf.edges[id] - (uf.size(id) - 1); } } if (componentCount.size() == 1) { return 0; } int needEdges = componentCount.size() - 1; if (free \u0026gt;= needEdges) { return needEdges; } else { return 1; } } class UF { private int[] a; private int[] sz; private int[] edges; UF(int n) { this.a = new int[n]; this.sz = new int[n]; this.edges = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; sz[i] = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { edges[qid]++; return; } if (sz[pid] \u0026gt; sz[qid]) { a[qid] = pid; sz[pid] += sz[qid]; edges[pid] += edges[qid] + 1; } else { a[pid] = qid; sz[qid] += sz[pid]; edges[qid] += edges[pid] + 1; } } int find(int p) { while (p != a[p]) { a[p] = a[a[p]]; p = a[p]; } return p; } int size(int p) { return sz[find(p)]; } } } ","permalink":"https://volyx.in/posts/2021-02-22-crawler-log-folder/","summary":"\u003cp\u003e![https://leetcode.com/problems/crawler-log-folder/]\u003c/p\u003e\n\u003cp\u003eThe Leetcode file system keeps a log each time some user performs a change folder operation.\u003c/p\u003e\n\u003cp\u003eThe operations are described below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u0026ldquo;../\u0026rdquo; : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;./\u0026rdquo; : Remain in the same folder.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;x/\u0026rdquo; : Move to the child folder named x (This folder is guaranteed to always exist).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.\u003c/p\u003e","title":"1598. Crawler Log Folder"},{"content":"![https://leetcode.com/problems/remove-outermost-parentheses/]\nA valid parentheses string is either empty (\u0026quot;\u0026quot;), \u0026ldquo;(\u0026rdquo; + A + \u0026ldquo;)\u0026rdquo;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation. For example, \u0026ldquo;\u0026rdquo;, \u0026ldquo;()\u0026rdquo;, \u0026ldquo;(())()\u0026rdquo;, and \u0026ldquo;(()(()))\u0026rdquo; are all valid parentheses strings.\nA valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + \u0026hellip; + P_k, where P_i are primitive valid parentheses strings.\nReturn S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: \u0026#34;(()())(())\u0026#34; Output: \u0026#34;()()()\u0026#34; Explanation: The input string is \u0026#34;(()())(())\u0026#34;, with primitive decomposition \u0026#34;(()())\u0026#34; + \u0026#34;(())\u0026#34;. After removing outer parentheses of each part, this is \u0026#34;()()\u0026#34; + \u0026#34;()\u0026#34; = \u0026#34;()()()\u0026#34;. Example 2: Input: \u0026#34;(()())(())(()(()))\u0026#34; Output: \u0026#34;()()()()(())\u0026#34; Explanation: The input string is \u0026#34;(()())(())(()(()))\u0026#34;, with primitive decomposition \u0026#34;(()())\u0026#34; + \u0026#34;(())\u0026#34; + \u0026#34;(()(()))\u0026#34;. After removing outer parentheses of each part, this is \u0026#34;()()\u0026#34; + \u0026#34;()\u0026#34; + \u0026#34;()(())\u0026#34; = \u0026#34;()()()()(())\u0026#34;. Example 3: Input: \u0026#34;()()\u0026#34; Output: \u0026#34;\u0026#34; Explanation: The input string is \u0026#34;()()\u0026#34;, with primitive decomposition \u0026#34;()\u0026#34; + \u0026#34;()\u0026#34;. After removing outer parentheses of each part, this is \u0026#34;\u0026#34; + \u0026#34;\u0026#34; = \u0026#34;\u0026#34;. Note:\nS.length \u0026lt;= 10000 S[i] is \u0026ldquo;(\u0026rdquo; or \u0026ldquo;)\u0026rdquo; S is a valid parentheses string 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Solution { /* Explanation: opened count the number of opened parenthesis. Add every char to the result, unless the first left parenthesis, and the last right parenthesis. \u0026#34;( ()() ) (())\u0026#34; 1 */ public String removeOuterParentheses(String S) { StringBuilder sb = new StringBuilder(); int opened = 0; for (char c : S.toCharArray()) { if (c == \u0026#39;(\u0026#39; \u0026amp;\u0026amp; opened++ \u0026gt; 0) sb.append(c); if (c == \u0026#39;)\u0026#39; \u0026amp;\u0026amp; opened-- \u0026gt; 1) sb.append(c); } return sb.toString(); } public String removeOuterParentheses2(String S) { char[] symbols = S.toCharArray(); int count = 0; List\u0026lt;Integer\u0026gt; stack = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; symbols.length; i++) { char c = symbols[i]; if (c == \u0026#39;(\u0026#39;) { stack.add(i); count++; } else { Integer removed = null; if (!stack.isEmpty() \u0026amp;\u0026amp; symbols[stack.get(stack.size() - 1)] == \u0026#39;(\u0026#39;) { removed = stack.get(stack.size() - 1); stack.remove(stack.size() - 1); } else { stack.add(i); } count--; if (count == 0) { symbols[i] = \u0026#39;_\u0026#39;; symbols[removed] = \u0026#39;_\u0026#39;; } } } StringBuilder sb = new StringBuilder(); for (char c : symbols) { if (c != \u0026#39;_\u0026#39;) { sb.append(c); } } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-02-20-remove-outermost-parentheses-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/remove-outermost-parentheses/]\u003c/p\u003e\n\u003cp\u003eA valid parentheses string is either empty (\u0026quot;\u0026quot;), \u0026ldquo;(\u0026rdquo; + A + \u0026ldquo;)\u0026rdquo;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, \u0026ldquo;\u0026rdquo;, \u0026ldquo;()\u0026rdquo;, \u0026ldquo;(())()\u0026rdquo;, and \u0026ldquo;(()(()))\u0026rdquo; are all valid parentheses strings.\u003c/p\u003e\n\u003cp\u003eA valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.\u003c/p\u003e","title":"1021. Remove Outermost Parentheses"},{"content":"\nGiven a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\nWe repeatedly make duplicate removals on S until we no longer can.\nReturn the final string after all such duplicate removals have been made. It is guaranteed the answer is unique.\n1 2 3 4 5 6 Example 1: Input: \u0026#34;abbaca\u0026#34; Output: \u0026#34;ca\u0026#34; Explanation: For example, in \u0026#34;abbaca\u0026#34; we could remove \u0026#34;bb\u0026#34; since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \u0026#34;aaca\u0026#34;, of which only \u0026#34;aa\u0026#34; is possible, so the final string is \u0026#34;ca\u0026#34;. Note:\n1 \u0026lt;= S.length \u0026lt;= 20000 S consists only of English lowercase letters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public String removeDuplicates(String S) { char[] symbols = S.toCharArray(); char[] stack = new char[symbols.length]; int size = 0; for (int i = 0; i \u0026lt; symbols.length ; i++) { char c = symbols[i]; if (size \u0026gt; 0 \u0026amp;\u0026amp; stack[size - 1] == c) { size--; } else { stack[size++] = c; } } return new String(stack, 0, size); } public String removeDuplicates2(String S) { char[] symbols = S.toCharArray(); List\u0026lt;Character\u0026gt; stack = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; symbols.length ; i++) { char c = symbols[i]; if (!stack.isEmpty() \u0026amp;\u0026amp; stack.get(stack.size() - 1) == c) { stack.remove(stack.size() - 1); } else { stack.add(c); } } StringBuilder sb = new StringBuilder(); for (Character c: stack) { sb.append(c); } return sb.toString(); } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public String removeDuplicates(String s) { Deque\u0026lt;Character\u0026gt; stack = new ArrayDeque\u0026lt;\u0026gt;(); for (char c : s.toCharArray()) { if (stack.size() \u0026gt; 0 \u0026amp;\u0026amp; stack.peek() == c) { stack.pop(); } else { stack.push(c); } } StringBuilder sb = new StringBuilder(); while (stack.size() \u0026gt; 0) { sb.insert(0, stack.pop()); } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-02-20-remove-all-adjacent-duplicates-in-string/","summary":"\u003cp\u003e\u003cimg alt=\"1047. Remove All Adjacent Duplicates In String\" loading=\"lazy\" src=\"https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a string S of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.\u003c/p\u003e\n\u003cp\u003eWe repeatedly make duplicate removals on S until we no longer can.\u003c/p\u003e\n\u003cp\u003eReturn the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \u0026#34;abbaca\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;ca\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFor example, in \u0026#34;abbaca\u0026#34; we could remove \u0026#34;bb\u0026#34; since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \u0026#34;aaca\u0026#34;, of which only \u0026#34;aa\u0026#34; is possible, so the final string is \u0026#34;ca\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"1047. Remove All Adjacent Duplicates In String"},{"content":"![https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/]\nGiven a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.\nWe repeatedly make k duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made.\nIt is guaranteed that the answer is unique.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 Example 1: Input: s = \u0026#34;abcd\u0026#34;, k = 2 Output: \u0026#34;abcd\u0026#34; Explanation: There\u0026#39;s nothing to delete. Example 2: Input: s = \u0026#34;deeedbbcccbdaa\u0026#34;, k = 3 Output: \u0026#34;aa\u0026#34; Explanation: First delete \u0026#34;eee\u0026#34; and \u0026#34;ccc\u0026#34;, get \u0026#34;ddbbbdaa\u0026#34; Then delete \u0026#34;bbb\u0026#34;, get \u0026#34;dddaa\u0026#34; Finally delete \u0026#34;ddd\u0026#34;, get \u0026#34;aa\u0026#34; Example 3: Input: s = \u0026#34;pbbcggttciiippooaais\u0026#34;, k = 2 Output: \u0026#34;ps\u0026#34; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 2 \u0026lt;= k \u0026lt;= 10^4 s only contains lower case English letters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class Solution { public String removeDuplicates(String s, int k) { char[] symbols = s.toCharArray(); char[] stack = new char[symbols.length]; int[] duplicates = new int[symbols.length]; int size = 0; for (int i = 0; i \u0026lt; symbols.length; i++) { char c = symbols[i]; // if prev char is the same if (size \u0026gt; 0 \u0026amp;\u0026amp; stack[size - 1] == c) { if ((duplicates[size - 1] + 1) == k) { size -= k - 1; } else { stack[size] = c; duplicates[size] = duplicates[size - 1] + 1; size++; } } else { // new char stack[size] = c; duplicates[size] = 1; size++; } } return new String(stack, 0, size); } public String removeDuplicates2(String s, int k) { char[] arr = s.toCharArray(); List\u0026lt;Pair\u0026gt; stack = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; arr.length; i++) { char c = arr[i]; if (stack.size() \u0026gt; 0) { Pair prev = stack.get(stack.size() - 1); if (prev.c == c) { if (prev.count + 1 == k) { stack.remove(stack.size() - 1); } else { prev.count++; } } else { stack.add(new Pair(c, 1)); } } else { stack.add(new Pair(c, 1)); } } StringBuilder sb = new StringBuilder(); for (Pair p: stack) { for (int i = 0; i \u0026lt; p.count; i++) sb.append(p.c); } return sb.toString(); } class Pair { char c; int count; public Pair(char c, int count) { this.c = c; this.count = count; } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public String removeDuplicates(String s, int k) { Stack\u0026lt;int[]\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; s.length(); i++) { int count = 1; if (stack.size() \u0026gt; 0) { int index = stack.peek()[0]; if (s.charAt(index) == s.charAt(i)) { count = stack.peek()[1] + 1; } } stack.push(new int[] {i, count}); if (k == count) { while (count \u0026gt; 0) { stack.pop(); count--; } } } StringBuilder sb = new StringBuilder(); while (stack.size() \u0026gt; 0) { sb.append(s.charAt(stack.pop()[0])); } return sb.reverse().toString(); } } ","permalink":"https://volyx.in/posts/2021-02-20-remove-all-adjacent-duplicates-in-string-ii/","summary":"\u003cp\u003e![https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii/]\u003c/p\u003e\n\u003cp\u003eGiven a string s, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them causing the left and the right side of the deleted substring to concatenate together.\u003c/p\u003e\n\u003cp\u003eWe repeatedly make k duplicate removals on s until we no longer can.\u003c/p\u003e\n\u003cp\u003eReturn the final string after all such duplicate removals have been made.\u003c/p\u003e\n\u003cp\u003eIt is guaranteed that the answer is unique.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abcd\u0026#34;, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;abcd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There\u0026#39;s nothing to delete.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;deeedbbcccbdaa\u0026#34;, k = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFirst delete \u0026#34;eee\u0026#34; and \u0026#34;ccc\u0026#34;, get \u0026#34;ddbbbdaa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThen delete \u0026#34;bbb\u0026#34;, get \u0026#34;dddaa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eFinally delete \u0026#34;ddd\u0026#34;, get \u0026#34;aa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;pbbcggttciiippooaais\u0026#34;, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;ps\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1209. Remove All Adjacent Duplicates in String II"},{"content":"![https://leetcode.com/problems/min-stack/]\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\npush(x) \u0026ndash; Push element x onto stack. pop() \u0026ndash; Removes the element on top of the stack. top() \u0026ndash; Get the top element. getMin() \u0026ndash; Retrieve the minimum element in the stack. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 Example 1: Input [\u0026#34;MinStack\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;getMin\u0026#34;,\u0026#34;pop\u0026#34;,\u0026#34;top\u0026#34;,\u0026#34;getMin\u0026#34;] [[],[-2],[0],[-3],[],[],[],[]] Output [null,null,null,null,-3,null,0,-2] Explanation MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); // return -3 minStack.pop(); minStack.top(); // return 0 minStack.getMin(); // return -2 Constraints:\nMethods pop, top and getMin operations will always be called on non-empty stacks. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class MinStack { private List\u0026lt;Integer\u0026gt; stack = new ArrayList\u0026lt;\u0026gt;(); private List\u0026lt;Integer\u0026gt; min = new ArrayList\u0026lt;\u0026gt;(); /** initialize your data structure here. */ public MinStack() { } public void push(int x) { stack.add(x); int prev = min.size() \u0026gt; 0 ? min.get(min.size() - 1): Integer.MAX_VALUE; min.add(Math.min(prev, x)); } public void pop() { stack.remove(stack.size() - 1); min.remove(min.size() - 1); } public int top() { return stack.get(stack.size() - 1); } public int getMin() { return min.get(min.size() - 1); } } /** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(x); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */ ","permalink":"https://volyx.in/posts/2021-02-20-min-stack-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/min-stack/]\u003c/p\u003e\n\u003cp\u003eDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epush(x) \u0026ndash; Push element x onto stack.\u003c/li\u003e\n\u003cli\u003epop() \u0026ndash; Removes the element on top of the stack.\u003c/li\u003e\n\u003cli\u003etop() \u0026ndash; Get the top element.\u003c/li\u003e\n\u003cli\u003egetMin() \u0026ndash; Retrieve the minimum element in the stack.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;MinStack\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;push\u0026#34;,\u0026#34;getMin\u0026#34;,\u0026#34;pop\u0026#34;,\u0026#34;top\u0026#34;,\u0026#34;getMin\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[],[-2],[0],[-3],[],[],[],[]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[null,null,null,null,-3,null,0,-2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMinStack minStack = new MinStack();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.push(-2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.push(0);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.push(-3);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.getMin(); // return -3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.top();    // return 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.getMin(); // return -2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"155. Min Stack"},{"content":"![https://leetcode.com/problems/basic-calculator-ii/]\nGiven a string s which represents an expression, evaluate this expression and return its value.\nThe integer division should truncate toward zero.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: s = \u0026#34;3+2*2\u0026#34; Output: 7 Example 2: Input: s = \u0026#34; 3/2 \u0026#34; Output: 1 Example 3: Input: s = \u0026#34; 3+5 / 2 \u0026#34; Output: 5 Constraints:\n1 \u0026lt;= s.length \u0026lt;= 3 * 105 s consists of integers and operators (\u0026rsquo;+\u0026rsquo;, \u0026lsquo;-\u0026rsquo;, \u0026lsquo;*\u0026rsquo;, \u0026lsquo;/\u0026rsquo;) separated by some number of spaces. s represents a valid expression. All the integers in the expression are non-negative integers in the range [0, 231 - 1]. The answer is guaranteed to fit in a 32-bit integer. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class Solution { public int calculate(String s) { var values = new int[s.length()]; var signs = new char[s.length()]; int valuesSize = 0; int signsSize = 0; char[] symbols = s.toCharArray(); for (int i = 0; i \u0026lt; symbols.length; i++) { char c = symbols[i]; if (c == \u0026#39; \u0026#39;) { continue; } if (Character.isDigit(c)) { int j = i; int val = 0; while (j \u0026lt; symbols.length \u0026amp;\u0026amp; Character.isDigit(symbols[j])) { val = (val * 10) + (symbols[j] - \u0026#39;0\u0026#39;); j++; } i = j - 1; if (signsSize \u0026gt; 0) { char op = signs[signsSize - 1]; if (op == \u0026#39;*\u0026#39; || op == \u0026#39;/\u0026#39;) { signsSize--; int prev = values[valuesSize - 1]; valuesSize--; if (op == \u0026#39;*\u0026#39;) { val = val * prev; } else { val = prev / val; } } } values[valuesSize++] = val; } else { signs[signsSize++] = c; } // System.out.println(\u0026#34;signs = \u0026#34; + Arrays.toString(signs)); // System.out.println(\u0026#34;values = \u0026#34; + Arrays.toString(values)); } int j = 0; int res = values[0]; for (int i = 0; i \u0026lt; valuesSize - 1; i++) { char op = signs[j++]; int a = values[i]; int b = values[i + 1]; res = (op == \u0026#39;+\u0026#39;) ? a + b : a - b; values[i + 1] = res; } return res; } } ","permalink":"https://volyx.in/posts/2021-02-20-basic-calculator-ii-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/basic-calculator-ii/]\u003c/p\u003e\n\u003cp\u003eGiven a string s which represents an expression, evaluate this expression and return its value.\u003c/p\u003e\n\u003cp\u003eThe integer division should truncate toward zero.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;3+2*2\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34; 3/2 \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34; 3+5 / 2 \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"227. Basic Calculator II"},{"content":"![https://leetcode.com/problems/backspace-string-compare/]\nGiven two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.\nNote that after backspacing an empty text, the text will continue empty.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Example 1: Input: S = \u0026#34;ab#c\u0026#34;, T = \u0026#34;ad#c\u0026#34; Output: true Explanation: Both S and T become \u0026#34;ac\u0026#34;. Example 2: Input: S = \u0026#34;ab##\u0026#34;, T = \u0026#34;c#d#\u0026#34; Output: true Explanation: Both S and T become \u0026#34;\u0026#34;. Example 3: Input: S = \u0026#34;a##c\u0026#34;, T = \u0026#34;#a#c\u0026#34; Output: true Explanation: Both S and T become \u0026#34;c\u0026#34;. Example 4: Input: S = \u0026#34;a#c\u0026#34;, T = \u0026#34;b\u0026#34; Output: false Explanation: S becomes \u0026#34;c\u0026#34; while T becomes \u0026#34;b\u0026#34;. Note:\n1 \u0026lt;= S.length \u0026lt;= 200 1 \u0026lt;= T.length \u0026lt;= 200 S and T only contain lowercase letters and \u0026lsquo;#\u0026rsquo; characters. Follow up:\nCan you solve it in O(N) time and O(1) space? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public boolean backspaceCompare2(String S, String T) { int n = Math.max(S.length(), T.length()); char[] s1 = new char[n]; char[] s2 = new char[n]; int s1s = cleanString(S, s1); int s2s = cleanString(T, s2); return s1s == s2s \u0026amp;\u0026amp; Arrays.equals(s1, s2); } int cleanString(String S, char[] symbols) { int size = 0; for (char c : S.toCharArray()) { if (c == \u0026#39;#\u0026#39;) { if (size \u0026gt; 0) { symbols[size - 1] = Character.MIN_VALUE; size--; } } else { symbols[size++] = c; } } return size; } } ","permalink":"https://volyx.in/posts/2021-02-20-backspace-string-compare-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/backspace-string-compare/]\u003c/p\u003e\n\u003cp\u003eGiven two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.\u003c/p\u003e\n\u003cp\u003eNote that after backspacing an empty text, the text will continue empty.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;ab#c\u0026#34;, T = \u0026#34;ad#c\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both S and T become \u0026#34;ac\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;ab##\u0026#34;, T = \u0026#34;c#d#\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both S and T become \u0026#34;\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;a##c\u0026#34;, T = \u0026#34;#a#c\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both S and T become \u0026#34;c\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;a#c\u0026#34;, T = \u0026#34;b\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: S becomes \u0026#34;c\u0026#34; while T becomes \u0026#34;b\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"844. Backspace String Compare"},{"content":"\nou are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds\u0026rsquo; scores.\nAt the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:\nAn integer x - Record a new score of x. \u0026ldquo;+\u0026rdquo; - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores. \u0026ldquo;D\u0026rdquo; - Record a new score that is double the previous score. It is guaranteed there will always be a previous score. \u0026ldquo;C\u0026rdquo; - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score. Return the sum of all the scores on the record.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Example 1: Input: ops = [\u0026#34;5\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;+\u0026#34;] Output: 30 Explanation: \u0026#34;5\u0026#34; - Add 5 to the record, record is now [5]. \u0026#34;2\u0026#34; - Add 2 to the record, record is now [5, 2]. \u0026#34;C\u0026#34; - Invalidate and remove the previous score, record is now [5]. \u0026#34;D\u0026#34; - Add 2 * 5 = 10 to the record, record is now [5, 10]. \u0026#34;+\u0026#34; - Add 5 + 10 = 15 to the record, record is now [5, 10, 15]. The total sum is 5 + 10 + 15 = 30. Example 2: Input: ops = [\u0026#34;5\u0026#34;,\u0026#34;-2\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;+\u0026#34;] Output: 27 Explanation: \u0026#34;5\u0026#34; - Add 5 to the record, record is now [5]. \u0026#34;-2\u0026#34; - Add -2 to the record, record is now [5, -2]. \u0026#34;4\u0026#34; - Add 4 to the record, record is now [5, -2, 4]. \u0026#34;C\u0026#34; - Invalidate and remove the previous score, record is now [5, -2]. \u0026#34;D\u0026#34; - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]. \u0026#34;9\u0026#34; - Add 9 to the record, record is now [5, -2, -4, 9]. \u0026#34;+\u0026#34; - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. \u0026#34;+\u0026#34; - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. Example 3: Input: ops = [\u0026#34;1\u0026#34;] Output: 1 Constraints:\n1 \u0026lt;= ops.length \u0026lt;= 1000 ops[i] is \u0026ldquo;C\u0026rdquo;, \u0026ldquo;D\u0026rdquo;, \u0026ldquo;+\u0026rdquo;, or a string representing an integer in the range [-3 * 104, 3 * 104]. For operation \u0026ldquo;+\u0026rdquo;, there will always be at least two previous scores on the record. For operations \u0026ldquo;C\u0026rdquo; and \u0026ldquo;D\u0026rdquo;, there will always be at least one previous score on the record. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int calPoints(String[] ops) { var stack = new ArrayList\u0026lt;Integer\u0026gt;(); for (var op: ops) { switch (op) { case \u0026#34;+\u0026#34;: stack.add(stack.get(stack.size() - 1) + stack.get(stack.size() - 2)); break; case \u0026#34;D\u0026#34;: stack.add(stack.get((stack.size() - 1)) * 2); break; case \u0026#34;C\u0026#34;: stack.remove(stack.size() - 1); break; default: stack.add(Integer.valueOf(op)); } } Integer sum = 0; for (Integer val: stack) { sum += val; } return sum; } } ","permalink":"https://volyx.in/posts/2021-02-19-baseball-game/","summary":"\u003cp\u003e\u003cimg alt=\"682. Baseball Game\" loading=\"lazy\" src=\"https://leetcode.com/problems/baseball-game/\"\u003e\u003c/p\u003e\n\u003cp\u003eou are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds\u0026rsquo; scores.\u003c/p\u003e\n\u003cp\u003eAt the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn integer x - Record a new score of x.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;+\u0026rdquo; - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;D\u0026rdquo; - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;C\u0026rdquo; - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the sum of all the scores on the record.\u003c/p\u003e","title":"682. Baseball Game"},{"content":"![https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/]\nGiven a string s of \u0026lsquo;(\u0026rsquo; , \u0026lsquo;)\u0026rsquo; and lowercase English characters.\nYour task is to remove the minimum number of parentheses ( \u0026lsquo;(\u0026rsquo; or \u0026lsquo;)\u0026rsquo;, in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:\nIt is the empty string, contains only lowercase characters, or It can be written as AB (A concatenated with B), where A and B are valid strings, or It can be written as (A), where A is a valid string. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Example 1: Input: s = \u0026#34;lee(t(c)o)de)\u0026#34; Output: \u0026#34;lee(t(c)o)de\u0026#34; Explanation: \u0026#34;lee(t(co)de)\u0026#34; , \u0026#34;lee(t(c)ode)\u0026#34; would also be accepted. Example 2: Input: s = \u0026#34;a)b(c)d\u0026#34; Output: \u0026#34;ab(c)d\u0026#34; Example 3: Input: s = \u0026#34;))((\u0026#34; Output: \u0026#34;\u0026#34; Explanation: An empty string is also valid. Example 4: Input: s = \u0026#34;(a(b(c)d)\u0026#34; Output: \u0026#34;a(b(c)d)\u0026#34; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 s[i] is one of \u0026lsquo;(\u0026rsquo; , \u0026lsquo;)\u0026rsquo; and lowercase English letters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution { public String minRemoveToMakeValid(String s) { char[] symbols = s.toCharArray(); int count = 0; for (int i = 0; i \u0026lt; symbols.length; i++) { char c = symbols[i]; if (c == \u0026#39;(\u0026#39;) { count++; } else if (c == \u0026#39;)\u0026#39;) { if (count \u0026gt; 0) { count--; } else { symbols[i] = \u0026#39;_\u0026#39;; } } } count = 0; for (int i = symbols.length - 1; i \u0026gt;= 0; i--) { char c = symbols[i]; if (c == \u0026#39;)\u0026#39;) { count++; } else if (c == \u0026#39;(\u0026#39;) { if (count \u0026gt; 0) { count--; } else { symbols[i] = \u0026#39;_\u0026#39;; } } } StringBuilder sb = new StringBuilder(); for (int i = 0; i \u0026lt; symbols.length; i++) { if (symbols[i] != \u0026#39;_\u0026#39;) { sb.append(symbols[i]); } } return sb.toString(); } } Solution 2021-11-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public String minRemoveToMakeValid(String s) { char[] symbols = s.toCharArray(); int count = 0; for (int i = 0; i \u0026lt; symbols.length; i++) { if (symbols[i] == \u0026#39;(\u0026#39;) { count++; } else if (symbols[i] == \u0026#39;)\u0026#39;) { if (count \u0026gt; 0) { count--; } else { symbols[i] = \u0026#39;_\u0026#39;; } } } count = 0; for (int i = symbols.length - 1; i \u0026gt;= 0; i--) { if (symbols[i] == \u0026#39;)\u0026#39;) { count++; } else if (symbols[i] == \u0026#39;(\u0026#39;) { if (count \u0026gt; 0) { count--; } else { symbols[i] = \u0026#39;_\u0026#39;; } } } StringBuilder sb = new StringBuilder(); for (int i = 0; i \u0026lt; symbols.length; i++) { if (symbols[i] != \u0026#39;_\u0026#39;) { sb.append(symbols[i]); } } return sb.toString(); } } Solution 2022-01-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public String minRemoveToMakeValid(String s) { int open = 0; int close = 0; char[] symbols = s.toCharArray(); for (int i = 0; i \u0026lt; symbols.length; i++) { char c = symbols[i]; if (c == \u0026#39;(\u0026#39;) { open++; } else if (c == \u0026#39;)\u0026#39;) { if (open \u0026gt; 0) { open--; } else { symbols[i] = \u0026#39;_\u0026#39;; } } int j = s.length() - i - 1; char e = symbols[j]; if (e == \u0026#39;(\u0026#39;) { if (close \u0026gt; 0) { close--; } else { symbols[j] = \u0026#39;_\u0026#39;; } } else if (e == \u0026#39;)\u0026#39;) { close++; } } StringBuilder sb = new StringBuilder(); for (int i = 0; i \u0026lt; symbols.length; i++) { if (symbols[i] != \u0026#39;_\u0026#39;) { sb.append(symbols[i]); } } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-02-19-minimum-remove-to-make-valid-parentheses/","summary":"\u003cp\u003e![https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses/]\u003c/p\u003e\n\u003cp\u003eGiven a string s of \u0026lsquo;(\u0026rsquo; , \u0026lsquo;)\u0026rsquo; and lowercase English characters.\u003c/p\u003e\n\u003cp\u003eYour task is to remove the minimum number of parentheses ( \u0026lsquo;(\u0026rsquo; or \u0026lsquo;)\u0026rsquo;, in any positions ) so that the resulting parentheses string is valid and return any valid string.\u003c/p\u003e\n\u003cp\u003eFormally, a parentheses string is valid if and only if:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIt is the empty string, contains only lowercase characters, or\u003c/li\u003e\n\u003cli\u003eIt can be written as AB (A concatenated with B), where A and B are valid strings, or\u003c/li\u003e\n\u003cli\u003eIt can be written as (A), where A is a valid string.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;lee(t(c)o)de)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;lee(t(c)o)de\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;lee(t(co)de)\u0026#34; , \u0026#34;lee(t(c)ode)\u0026#34; would also be accepted.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;a)b(c)d\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;ab(c)d\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;))((\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: An empty string is also valid.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;(a(b(c)d)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;a(b(c)d)\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"921. Minimum Add to Make Parentheses Valid"},{"content":"![https://leetcode.com/problems/baseball-game/]\nYou are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds\u0026rsquo; scores.\nAt the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:\nAn integer x - Record a new score of x. \u0026ldquo;+\u0026rdquo; - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores. \u0026ldquo;D\u0026rdquo; - Record a new score that is double the previous score. It is guaranteed there will always be a previous score. \u0026ldquo;C\u0026rdquo; - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score. Return the sum of all the scores on the record.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Example 1: Input: ops = [\u0026#34;5\u0026#34;,\u0026#34;2\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;+\u0026#34;] Output: 30 Explanation: \u0026#34;5\u0026#34; - Add 5 to the record, record is now [5]. \u0026#34;2\u0026#34; - Add 2 to the record, record is now [5, 2]. \u0026#34;C\u0026#34; - Invalidate and remove the previous score, record is now [5]. \u0026#34;D\u0026#34; - Add 2 * 5 = 10 to the record, record is now [5, 10]. \u0026#34;+\u0026#34; - Add 5 + 10 = 15 to the record, record is now [5, 10, 15]. The total sum is 5 + 10 + 15 = 30. Example 2: Input: ops = [\u0026#34;5\u0026#34;,\u0026#34;-2\u0026#34;,\u0026#34;4\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;,\u0026#34;9\u0026#34;,\u0026#34;+\u0026#34;,\u0026#34;+\u0026#34;] Output: 27 Explanation: \u0026#34;5\u0026#34; - Add 5 to the record, record is now [5]. \u0026#34;-2\u0026#34; - Add -2 to the record, record is now [5, -2]. \u0026#34;4\u0026#34; - Add 4 to the record, record is now [5, -2, 4]. \u0026#34;C\u0026#34; - Invalidate and remove the previous score, record is now [5, -2]. \u0026#34;D\u0026#34; - Add 2 * -2 = -4 to the record, record is now [5, -2, -4]. \u0026#34;9\u0026#34; - Add 9 to the record, record is now [5, -2, -4, 9]. \u0026#34;+\u0026#34; - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. \u0026#34;+\u0026#34; - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. Example 3: Input: ops = [\u0026#34;1\u0026#34;] Output: 1 Constraints:\n1 \u0026lt;= ops.length \u0026lt;= 1000 ops[i] is \u0026ldquo;C\u0026rdquo;, \u0026ldquo;D\u0026rdquo;, \u0026ldquo;+\u0026rdquo;, or a string representing an integer in the range [-3 * 104, 3 * 104]. For operation \u0026ldquo;+\u0026rdquo;, there will always be at least two previous scores on the record. For operations \u0026ldquo;C\u0026rdquo; and \u0026ldquo;D\u0026rdquo;, there will always be at least one previous score on the record. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int calPoints(String[] ops) { var stack = new ArrayList\u0026lt;Integer\u0026gt;(); for (var op: ops) { switch (op) { case \u0026#34;+\u0026#34;: stack.add(stack.get(stack.size() - 1) + stack.get(stack.size() - 2)); break; case \u0026#34;D\u0026#34;: stack.add(stack.get((stack.size() - 1)) * 2); break; case \u0026#34;C\u0026#34;: stack.remove(stack.size() - 1); break; default: stack.add(Integer.valueOf(op)); } } Integer sum = 0; for (Integer val: stack) { sum += val; } return sum; } } ","permalink":"https://volyx.in/posts/2021-02-16-baseball-game-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/baseball-game/]\u003c/p\u003e\n\u003cp\u003eYou are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds\u0026rsquo; scores.\u003c/p\u003e\n\u003cp\u003eAt the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the ith operation you must apply to the record and is one of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAn integer x - Record a new score of x.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;+\u0026rdquo; - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;D\u0026rdquo; - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\u003c/li\u003e\n\u003cli\u003e\u0026ldquo;C\u0026rdquo; - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the sum of all the scores on the record.\u003c/p\u003e","title":"682. Baseball Game"},{"content":"![https://leetcode.com/problems/longest-consecutive-sequence/]\nGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: nums = [100,4,200,1,3,2] Output: 4 Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4. Example 2: Input: nums = [0,3,7,2,5,8,4,6,0,1] Output: 9 Constraints:\n0 \u0026lt;= nums.length \u0026lt;= 104 -109 \u0026lt;= nums[i] \u0026lt;= 109 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class Solution { public int longestConsecutive(int[] nums) { Map\u0026lt;Integer, Integer\u0026gt; valueToIndex = new HashMap\u0026lt;\u0026gt;(); UF uf = new UF(nums.length); for (int i = 0; i \u0026lt; nums.length; i++) { int value = nums[i]; if (valueToIndex.containsKey(value)) { continue; } if (valueToIndex.containsKey(value - 1)) { uf.union(i, valueToIndex.get(value - 1)); } if (valueToIndex.containsKey(value + 1)) { uf.union(i, valueToIndex.get(value + 1)); } valueToIndex.put(value, i); } return uf.maxSize; } static class UF { private int[] a; private int[] sz; private int maxSize = 0; UF(int n) { this.a = new int[n]; this.sz = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; sz[i] = 1; maxSize = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (sz[pid] \u0026gt; sz[qid]) { a[qid] = pid; sz[pid] += sz[qid]; maxSize = Math.max(maxSize, sz[pid]); } else { a[pid] = qid; sz[qid] += sz[pid]; maxSize = Math.max(maxSize, sz[qid]); } } int find(int p) { while (p != a[p]) { p = a[p]; } return p; } } } ","permalink":"https://volyx.in/posts/2021-02-15-longest-consecutive-sequence/","summary":"\u003cp\u003e![https://leetcode.com/problems/longest-consecutive-sequence/]\u003c/p\u003e\n\u003cp\u003eGiven an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [100,4,200,1,3,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [0,3,7,2,5,8,4,6,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 9\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"128. Longest Consecutive Sequence"},{"content":"![https://leetcode.com/problems/accounts-merge/]\nGiven a list accounts, each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.\n1 2 3 4 5 6 7 8 9 10 Example 1: Input: accounts = [[\u0026#34;John\u0026#34;, \u0026#34;johnsmith@mail.com\u0026#34;, \u0026#34;john00@mail.com\u0026#34;], [\u0026#34;John\u0026#34;, \u0026#34;johnnybravo@mail.com\u0026#34;], [\u0026#34;John\u0026#34;, \u0026#34;johnsmith@mail.com\u0026#34;, \u0026#34;john_newyork@mail.com\u0026#34;], [\u0026#34;Mary\u0026#34;, \u0026#34;mary@mail.com\u0026#34;]] Output: [[\u0026#34;John\u0026#34;, \u0026#39;john00@mail.com\u0026#39;, \u0026#39;john_newyork@mail.com\u0026#39;, \u0026#39;johnsmith@mail.com\u0026#39;], [\u0026#34;John\u0026#34;, \u0026#34;johnnybravo@mail.com\u0026#34;], [\u0026#34;Mary\u0026#34;, \u0026#34;mary@mail.com\u0026#34;]] Explanation: The first and third John\u0026#39;s are the same person as they have the common email \u0026#34;johnsmith@mail.com\u0026#34;. The second John and Mary are different people as none of their email addresses are used by other accounts. We could return these lists in any order, for example the answer [[\u0026#39;Mary\u0026#39;, \u0026#39;mary@mail.com\u0026#39;], [\u0026#39;John\u0026#39;, \u0026#39;johnnybravo@mail.com\u0026#39;], [\u0026#39;John\u0026#39;, \u0026#39;john00@mail.com\u0026#39;, \u0026#39;john_newyork@mail.com\u0026#39;, \u0026#39;johnsmith@mail.com\u0026#39;]] would still be accepted. Note:\nThe length of accounts will be in the range [1, 1000]. The length of accounts[i] will be in the range [1, 10]. The length of accounts[i][j] will be in the range [1, 30]. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; accountsMerge(List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; accounts) { Map\u0026lt;String, Integer\u0026gt; emailToIndex = new HashMap\u0026lt;\u0026gt;(); UF uf = new UF(accounts.size()); for (int i = 0; i \u0026lt; accounts.size(); i++) { List\u0026lt;String\u0026gt; emails = accounts.get(i); for (int j = 1; j \u0026lt; emails.size(); j++) { String email = emails.get(j); Integer emailIndex = emailToIndex.get(email); if (emailIndex == null) { emailToIndex.put(email, i); } else { uf.union(i, emailIndex); } } } List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; merged = new ArrayList\u0026lt;\u0026gt;(); Set\u0026lt;Integer\u0026gt; seen = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; accounts.size(); i++) { if (seen.contains(i)) { continue; } Set\u0026lt;String\u0026gt; emails = new TreeSet\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; accountEmails = accounts.get(i).subList(1, accounts.get(i).size()); emails.addAll(accountEmails); String name = accounts.get(i).get(0); for (int j = i + 1; j \u0026lt; accounts.size(); j++) { if (uf.find(i) == uf.find(j)) { accountEmails = accounts.get(j).subList(1, accounts.get(j).size()); emails.addAll(accountEmails); seen.add(j); } } List\u0026lt;String\u0026gt; mergedAccount = new ArrayList\u0026lt;\u0026gt;(emails); mergedAccount.add(0, name); merged.add(mergedAccount); } return merged; } public class UF { private int[] a; public UF(int n) { this.a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } void union(int p, int q) { int pid = find(p); int qid = find(q); a[qid] = pid; } int find(int p) { while (p != a[p]) { p = a[p]; } return p; } } } Solution 2021-10-01 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; accountsMerge(List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; accounts) { final UF uf = new UF(); Map\u0026lt;String, Integer\u0026gt; emailIds = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; accounts.size(); i++) { List\u0026lt;String\u0026gt; account = accounts.get(i); String name = account.get(0); for (int j = 1; j \u0026lt; account.size(); j++) { String email = account.get(j); Integer prev = emailIds.get(email); if (prev != null) { // System.out.println(\u0026#34;join \u0026#34; + prev + \u0026#34; \u0026#34; + i); emailIds.put(email, uf.union(prev, i)); } else { emailIds.put(email, i); } } } Map\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; resultList = new HashMap\u0026lt;\u0026gt;(); for (Map.Entry\u0026lt;String, Integer\u0026gt; entry : emailIds.entrySet()) { String key = entry.getKey(); Integer id = uf.parent(entry.getValue()); List\u0026lt;String\u0026gt; list = resultList.getOrDefault(id, new ArrayList\u0026lt;\u0026gt;()); list.add(key); resultList.put(id, list); } List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (Map.Entry\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; entry : resultList.entrySet()) { List\u0026lt;String\u0026gt; emails = entry.getValue(); Integer id = entry.getKey(); Collections.sort(emails); emails.add(0, accounts.get(id).get(0)); res.add(emails); } return res; } public static class UF { int[] a = new int[10_000]; int[] sizes = new int[10_000]; public UF() { for (int i = 0; i \u0026lt; a.length; i++) { a[i] = i; sizes[i] = 1; } } int union(int p, int q) { int pid = parent(p); int qid = parent(q); if (pid == qid) return pid; if (sizes[pid] \u0026gt; sizes[qid]) { a[qid] = pid; sizes[pid] += sizes[qid]; return pid; } else { a[pid] = qid; sizes[qid] += sizes[pid]; return qid; } } int parent(int p) { while (p != a[p]) { p = a[p]; } return p; } } } Solution 2022-01-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class Solution { int[] uf = new int[10_000]; int[] sizes = new int[10_000]; public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; accountsMerge(List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; accounts) { for (int i = 0; i \u0026lt; 10_000; i++) { uf[i] = i; sizes[i] = 1; } Map\u0026lt;String, Integer\u0026gt; emailIds = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; accounts.size(); i++) { List\u0026lt;String\u0026gt; account = accounts.get(i); for (int j = 1; j \u0026lt; account.size(); j++) { String email = account.get(j); Integer prevId = emailIds.get(email); if (prevId != null) { emailIds.put(email, union(prevId, i)); } else { emailIds.put(email, i); } } } Map\u0026lt;Integer, List\u0026lt;String\u0026gt;\u0026gt; resMap = new HashMap(); for (String email: emailIds.keySet()) { Integer accountId = parent(emailIds.get(email)); List\u0026lt;String\u0026gt; emails = resMap.getOrDefault(accountId, new ArrayList()); emails.add(email); resMap.put(accountId, emails); } List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (Integer accountId: resMap.keySet()) { List\u0026lt;String\u0026gt; emailList = resMap.get(accountId); Collections.sort(emailList); emailList.add(0, accounts.get(accountId).get(0)); res.add(emailList); } return res; } int union(int p, int q) { int pid = parent(p); int qid = parent(q); if (sizes[pid] \u0026gt; sizes[qid]) { uf[qid] = pid; sizes[pid] += sizes[qid]; return pid; } else { uf[pid] = qid; sizes[qid] += sizes[pid]; return qid; } } int parent(int p) { while (uf[p] != p) { p = uf[p]; } return p; } } ","permalink":"https://volyx.in/posts/2021-02-15-accounts-merge/","summary":"\u003cp\u003e![https://leetcode.com/problems/accounts-merge/]\u003c/p\u003e\n\u003cp\u003eGiven a list accounts, each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\u003c/p\u003e\n\u003cp\u003eNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some email that is common to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\u003c/p\u003e","title":"721. Accounts Merge"},{"content":"![https://leetcode.com/problems/smallest-string-with-swaps/]\nYou are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.\nYou can swap the characters at any pair of indices in the given pairs any number of times.\nReturn the lexicographically smallest string that s can be changed to after using the swaps.\n1 2 3 4 5 6 7 Example 1: Input: s = \u0026#34;dcab\u0026#34;, pairs = [[0,3],[1,2]] Output: \u0026#34;bacd\u0026#34; Explaination: Swap s[0] and s[3], s = \u0026#34;bcad\u0026#34; Swap s[1] and s[2], s = \u0026#34;bacd\u0026#34; 1 2 3 4 5 6 7 8 Example 2: Input: s = \u0026#34;dcab\u0026#34;, pairs = [[0,3],[1,2],[0,2]] Output: \u0026#34;abcd\u0026#34; Explaination: Swap s[0] and s[3], s = \u0026#34;bcad\u0026#34; Swap s[0] and s[2], s = \u0026#34;acbd\u0026#34; Swap s[1] and s[2], s = \u0026#34;abcd\u0026#34; 1 2 3 4 5 6 7 8 Example 3: Input: s = \u0026#34;cba\u0026#34;, pairs = [[0,1],[1,2]] Output: \u0026#34;abc\u0026#34; Explaination: Swap s[0] and s[1], s = \u0026#34;bca\u0026#34; Swap s[1] and s[2], s = \u0026#34;bac\u0026#34; Swap s[0] and s[1], s = \u0026#34;abc\u0026#34; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 0 \u0026lt;= pairs.length \u0026lt;= 10^5 0 \u0026lt;= pairs[i][0], pairs[i][1] \u0026lt; s.length s only contains lower case English letters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 class Solution { public String smallestStringWithSwaps(String s, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; pairs) { int n = s.length(); UF uf = new UF(n); for (int i = 0; i \u0026lt; pairs.size(); i++) { List\u0026lt;Integer\u0026gt; pair = pairs.get(i); uf.union(pair.get(0), pair.get(1)); } Map\u0026lt;Integer, List\u0026lt;Character\u0026gt;\u0026gt; idToChars = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { int id = uf.find(i); List\u0026lt;Character\u0026gt; chars = idToChars.getOrDefault(id, new ArrayList\u0026lt;\u0026gt;()); chars.add(s.charAt(i)); idToChars.put(id, chars); } for (Integer id: idToChars.keySet()) { List\u0026lt;Character\u0026gt; chars = idToChars.get(id); Collections.sort(chars); idToChars.put(id, chars); } StringBuilder sb = new StringBuilder(); for (int i = 0; i \u0026lt; n; i++) { int id = uf.find(i); sb.append(idToChars.get(id).remove(0)); } return sb.toString(); } public class UF { int[] a; int[] sz; public UF(int n) { this.a = new int[n]; this.sz = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; sz[i] = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) { return; } if (sz[pid] \u0026gt;= sz[qid]) { a[qid] = pid; sz[pid] += sz[qid]; } else { a[pid] = qid; sz[qid] += sz[pid]; } } int find(int p) { while (p != a[p]) { p = a[p]; } return p; } } } ","permalink":"https://volyx.in/posts/2021-02-14-smallest-string-with-swaps-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/smallest-string-with-swaps/]\u003c/p\u003e\n\u003cp\u003eYou are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.\u003c/p\u003e\n\u003cp\u003eYou can swap the characters at any pair of indices in the given pairs any number of times.\u003c/p\u003e\n\u003cp\u003eReturn the lexicographically smallest string that s can be changed to after using the swaps.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;dcab\u0026#34;, pairs = [[0,3],[1,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;bacd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplaination: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[0] and s[3], s = \u0026#34;bcad\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[1] and s[2], s = \u0026#34;bacd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;dcab\u0026#34;, pairs = [[0,3],[1,2],[0,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;abcd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplaination: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[0] and s[3], s = \u0026#34;bcad\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[0] and s[2], s = \u0026#34;acbd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[1] and s[2], s = \u0026#34;abcd\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;cba\u0026#34;, pairs = [[0,1],[1,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplaination: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[0] and s[1], s = \u0026#34;bca\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[1] and s[2], s = \u0026#34;bac\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSwap s[0] and s[1], s = \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1202. Smallest String With Swaps"},{"content":"![https://leetcode.com/problems/is-graph-bipartite/]\nGiven an undirected graph, return true if and only if it is bipartite.\nRecall that a graph is bipartite if we can split its set of nodes into two independent subsets A and B, such that every edge in the graph has one node in A and another node in B.\nThe graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists. Each node is an integer between 0 and graph.length - 1. There are no self edges or parallel edges: graph[i] does not contain i, and it doesn\u0026rsquo;t contain any element twice.\n1 2 3 4 5 Example 1: Input: graph = [[1,3],[0,2],[1,3],[0,2]] Output: true Explanation: We can divide the vertices into two groups: {0, 2} and {1, 3}. 1 2 3 4 5 Example 2: Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]] Output: false Explanation: We cannot find a way to divide the set of nodes into two independent subsets. Constraints:\n1 \u0026lt;= graph.length \u0026lt;= 100 0 \u0026lt;= graph[i].length \u0026lt; 100 0 \u0026lt;= graph[i][j] \u0026lt;= graph.length - 1 graph[i][j] != i All the values of graph[i] are unique. The graph is guaranteed to be undirected. Solution Union Edges in One Component 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class Solution { public boolean isBipartite(int[][] graph) { int n = graph.length; UF uf = new UF(n); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j + 1 \u0026lt; graph[i].length; j++) { // all nodes from graph[i] should be in one component uf.union(graph[i][j], graph[i][j + 1]); } } /* [[1,3],[0,2],[1,3],[0,2]] 0123 0 */ for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; graph[i].length; j++) { if (uf.find(i) == uf.find(graph[i][j])) { return false; } } } return true; } public class UF { private int[] a; public UF(int n) { this.a = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; } } void union(int p, int q) { int pid = find(p); int qid = find(q); a[qid] = pid; } int find(int p) { while (p != a[p]) { p = a[p]; } return p; } } } Solution DFS Colouring 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public boolean isBipartite(int[][] graph) { int n = graph.length; int[] colors = new int[n]; Arrays.fill(colors, -1); for (int start = 0; start \u0026lt; n; start++) { if (colors[start] != -1) continue; Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); stack.push(start); colors[start] = 0; while (stack.size() \u0026gt; 0) { int node = stack.pop(); for (int nei: graph[node]) { // 1, 3 if (colors[nei] == -1) { colors[nei] = colors[node] ^ 1; stack.push(nei); } else if (colors[node] == colors[nei]) { return false; } } } } return true; } ","permalink":"https://volyx.in/posts/2021-02-14-is-graph-bipartite-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/is-graph-bipartite/]\u003c/p\u003e\n\u003cp\u003eGiven an undirected graph, return true if and only if it is bipartite.\u003c/p\u003e\n\u003cp\u003eRecall that a graph is bipartite if we can split its set of nodes into two independent subsets A and B, such that every edge in the graph has one node in A and another node in B.\u003c/p\u003e\n\u003cp\u003eThe graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists. Each node is an integer between 0 and graph.length - 1. There are no self edges or parallel edges: graph[i] does not contain i, and it doesn\u0026rsquo;t contain any element twice.\u003c/p\u003e","title":"785. Is Graph Bipartite?"},{"content":"![https://leetcode.com/problems/path-crossing/]\nGiven a string path, where path[i] = \u0026lsquo;N\u0026rsquo;, \u0026lsquo;S\u0026rsquo;, \u0026lsquo;E\u0026rsquo; or \u0026lsquo;W\u0026rsquo;, each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\nReturn True if the path crosses itself at any point, that is, if at any time you are on a location you\u0026rsquo;ve previously visited. Return False otherwise.\n1 2 3 4 5 Example 1: Input: path = \u0026#34;NES\u0026#34; Output: false Explanation: Notice that the path doesn\u0026#39;t cross any point more than once. 1 2 3 4 5 Example 2: Input: path = \u0026#34;NESWW\u0026#34; Output: true Explanation: Notice that the path visits the origin twice. Constraints:\n1 \u0026lt;= path.length \u0026lt;= 10^4 path will only consist of characters in {\u0026lsquo;N\u0026rsquo;, \u0026lsquo;S\u0026rsquo;, \u0026lsquo;E\u0026rsquo;, \u0026lsquo;W} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { int[] parents = new int[26]; public boolean equationsPossible(String[] equations) { for (int i = 0; i \u0026lt; 26; i++) { parents[i] = i; } for (String equation: equations) { int c1 = equation.charAt(0) - \u0026#39;a\u0026#39;; int c2 = equation.charAt(equation.length() - 1) - \u0026#39;a\u0026#39;; if (equation.contains(\u0026#34;==\u0026#34;)) { union(c1, c2); } } for (String equation: equations) { int c1 = equation.charAt(0) - \u0026#39;a\u0026#39;; int c2 = equation.charAt(equation.length() - 1) - \u0026#39;a\u0026#39;; if (equation.contains(\u0026#34;!=\u0026#34;) \u0026amp;\u0026amp; find(c1) == find(c2)) { return false; } } return true; } void union(int p, int q) { if (p == q) { return; } int pid = find(p); int qid = find(q); parents[qid] = pid; } int find(int p) { while (p != parents[p]) { p = parents[p]; } return p; } } ","permalink":"https://volyx.in/posts/2021-02-12-path-crossing-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/path-crossing/]\u003c/p\u003e\n\u003cp\u003eGiven a string path, where path[i] = \u0026lsquo;N\u0026rsquo;, \u0026lsquo;S\u0026rsquo;, \u0026lsquo;E\u0026rsquo; or \u0026lsquo;W\u0026rsquo;, each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\u003c/p\u003e\n\u003cp\u003eReturn True if the path crosses itself at any point, that is, if at any time you are on a location you\u0026rsquo;ve previously visited. Return False otherwise.\u003c/p\u003e","title":"1496. Path Crossing"},{"content":"![https://leetcode.com/problems/satisfiability-of-equality-equations/]\nGiven an array equations of strings that represent relationships between variables, each string equations[i] has length 4 and takes one of two different forms: \u0026ldquo;a==b\u0026rdquo; or \u0026ldquo;a!=b\u0026rdquo;. Here, a and b are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 Example 1: Input: [\u0026#34;a==b\u0026#34;,\u0026#34;b!=a\u0026#34;] Output: false Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second. There is no way to assign the variables to satisfy both equations. Example 2: Input: [\u0026#34;b==a\u0026#34;,\u0026#34;a==b\u0026#34;] Output: true Explanation: We could assign a = 1 and b = 1 to satisfy both equations. Example 3: Input: [\u0026#34;a==b\u0026#34;,\u0026#34;b==c\u0026#34;,\u0026#34;a==c\u0026#34;] Output: true Example 4: Input: [\u0026#34;a==b\u0026#34;,\u0026#34;b!=c\u0026#34;,\u0026#34;c==a\u0026#34;] Output: false Example 5: Input: [\u0026#34;c==c\u0026#34;,\u0026#34;b==d\u0026#34;,\u0026#34;x!=z\u0026#34;] Output: true Note:\n1 \u0026lt;= equations.length \u0026lt;= 500 equations[i].length == 4 equations[i][0] and equations[i][3] are lowercase letters equations[i][1] is either \u0026lsquo;=\u0026rsquo; or \u0026lsquo;!\u0026rsquo; equations[i][2] is \u0026lsquo;=\u0026rsquo; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 class Solution { int[] parents = new int[26]; public boolean equationsPossible(String[] equations) { for (int i = 0; i \u0026lt; 26; i++) { parents[i] = i; } for (String equation: equations) { int c1 = equation.charAt(0) - \u0026#39;a\u0026#39;; int c2 = equation.charAt(equation.length() - 1) - \u0026#39;a\u0026#39;; if (equation.contains(\u0026#34;==\u0026#34;)) { union(c1, c2); } } for (String equation: equations) { int c1 = equation.charAt(0) - \u0026#39;a\u0026#39;; int c2 = equation.charAt(equation.length() - 1) - \u0026#39;a\u0026#39;; if (equation.contains(\u0026#34;!=\u0026#34;) \u0026amp;\u0026amp; find(c1) == find(c2)) { return false; } } return true; } void union(int p, int q) { if (p == q) { return; } int pid = find(p); int qid = find(q); parents[qid] = pid; } int find(int p) { while (p != parents[p]) { p = parents[p]; } return p; } } ","permalink":"https://volyx.in/posts/2021-02-12-satisfiability-of-equality-equations-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/satisfiability-of-equality-equations/]\u003c/p\u003e\n\u003cp\u003eGiven an array equations of strings that represent relationships between variables, each string equations[i] has length 4 and takes one of two different forms: \u0026ldquo;a==b\u0026rdquo; or \u0026ldquo;a!=b\u0026rdquo;.  Here, a and b are lowercase letters (not necessarily different) that represent one-letter variable names.\u003c/p\u003e\n\u003cp\u003eReturn true if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;a==b\u0026#34;,\u0026#34;b!=a\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;b==a\u0026#34;,\u0026#34;a==b\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: We could assign a = 1 and b = 1 to satisfy both equations.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;a==b\u0026#34;,\u0026#34;b==c\u0026#34;,\u0026#34;a==c\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;a==b\u0026#34;,\u0026#34;b!=c\u0026#34;,\u0026#34;c==a\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 5:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;c==c\u0026#34;,\u0026#34;b==d\u0026#34;,\u0026#34;x!=z\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"990. Satisfiability of Equality Equations"},{"content":"![https://leetcode.com/problems/surrounded-regions/]\nGiven a 2D board containing \u0026lsquo;X\u0026rsquo; and \u0026lsquo;O\u0026rsquo; (the letter O), capture all regions surrounded by \u0026lsquo;X\u0026rsquo;.\nA region is captured by flipping all \u0026lsquo;O\u0026rsquo;s into \u0026lsquo;X\u0026rsquo;s in that surrounded region.\n1 2 3 4 5 6 7 8 9 10 11 12 13 Example: X X X X X O O X X X O X X O X X After running your function, the board should be: X X X X X X X X X X X X X O X X Explanation:\nSurrounded regions shouldn’t be on the border, which means that any \u0026lsquo;O\u0026rsquo; on the border of the board are not flipped to \u0026lsquo;X\u0026rsquo;. Any \u0026lsquo;O\u0026rsquo; that is not on the border and it is not connected to an \u0026lsquo;O\u0026rsquo; on the border will be flipped to \u0026lsquo;X\u0026rsquo;. Two cells are connected if they are adjacent cells connected horizontally or vertically.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class Solution { int[][] DIRECTIONS = new int[][] { {1, 0}, {-1, 0}, {0, -1}, {0, 1} }; /* [ [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;], [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;], [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;], [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;] ] [ [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;], [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;], [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;], [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;O\u0026#34;], [\u0026#34;X\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;] ] [ [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;X\u0026#34;], [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;], [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;], [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;], [\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;], [\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;,\u0026#34;O\u0026#34;,\u0026#34;X\u0026#34;] ] */ int n,m; public void solve(char[][] board) { n = board.length; if (n == 0) { return; } m = board[0].length; UF uf = new UF(n * m); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (board[i][j] == \u0026#39;O\u0026#39;) { for (int[] dir: DIRECTIONS) { int row = dir[0] + i; int col = dir[1] + j; if (row \u0026gt;= 0 \u0026amp;\u0026amp; row \u0026lt; n \u0026amp;\u0026amp; col \u0026gt;= 0 \u0026amp;\u0026amp; col \u0026lt; m \u0026amp;\u0026amp; board[row][col] == \u0026#39;O\u0026#39;) { uf.union(getIndex(i, j), getIndex(row, col)); // System.out.printf(\u0026#34;union %d,%d and %d,%d %n\u0026#34;, i, j, row, col); } } } } } Set\u0026lt;Integer\u0026gt; remains = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (board[i][j] == \u0026#39;O\u0026#39; \u0026amp;\u0026amp; // is boarder (i == 0 || i == n - 1 || j == 0 || j == m - 1)) { remains.add(uf.find(getIndex(i, j))); } } } // System.out.println(remains); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (board[i][j] == \u0026#39;O\u0026#39; \u0026amp;\u0026amp; !remains.contains(uf.find(getIndex(i, j)))) { board[i][j] = \u0026#39;X\u0026#39;; } } } } int getIndex(int i , int j) { int index = i * m + j; // System.out.printf(\u0026#34;%d, %d to index %d %n\u0026#34;, i, j, index); return index; } static class UF { int[] a; int[] sz; public UF(int n) { this.a = new int[n]; this.sz = new int[n]; for (int i = 0; i \u0026lt; n; i++) { this.a[i] = i; this.sz[i] = 1; } } int find(int p) { while (p != a[p]) { p = a[p]; } return p; } void union(int p, int q) { int parentP = find(p); int parentQ = find(q); if (sz[parentP] \u0026gt; sz[parentQ]) { a[parentQ] = parentP; sz[parentP] += sz[parentQ]; } else { a[parentP] = parentQ; sz[parentQ] += sz[parentP]; } } } } ","permalink":"https://volyx.in/posts/2021-02-10-surrounded-regions-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/surrounded-regions/]\u003c/p\u003e\n\u003cp\u003eGiven a 2D board containing \u0026lsquo;X\u0026rsquo; and \u0026lsquo;O\u0026rsquo; (the letter O), capture all regions surrounded by \u0026lsquo;X\u0026rsquo;.\u003c/p\u003e\n\u003cp\u003eA region is captured by flipping all \u0026lsquo;O\u0026rsquo;s into \u0026lsquo;X\u0026rsquo;s in that surrounded region.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX X X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX O O X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX X O X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX O X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAfter running your function, the board should be:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX X X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX X X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX X X X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX O X X\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExplanation:\u003c/p\u003e","title":"130. Surrounded Regions"},{"content":"![https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/]\nOn a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Example 1: Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]] Output: 5 Explanation: One way to remove 5 stones is as follows: 1. Remove stone [2,2] because it shares the same row as [2,1]. 2. Remove stone [2,1] because it shares the same column as [0,1]. 3. Remove stone [1,2] because it shares the same row as [1,0]. 4. Remove stone [1,0] because it shares the same column as [0,0]. 5. Remove stone [0,1] because it shares the same row as [0,0]. Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane. Example 2: Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]] Output: 3 Explanation: One way to make 3 moves is as follows: 1. Remove stone [2,2] because it shares the same row as [2,0]. 2. Remove stone [2,0] because it shares the same column as [0,0]. 3. Remove stone [0,2] because it shares the same row as [0,0]. Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane. Example 3: Input: stones = [[0,0]] Output: 0 Explanation: [0,0] is the only stone on the plane, so you cannot remove it. Constraints:\n1 \u0026lt;= stones.length \u0026lt;= 1000 0 \u0026lt;= xi, yi \u0026lt;= 104 No two stones are at the same coordinate point. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 /** [[3,2],[3,1],[4,4],[1,1],[0,2],[4,0]] x x 4 x x x 3 x x x x x x x x x 1 0 x x 5 x x x 2 [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]] 0 1 x 2 x 3 x 4 5 0 r x r x r x r r [[0,1],[1,0]] * 0 1 * [[3,2],[3,1],[4,4],[1,1],[0,2],[4,0]] * * 4 * * * 3 * * * * * * * * * 1 0 * * 5 * * * 2 **/ class Solution { int n; public int removeStones(int[][] stones) { n = 0; for (int i = 0; i \u0026lt; stones.length; i++) { n = Math.max(n, stones[i][0]); n = Math.max(n, stones[i][1]); } n = n + 1; UF uf = new UF(n + n); for (int[] stone: stones) { uf.union(stone[0], n + stone[1]); } Map\u0026lt;Integer, Integer\u0026gt; counts = new HashMap(); for (int[] stone: stones) { int id = uf.find(stone[0]); int componentSize = counts.getOrDefault(id, 0); counts.put(id, componentSize + 1); } Integer maxComponentSize = 0; for (Map.Entry\u0026lt;Integer, Integer\u0026gt; keyValue: counts.entrySet()) { if (keyValue.getValue() \u0026gt; 1) { maxComponentSize += keyValue.getValue() - 1; } } return maxComponentSize; } class UF { private int n; private int[] a; private int[] sz; public UF(int n) { this.n = n; this.a = new int[n]; this.sz = new int[n]; for (int i = 0; i \u0026lt; n; i++) { a[i] = i; sz[i] = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (pid == qid) return; if (sz[pid] \u0026gt;= sz[qid]) { a[qid] = a[pid]; sz[pid] += sz[qid]; } else { a[pid] = qid; sz[qid] += sz[pid]; } } int find(int p) { while(p != a[p]) { p = a[p]; } return p; } } } ","permalink":"https://volyx.in/posts/2021-02-09-most-stones-removed-with-same-row-or-column-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/]\u003c/p\u003e\n\u003cp\u003eOn a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\u003c/p\u003e\n\u003cp\u003eA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\u003c/p\u003e\n\u003cp\u003eGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\u003c/p\u003e","title":"947. Most Stones Removed with Same Row or Column"},{"content":"![https://leetcode.com/problems/sliding-puzzle/]\nOn a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.\nA move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\nGiven a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\nExamples:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 Input: board = [[1,2,3],[4,0,5]] Output: 1 Explanation: Swap the 0 and the 5 in one move. Input: board = [[1,2,3],[5,4,0]] Output: -1 Explanation: No number of moves will make the board solved. Input: board = [[4,1,2],[5,0,3]] Output: 5 Explanation: 5 is the smallest number of moves that solves the board. An example path: After move 0: [[4,1,2],[5,0,3]] After move 1: [[4,1,2],[0,5,3]] After move 2: [[0,1,2],[4,5,3]] After move 3: [[1,0,2],[4,5,3]] After move 4: [[1,2,0],[4,5,3]] After move 5: [[1,2,3],[4,5,0]] Input: board = [[3,2,4],[1,5,0]] Output: 14 Note:\nboard will be a 2 x 3 array as described above. board[i][j] will be a permutation of [0, 1, 2, 3, 4, 5]. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 class Solution { public int slidingPuzzle(int[][] board) { Board initial = new Board(board); PriorityQueue\u0026lt;SearchNode\u0026gt; minPQ = new PriorityQueue\u0026lt;\u0026gt;(); minPQ.add(new SearchNode(null, initial)); Set\u0026lt;Board\u0026gt; seen = new HashSet\u0026lt;\u0026gt;(); seen.add(initial); SearchNode find = null; while (!minPQ.isEmpty()) { final SearchNode searchNode = minPQ.poll(); if (searchNode.board.isGoal()) { find = searchNode; break; } for (Board childBoard : searchNode.board.neighbors()) { SearchNode childNode = new SearchNode(searchNode, childBoard); if (seen.contains(childBoard)) { continue; } else { seen.add(childBoard); } minPQ.add(childNode); } } List\u0026lt;Board\u0026gt; path = new ArrayList\u0026lt;\u0026gt;(); SearchNode currentNode = find; while (currentNode != null) { path.add(currentNode.board); currentNode = currentNode.previous; } Collections.reverse(path); if (path.isEmpty()) { return -1; } return path.size() - 1; } static class SearchNode implements Comparable\u0026lt;SearchNode\u0026gt; { private final SearchNode previous; private final Board board; private final int moves; private SearchNode(SearchNode previous, Board board) { this.previous = previous; this.board = board; this.moves = previous == null ? 0 : previous.moves + 1; } public int compareTo(SearchNode that) { return Integer.compare(this.moves, that.moves); } public boolean equals(Object object) { if (this == object) return true; if (object == null || getClass() != object.getClass()) return false; SearchNode that = (SearchNode) object; return moves == that.moves \u0026amp;\u0026amp; Objects.equals(previous, that.previous) \u0026amp;\u0026amp; Objects.equals(board, that.board); } public int hashCode() { return Objects.hash(previous, board, moves); } } static int[][] copyTiles(int[][] tiles) { int n = tiles.length; int m = tiles[0].length; int[][] tilesCopy = new int[n][m]; int[] distinct = new int[n * m]; for (int i = 0; i \u0026lt; tiles.length; i++) { for (int j = 0; j \u0026lt; tiles[i].length; j++) { tilesCopy[i][j] = tiles[i][j]; distinct[tiles[i][j]]++; } } for (int i = 0; i \u0026lt; distinct.length; i++) { if (distinct[i] != 1) { throw new IllegalArgumentException(Arrays.toString(distinct)); } } return tilesCopy; } static class Board { int[][] DIRECTIONS = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} }; private final int[][] tiles; // create a board from an n-by-n array of tiles, // where tiles[row][col] = tile at (row, col) public Board(int[][] tiles) { if (tiles == null) { throw new IllegalArgumentException(); } this.tiles = copyTiles(tiles); } // string representation of this board public String toString() { StringBuilder sb = new StringBuilder(); sb.append(tiles.length).append(\u0026#34;\\n\u0026#34;); for (int i = 0; i \u0026lt; tiles.length; i++) { for (int j = 0; j \u0026lt; tiles[i].length; j++) { int tile = this.tiles[i][j]; if (tile \u0026lt; 10) { sb.append(\u0026#34; \u0026#34;).append(tile).append(\u0026#34; \u0026#34;); } else { sb.append(tile).append(\u0026#34; \u0026#34;); } } sb.append(\u0026#34;\\n\u0026#34;); } return sb.toString(); } // is this board the goal board? public boolean isGoal() { for (int i = 0; i \u0026lt; tiles.length; i++) { for (int j = 0; j \u0026lt; tiles[i].length; j++) { final int val = tiles[i][j]; if (val == 0 \u0026amp;\u0026amp; i == tiles.length - 1 \u0026amp;\u0026amp; j == tiles[0].length - 1) { continue; } else if (val != 0 \u0026amp;\u0026amp; val == i * tiles[i].length + j + 1) { continue; } else { return false; } } } return true; } // all neighboring boards public Iterable\u0026lt;Board\u0026gt; neighbors() { final List\u0026lt;Board\u0026gt; boards = new ArrayList\u0026lt;\u0026gt;(); int n = this.tiles.length; int m = this.tiles[0].length; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { if (this.tiles[i][j] == 0) { for (int[] direction : DIRECTIONS) { int row = i + direction[0]; int col = j + direction[1]; if (row \u0026gt;= 0 \u0026amp;\u0026amp; row \u0026lt; n \u0026amp;\u0026amp; col \u0026gt;= 0 \u0026amp;\u0026amp; col \u0026lt; m) { int[][] tilesCopy = copyTiles(this.tiles); tilesCopy[i][j] = tilesCopy[row][col]; tilesCopy[row][col] = 0; boards.add(new Board(tilesCopy)); } } break; } } } return boards; } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Board board = (Board) o; return Arrays.deepEquals(tiles, board.tiles); } @Override public int hashCode() { return Arrays.deepHashCode(tiles); } } } ","permalink":"https://volyx.in/posts/2021-02-07-sliding-puzzle-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/sliding-puzzle/]\u003c/p\u003e\n\u003cp\u003eOn a 2x3 board, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.\u003c/p\u003e\n\u003cp\u003eA move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\u003c/p\u003e\n\u003cp\u003eThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\u003c/p\u003e\n\u003cp\u003eGiven a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.\u003c/p\u003e","title":"773. Sliding Puzzle"},{"content":"![https://leetcode.com/problems/remove-outermost-parentheses/]\nA valid parentheses string is either empty (\u0026quot;\u0026quot;), \u0026ldquo;(\u0026rdquo; + A + \u0026ldquo;)\u0026rdquo;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation. For example, \u0026ldquo;\u0026rdquo;, \u0026ldquo;()\u0026rdquo;, \u0026ldquo;(())()\u0026rdquo;, and \u0026ldquo;(()(()))\u0026rdquo; are all valid parentheses strings.\nA valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string S, consider its primitive decomposition: S = P_1 + P_2 + \u0026hellip; + P_k, where P_i are primitive valid parentheses strings.\nReturn S after removing the outermost parentheses of every primitive string in the primitive decomposition of S.\nExample 1:\n1 2 3 4 5 Input: \u0026#34;(()())(())\u0026#34; Output: \u0026#34;()()()\u0026#34; Explanation: The input string is \u0026#34;(()())(())\u0026#34;, with primitive decomposition \u0026#34;(()())\u0026#34; + \u0026#34;(())\u0026#34;. After removing outer parentheses of each part, this is \u0026#34;()()\u0026#34; + \u0026#34;()\u0026#34; = \u0026#34;()()()\u0026#34;. Example 2:\n1 2 3 4 5 Input: \u0026#34;(()())(())(()(()))\u0026#34; Output: \u0026#34;()()()()(())\u0026#34; Explanation: The input string is \u0026#34;(()())(())(()(()))\u0026#34;, with primitive decomposition \u0026#34;(()())\u0026#34; + \u0026#34;(())\u0026#34; + \u0026#34;(()(()))\u0026#34;. After removing outer parentheses of each part, this is \u0026#34;()()\u0026#34; + \u0026#34;()\u0026#34; + \u0026#34;()(())\u0026#34; = \u0026#34;()()()()(())\u0026#34;. Example 3:\n1 2 3 4 5 Input: \u0026#34;()()\u0026#34; Output: \u0026#34;\u0026#34; Explanation: The input string is \u0026#34;()()\u0026#34;, with primitive decomposition \u0026#34;()\u0026#34; + \u0026#34;()\u0026#34;. After removing outer parentheses of each part, this is \u0026#34;\u0026#34; + \u0026#34;\u0026#34; = \u0026#34;\u0026#34;. Note:\nS.length \u0026lt;= 10000 S[i] is \u0026ldquo;(\u0026rdquo; or \u0026ldquo;)\u0026rdquo; S is a valid parentheses string 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public String removeOuterParentheses(String S) { StringBuilder sb = new StringBuilder(); int opened = 0; for (char c : S.toCharArray()) { if (c == \u0026#39;(\u0026#39;) { // skip first opened if (opened != 0) { sb.append(c); } opened++; } else { opened--; // skip last closed if (opened != 0) { sb.append(c); } } } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2021-01-26-remove-outermost-parentheses-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/remove-outermost-parentheses/]\u003c/p\u003e\n\u003cp\u003eA valid parentheses string is either empty (\u0026quot;\u0026quot;), \u0026ldquo;(\u0026rdquo; + A + \u0026ldquo;)\u0026rdquo;, or A + B, where A and B are valid parentheses strings, and + represents string concatenation.  For example, \u0026ldquo;\u0026rdquo;, \u0026ldquo;()\u0026rdquo;, \u0026ldquo;(())()\u0026rdquo;, and \u0026ldquo;(()(()))\u0026rdquo; are all valid parentheses strings.\u003c/p\u003e\n\u003cp\u003eA valid parentheses string S is primitive if it is nonempty, and there does not exist a way to split it into S = A+B, with A and B nonempty valid parentheses strings.\u003c/p\u003e","title":"1021. Remove Outermost Parentheses"},{"content":"![https://leetcode.com/problems/number-of-provinces/]\nThere are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.\nExample 1:\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]] Output: 2\nExample 2:\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]] Output: 3\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class Solution { int n; public int findCircleNum(int[][] isConnected) { n = isConnected.length; UF uf = new UF(n); for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { if (isConnected[i][j] == 1) { uf.union(i, j); } } } return uf.count(); } private class UF { private final int[] a; private final int[] sz; public UF(int n) { this.a = new int[n]; this.sz = new int[n]; for (int i = 0; i \u0026lt; n; i++) { this.a[i] = i; this.sz[i] = 1; } } int find(int p) { while (a[p] != p) { p = a[p]; } return p; } void union(int p, int q) { int pid = find(p); int piq = find(q); if (sz[pid] \u0026gt;= sz[piq]) { a[piq] = pid; sz[pid]+=sz[piq]; } else { a[pid] = piq; sz[piq] += pid; } } int count() { int counter = 0; for (int i = 0; i \u0026lt; n; i++) { if (a[i] == i) { counter++; } } return counter; } } } ","permalink":"https://volyx.in/posts/2021-01-16-number-of-provinces-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/number-of-provinces/]\u003c/p\u003e\n\u003cp\u003eThere are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\u003c/p\u003e\n\u003cp\u003eA province is a group of directly or indirectly connected cities and no other cities outside of the group.\u003c/p\u003e\n\u003cp\u003eYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.\u003c/p\u003e","title":"547. Number of Provinces"},{"content":"![https://leetcode.com/problems/redundant-connection/]\nIn this problem, a tree is an undirected graph that is connected and has no cycles.\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, \u0026hellip;, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u \u0026lt; v, that represents an undirected edge connecting nodes u and v.\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array. The answer edge [u, v] should be in the same format, with u \u0026lt; v.\nExample 1:\nInput: [[1,2], [1,3], [2,3]] Output: [2,3] Explanation: The given undirected graph will be like this:\n1 2 3 1 / \\ 2 - 3 Example 2:\nInput: [[1,2], [2,3], [3,4], [1,4], [1,5]] Output: [1,4] Explanation: The given undirected graph will be like this:\n1 2 3 5 - 1 - 2 | | 4 - 3 Note: The size of the input 2D-array will be between 3 and 1000. Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 class Solution { public int[] findRedundantConnection(int[][] edges) { if (edges.length \u0026lt; 3 || edges.length \u0026gt; 1000) { throw new RuntimeException(); } int n = 0; for (int i = 0; i \u0026lt; edges.length; i++) { n = Math.max(n, edges[i][0]); n = Math.max(n, edges[i][1]); } for (int j = edges.length - 1; j \u0026gt;= 0; j--) { UF uf = new UF(n + 1); uf.union(0, 1); for (int i = 0; i \u0026lt; edges.length; i++) { if (i != j) { uf.union(edges[i][0], edges[i][1]); } } if (uf.count() == 1) { return edges[j]; } } return new int[0]; } class UF { private final int n; private final int[] a; private final int[] sz; public UF(int n) { this.n = n ; this.a = new int[n]; this.sz = new int[n]; for (int i = 0; i \u0026lt; n; i++) { this.a[i] = i; this.sz[i] = 1; } } void union(int p, int q) { int pid = find(p); int qid = find(q); if (sz[pid] \u0026gt;= sz[qid]) { a[qid] = pid; sz[qid] += sz[pid]; } else { a[pid] = qid; sz[pid] += sz[qid]; } } int find(int p) { while (a[p] != p) { p = a[p]; } return p; } int count() { int c = 0; for (int i = 0; i \u0026lt; n; i++) { if (a[i] == i) { c++; } } return c; } } } ","permalink":"https://volyx.in/posts/2021-01-16-redundant-connection-imported/","summary":"\u003cp\u003e![https://leetcode.com/problems/redundant-connection/]\u003c/p\u003e\n\u003cp\u003eIn this problem, a tree is an undirected graph that is connected and has no cycles.\u003c/p\u003e\n\u003cp\u003eThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, \u0026hellip;, N), with one additional edge added. The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\u003c/p\u003e\n\u003cp\u003eThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [u, v] with u \u0026lt; v, that represents an undirected edge connecting nodes u and v.\u003c/p\u003e","title":"684. Redundant Connection"},{"content":"\nYou are given a list of songs where the ith song has a duration of time[i] seconds.\nReturn the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i \u0026lt; j with (time[i] + time[j]) % 60 == 0.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: time = [30,20,150,100,40] Output: 3 Explanation: Three pairs have a total duration divisible by 60: (time[0] = 30, time[2] = 150): total duration 180 (time[1] = 20, time[3] = 100): total duration 120 (time[1] = 20, time[4] = 40): total duration 60 Example 2: Input: time = [60,60,60] Output: 3 Explanation: All three pairs have a total duration of 120, which is divisible by 60. Constraints:\n1 \u0026lt;= time.length \u0026lt;= 6 * 10^4 1 \u0026lt;= time[i] \u0026lt;= 500 Solution 1 2 3 4 5 6 7 8 9 10 11 class Solution { public int numPairsDivisibleBy60(int[] time) { int[] timeMap = new int[61]; int count = 0; for (int t: time) { count += timeMap[(60 - (t % 60)) % 60]; timeMap[t % 60]++; } return count; } } ","permalink":"https://volyx.in/posts/2021-01-02-pairs-of-songs-with-total-durations-divisible-by-60/","summary":"\u003cp\u003e\u003cimg alt=\"1010. Pairs of Songs With Total Durations Divisible by 60\" loading=\"lazy\" src=\"https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are given a list of songs where the ith song has a duration of time[i] seconds.\u003c/p\u003e\n\u003cp\u003eReturn the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i \u0026lt; j with (time[i] + time[j]) % 60 == 0.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: time = [30,20,150,100,40]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Three pairs have a total duration divisible by 60:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(time[0] = 30, time[2] = 150): total duration 180\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(time[1] = 20, time[3] = 100): total duration 120\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(time[1] = 20, time[4] = 40): total duration 60\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: time = [60,60,60]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: All three pairs have a total duration of 120, which is divisible by 60.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"1010. Pairs of Songs With Total Durations Divisible by 60"},{"content":"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\n1 2 3 4 5 Example 1: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 Output: 3 Explanation: The LCA of nodes 5 and 1 is 3. 1 2 3 4 5 Example 2: Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 Output: 5 Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition. 1 2 3 4 Example 3: Input: root = [1,2], p = 1, q = 2 Output: 1 Constraints:\nThe number of nodes in the tree is in the range [2, 105]. -10^9 \u0026lt;= Node.val \u0026lt;= 10^9 All Node.val are unique. p != q p and q will exist in the tree. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { List\u0026lt;TreeNode\u0026gt; parentNodes1 = new ArrayList(); List\u0026lt;TreeNode\u0026gt; parentNodes2 = new ArrayList(); search(root, p, parentNodes1); search(root, q, parentNodes2); int n = Math.min(parentNodes1.size(), parentNodes2.size()); TreeNode lca = root; for (int i = 1; i \u0026lt; n; i++) { if (parentNodes1.get(i).val == parentNodes2.get(i).val) { lca = parentNodes1.get(i); } else { break; } } return lca; } boolean search(TreeNode current, TreeNode target, List\u0026lt;TreeNode\u0026gt; path) { if (current == null) return false; path.add(current); if (current.val == target.val) { return true; } if (search(current.left, target, path)) { return true; } if (search(current.right, target, path)) { return true; } path.remove(path.size() - 1); return false; } } ## Solution 2 ```java /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { List\u0026lt;TreeNode\u0026gt; path1 = new ArrayList\u0026lt;\u0026gt;(); search(root, p.val, path1); List\u0026lt;TreeNode\u0026gt; path2 = new ArrayList\u0026lt;\u0026gt;(); search(root, q.val, path2); for (int i = Math.min(path1.size(), path2.size()) - 1; i \u0026gt;= 0; i--) { var p1 = path1.get(i); var p2 = path2.get(i); if (p1.val == p2.val) return p1; } return null; } TreeNode search(TreeNode node, int val, List\u0026lt;TreeNode\u0026gt; paths) { if (node == null) return null; paths.add(node); if (node.val == val) { return node; } TreeNode s = search(node.left, val, paths); if (s != null) return s; s = search(node.right, val, paths); if (s != null) return s; paths.remove(node); return null; } } Solution 2021-11-18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); Map\u0026lt;TreeNode, TreeNode\u0026gt; nodeParent = new HashMap\u0026lt;\u0026gt;(); stack.push(root); nodeParent.put(root, null); while (!nodeParent.containsKey(p) || !nodeParent.containsKey(q)) { TreeNode node = stack.pop(); if (node.right != null) { nodeParent.put(node.right, node); stack.push(node.right); } if (node.left != null) { nodeParent.put(node.left, node); stack.push(node.left); } } Set\u0026lt;TreeNode\u0026gt; parents = new LinkedHashSet\u0026lt;\u0026gt;(); while (p != null) { parents.add(p); p = nodeParent.get(p); } while (q != null \u0026amp;\u0026amp; !parents.contains(q)) { q = nodeParent.get(q); } return q; } } Solution 2022-01-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { Stack\u0026lt;TreeNode\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); stack.push(root); Map\u0026lt;TreeNode, TreeNode\u0026gt; nodeParent = new HashMap\u0026lt;\u0026gt;(); nodeParent.put(root, null); while (!nodeParent.containsKey(p) || !nodeParent.containsKey(q)) { TreeNode node = stack.pop(); if (node.right != null) { nodeParent.put(node.right, node); stack.push(node.right); } if (node.left != null) { nodeParent.put(node.left, node); stack.push(node.left); } } Set\u0026lt;TreeNode\u0026gt; parents = new LinkedHashSet\u0026lt;\u0026gt;(); // 5 while (p != null) { parents.add(p); p = nodeParent.get(p); } while (q != null \u0026amp;\u0026amp; !parents.contains(q)) { q = nodeParent.get(q); } return q; } } ","permalink":"https://volyx.in/posts/2020-11-12-lowest-common-ancestor-of-a-binary-tree-imported/","summary":"\u003cp\u003eGiven a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\u003c/p\u003e\n\u003cp\u003eAccording to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The LCA of nodes 5 and 1 is 3.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-11-12-ex1.png\"\u003e\u003c/p\u003e","title":"Lowest Common Ancestor of a Binary Tree"},{"content":"\nAn a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, , or blank space. These characters divide the square into contiguous regions.\n(Note that backslash characters are escaped, so a \\ is represented as \u0026ldquo;\\\u0026rdquo;.)\nReturn the number of regions.\nExample 1:\n1 2 3 4 5 6 7 Input: [ \u0026#34; /\u0026#34;, \u0026#34;/ \u0026#34; ] Output: 2 Explanation: The 2x2 grid is as follows: Example 2:\n1 2 3 4 5 6 7 Input: [ \u0026#34; /\u0026#34;, \u0026#34; \u0026#34; ] Output: 1 Explanation: The 2x2 grid is as follows: Example 3:\n1 2 3 4 5 6 7 Input: [ \u0026#34;\\\\/\u0026#34;, \u0026#34;/\\\\\u0026#34; ] Output: 4 Explanation: (Recall that because \\ characters are escaped, \u0026#34;\\\\/\u0026#34; refers to \\/, and \u0026#34;/\\\\\u0026#34; refers to /\\.) The 2x2 grid is as follows:\nExample 4:\n1 2 3 4 5 6 7 8 Input: [ \u0026#34;/\\\\\u0026#34;, \u0026#34;\\\\/\u0026#34; ] Output: 5 Explanation: (Recall that because \\ characters are escaped, \u0026#34;/\\\\\u0026#34; refers to /\\, and \u0026#34;\\\\/\u0026#34; refers to \\/.) The 2x2 grid is as follows: Example 5:\n1 2 3 4 5 6 7 Input: [ \u0026#34;//\u0026#34;, \u0026#34;/ \u0026#34; ] Output: 3 Explanation: The 2x2 grid is as follows: Note:\n1 \u0026lt;= grid.length == grid[0].length \u0026lt;= 30 grid[i][j] is either \u0026lsquo;/\u0026rsquo;, \u0026lsquo;', or \u0026rsquo; \u0026lsquo;. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class Solution { public int regionsBySlashes(String[] input) { int N = input.length; int[][] matrix = new int[3 * N][3 * N]; for (int i = 0; i \u0026lt; N; i++) { for (int j = 0; j \u0026lt; N; j++) { if (input[i].charAt(j) == \u0026#39;/\u0026#39;) { fillForwardSlash(matrix, i, j); } else if (input[i].charAt(j) == \u0026#39; \u0026#39;) { } else { fillBackwardSlash(matrix, i, j); } } } int count = 0; for (int i = 0; i \u0026lt; matrix.length; i++) { for (int j = 0; j \u0026lt; matrix.length; j++) { if (matrix[i][j] == 0) { count++; fill(matrix, i, j); } } } return count; } int[][] dirs = new int[][] {{1,0}, {0, 1}, {-1, 0}, {0, -1}}; void fill(int[][] matrix, int i, int j) { if (i \u0026lt; 0 || i == matrix.length || j \u0026lt; 0 || j == matrix.length || matrix[i][j] == 1) return; matrix[i][j] = 1; for(var dir : dirs) { fill(matrix, i + dir[0], j + dir[1]); } } void fillForwardSlash(int[][] m, int row, int col) { m[3 * row + 2][3 * col] = 1; m[3 * row + 1][3 * col + 1] = 1; m[3 * row][3 * col + 2] = 1; } void fillBackwardSlash(int[][] m, int row, int col) { m[3 * row][3 * col] = 1; m[3 * row + 1][3 * col + 1] = 1; m[3 * row + 2][3 * col + 2] = 1; } } Solution 2022-01-13 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class Solution { public int regionsBySlashes(String[] grid) { int n = grid.length; int m = grid[0].length(); int n3 = n * 3; int m3 = m * 3; int[][] G = new int[n3][m3]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { char c = grid[i].charAt(j); if (c == \u0026#39;/\u0026#39;) { fillForward(i * 3, j * 3, G); } else if (c == \u0026#39;\\\\\u0026#39;) { fillBackward(i * 3, j * 3, G); } } } int count = 0; for (int i = 0; i \u0026lt; n3; i++) { for (int j = 0; j \u0026lt; m3; j++) { if (G[i][j] == 0) { dfs(i, j, G); count++; } } } return count; } int[][] DIRS = new int[][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, }; void dfs(int i, int j, int[][] g) { if (i \u0026lt; 0 || i \u0026gt;= g.length || j \u0026lt; 0 || j \u0026gt;= g[0].length) { return; } if (g[i][j] == 1) { return; } g[i][j] = 1; for (int[] dir: DIRS) { dfs(i + dir[0], j + dir[1], g); } } void fillForward(int i, int j, int[][] g) { g[i][j + 2] = 1; g[i + 1][j + 1] = 1; g[i + 2][j] = 1; } void fillBackward(int i, int j, int[][] g) { g[i][j] = 1; g[i + 1][j + 1] = 1; g[i + 2][j + 2] = 1; } } Solution 2023-02-18 - UnionFind 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 class Solution { public int regionsBySlashes(String[] grid) { int n = grid[0].length(); int[][] array = new int[3 * n][3 * n]; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { char c = grid[i].charAt(j); if (c == \u0026#39;/\u0026#39;) { fillForward(array, 3*i, 3*j); } else if (c == \u0026#39;\\\\\u0026#39;) { fillBackward(array, 3*i, 3*j); } } } // print(array); UF uf = new UF(9 * n * n); for (int i = 0; i \u0026lt; array.length; i++) { for (int j = 0; j \u0026lt; array.length; j++) { if (array[i][j] == 0) { // right if (j \u0026lt; array.length - 1 \u0026amp;\u0026amp; array[i][j + 1] == 0) { uf.union(array.length * i + j, array.length * i + j + 1); } // down if (i \u0026lt; array.length - 1 \u0026amp;\u0026amp; array[i+1][j] == 0) { uf.union(array.length * i + j, array.length * (i+1) + j); } } } } Set\u0026lt;Integer\u0026gt; provinces = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; array.length; i++) { for (int j = 0; j \u0026lt; array.length; j++) { int index = array.length * i + j; int pid = uf.parent(index); if (index != uf.parent(index)) { provinces.add(pid); } } } return provinces.size(); } class UF { int[] a; int[] sizes; UF(int n) { this.a = new int[n]; this.sizes = new int[n]; for (int i = 0; i \u0026lt; a.length; i++) { a[i] = i; } } void union(int p, int q) { int pid = parent(p); int qid = parent(q); if (pid == qid) return; if (sizes[pid] \u0026lt; sizes[qid]) { a[qid] = a[pid]; } else { a[pid] = a[qid]; } } int parent(int p) { while (a[p] != p) { p = a[p]; } return p; } } void print(int[][] a) { int n = a.length; for (int i = 0; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; n; j++) { System.out.printf(\u0026#34;%d \u0026#34;, a[i][j]); } System.out.println(); } } void fillForward(int[][] a, int i, int j) { a[i][j] = 0; a[i][j+1] = 0; a[i][j+2] = 1; a[i+1][j] = 0; a[i+1][j+1] = 1; a[i+1][j+2] = 0; a[i+2][j] = 1; a[i+2][j+1] = 0; a[i+2][j+2] = 0; } void fillBackward(int[][] a, int i, int j) { a[i][j] = 1; a[i][j+1] = 0; a[i][j+2] = 0; a[i+1][j] = 0; a[i+1][j+1] = 1; a[i+1][j+2] = 0; a[i+2][j] = 0; a[i+2][j+1] = 0; a[i+2][j+2] = 1; } } ","permalink":"https://volyx.in/posts/2020-11-08-regions-cut-by-slashes/","summary":"\u003cp\u003e\u003cimg alt=\"959. Regions Cut By Slashes\" loading=\"lazy\" src=\"https://leetcode.com/problems/regions-cut-by-slashes/\"\u003e\u003c/p\u003e\n\u003cp\u003eAn a N x N grid composed of 1 x 1 squares, each 1 x 1 square consists of a /, , or blank space.  These characters divide the square into contiguous regions.\u003c/p\u003e\n\u003cp\u003e(Note that backslash characters are escaped, so a \\ is represented as \u0026ldquo;\\\u0026rdquo;.)\u003c/p\u003e\n\u003cp\u003eReturn the number of regions.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026#34; /\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u0026#34;/ \u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The 2x2 grid is as follows:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-11-08-ex1.png\"\u003e\u003c/p\u003e","title":"Regions Cut By Slashes"},{"content":"Given a string s, find the length of the longest substring without repeating characters.\nExample 1:\n1 2 3 Input: s = \u0026#34;abcabcbb\u0026#34; Output: 3 Explanation: The answer is \u0026#34;abc\u0026#34;, with the length of 3. Example 2:\n1 2 3 Input: s = \u0026#34;bbbbb\u0026#34; Output: 1 Explanation: The answer is \u0026#34;b\u0026#34;, with the length of 1. Example 3:\n1 2 3 4 Input: s = \u0026#34;pwwkew\u0026#34; Output: 3 Explanation: The answer is \u0026#34;wke\u0026#34;, with the length of 3. Notice that the answer must be a substring, \u0026#34;pwke\u0026#34; is a subsequence and not a substring. Example 4:\n1 2 Input: s = \u0026#34;\u0026#34; Output: 0 Constraints:\n0 \u0026lt;= s.length \u0026lt;= 5 * 104 s consists of English letters, digits, symbols and spaces. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int lengthOfLongestSubstring(String s) { int n = s.length(); var set = new HashSet\u0026lt;Character\u0026gt;(); int i = 0; int j = 0; int ans = 0; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026lt; n) { // try to extend the range [i, j] if (!set.contains(s.charAt(j))) { set.add(s.charAt(j)); j++; ans = Math.max(ans, j - i); } else { set.remove(s.charAt(i)); // important to remove first i++; } } return ans; } } ","permalink":"https://volyx.in/posts/2020-11-07-longest-substring-without-repeating-characters-imported/","summary":"\u003cp\u003eGiven a string s, find the length of the longest substring without repeating characters.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;abcabcbb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The answer is \u0026#34;abc\u0026#34;, with the length of 3.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;bbbbb\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The answer is \u0026#34;b\u0026#34;, with the length of 1.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 3:\u003c/p\u003e","title":"Longest Substring Without Repeating Characters"},{"content":"Given two strings A and B of lowercase letters, return true if you can swap two letters in A so the result is equal to B, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at A[i] and A[j]. For example, swapping at indices 0 and 2 in \u0026ldquo;abcd\u0026rdquo; results in \u0026ldquo;cbad\u0026rdquo;.\nExample 1:\nInput: A = \u0026ldquo;ab\u0026rdquo;, B = \u0026ldquo;ba\u0026rdquo; Output: true Explanation: You can swap A[0] = \u0026lsquo;a\u0026rsquo; and A[1] = \u0026lsquo;b\u0026rsquo; to get \u0026ldquo;ba\u0026rdquo;, which is equal to B.\nExample 2:\nInput: A = \u0026ldquo;ab\u0026rdquo;, B = \u0026ldquo;ab\u0026rdquo; Output: false Explanation: The only letters you can swap are A[0] = \u0026lsquo;a\u0026rsquo; and A[1] = \u0026lsquo;b\u0026rsquo;, which results in \u0026ldquo;ba\u0026rdquo; != B.\nExample 3:\nInput: A = \u0026ldquo;aa\u0026rdquo;, B = \u0026ldquo;aa\u0026rdquo; Output: true Explanation: You can swap A[0] = \u0026lsquo;a\u0026rsquo; and A[1] = \u0026lsquo;a\u0026rsquo; to get \u0026ldquo;aa\u0026rdquo;, which is equal to B.\nExample 4:\nInput: A = \u0026ldquo;aaaaaaabc\u0026rdquo;, B = \u0026ldquo;aaaaaaacb\u0026rdquo; Output: true\nExample 5:\nInput: A = \u0026ldquo;\u0026rdquo;, B = \u0026ldquo;aa\u0026rdquo; Output: false\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 class Solution { public boolean buddyStrings(String A, String B) { int n = A.length(); if (A.length() != B.length()) { return false; } if (n == 0 || n == 1) return false; int i = 0; int[] uniq = new int[26]; List\u0026lt;Integer\u0026gt; indexes = new ArrayList\u0026lt;\u0026gt;(); while (i \u0026lt; n) { uniq[A.charAt(i) - \u0026#39;a\u0026#39;]++; if (A.charAt(i) != B.charAt(i)) { indexes.add(i); } if (indexes.size() \u0026gt; 2) { return false; } i++; } if (indexes.size() == 1) { return false; } if (indexes.isEmpty()) { for (int c : uniq) { if (c \u0026gt; 1) { return true; } } return false; } int x = indexes.get(0); int y = indexes.get(1); return A.charAt(x) == B.charAt(y) \u0026amp;\u0026amp; B.charAt(x) == A.charAt(y); } } ","permalink":"https://volyx.in/posts/2020-10-28-buddy-strings-imported/","summary":"\u003cp\u003eGiven two strings A and B of lowercase letters, return true if you can swap two letters in A so the result is equal to B, otherwise, return false.\u003c/p\u003e\n\u003cp\u003eSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at A[i] and A[j]. For example, swapping at indices 0 and 2 in \u0026ldquo;abcd\u0026rdquo; results in \u0026ldquo;cbad\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput: A = \u0026ldquo;ab\u0026rdquo;, B = \u0026ldquo;ba\u0026rdquo;\nOutput: true\nExplanation: You can swap A[0] = \u0026lsquo;a\u0026rsquo; and A[1] = \u0026lsquo;b\u0026rsquo; to get \u0026ldquo;ba\u0026rdquo;, which is equal to B.\u003c/p\u003e","title":"Buddy Strings"},{"content":"Implement int sqrt(int x).\nCompute and return the square root of x, where x is guaranteed to be a non-negative integer.\nSince the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.\nExample 1:\n1 2 Input: 4 Output: 2 Example 2:\n1 2 Input: 8 Output: 2 Explanation: The square root of 8 is 2.82842\u0026hellip;, and since the decimal part is truncated, 2 is returned.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int mySqrt(int x) { if (x == 0) return 0; int l = 0; int r = x; while (l \u0026lt; r) { int mid = l + (r - l) / 2; if (mid * mid \u0026lt;= x) { l = mid + 1; } else { r = mid; } } return l - 1; } } ","permalink":"https://volyx.in/posts/2020-10-28-sqrtx-imported/","summary":"\u003cp\u003eImplement int sqrt(int x).\u003c/p\u003e\n\u003cp\u003eCompute and return the square root of x, where x is guaranteed to be a non-negative integer.\u003c/p\u003e\n\u003cp\u003eSince the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 8\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExplanation: The square root of 8 is 2.82842\u0026hellip;, and since\nthe decimal part is truncated, 2 is returned.\u003c/p\u003e","title":"Sqrt(x)"},{"content":"Implement pow(x, n), which calculates x raised to the power n (i.e. xn).\nExample 1:\nInput: x = 2.00000, n = 10 Output: 1024.00000\nExample 2:\nInput: x = 2.10000, n = 3 Output: 9.26100\nExample 3:\nInput: x = 2.00000, n = -2 Output: 0.25000 Explanation: 2-2 = 1/22 = 1/4 = 0.25\nConstraints: -100.0 \u0026lt; x \u0026lt; 100.0 -231 \u0026lt;= n \u0026lt;= 231-1 -104 \u0026lt;= xn \u0026lt;= 104\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public double myPow(double x, int n) { if (n==0) { return 1.0; } double half = myPow(x, n/2); if (n%2==0){ return half*half; } else if (n\u0026gt;0) { return half*half*x; } else { return half*half* (1/x); } } } ","permalink":"https://volyx.in/posts/2020-10-27-pow-x-imported/","summary":"\u003cp\u003eImplement pow(x, n), which calculates x raised to the power n (i.e. xn).\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput: x = 2.00000, n = 10\nOutput: 1024.00000\u003c/p\u003e\n\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cp\u003eInput: x = 2.10000, n = 3\nOutput: 9.26100\u003c/p\u003e\n\u003cp\u003eExample 3:\u003c/p\u003e\n\u003cp\u003eInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\u003c/p\u003e\n\u003cp\u003eConstraints:\n-100.0 \u0026lt; x \u0026lt; 100.0\n-231 \u0026lt;= n \u0026lt;= 231-1\n-104 \u0026lt;= xn \u0026lt;= 104\u003c/p\u003e","title":"Pow(x, n)"},{"content":"Given a binary tree, return the zigzag level order traversal of its nodes\u0026rsquo; values. (ie, from left to right, then right to left for the next level and alternate between).\nFor example: Given binary tree [3,9,20,null,null,15,7],\n1 2 3 4 5 3 / \\ 9 20 / \\ 15 7 return its zigzag level order traversal as:\n1 2 3 4 5 [ [3], [20,9], [15,7] ] Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; zigzagLevelOrder(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); dfs(root, result, 0); return result; } void dfs(TreeNode node, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result, int level) { if (node == null) { return; } checkSize(result, level); if (level % 2 == 1) { result.get(level).add(0, node.val); } else { result.get(level).add(node.val); } dfs(node.left, result, level + 1); dfs(node.right, result, level + 1); } void checkSize(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result, int level) { // 0 [ [] ] // 1 [[][]] // 2 [ [][] ] if (result.size() \u0026lt;= level) { result.add(new ArrayList\u0026lt;\u0026gt;()); } } } Solution 2021-11-18 DFS, DFS + Stack, BFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; zigzagLevelOrder(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); Queue\u0026lt;TreeNode\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); if (root != null) { q.add(root); } int level = 0; while (q.size() \u0026gt; 0) { int size = q.size(); List\u0026lt;Integer\u0026gt; levelList = new ArrayList(); for (int i = 0; i \u0026lt; size; i++) { TreeNode node = q.poll(); if (level % 2 == 0) { levelList.add(node.val); } else { levelList.add(0, node.val); } if (node.left != null) { q.add(node.left); } if (node.right != null) { q.add(node.right); } } res.add(levelList); level++; } return res; } public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; zigzagLevelOrderDfsStack(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); Stack\u0026lt;Pair\u0026lt;TreeNode, Integer\u0026gt;\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); if (root != null) { stack.push(new Pair\u0026lt;\u0026gt;(root, 0)); } while (stack.size() \u0026gt; 0) { Pair\u0026lt;TreeNode, Integer\u0026gt; curr = stack.pop(); TreeNode node = curr.getKey(); Integer level = curr.getValue(); if (res.size() == level) { res.add(new ArrayList\u0026lt;\u0026gt;()); } if (level % 2 == 0) { res.get(level).add(node.val); } else { res.get(level).add(0, node.val); } if (node.right != null) { stack.push(new Pair\u0026lt;\u0026gt;(node.right, level + 1)); } if (node.left != null) { stack.push(new Pair\u0026lt;\u0026gt;(node.left, level + 1)); } } return res; } public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; zigzagLevelOrderDfsRecursive(TreeNode root) { List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); dfs(root, 0, res); return res; } void dfs(TreeNode node, int level, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res) { if (node == null) return; if (res.size() == level) { res.add(new ArrayList\u0026lt;\u0026gt;()); } if (level % 2 == 0) { res.get(level).add(node.val); } else { res.get(level).add(0, node.val); } dfs(node.left, level + 1, res); dfs(node.right, level + 1, res); } } ","permalink":"https://volyx.in/posts/2020-10-21-binary-tree-zigzag-level-order-traversal-imported/","summary":"\u003cp\u003eGiven a binary tree, return the zigzag level order traversal of its nodes\u0026rsquo; values. (ie, from left to right, then right to left for the next level and alternate between).\u003c/p\u003e\n\u003cp\u003eFor example:\nGiven binary tree [3,9,20,null,null,15,7],\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  9  20\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /  \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   15   7\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ereturn its zigzag level order traversal as:\u003c/p\u003e","title":"Binary Tree Zigzag Level Order Traversal"},{"content":"Given a non-empty array of integers, return the k most frequent elements.\nExample 1:\nInput: nums = [1,1,1,2,2,3], k = 2 Output: [1,2]\nExample 2:\nInput: nums = [1], k = 1 Output: [1]\nNote:\nYou may assume k is always valid, 1 ≤ k ≤ number of unique elements. Your algorithm\u0026rsquo;s time complexity must be better than O(n log n), where n is the array\u0026rsquo;s size. It\u0026rsquo;s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique. You can return the answer in any order. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int[] topKFrequent(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (int num : nums) { freq.put(num, freq.getOrDefault(num, 0) + 1); } Queue\u0026lt;Integer\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;(Comparator.comparingInt(freq::get)); for (int num : freq.keySet()) { q.add(num); if (q.size() \u0026gt; k) { q.remove(); } } int[] result = new int[k]; int i = q.size() - 1; for (int num : q) { result[i--] = num; } return result; } } Solution 2021-10-31 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public int[] topKFrequent(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (int num: nums) { freq.put(num, freq.getOrDefault(num, 0) + 1); } // 1 2 3 4 PriorityQueue\u0026lt;Pair\u0026lt;Integer, Integer\u0026gt;\u0026gt; heap = new PriorityQueue\u0026lt;\u0026gt;((a, b) -\u0026gt; { return a.getValue() - b.getValue(); }); for (var entry: freq.entrySet()) { heap.add(new Pair\u0026lt;\u0026gt;(entry.getKey(), entry.getValue())); if (heap.size() \u0026gt; k) { heap.poll(); } } int[] res = new int[k]; int i = 0; while (heap.size() \u0026gt; 0) { res[i] = heap.poll().getKey(); i = i + 1; } return res; } } ","permalink":"https://volyx.in/posts/2020-10-18-top-k-frequent-elements-imported/","summary":"\u003cp\u003eGiven a non-empty array of integers, return the k most frequent elements.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\u003c/p\u003e\n\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cp\u003eInput: nums = [1], k = 1\nOutput: [1]\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou may assume k is always valid, 1 ≤ k ≤ number of unique elements.\u003c/li\u003e\n\u003cli\u003eYour algorithm\u0026rsquo;s time complexity must be better than O(n log n), where n is the array\u0026rsquo;s size.\u003c/li\u003e\n\u003cli\u003eIt\u0026rsquo;s guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.\u003c/li\u003e\n\u003cli\u003eYou can return the answer in any order.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolution:\u003c/p\u003e","title":"Top K Frequent Elements"},{"content":"Given an integer array, find three numbers whose product is maximum and output the maximum product.\nExample 1:\n1 2 Input: [1,2,3] Output: 6 Example 2:\n1 2 Input: [1,2,3,4] Output: 24 Note:\nThe length of the given array will be in range [3,104] and all elements are in the range [-1000, 1000]. Multiplication of any three numbers in the input won\u0026rsquo;t exceed the range of 32-bit signed integer. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public int maximumProduct(int[] nums) { int s1 = Integer.MAX_VALUE; int s2 = Integer.MAX_VALUE; int b1 = Integer.MIN_VALUE; int b2 = Integer.MIN_VALUE; int b3 = Integer.MIN_VALUE; for (int value: nums) { if (value \u0026lt; s1) { s2 = s1; s1 = value; } else if (value \u0026lt; s2) { s2 = value; } if (value \u0026gt; b3) { b1 = b2; b2 = b3; b3 = value; } else if (value \u0026gt; b2) { b1 = b2; b2 = value; } else if (value \u0026gt; b1) { b1 = value; } } return Math.max(s1 * s2 * b3, b1 * b2 * b3); } } ","permalink":"https://volyx.in/posts/2020-10-17-maximum-product-of-three-numbers-imported/","summary":"\u003cp\u003eGiven an integer array, find three numbers whose product is maximum and output the maximum product.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 24\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe length of the given array will be in range [3,104] and all elements are in the range [-1000, 1000].\u003c/li\u003e\n\u003cli\u003eMultiplication of any three numbers in the input won\u0026rsquo;t exceed the range of 32-bit signed integer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolution:\u003c/p\u003e","title":"Maximum Product of Three Numbers"},{"content":"A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company has is the one with headID.\nEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also it\u0026rsquo;s guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the employees of the company of an urgent piece of news. He will inform his direct subordinates and they will inform their subordinates and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.\nExample 1:\n1 2 3 Input: n = 1, headID = 0, manager = [-1], informTime = [0] Output: 0 Explanation: The head of the company is the only employee in the company. Example 2:\n1 2 3 4 Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0] Output: 1 Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all. The tree structure of the employees in the company is shown. Example 3:\n1 2 3 4 5 6 7 8 9 Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1] Output: 21 Explanation: The head has id = 6. He will inform employee with id = 5 in 1 minute. The employee with id = 5 will inform the employee with id = 4 in 2 minutes. The employee with id = 4 will inform the employee with id = 3 in 3 minutes. The employee with id = 3 will inform the employee with id = 2 in 4 minutes. The employee with id = 2 will inform the employee with id = 1 in 5 minutes. The employee with id = 1 will inform the employee with id = 0 in 6 minutes. Needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21. Example 4:\n1 2 3 4 5 Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0] Output: 3 Explanation: The first minute the head will inform employees 1 and 2. The second minute they will inform employees 3, 4, 5 and 6. The third minute they will inform the rest of employees. Example 5:\n1 2 Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914] Output: 1076 Constraints:\n1 \u0026lt;= n \u0026lt;= 10^5 0 \u0026lt;= headID \u0026lt; n manager.length == n 0 \u0026lt;= manager[i] \u0026lt; n manager[headID] == -1 informTime.length == n 0 \u0026lt;= informTime[i] \u0026lt;= 1000 informTime[i] == 0 if employee i has no subordinates. It is guaranteed that all the employees can be informed. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; tree = new TreeMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { List\u0026lt;Integer\u0026gt; child = tree.getOrDefault(manager[i], new ArrayList\u0026lt;\u0026gt;()); child.add(i); tree.put(manager[i], child); } return buildTime(tree, headID, informTime); } public int buildTime(Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; tree, int nodeId, int[] informTime) { List\u0026lt;Integer\u0026gt; child = tree.get(nodeId); if (child == null) { return 0; } int max = 0; for (Integer c: child) { max = Math.max(informTime[nodeId] + buildTime(tree, c, informTime), max); } return max; } } ","permalink":"https://volyx.in/posts/2020-09-16-time-needed-to-inform-all-employees-imported/","summary":"\u003cp\u003eA company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company has is the one with headID.\u003c/p\u003e\n\u003cp\u003eEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also it\u0026rsquo;s guaranteed that the subordination relationships have a tree structure.\u003c/p\u003e\n\u003cp\u003eThe head of the company wants to inform all the employees of the company of an urgent piece of news. He will inform his direct subordinates and they will inform their subordinates and so on until all employees know about the urgent news.\u003c/p\u003e","title":"Time Needed to Inform All Employees"},{"content":"For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.\nExample 1: Flipped Trees Diagram\n1 2 3 Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7] Output: true Explanation: We flipped at nodes with values 1, 3, and 5. Example 2:\n1 2 Input: root1 = [], root2 = [] Output: true Example 3:\n1 2 Input: root1 = [], root2 = [1] Output: false Example 4:\n1 2 Input: root1 = [0,null,1], root2 = [] Output: false Example 5:\n1 2 Input: root1 = [0,null,1], root2 = [0,1] Output: true Constraints:\nThe number of nodes in each tree is in the range [0, 100]. Each tree will have unique node values in the range [0, 99]. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean flipEquiv(TreeNode root1, TreeNode root2) { if (root1 == null \u0026amp;\u0026amp; root2 == null) { return true; } if (root1 != null \u0026amp;\u0026amp; root2 == null) { return false; } if (root1 == null \u0026amp;\u0026amp; root2 != null) { return false; } if (root1.val != root2.val) { return false; } // 2 eq 3 and 3 eq 2 || 2 eq 2 and 3 eq 3 return (flipEquiv(root1.left, root2.left) \u0026amp;\u0026amp; flipEquiv(root1.right, root2.right)) || (flipEquiv(root1.left, root2.right) \u0026amp;\u0026amp; flipEquiv(root1.right, root2.left)); } } ","permalink":"https://volyx.in/posts/2020-09-07-flip-equivalent-binary-trees-imported/","summary":"\u003cp\u003eFor a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\u003c/p\u003e\n\u003cp\u003eA binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\u003c/p\u003e\n\u003cp\u003eGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivelent or false otherwise.\u003c/p\u003e","title":"Flip Equivalent Binary Trees"},{"content":"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n1 2 3 4 5 6 7 8 Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, two is written as II in Roman numeral, just two one\u0026rsquo;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900. Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.\nExample 1:\n1 2 Input: \u0026#34;III\u0026#34; Output: 3 Example 2:\n1 2 Input: \u0026#34;IV\u0026#34; Output: 4 Example 3:\n1 2 Input: \u0026#34;IX\u0026#34; Output: 9 Example 4:\n1 2 3 Input: \u0026#34;LVIII\u0026#34; Output: 58 Explanation: L = 50, V= 5, III = 3. Example 5:\n1 2 3 Input: \u0026#34;MCMXCIV\u0026#34; Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 class Solution { public int romanToInt(String roman) { Map\u0026lt;Character, Integer\u0026gt; map = Map.of( Character.valueOf(\u0026#39;V\u0026#39;), 5, Character.valueOf(\u0026#39;L\u0026#39;), 50, Character.valueOf(\u0026#39;D\u0026#39;), 500, Character.valueOf(\u0026#39;M\u0026#39;), 1000 ); int value = 0; for (int i = 0; i \u0026lt; roman.length(); i++) { char c = roman.charAt(i); switch (c) { case \u0026#39;I\u0026#39;: if (i != roman.length() - 1) { char next = roman.charAt(i + 1); if (next == \u0026#39;V\u0026#39;) { value+= 4; i++; break; } else if (next == \u0026#39;X\u0026#39;) { value+= 9; i++; break; } else { value++; } } else { value++; } break; case \u0026#39;X\u0026#39;: if (i != roman.length() - 1) { char next = roman.charAt(i + 1); if (next == \u0026#39;L\u0026#39;) { value+= 40; i++; break; } else if (next == \u0026#39;C\u0026#39;) { value+= 90; i++; break; } else { value+=10; } } else { value+=10; } break; case \u0026#39;C\u0026#39;: if (i != roman.length() - 1) { char next = roman.charAt(i + 1); if (next == \u0026#39;D\u0026#39;) { value+= 400; i++; break; } else if (next == \u0026#39;M\u0026#39;) { value+= 900; i++; break; } else { value+=100; } } else { value+=100; } break; default: value += map.get(Character.valueOf(c)); } } return value; } } ","permalink":"https://volyx.in/posts/2020-09-06-roman-to-integer-imported/","summary":"\u003cp\u003eRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSymbol       Value\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eI             1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eV             5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX             10\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eL             50\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eC             100\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eD             500\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eM             1000\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eFor example, two is written as II in Roman numeral, just two one\u0026rsquo;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\u003c/p\u003e","title":"Roman to Integer"},{"content":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\nFor example, given the following triangle\n1 2 3 4 5 6 [ [2], [3,4], [6,5,7], [4,1,8,3] ] The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\nNote:\nBonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; tree) { if (tree.size() == 0) { return 0; } for (int level = tree.size() - 2; level \u0026gt;= 0; level--) { // [1] List\u0026lt;Integer\u0026gt; currentLevel = tree.get(level); // [1 2] List\u0026lt;Integer\u0026gt; nextLevel = tree.get(level+1); // [1 4 5] for (int col = 0; col \u0026lt; currentLevel.size(); col++) { int minSum = Math.min( currentLevel.get(col) + nextLevel.get(col), currentLevel.get(col) + nextLevel.get(col + 1) ); currentLevel.set(col, minSum); } } return tree.get(0).get(0); } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int minimumTotal(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; triangle) { int n = triangle.size(); if (n == 1) return triangle.get(0).get(0); int i = n - 2; while (i \u0026gt;= 0) { List\u0026lt;Integer\u0026gt; level = triangle.get(i); List\u0026lt;Integer\u0026gt; nextLevel = triangle.get(i + 1); for (int row = 0; row \u0026lt; level.size(); row++) { int min = Math.min(nextLevel.get(row), nextLevel.get(row + 1)); int value = min + level.get(row); level.set(row, value); } i--; } return triangle.get(0).get(0); } } ","permalink":"https://volyx.in/posts/2020-09-05-triangle-imported/","summary":"\u003cp\u003eGiven a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\u003c/p\u003e\n\u003cp\u003eFor example, given the following triangle\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     [2],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [3,4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [6,5,7],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [4,1,8,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\u003c/p\u003e","title":"Triangle"},{"content":"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\n1 2 3 4 5 6 struct Node { int val; Node *left; Node *right; Node *next; } Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.\nFollow up:\nYou may only use constant extra space. Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem. Example 1:\nInput: root = [1,2,3,4,5,6,7] Output: [1,#,2,3,#,4,5,6,7,#] Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with \u0026lsquo;#\u0026rsquo; signifying the end of each level.\nConstraints:\nThe number of nodes in the given tree is less than 4096. -1000 \u0026lt;= node.val \u0026lt;= 1000 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /* // Definition for a Node. class Node { public int val; public Node left; public Node right; public Node next; public Node() {} public Node(int _val) { val = _val; } public Node(int _val, Node _left, Node _right, Node _next) { val = _val; left = _left; right = _right; next = _next; } }; */ class Solution { public Node connect(Node root) { if (root == null) { return null; } Queue\u0026lt;Node\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.add(root); while (!queue.isEmpty()) { Node node = queue.poll(); if (node.left != null) { node.left.next = node.right; queue.add(node.left); } if (node.right != null) { if (node.next != null) node.right.next = node.next.left; queue.add(node.right); } } return root; } } ","permalink":"https://volyx.in/posts/2020-08-26-populating-next-right-pointers-in-each-node-imported/","summary":"\u003cp\u003eYou are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estruct Node {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  int val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Node *left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Node *right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  Node *next;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ePopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\u003c/p\u003e","title":"Populating Next Right Pointers in Each Node"},{"content":"Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.\nExample:\nInput: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]\nOutput: [1,2,4,7,5,3,6,8,9]\nExplanation:\nNote:\nThe total number of elements of the given matrix will not exceed 10,000.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 class Solution { public int[] findDiagonalOrder(int[][] A) { if (A == null || A.length == 0) { return new int[]{}; } int rows = A.length; int cols = A[0].length; int[] list = new int[rows * cols]; int row = 0; int col = 0; int direction = 1; for (int i = 0; i \u0026lt; list.length; i++) { list[i] = A[row][col]; if (direction == 1) { if (col == cols - 1) { direction = -1; row++; } else if (row == 0) { col++; direction = -1; } else { row--; col++; } } else { if (row == rows - 1) { col++; direction = 1; } else if (col == 0) { row++; direction = 1; } else { row++; col--; } } } return list; } } ","permalink":"https://volyx.in/posts/2020-08-24-diagonal-traverse-imported/","summary":"\u003cp\u003eGiven a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cp\u003eInput:\n[\n[ 1, 2, 3 ],\n[ 4, 5, 6 ],\n[ 7, 8, 9 ]\n]\u003c/p\u003e\n\u003cp\u003eOutput:  [1,2,4,7,5,3,6,8,9]\u003c/p\u003e\n\u003cp\u003eExplanation:\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-08-24-ex1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cp\u003eThe total number of elements of the given matrix will not exceed 10,000.\u003c/p\u003e\n\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindDiagonalOrder\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e A) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (A \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e A.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e{};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e rows \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e A.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cols  \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e A\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003erows \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e cols\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e direction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e list.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            list\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e A\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003erow\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ecol\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (direction \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 1) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (col \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e cols \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    direction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    row\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;                    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (row \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    col\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    direction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    row\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    col\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (row \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e rows \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    col\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    direction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (col \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    row\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    direction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    row\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    col\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e list;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Diagonal Traverse"},{"content":"A message containing letters from A-Z is being encoded to numbers using the following mapping:\n1 2 3 4 \u0026#39;A\u0026#39; -\u0026gt; 1 \u0026#39;B\u0026#39; -\u0026gt; 2 ... \u0026#39;Z\u0026#39; -\u0026gt; 26 Given a non-empty string containing only digits, determine the total number of ways to decode it.\n1 2 3 4 5 Example 1: Input: \u0026#34;12\u0026#34; Output: 2 Explanation: It could be decoded as \u0026#34;AB\u0026#34; (1 2) or \u0026#34;L\u0026#34; (12). 1 2 3 4 5 Example 2: Input: \u0026#34;226\u0026#34; Output: 3 Explanation: It could be decoded as \u0026#34;BZ\u0026#34; (2 26), \u0026#34;VF\u0026#34; (22 6), or \u0026#34;BBF\u0026#34; (2 2 6). Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int numDecodings(String input) { int[] dp = new int[input.length() + 1]; dp[0] = 1; dp[1] = input.charAt(0) == \u0026#39;0\u0026#39; ? 0: 1; for (int i = 2; i \u0026lt;= input.length(); i++) { Integer oneDigit = Integer.valueOf(input.substring(i - 1, i)); Integer twoDigit = Integer.valueOf(input.substring(i - 2, i)); if (oneDigit \u0026gt;= 1) { dp[i] += dp[i - 1]; } if (twoDigit \u0026gt;= 10 \u0026amp;\u0026amp; twoDigit \u0026lt;= 26) { dp[i] += dp[i - 2]; } } System.out.println(Arrays.toString(dp)); return dp[input.length()]; } } ","permalink":"https://volyx.in/posts/2020-08-23-decode-ways-imported/","summary":"\u003cp\u003eA message containing letters from A-Z is being encoded to numbers using the following mapping:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#39;A\u0026#39; -\u0026gt; 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#39;B\u0026#39; -\u0026gt; 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#39;Z\u0026#39; -\u0026gt; 26\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eGiven a non-empty string containing only digits, determine the total number of ways to decode it.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \u0026#34;12\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: It could be decoded as \u0026#34;AB\u0026#34; (1 2) or \u0026#34;L\u0026#34; (12).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \u0026#34;226\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: It could be decoded as \u0026#34;BZ\u0026#34; (2 26), \u0026#34;VF\u0026#34; (22 6), or \u0026#34;BBF\u0026#34; (2 2 6).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Decode Ways"},{"content":"Given a linked list, return the node where the cycle begins. If there is no cycle, return null.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nNote: Do not modify the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node.\nExample 2:\nInput: head = [1,2], pos = 0 Output: tail connects to node index 0 Explanation: There is a cycle in the linked list, where tail connects to the first node.\nExample 3:\nInput: head = [1], pos = -1 Output: no cycle Explanation: There is no cycle in the linked list.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head) { ListNode slow = head; ListNode fast = head; while (fast != null \u0026amp;\u0026amp; fast.next != null \u0026amp;\u0026amp; fast.next.next != null) { slow = slow.next; fast = fast.next.next; if (slow == fast) { ListNode start = head; while (slow != start) { slow = slow.next; start = start.next; } return slow; } } return null; } } ","permalink":"https://volyx.in/posts/2020-08-22-linked-list-cycle-ii-imported/","summary":"\u003cp\u003eGiven a linked list, return the node where the cycle begins. If there is no cycle, return null.\u003c/p\u003e\n\u003cp\u003eTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\u003c/p\u003e\n\u003cp\u003eNote: Do not modify the linked list.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\u003c/p\u003e","title":"Linked List Cycle II"},{"content":"Given a binary string s and an integer k.\nReturn True if every binary code of length k is a substring of s. Otherwise, return False.\nExample 1:\n1 2 3 Input: s = \u0026#34;00110110\u0026#34;, k = 2 Output: true Explanation: The binary codes of length 2 are \u0026#34;00\u0026#34;, \u0026#34;01\u0026#34;, \u0026#34;10\u0026#34; and \u0026#34;11\u0026#34;. They can be all found as substrings at indicies 0, 1, 3 and 2 respectively. Example 2:\n1 2 Input: s = \u0026#34;00110\u0026#34;, k = 2 Output: true Example 3:\n1 2 3 Input: s = \u0026#34;0110\u0026#34;, k = 1 Output: true Explanation: The binary codes of length 1 are \u0026#34;0\u0026#34; and \u0026#34;1\u0026#34;, it is clear that both exist as a substring. Example 4:\n1 2 3 Input: s = \u0026#34;0110\u0026#34;, k = 2 Output: false Explanation: The binary code \u0026#34;00\u0026#34; is of length 2 and doesn\u0026#39;t exist in the array. Example 5:\n1 2 Input: s = \u0026#34;0000000001011100\u0026#34;, k = 4 Output: false Constraints:\n1 \u0026lt;= s.length \u0026lt;= 5 * 10^5 s consists of 0\u0026rsquo;s and 1\u0026rsquo;s only. 1 \u0026lt;= k \u0026lt;= 20 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { public boolean hasAllCodes(String s, int k) { int len = (int) Math.pow(2, k); boolean[] bitSet = new boolean[len]; if (s.length() \u0026lt;= k) { return false; } int counter = 0; for (int i = 0; i \u0026lt; s.length(); i++) { if (i + k \u0026lt;= s.length()) { String val = s.substring(i, i + k); int bit = Integer.valueOf(val, 2); if (bitSet[bit] == false) { bitSet[bit] = true; counter++; if (len == counter) { return true; } } } } return false; } public boolean hasAllCodes2(String s, int k) { Set\u0026lt;Integer\u0026gt; set = new HashSet\u0026lt;\u0026gt;(); if (s.length() \u0026lt;= k) { return false; } for (int i = 0; i \u0026lt; s.length(); i++) { if (i + k \u0026lt;= s.length()) { String val = s.substring(i, i + k); Integer b = Integer.valueOf(val, 2); set.add(b); } } return set.size() == (int) Math.pow(2, k); } } ","permalink":"https://volyx.in/posts/2020-07-17-check-if-a-string-contains-all-binary-codes-of-size-k-imported/","summary":"\u003cp\u003eGiven a binary string s and an integer k.\u003c/p\u003e\n\u003cp\u003eReturn True if every binary code of length k is a substring of s. Otherwise, return False.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;00110110\u0026#34;, k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The binary codes of length 2 are \u0026#34;00\u0026#34;, \u0026#34;01\u0026#34;, \u0026#34;10\u0026#34; and \u0026#34;11\u0026#34;. They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Check If a String Contains All Binary Codes of Size K"},{"content":"Given a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.\nFor example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].\nNote: The length of temperatures will be in the range [1, 30000]. Each temperature will be an integer in the range [30, 100].\nNotes:\n1 2 3 T = [73, 74, 75, 71, 69, 72, 76, 73] S = [] O = [ 0, 0, 0, 0, 0, 0, 0, 0] Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int[] dailyTemperatures(int[] input) { Stack\u0026lt;Integer\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int[] output = new int[input.length]; for (int i = input.length - 1; i \u0026gt;= 0; i--) { int current = input[i]; while (!stack.empty() \u0026amp;\u0026amp; (input[stack.peek()] \u0026lt;= current)) { stack.pop(); } output[i] = stack.empty() ? 0: stack.peek() - i; stack.add(i); } return output; } } ","permalink":"https://volyx.in/posts/2020-07-16-daily-temperatures-imported/","summary":"\u003cp\u003eGiven a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.\u003c/p\u003e\n\u003cp\u003eFor example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].\u003c/p\u003e","title":"Daily Temperatures"},{"content":"Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.\nThe width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.\nIt is guaranteed that the answer will in the range of 32-bit signed integer.\nExample 1:\n1 2 3 4 5 6 7 8 9 10 Input: 1 / \\ 3 2 / \\ \\ 5 3 9 Output: 4 Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9). Example 2:\n1 2 3 4 5 6 7 8 9 10 Input: 1 / 3 / \\ 5 3 Output: 2 Explanation: The maximum width existing in the third level with the length 2 (5,3). Example 3:\n1 2 3 4 5 6 7 8 9 10 Input: 1 / \\ 3 2 / 5 Output: 2 Explanation: The maximum width existing in the second level with the length 2 (3,2). Example 4:\n1 2 3 4 5 6 7 8 9 10 11 Input: 1 / \\ 3 2 / \\ 5 9 / \\ 6 7 Output: 8 Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7). Constraints:\nThe given binary tree will have between 1 and 3000 nodes. Notes: Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { Integer max = 0; Map\u0026lt;Integer, Integer\u0026gt; leftMostPositions = new HashMap\u0026lt;\u0026gt;(); public int widthOfBinaryTree(TreeNode root) { dfs(root, 0, 0); return max; } void dfs(TreeNode node, int depth, int position) { if (node == null) { return; } leftMostPositions.computeIfAbsent(depth, x -\u0026gt; position); max = Math.max(max, position - leftMostPositions.get(depth) + 1); dfs(node.left, depth + 1, position * 2); dfs(node.right, depth + 1, position * 2 + 1); } } ","permalink":"https://volyx.in/posts/2020-07-16-maximum-width-of-binary-tree-imported/","summary":"\u003cp\u003eGiven a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.\u003c/p\u003e\n\u003cp\u003eThe width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.\u003c/p\u003e\n\u003cp\u003eIt is guaranteed that the answer will in the range of 32-bit signed integer.\u003c/p\u003e","title":"Maximum Width of Binary Tree"},{"content":"Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\nThe solution set must not contain duplicate triplets.\n1 2 3 4 5 6 7 8 9 Example: Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSum(int[] nums) { if (nums.length \u0026lt; 3) { return Collections.emptyList(); } Arrays.sort(nums); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); Set\u0026lt;String\u0026gt; uniq = new HashSet\u0026lt;\u0026gt;(); Map\u0026lt;Integer, Integer\u0026gt; valueToIndex = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.length; i++) { valueToIndex.put(nums[i], i); } int i = 0; while (i \u0026lt; nums.length - 1) { for (int j = i + 1; j \u0026lt; nums.length; j++) { Integer sum = -(nums[i] + nums[j]); Integer sumIndex = valueToIndex.get(sum); if (sumIndex != null \u0026amp;\u0026amp; sumIndex != i \u0026amp;\u0026amp; sumIndex != j \u0026amp;\u0026amp; sumIndex \u0026gt; j \u0026amp;\u0026amp; uniq.contains(\u0026#34;\u0026#34; + nums[i] + nums[j] + sumIndex) == false) { result.add(List.of(nums[i], nums[j], sum)); uniq.add(\u0026#34;\u0026#34; + nums[i] + nums[j] + sumIndex); } } i++; } return result; } } Solution Without Space 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSum(int[] nums) { int n = nums.length; if (n \u0026lt; 3) return Collections.emptyList(); Arrays.sort(nums); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i - 1]) { // add only first occurence continue; } int lo = i + 1; int hi = n - 1; int sum = - nums[i]; while (lo \u0026lt; hi) { if (nums[lo] + nums[hi] == sum) { res.add(List.of(nums[i], nums[lo], nums[hi])); while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[lo] == nums[lo + 1]) lo++; // skip duplicates while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[hi] == nums[hi - 1]) hi--; lo++; hi--; } else if (nums[lo] + nums[hi] \u0026lt; sum) { lo++; } else { hi--; } } } return res; } } Solution 2021-11-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; threeSum(int[] nums) { int n = nums.length; Arrays.sort(nums); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; n; i++) { if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i] == nums[i-1]) continue; int lo = i + 1; int hi = n - 1; int target = -nums[i]; while (lo \u0026lt; hi) { if (nums[lo] + nums[hi] \u0026gt; target) { hi--; } else if (nums[lo] + nums[hi] \u0026lt; target) { lo++; } else { res.add(List.of(nums[i], nums[lo], nums[hi])); while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[lo] == nums[lo + 1]) lo++; while (lo \u0026lt; hi \u0026amp;\u0026amp; nums[hi - 1] == nums[hi]) hi--; lo++; hi--; } } } return res; } } ","permalink":"https://volyx.in/posts/2020-07-14-3sum/","summary":"\u003cp\u003eGiven an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cp\u003eThe solution set must not contain duplicate triplets.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGiven array nums = [-1, 0, 1, 2, -1, -4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA solution set is:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [-1, 0, 1],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [-1, -1, 2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"3Sum"},{"content":"Given a non-empty array of digits representing a non-negative integer, increment one to the integer.\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\nExample 1:\n1 2 3 Input: [1,2,3] Output: [1,2,4] Explanation: The array represents the integer 123. Example 2:\n1 2 3 Input: [4,3,2,1] Output: [4,3,2,2] Explanation: The array represents the integer 4321. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 class Solution { public int[] plusOne(int[] digits) { int n = digits.length; for (int i = digits.length - 1; i \u0026gt;= 0; i--) { if (digits[i] != 9) { digits[i]++; return digits; } else { digits[i] = 0; } } int[] newDigits = new int[n + 1]; newDigits[0] = 1; for (int i = 1; i \u0026lt; n + 1; i++) { newDigits[i] = digits[i - 1]; } digits = newDigits; return digits; } public int[] plusOne2(int[] digits) { int carry = 0; int n = digits.length; if (digits[n - 1] == 9) { carry = 1; } else { digits[n - 1]++; return digits; } // 19 9 + 1 = 10 // 10 // 20 for (int i = n - 1; i \u0026gt;= 0; i--) { if (carry \u0026gt; 0) { int value = digits[i] + carry; digits[i] = value % 10; carry = value / 10; } else { break; } } if (carry == 1) { int[] newDigits = new int[n + 1]; newDigits[0] = 1; for (int i = 1; i \u0026lt; n + 1; i++) { newDigits[i] = digits[i - 1]; } digits = newDigits; } return digits; } ","permalink":"https://volyx.in/posts/2020-07-12-plus-one-imported/","summary":"\u003cp\u003eGiven a non-empty array of digits representing a non-negative integer, increment one to the integer.\u003c/p\u003e\n\u003cp\u003eThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\u003c/p\u003e\n\u003cp\u003eYou may assume the integer does not contain any leading zero, except the number 0 itself.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,2,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The array represents the integer 123.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Plus One"},{"content":"Given a list of lists of integers, nums, return all elements of nums in diagonal order as shown in the below images.\nExample 1: 1 2 Input: nums = [[1,2,3],[4,5,6],[7,8,9]] Output: [1,4,2,7,5,3,8,6,9] Example 2: 1 2 Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]] Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16] Example 3:\n1 2 Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]] Output: [1,4,2,5,3,8,6,9,7,10,11] Example 4:\n1 2 Input: nums = [[1,2,3,4,5,6]] Output: [1,2,3,4,5,6] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^5 1 \u0026lt;= nums[i].length \u0026lt;= 10^5 1 \u0026lt;= nums[i][j] \u0026lt;= 10^9 There at most 10^5 elements in nums. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public int[] findDiagonalOrder(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; nums) { List\u0026lt;Tuple\u0026gt; ans = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; nums.size(); i++) { for (int j = 0; j \u0026lt; nums.get(i).size(); j++) { Tuple t = new Tuple(); t.sum = i + j; t.row = i; t.val = nums.get(i).get(j); ans.add(t); } } ans.sort((t1, t2) -\u0026gt; { int s = Integer.compare(t1.sum, t2.sum); if (s != 0) { return s; } return - Integer.compare(t1.row, t2.row); }); int[] result = new int[ans.size()]; int i = 0; for (Tuple t : ans) { result[i] = t.val; i++; } return result; } static class Tuple { int sum; int row; int val; } } ","permalink":"https://volyx.in/posts/2020-07-11-diagonal-traverse-ii-imported/","summary":"\u003cp\u003eGiven a list of lists of integers, nums, return all elements of nums in diagonal order as shown in the below images.\u003c/p\u003e\n\u003cp\u003eExample 1:\n\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-07-11-ex1.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,4,2,7,5,3,8,6,9]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\n\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-07-11-ex2.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 3:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,4,2,5,3,8,6,9,7,10,11]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 4:\u003c/p\u003e","title":"Diagonal Traverse II"},{"content":"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, calculate the Hamming distance.\nNote: 0 ≤ x, y \u0026lt; 231.\n1 2 3 4 5 6 7 8 9 10 11 Example: Input: x = 1, y = 4 Output: 2 Explanation: 1 (0 0 0 1) 4 (0 1 0 0) ↑ ↑ The above arrows point to positions where the corresponding bits are different. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public int hammingDistance2(int x, int y) { int result = 0; while (x \u0026gt; 0 || y \u0026gt; 0) { result += (x % 2) ^ (y % 2); x \u0026gt;\u0026gt;=1; y \u0026gt;\u0026gt;=1; } return result; } public int hammingDistance(int x, int y) { return Integer.bitCount(x ^ y); } /* 1 (0 0 0 1) 4 (0 1 0 0) */ public int hammingDistance3(int x, int y) { int count = 0; while (x != 0 || y != 0) { if ((x \u0026amp; 1) != (y \u0026amp; 1)) { count++; } x = x \u0026gt;\u0026gt; 1; y = y \u0026gt;\u0026gt; 1; } return count; } } ","permalink":"https://volyx.in/posts/2020-07-07-hamming-distance-imported/","summary":"\u003cp\u003eThe Hamming distance between two integers is the number of positions at which the corresponding bits are different.\u003c/p\u003e\n\u003cp\u003eGiven two integers x and y, calculate the Hamming distance.\u003c/p\u003e\n\u003cp\u003eNote:\n0 ≤ x, y \u0026lt; 231.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: x = 1, y = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1   (0 0 0 1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e4   (0 1 0 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       ↑   ↑\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe above arrows point to positions where the corresponding bits are different.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Hamming Distance"},{"content":"There are 8 prison cells in a row, and each cell is either occupied or vacant.\nEach day, whether the cell is occupied or vacant changes according to the following rules:\nIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. Otherwise, it becomes vacant. (Note that because the prison is a row, the first and the last cells in the row can\u0026rsquo;t have two adjacent neighbors.)\nWe describe the current state of the prison in the following way: cells[i] == 1 if the i-th cell is occupied, else cells[i] == 0.\nGiven the initial state of the prison, return the state of the prison after N days (and N such changes described above.)\nExample 1:\n1 2 3 4 5 6 7 8 9 10 11 12 Input: cells = [0,1,0,1,1,0,0,1], N = 7 Output: [0,0,1,1,0,0,0,0] Explanation: The following table summarizes the state of the prison on each day: Day 0: [0, 1, 0, 1, 1, 0, 0, 1] Day 1: [0, 1, 1, 0, 0, 0, 0, 0] Day 2: [0, 0, 0, 0, 1, 1, 1, 0] Day 3: [0, 1, 1, 0, 0, 1, 0, 0] Day 4: [0, 0, 0, 0, 0, 1, 0, 0] Day 5: [0, 1, 1, 1, 0, 1, 0, 0] Day 6: [0, 0, 1, 0, 1, 1, 0, 0] Day 7: [0, 0, 1, 1, 0, 0, 0, 0] Example 2:\n1 2 Input: cells = [1,0,0,1,0,0,1,0], N = 1000000000 Output: [0,0,1,1,1,1,1,0] Note:\ncells.length == 8 cells[i] is in {0, 1} 1 \u0026lt;= N \u0026lt;= 10^9 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int[] prisonAfterNDays(int[] cells, int N) { N = (N - 1) % 14 + 1; while (N \u0026gt; 0) { cells = nextDay(cells); N--; } return cells; } int[] nextDay(int[] cells) { int[] nextDay = new int[cells.length]; for (int i = 1; i \u0026lt; cells.length - 1; i++) { if (cells[i - 1] == cells[i + 1]) { nextDay[i] = 1; } else { nextDay[i] = 0; } } return nextDay; } } ","permalink":"https://volyx.in/posts/2020-07-04-prison-cells-after-n-days-imported/","summary":"\u003cp\u003eThere are 8 prison cells in a row, and each cell is either occupied or vacant.\u003c/p\u003e\n\u003cp\u003eEach day, whether the cell is occupied or vacant changes according to the following rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\u003c/li\u003e\n\u003cli\u003eOtherwise, it becomes vacant.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e(Note that because the prison is a row, the first and the last cells in the row can\u0026rsquo;t have two adjacent neighbors.)\u003c/p\u003e","title":"Prison Cells After N Days"},{"content":"Given a binary tree, return the bottom-up level order traversal of its nodes\u0026rsquo; values. (ie, from left to right, level by level from leaf to root).\nFor example: Given binary tree [3,9,20,null,null,15,7],\n1 2 3 4 5 3 / \\ 9 20 / \\ 15 7 return its bottom-up level order traversal as:\n1 2 3 4 5 [ [15,7], [9,20], [3] ] Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; levelOrderBottom(TreeNode root) { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; map = new TreeMap\u0026lt;\u0026gt;((a,b) -\u0026gt; { return b - a; }); dfs(root, 0, map); System.out.println(map); List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (List\u0026lt;Integer\u0026gt; levelNodes: map.values()) { result.add(levelNodes); } return result; } void dfs(TreeNode node, int level, Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; map) { if (node == null) { return; } dfs(node.left, level + 1, map); addLevelNode(map, node.val, level); dfs(node.right, level + 1, map); } void addLevelNode(Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; map, int val, int level) { List\u0026lt;Integer\u0026gt; levelList = map.getOrDefault(level, new ArrayList\u0026lt;\u0026gt;()); levelList.add(val); map.put(level, levelList); } } ","permalink":"https://volyx.in/posts/2020-07-03-binary-tree-level-order-traversal-ii-imported/","summary":"\u003cp\u003eGiven a binary tree, return the bottom-up level order traversal of its nodes\u0026rsquo; values. (ie, from left to right, level by level from leaf to root).\u003c/p\u003e\n\u003cp\u003eFor example:\nGiven binary tree [3,9,20,null,null,15,7],\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  9  20\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /  \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   15   7\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003ereturn its bottom-up level order traversal as:\u003c/p\u003e","title":"Binary Tree Level Order Traversal II"},{"content":"You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.\nGiven n, find the total number of full staircase rows that can be formed.\nn is a non-negative integer and fits within the range of a 32-bit signed integer.\nExample 1:\n1 2 3 4 5 6 n = 5 The coins can form the following rows: ¤ ¤ ¤ ¤ ¤ Because the 3rd row is incomplete, we return 2.\nExample 2:\n1 2 3 4 5 6 7 n = 8 The coins can form the following rows: ¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤ Because the 4th row is incomplete, we return 3.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution { public int arrangeCoins(int n) { return (int) (Math.sqrt(2 * (long)n + 0.25) - 0.5); } public int arrangeCoins3(int n) { long left = 0; long right = n; long k = 0; long curr = 0; while (left \u0026lt;= right) { k = left + (right - left) / 2; curr = k * (k + 1) / 2; if (curr == n) return (int) k; if (curr \u0026gt; n) { right = k - 1; } else { left = k + 1; } } return (int) right; } public int arrangeCoins2(int n) { int i = 1; int count = 0; while (n \u0026gt; 0) { n = n - i; i++; if (n \u0026gt;= 0) count++; } return count; } } ","permalink":"https://volyx.in/posts/2020-07-02-arranging-coins-imported/","summary":"\u003cp\u003eYou have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.\u003c/p\u003e\n\u003cp\u003eGiven n, find the total number of full staircase rows that can be formed.\u003c/p\u003e\n\u003cp\u003en is a non-negative integer and fits within the range of a 32-bit signed integer.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003en = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe coins can form the following rows:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e¤\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e¤ ¤\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e¤ ¤\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eBecause the 3rd row is incomplete, we return 2.\u003c/p\u003e","title":"Arranging Coins"},{"content":"In a given grid, each cell can have one of three values:\nthe value 0 representing an empty cell; the value 1 representing a fresh orange; the value 2 representing a rotten orange. Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1 instead.\nExample 1:\n1 2 Input: [[2,1,1],[1,1,0],[0,1,1]] Output: 4 Example 2:\n1 2 3 Input: [[2,1,1],[0,1,1],[1,0,1]] Output: -1 Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally. Example 3:\n1 2 3 Input: [[0,2]] Output: 0 Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class Solution { public int orangesRotting(int[][] grid) { Queue\u0026lt;Orange\u0026gt; currQueue = new LinkedList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 2) { currQueue.add(new Orange(i, j)); } } } Queue\u0026lt;Orange\u0026gt; nextQueue = new LinkedList\u0026lt;\u0026gt;(); int minutes = 0; while (!currQueue.isEmpty()) { while (!currQueue.isEmpty()) { Orange rotten = currQueue.remove(); // top if (rotten.row \u0026gt; 0 \u0026amp;\u0026amp; grid[rotten.row - 1][rotten.col] == 1) { grid[rotten.row - 1][rotten.col] = 2; Orange orange = new Orange(rotten.row - 1, rotten.col); nextQueue.add(orange); } // bottom if (rotten.row \u0026lt; grid.length - 1 \u0026amp;\u0026amp; grid[rotten.row + 1][rotten.col] == 1) { grid[rotten.row + 1][rotten.col] = 2; nextQueue.add(new Orange(rotten.row + 1, rotten.col)); } // left if (rotten.col \u0026gt; 0 \u0026amp;\u0026amp; grid[rotten.row][rotten.col - 1] == 1) { grid[rotten.row][rotten.col - 1] = 2; nextQueue.add(new Orange(rotten.row, rotten.col - 1)); } // right if (rotten.col \u0026lt; grid[0].length - 1 \u0026amp;\u0026amp; grid[rotten.row][rotten.col + 1] == 1) { grid[rotten.row][rotten.col + 1] = 2; nextQueue.add(new Orange(rotten.row, rotten.col + 1)); } } if (!nextQueue.isEmpty()) { minutes++; } currQueue.addAll(nextQueue); nextQueue.clear(); } for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == 1) return -1; } } return minutes; } class Orange { Orange(int row, int col) { this.row = row; this.col = col; } int row; int col; } } ","permalink":"https://volyx.in/posts/2020-07-01-rotting-oranges-imported/","summary":"\u003cp\u003eIn a given grid, each cell can have one of three values:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe value 0 representing an empty cell;\nthe value 1 representing a fresh orange;\nthe value 2 representing a rotten orange.\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eEvery minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.\u003c/p\u003e\n\u003cp\u003eReturn the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.\u003c/p\u003e","title":"Rotting Oranges"},{"content":"\nGiven a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, \u0026hellip;) which sum to n.\n1 2 3 4 5 Example 1: Input: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4. 1 2 3 4 5 Example 2: Input: n = 13 Output: 2 Explanation: 13 = 4 + 9. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int numSquares(int n) { int[] dp = new int[n + 1]; dp[0] = 0; dp[1] = 1; for (int i = 2; i \u0026lt; dp.length; i++) { dp[i] = Integer.MAX_VALUE; for (int j = 1; j * j \u0026lt;= i; j++) { dp[i] = Math.min(dp[i], dp[i - j * j] + 1); } } return dp[n]; } } Solution 2021-11-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int numSquares(int n) { int[] dp = new int[n + 1]; Arrays.fill(dp, Integer.MAX_VALUE); dp[0] = 0; int max_square_index = (int) Math.sqrt(n) + 1; int[] squares = new int[max_square_index]; for (int i = 1; i \u0026lt; squares.length; i++) { squares[i] = i * i; } for (int i = 1; i \u0026lt; dp.length; i++) { for (int j = max_square_index - 1; j \u0026gt; 0; j--) { if (i - squares[j] \u0026gt;= 0) { int at = i - squares[j]; dp[i] = Math.min(dp[i], dp[at] + 1); } } } return dp[n]; } } ","permalink":"https://volyx.in/posts/2020-06-29-perfect-squares/","summary":"\u003cp\u003e\u003cimg alt=\"279. Perfect Squares\" loading=\"lazy\" src=\"https://leetcode.com/problems/perfect-squares/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, \u0026hellip;) which sum to n.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 12\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3 \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 12 = 4 + 4 + 4.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: n = 13\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 13 = 4 + 9.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumSquares\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e dp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e dp.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Integer.\u003cspan style=\"color:#a6e22e\"\u003eMAX_VALUE\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1; j \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e i; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e(dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e, dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution-2021-11-30\"\u003eSolution 2021-11-30\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumSquares\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e dp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Arrays.\u003cspan style=\"color:#a6e22e\"\u003efill\u003c/span\u003e(dp, Integer.\u003cspan style=\"color:#a6e22e\"\u003eMAX_VALUE\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e max_square_index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e) Math.\u003cspan style=\"color:#a6e22e\"\u003esqrt\u003c/span\u003e(n) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e squares \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003emax_square_index\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e squares.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            squares\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e dp.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max_square_index \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0; j\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e squares\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e at \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e squares\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e(dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e, dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eat\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }       \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"279. Perfect Squares"},{"content":"Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:\nSi % Sj = 0 or Sj % Si = 0.\nIf there are multiple solutions, return any subset is fine.\nExample 1:\nInput: [1,2,3] Output: [1,2] (of course, [1,3] will also be ok)\nExample 2:\nInput: [1,2,4,8] Output: [1,2,4,8]\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public List\u0026lt;Integer\u0026gt; largestDivisibleSubset(int[] nums) { int n = nums.length ; if (n== 0) { return Collections.emptyList(); } Arrays.sort(nums); int[] dp = new int[n]; dp[0] = 1; int ans = 1; for (int i = 1; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; i; j++) { if (nums[i] % nums[j] == 0) { dp[i] = Math.max(dp[i], dp[j] + 1); ans = Math.max(ans, dp[i]); } } } int prev = -1; List\u0026lt;Integer\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (int i = n - 1; i \u0026gt;= 0; i--) { if (dp[i] == ans \u0026amp;\u0026amp; (prev == -1 || prev % nums[i] == 0)) { prev = nums[i]; ans--; result.add(nums[i]); } } Collections.sort(result); return result; } } ","permalink":"https://volyx.in/posts/2020-06-29-largest-divisible-subset-imported/","summary":"\u003cp\u003eGiven a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:\u003c/p\u003e\n\u003cp\u003eSi % Sj = 0 or Sj % Si = 0.\u003c/p\u003e\n\u003cp\u003eIf there are multiple solutions, return any subset is fine.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput: [1,2,3]\nOutput: [1,2] (of course, [1,3] will also be ok)\u003c/p\u003e\n\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cp\u003eInput: [1,2,4,8]\nOutput: [1,2,4,8]\u003c/p\u003e\n\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInteger\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elargestDivisibleSubset\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e ;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (n\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Collections.\u003cspan style=\"color:#a6e22e\"\u003eemptyList\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Arrays.\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e dp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e ans \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e i; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003emax\u003c/span\u003e(dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e, dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    ans \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003emax\u003c/span\u003e(ans, dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eInteger\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e 0; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e ans \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e (prev \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1 \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e prev \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                ans\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                result.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(nums\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Collections.\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(result);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Largest Divisible Subset"},{"content":"Given an unsorted array of integers, find the length of longest increasing subsequence.\n1 2 3 4 5 Example: Input: [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Note:\nThere may be more than one LIS combination, it is only necessary for you to return the length. Your algorithm should run in O(n2) complexity. Follow up: Could you improve it to O(n log n) time complexity?\nRecursive O(2^n) Solution: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int lengthOfLIS(int[] nums) { return lengthOfLIS(nums, Integer.MIN_VALUE, 0); } int lengthOfLIS(int[] nums, int prev, int currpos) { if (currpos == nums.length) { return 0; } int taken = 0; if (nums[currpos] \u0026gt; prev) { taken = 1 + lengthOfLIS(nums, nums[currpos], currpos + 1); } int nottaken = lengthOfLIS(nums, prev, currpos + 1); return Math.max(nottaken, taken); } } Recursive O(n*n) Solution with Memoization: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public int lengthOfLIS(int[] nums) { int[][] memo = new int[nums.length + 1][nums.length]; for (int[] l: memo) { Arrays.fill(l, -1); } return lengthOfLIS(nums, -1, 0, memo); } int lengthOfLIS(int[] nums, int prevpos, int currpos, int[][] memo) { if (currpos == nums.length) { return 0; } if (memo[prevpos + 1][currpos] \u0026gt;= 0) { return memo[prevpos + 1][currpos]; } int taken = 0; if (prevpos \u0026lt; 0 || nums[currpos] \u0026gt; nums[prevpos]) { taken = 1 + lengthOfLIS(nums, currpos, currpos + 1, memo); } int nottaken = lengthOfLIS(nums, prevpos, currpos + 1, memo); memo[prevpos + 1][currpos] = Math.max(nottaken, taken); return memo[prevpos + 1][currpos]; } } Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int lengthOfLIS(int[] nums) { int n = nums.length; if (n \u0026lt;= 1) { return n; } int[] dp = new int[n]; Arrays.fill(dp, 1); int ans = 1; for (int i = 1; i \u0026lt; n; i++) { for (int j = i - 1; j \u0026gt;=0; j--) { if (nums[i] \u0026gt; nums[j]) { dp[i] = Math.max(dp[i], dp[j] + 1); } ans = Math.max(ans, dp[i]); } } System.out.println(Arrays.toString(dp)); return ans; } } Solution 2021-11-26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int lengthOfLIS(int[] nums) { int n = nums.length; int[] len = new int[n]; Arrays.fill(len, 1); int max = 1; for (int i = 1; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; i; j++) { if (nums[i] \u0026gt; nums[j]) { len[i] = Math.max(len[i], len[j] + 1); max = Math.max(len[i], max); } } } return max; } } ","permalink":"https://volyx.in/posts/2020-06-28-longest-increasing-subsequence/","summary":"\u003cp\u003eGiven an unsorted array of integers, find the length of longest increasing subsequence.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [10,9,2,5,3,7,101,18]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4 \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThere may be more than one LIS combination, it is only necessary for you to return the length.\u003c/li\u003e\n\u003cli\u003eYour algorithm should run in O(n2) complexity.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFollow up: Could you improve it to O(n log n) time complexity?\u003c/p\u003e","title":"Longest Increasing Subsequence"},{"content":"There are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.\nNow given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.\nExample 1:\n1 2 3 4 5 6 Input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 1 Output: 200 Explanation: The graph looks like this: The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.\nExample 2:\n1 2 3 4 5 6 Input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 0 Output: 500 Explanation: The graph looks like this: The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.\nConstraints:\nThe number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1. The size of flights will be in range [0, n * (n - 1) / 2]. The format of each flight will be (src, dst, price). The price of each flight will be in the range [1, 10000]. k is in the range of [0, n - 1]. There will not be any duplicated flights or self cycles. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 class Solution { Integer fare = Integer.MAX_VALUE; public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) { Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; adj = new HashMap\u0026lt;\u0026gt;(); int[][] costs = new int[n][n]; boolean[] visited = new boolean[n]; for (int i = 0; i \u0026lt; flights.length; i++) { int[] flight = flights[i]; int a = flight[0]; int b = flight[1]; int price = flight[2]; costs[a][b] = price; List\u0026lt;Integer\u0026gt; aPath = adj.getOrDefault(a, new ArrayList\u0026lt;\u0026gt;()); aPath.add(b); adj.put(a, aPath); } solve(costs, adj, src, dst, K, 0, visited); if (fare == Integer.MAX_VALUE) { return -1; } return fare; } void solve(int[][] costs, Map\u0026lt;Integer, List\u0026lt;Integer\u0026gt;\u0026gt; adj, int src, int dst, int k, int totalCost, boolean[] visited) { if (k \u0026lt; -1 ) { return; } if (src == dst) { fare = Math.min(fare, totalCost); return; } visited[src] = true; for (int j = 0; j \u0026lt; adj.getOrDefault(src, Collections.emptyList()).size(); j++) { int nextSrc = adj.get(src).get(j); if (costs[src][nextSrc] + totalCost \u0026lt; fare \u0026amp;\u0026amp; visited[nextSrc] == false) { System.out.printf(\u0026#34;%d %d%n\u0026#34;, src, nextSrc); solve(costs, adj, nextSrc, dst, k - 1, costs[src][nextSrc] + totalCost, visited); } } visited[src] = false; } } ","permalink":"https://volyx.in/posts/2020-06-26-cheapest-flights-within-k-stops-imported/","summary":"\u003cp\u003eThere are n cities connected by m flights. Each flight starts from city u and arrives at v with a price w.\u003c/p\u003e\n\u003cp\u003eNow given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003en = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esrc = 0, dst = 2, k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 200\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe graph looks like this:\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"exp1\" loading=\"lazy\" src=\"/images/2020-06-26-exp1.png\"\u003e\u003c/p\u003e","title":" Cheapest Flights Within K Stops"},{"content":"Cell compete:\nEight houses, represented as a cells, are arranged as a straight line. Each days every cells competes with adjacent cells. An integer value 1 represents an active cell and a value of 0 represent an inactive cell. if the neigbour on both the sides of the cell are both active or inactive, the cell become inactive in the next day, otherwise the become active. The two cells on each or have a single adjacent cell, so asume that the onoccupied space in the opposite side is an inactive cell. even after updating the cell state, consider its previus state when updating the state of ohters cells. The state information of the cells should be updated simultaneosly.\nWrite an algorithm to output the state of the cell after the given number of the cell input: the input to the function consist on two arguments: states, a list of integer representing the current state of cells; dasy, an integer representing the number of days output\nReturn a list of integers representing the state of the cells after the given number of days.\nNote: the elements of the list states contains 0s or 1s only\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 Solution: ```java public class Colony { public static int[] cellCompete(int[] cells, int days) { int len = cells.length; int[] newCells = new int[cells.length]; for (int k = 0; k \u0026lt; days; k++) { for (int i = 0; i \u0026lt; cells.length; i++) { int cell = cells[i]; int nextCell; int prevCell; int activenumber; if (i == 0) { // edge cases nextCell = cells[1]; prevCell = 0; } else if (i == cells.length - 1) { // edge case prevCell = cells[cells.length - 2]; nextCell = 0; } else { nextCell = cells[i + 1]; prevCell = cells[i - 1]; } if (nextCell == prevCell) { // set it to inactive activenumber = 0; } else { //set it to active activenumber = 1; } newCells[i] = activenumber; } for (int i = 0; i \u0026lt; 8; i++) { cells[i] = newCells[i]; } } return newCells; } public static void main(String[] args) { int[] array = {1,0,0,0,0,1,0,0}; int days = 1; array = cellCompete(array, days); for (int i = 0; i \u0026lt; array.length; i++) { System.out.print(array[i]); } } } ","permalink":"https://volyx.in/posts/2020-06-26-cell-complete-imported/","summary":"\u003cp\u003eCell compete:\u003c/p\u003e\n\u003cp\u003eEight houses, represented as a cells, are arranged as a straight line.\nEach days every cells competes with adjacent cells. An integer value 1\nrepresents an active cell and a value of 0 represent an inactive cell.\nif the neigbour on both the sides of the cell are both active or inactive,\nthe cell become inactive in the next day, otherwise the become active.\nThe two cells on each or have a single adjacent cell, so asume that\nthe onoccupied space in the opposite side is an inactive cell. even after\nupdating the cell state, consider its previus state when updating the state\nof ohters cells. The state information of the cells should be updated simultaneosly.\u003c/p\u003e","title":"Cell Complete"},{"content":"Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node\u0026rsquo;s value equals the given value. Return the subtree rooted with that node. If such node doesn\u0026rsquo;t exist, you should return NULL.\nFor example,\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Given the tree: 4 / \\ 2 7 / \\ 1 3 And the value to search: 2 You should return this subtree: 2 / \\ 1 3 In the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.\nNote that an empty tree is represented by NULL, therefore you would see the expected output (serialized tree format) as [], not null.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode searchBST(TreeNode root, int val) { if (root == null) return null; if (root.val == val) return root; return root.val \u0026gt; val? searchBST(root.left, val) : searchBST(root.right, val); } } ","permalink":"https://volyx.in/posts/2020-06-26-search-in-a-binary-search-tree-imported/","summary":"\u003cp\u003eGiven the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node\u0026rsquo;s value equals the given value. Return the subtree rooted with that node. If such node doesn\u0026rsquo;t exist, you should return NULL.\u003c/p\u003e\n\u003cp\u003eFor example,\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGiven the tree:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      2   7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    1   3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eAnd the value to search: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eYou should return this subtree:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      2     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     / \\   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    1   3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eIn the example above, if we want to search the value 5, since there is no node with value 5, we should return NULL.\u003c/p\u003e","title":"Search in a Binary Search Tree"},{"content":"\nYou are climbing a stair case. It takes n steps to reach to the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nNote: Given n will be a positive integer.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: 2 Output: 2 Explanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps Example 2: Input: 3 Output: 3 Explanation: There are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step Recursive Solution: 1 2 3 4 5 6 7 8 9 10 class Solution { public int climbStairs(int n) { return climbStairs(0, n); } int climbStairs(int i, int n) { if (i \u0026gt; n) return 0; if (i == n) return 1; return climbStairs(i + 1, n) + climbStairs(i + 2, n); } } Recursive Solution with Memo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int climbStairs(int n) { int[] memo = new int[n + 1]; return climbStairs(0, n, memo); } int climbStairs(int i, int n, int[] memo) { if (i \u0026gt; n) return 0; if (i == n) return 1; if (memo[i] \u0026gt; 0) { return memo[i]; } return memo[i] = climbStairs(i + 1, n, memo) + climbStairs(i + 2, n, memo); } } ","permalink":"https://volyx.in/posts/2020-06-25-climbing-stairs-imported/","summary":"\u003cp\u003e\u003cimg alt=\"Climbing Stairs\" loading=\"lazy\" src=\"https://leetcode.com/problems/climbing-stairs/\"\u003e\u003c/p\u003e\n\u003cp\u003eYou are climbing a stair case. It takes n steps to reach to the top.\u003c/p\u003e\n\u003cp\u003eEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\u003c/p\u003e\n\u003cp\u003eNote: Given n will be a positive integer.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are two ways to climb to the top.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1. 1 step \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1 step\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2. 2 steps\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: There are three ways to climb to the top.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1. 1 step \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1 step \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1 step\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e2. 1 step \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 2 steps\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e3. 2 steps \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1 step\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"recursive-solution\"\u003eRecursive Solution:\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclimbStairs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e climbStairs(0, n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclimbStairs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e n) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e n) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e climbStairs(i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1, n) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e climbStairs(i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 2, n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"recursive-solution-with-memo\"\u003eRecursive Solution with Memo\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclimbStairs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e memo \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003en \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e climbStairs(0, n, memo);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclimbStairs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e memo) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e n) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e n) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (memo\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e memo\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }     \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e memo\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e climbStairs(i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1, n, memo) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e climbStairs(i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 2, n, memo);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Climbing Stairs"},{"content":"\nA string s of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.\n1 2 3 4 5 6 7 8 Example 1: Input: s = \u0026#34;ababcbacadefegdehijhklij\u0026#34; Output: [9,7,8] Explanation: The partition is \u0026#34;ababcbaca\u0026#34;, \u0026#34;defegde\u0026#34;, \u0026#34;hijhklij\u0026#34;. This is a partition so that each letter appears in at most one part. A partition like \u0026#34;ababcbacadefegde\u0026#34;, \u0026#34;hijhklij\u0026#34; is incorrect, because it splits s into less parts. Note:\ns will have length in range [1, 500]. s will consist of lowercase English letters (\u0026lsquo;a\u0026rsquo; to \u0026lsquo;z\u0026rsquo;) only. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public List\u0026lt;Integer\u0026gt; partitionLabels(String s) { int[] last = new int[26]; for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); last[c - \u0026#39;a\u0026#39;] = Math.max(i, last[c - \u0026#39;a\u0026#39;]); } int i = 0; int j = 0; int count = 0; List\u0026lt;Integer\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (i \u0026lt; s.length()) { char c = s.charAt(i); count++; j = Math.max(last[c - \u0026#39;a\u0026#39;], j); if (i == j) { res.add(count); count = 0; } i++; } return res; } } Solution 2021-10-14 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public List\u0026lt;Integer\u0026gt; partitionLabels(String s) { if (s.length() == 0) return Collections.emptyList(); int[] rightMostIndexes = new int[26]; // O(C) for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); rightMostIndexes[c - \u0026#39;a\u0026#39;] = Math.max(rightMostIndexes[c - \u0026#39;a\u0026#39;], i); } List\u0026lt;Integer\u0026gt; parts = new ArrayList\u0026lt;\u0026gt;(); // O(C) int currentRightMostIndex = 0; int left = 0; // 4 for (int i = 0; i \u0026lt; s.length(); i++) { // i = 4 char c = s.charAt(i); currentRightMostIndex = Math.max(rightMostIndexes[c - \u0026#39;a\u0026#39;], currentRightMostIndex); if (i == currentRightMostIndex) { parts.add(currentRightMostIndex - left + 1); left = i + 1; } } return parts; } } ","permalink":"https://volyx.in/posts/2020-06-24-partition-labels-imported/","summary":"\u003cp\u003e\u003cimg alt=\"763. Partition Labels\" loading=\"lazy\" src=\"https://leetcode.com/problems/partition-labels/\"\u003e\u003c/p\u003e\n\u003cp\u003eA string s of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: s = \u0026#34;ababcbacadefegdehijhklij\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [9,7,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe partition is \u0026#34;ababcbaca\u0026#34;, \u0026#34;defegde\u0026#34;, \u0026#34;hijhklij\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThis is a partition so that each letter appears in at most one part.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA partition like \u0026#34;ababcbacadefegde\u0026#34;, \u0026#34;hijhklij\u0026#34; is incorrect, because it splits s into less parts.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"763. Partition Labels"},{"content":"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\n1 2 3 4 Input: [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. Example 2:\n1 2 3 4 Input: [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public int rob(int[] nums) { int n = nums.length; if (n == 0) { return 0; } if (n == 1) { return nums[0]; } return Math.max(robPart(nums, 0, nums.length - 1), robPart(nums, 1, nums.length)); } int robPart(int[] nums, int start, int end) { if (start == end) { return 0; } if (end - start == 1) { return nums[start]; } int[] dp = new int[nums.length]; dp[start] = nums[start]; dp[start + 1] = Math.max(nums[start], nums[start + 1]); for (int i = start + 2; i \u0026lt; end; i++){ dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]); } return Math.max(dp[end - 1], dp[end - 2]); } } ","permalink":"https://volyx.in/posts/2020-06-23-house-robber-ii-imported/","summary":"\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\u003c/p\u003e\n\u003cp\u003eGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\u003c/p\u003e","title":"House Robber II"},{"content":"Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).\n1 2 3 4 5 6 Example 1: Input: [1,3,5,4,7] Output: 3 Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. Even though [1,3,5,7] is also an increasing subsequence, it\u0026#39;s not a continuous one where 5 and 7 are separated by 4. 1 2 3 4 5 Example 2: Input: [2,2,2,2,2] Output: 1 Explanation: The longest continuous increasing subsequence is [2], its length is 1. Note: Length of the array will not exceed 10,000.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int findLengthOfLCIS(int[] nums) { int ans = 0; int anchor = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if (i \u0026gt; 0 \u0026amp;\u0026amp; nums[i - 1] \u0026gt;= nums[i]) anchor = i; ans = Math.max(ans, i - anchor + 1); System.out.printf(\u0026#34;i %d anchor %d %n\u0026#34;, i, anchor); } return ans; } } Solution 2021-10-26 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int findLengthOfLCIS(int[] nums) { int[] dp = new int[nums.length]; Arrays.fill(dp, 1); int max = 1; for (int i = 1; i \u0026lt; nums.length; i++) { if (nums[i] \u0026gt; nums[i - 1]) { dp[i] = Math.max(dp[i - 1] + 1, dp[i]); } max = Math.max(dp[i], max); } return max; } } ","permalink":"https://volyx.in/posts/2020-06-23-longest-continuous-increasing-subsequence-imported/","summary":"\u003cp\u003eGiven an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,3,5,4,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEven though [1,3,5,7] is also an increasing subsequence, it\u0026#39;s not a continuous one where 5 and 7 are separated by 4. \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [2,2,2,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The longest continuous increasing subsequence is [2], its length is 1. \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote: Length of the array will not exceed 10,000.\u003c/p\u003e","title":"Longest Continuous Increasing Subsequence"},{"content":"Given a binary array, find the maximum number of consecutive 1s in this array.\nExample 1:\n1 2 3 4 Input: [1,1,0,1,1,1] Output: 3 Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3. Note:\nThe input array will only contain 0 and 1. The length of input array is a positive integer and will not exceed 10,000 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int findMaxConsecutiveOnes(int[] nums) { int sum = 0; int ans = 0; for (int i = 0; i \u0026lt; nums.length; i++) { if (nums[i] == 1) { sum++; } else { sum = 0; } ans = Math.max(ans, sum); } return ans; } } ","permalink":"https://volyx.in/posts/2020-06-23-max-consecutive-ones-imported/","summary":"\u003cp\u003eGiven a binary array, find the maximum number of consecutive 1s in this array.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,1,0,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The first two digits or the last three digits are consecutive 1s.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    The maximum number of consecutive 1s is 3.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe input array will only contain 0 and 1.\u003c/li\u003e\n\u003cli\u003eThe length of input array is a positive integer and will not exceed 10,000\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolution:\u003c/p\u003e","title":"Max Consecutive Ones"},{"content":"Given an array A of 0s and 1s, we may change up to K values from 0 to 1.\nReturn the length of the longest (contiguous) subarray that contains only 1s.\nExample 1:\n1 2 3 4 5 Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2 Output: 6 Explanation: [1,1,1,0,0,1,1,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. Example 2:\n1 2 3 4 5 Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3 Output: 10 Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] Bolded numbers were flipped from 0 to 1. The longest subarray is underlined. Note:\n1 \u0026lt;= A.length \u0026lt;= 20000 0 \u0026lt;= K \u0026lt;= A.length A[i] is 0 or 1 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int longestOnes(int[] A, int K) { int i = 0; int j = 0; while (i \u0026lt; A.length) { if (A[i] == 0) { K--; } if (K \u0026lt; 0) { if (A[j] == 0) { K++; } j++; } i++; } return i - j; } } ","permalink":"https://volyx.in/posts/2020-06-23-max-consecutive-ones-iii-imported/","summary":"\u003cp\u003eGiven an array A of 0s and 1s, we may change up to K values from 0 to 1.\u003c/p\u003e\n\u003cp\u003eReturn the length of the longest (contiguous) subarray that contains only 1s.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[1,1,1,0,0,1,1,1,1,1,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBolded numbers were flipped from 0 to 1.  The longest subarray is underlined.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Max consecutive ones III"},{"content":"In an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\nGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographicaly in this alien language.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: words = [\u0026#34;hello\u0026#34;,\u0026#34;leetcode\u0026#34;], order = \u0026#34;hlabcdefgijkmnopqrstuvwxyz\u0026#34; Output: true Explanation: As \u0026#39;h\u0026#39; comes before \u0026#39;l\u0026#39; in this language, then the sequence is sorted. Example 2: Input: words = [\u0026#34;word\u0026#34;,\u0026#34;world\u0026#34;,\u0026#34;row\u0026#34;], order = \u0026#34;worldabcefghijkmnpqstuvxyz\u0026#34; Output: false Explanation: As \u0026#39;d\u0026#39; comes after \u0026#39;l\u0026#39; in this language, then words[0] \u0026gt; words[1], hence the sequence is unsorted. Example 3: Input: words = [\u0026#34;apple\u0026#34;,\u0026#34;app\u0026#34;], order = \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34; Output: false Explanation: The first three characters \u0026#34;app\u0026#34; match, and the second string is shorter (in size.) According to lexicographical rules \u0026#34;apple\u0026#34; \u0026gt; \u0026#34;app\u0026#34;, because \u0026#39;l\u0026#39; \u0026gt; \u0026#39;∅\u0026#39;, where \u0026#39;∅\u0026#39; is defined as the blank character which is less than any other character (More info). Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 class Solution { public boolean isAlienSorted(String[] words, String order) { if (words.length == 0) { return true; } if (words.length == 1) { return true; } Map\u0026lt;Character, Integer\u0026gt; alphabet = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; order.length(); i++) { alphabet.put(Character.valueOf(order.charAt(i)), i); // 012 } String prev = words[0]; // ac // b for (int i = 1; i \u0026lt; words.length; i++) { String current = words[i]; // b if (!isSorted(prev, current, alphabet)) { return false; } prev = current; } return true; } boolean isSorted(String a, String b, Map\u0026lt;Character, Integer\u0026gt; alphabet) { for (int i = 0; i \u0026lt; Math.min(a.length(), b.length()); i++) { char c1 = a.charAt(i); // a char c2 = b.charAt(i); // b int index1 = alphabet.get(Character.valueOf(c1)); // 0 int index2 = alphabet.get(Character.valueOf(c2)); // 1 // System.out.println(c1 +\u0026#34; \u0026#34; + c2 + \u0026#34; \u0026#34; + index1 + \u0026#34; \u0026lt; \u0026#34; + index2); if (index1 \u0026lt; index2) { return true; } else if (index1 == index2) { continue; } else { return false; } } // for return a.length() \u0026lt;= b.length(); } } ## Solution 15-06-2021 ```java class Solution { public boolean isAlienSorted(String[] words, String order) { for (int i = 0; i \u0026lt; words.length - 1; i++) { String w1 = words[i]; String w2 = words[i + 1]; if (less(w1, w2, order)) { continue; } else { return false; } } return true; } boolean less(String w1, String w2, String order) { int len1 = w1.length(); int len2 = w2.length(); for (int i = 0; i \u0026lt; Math.min(len1, len2); i++) { int idx1 = order.indexOf(w1.charAt(i)); int idx2 = order.indexOf(w2.charAt(i)); if (idx1 \u0026lt; idx2) { return true; } else if (idx1 == idx2) { continue; } else { return false; } } return len1 \u0026lt;= len2; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public boolean isAlienSorted(String[] words, String order) { int n = words.length; if (n == 0 || n == 1) return true; for (int i = 0; i \u0026lt; n - 1; i++) { if (!lessThan(words[i], words[i + 1], order)) { return false; } } return true; } boolean lessThan(String w1, String w2, String order) { int i = 0; int len1 = w1.length(); int len2 = w2.length(); while (i \u0026lt; Math.max(len1, len2)) { int id1 = i \u0026lt; len1 ? order.indexOf(w1.charAt(i)) : -1; int id2 = i \u0026lt; len2 ? order.indexOf(w2.charAt(i)): -1; if (id1 == id2) { i++; continue; } else { return id1 \u0026lt; id2; } } return true; } } Solution 2022-01-22 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public boolean isAlienSorted(String[] words, String order) { for (int i = 0; i \u0026lt; words.length - 1; i++) { if (!isSorted(words[i], words[i + 1], order)) { return false; } } return true; } boolean isSorted(String w1, String w2, String order) { int len1 = w1.length(); int len2 = w2.length(); int i = 0; while (i \u0026lt; Math.min(len1, len2)) { char c1 = w1.charAt(i); char c2 = w2.charAt(i); if (order.indexOf(c1) \u0026lt; order.indexOf(c2)) { return true; } else if (order.indexOf(c1) \u0026gt; order.indexOf(c2)) { return false; } i++; } return len1 \u0026lt;= len2; } } ","permalink":"https://volyx.in/posts/2020-06-23-verifying-an-alien-dictionary/","summary":"\u003cp\u003eIn an alien language, surprisingly they also use english lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\u003c/p\u003e\n\u003cp\u003eGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographicaly in this alien language.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;hello\u0026#34;,\u0026#34;leetcode\u0026#34;], order = \u0026#34;hlabcdefgijkmnopqrstuvwxyz\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: As \u0026#39;h\u0026#39; comes before \u0026#39;l\u0026#39; in this language, then the sequence is sorted.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;word\u0026#34;,\u0026#34;world\u0026#34;,\u0026#34;row\u0026#34;], order = \u0026#34;worldabcefghijkmnpqstuvxyz\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: As \u0026#39;d\u0026#39; comes after \u0026#39;l\u0026#39; in this language, then words[0] \u0026gt; words[1], hence the sequence is unsorted.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: words = [\u0026#34;apple\u0026#34;,\u0026#34;app\u0026#34;], order = \u0026#34;abcdefghijklmnopqrstuvwxyz\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: The first three characters \u0026#34;app\u0026#34; match, and the second string is shorter (in size.) According to lexicographical rules \u0026#34;apple\u0026#34; \u0026gt; \u0026#34;app\u0026#34;, because \u0026#39;l\u0026#39; \u0026gt; \u0026#39;∅\u0026#39;, where \u0026#39;∅\u0026#39; is defined as the blank character which is less than any other character (More info).\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Verifying an Alien Dictionary"},{"content":"Design a data structure that supports all following operations in average O(1) time.\ninsert(val): Inserts an item val to the set if not already present. remove(val): Removes an item val from the set if present. getRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 Example: // Init an empty set. RandomizedSet randomSet = new RandomizedSet(); // Inserts 1 to the set. Returns true as 1 was inserted successfully. randomSet.insert(1); // Returns false as 2 does not exist in the set. randomSet.remove(2); // Inserts 2 to the set, returns true. Set now contains [1,2]. randomSet.insert(2); // getRandom should return either 1 or 2 randomly. randomSet.getRandom(); // Removes 1 from the set, returns true. Set now contains [2]. randomSet.remove(1); // 2 was already in the set, so return false. randomSet.insert(2); // Since 2 is the only number in the set, getRandom always return 2. randomSet.getRandom(); Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class RandomizedSet { private Random RANDOM = new Random(); private Map\u0026lt;Integer, Integer\u0026gt; valueToIndex = new HashMap\u0026lt;\u0026gt;(); private List\u0026lt;Integer\u0026gt; values = new ArrayList\u0026lt;\u0026gt;(); /** Initialize your data structure here. */ public RandomizedSet() { } /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ public boolean insert(int val) { Integer index = valueToIndex.get(val); if (index != null) { return false; } values.add(val); valueToIndex.put(val, values.size() - 1); return true; } /** Removes a value from the set. Returns true if the set contained the specified element. */ public boolean remove(int val) { Integer index = valueToIndex.remove(val); if (index == null) { return false; } int lastIndex = values.size() - 1; if (index != lastIndex) { Integer prev = values.get(lastIndex); values.set(index, prev); valueToIndex.put(prev, index); } values.remove(lastIndex); return true; } /** Get a random element from the set. */ public int getRandom() { int index = RANDOM.nextInt(valueToIndex.size()); return values.get(index); } } /** * Your RandomizedSet object will be instantiated and called as such: * RandomizedSet obj = new RandomizedSet(); * boolean param_1 = obj.insert(val); * boolean param_2 = obj.remove(val); * int param_3 = obj.getRandom(); */ Solution 2022-01-15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class RandomizedSet { boolean debug = false; Random random = new Random(); Map\u0026lt;Integer, Integer\u0026gt; valIndex = new HashMap\u0026lt;\u0026gt;(); Integer[] array = new Integer[2 * 10_000 + 1]; int size = 0; public RandomizedSet() { } public boolean insert(int val) { if (debug) System.out.println(\u0026#34;i \u0026#34; + val); Integer index = valIndex.get(val); if (index != null) { return false; } array[size] = val; size++; valIndex.put(val, size - 1); if (debug) System.out.println(\u0026#34;array \u0026#34; + array + \u0026#34; map \u0026#34; + valIndex); return true; } public boolean remove(int val) { if (debug) System.out.println(\u0026#34;r \u0026#34; + val); Integer index = valIndex.remove(val); if (index == null) { return false; } array[index] = array[size - 1]; array[size - 1] = null; size--; if (size != 0) { valIndex.put(array[index], index); } if (debug) System.out.println(\u0026#34;array \u0026#34; + array + \u0026#34; map \u0026#34; + valIndex); return true; } public int getRandom() { return array[random.nextInt(size)]; } } /** * Your RandomizedSet object will be instantiated and called as such: * RandomizedSet obj = new RandomizedSet(); * boolean param_1 = obj.insert(val); * boolean param_2 = obj.remove(val); * int param_3 = obj.getRandom(); */ ","permalink":"https://volyx.in/posts/2020-06-22-insert-delete-get-random-o-1/","summary":"\u003cp\u003eDesign a data structure that supports all following operations in average O(1) time.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003einsert(val): Inserts an item val to the set if not already present.\u003c/li\u003e\n\u003cli\u003eremove(val): Removes an item val from the set if present.\u003c/li\u003e\n\u003cli\u003egetRandom: Returns a random element from current set of elements. Each element must have the same probability of being returned.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Init an empty set.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eRandomizedSet randomSet = new RandomizedSet();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Inserts 1 to the set. Returns true as 1 was inserted successfully.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.insert(1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Returns false as 2 does not exist in the set.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.remove(2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Inserts 2 to the set, returns true. Set now contains [1,2].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.insert(2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// getRandom should return either 1 or 2 randomly.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.getRandom();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Removes 1 from the set, returns true. Set now contains [2].\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.remove(1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// 2 was already in the set, so return false.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.insert(2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e// Since 2 is the only number in the set, getRandom always return 2.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erandomSet.getRandom();\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Insert delete get random O(1)"},{"content":"Given an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.\nHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\nNote: You are not suppose to use the library\u0026rsquo;s sort function for this problem.\nExample:\n1 2 Input: [2,0,2,1,1,0] Output: [0,0,1,1,2,2] Follow up:\nA rather straight forward solution is a two-pass algorithm using counting sort. First, iterate the array counting number of 0\u0026rsquo;s, 1\u0026rsquo;s, and 2\u0026rsquo;s, then overwrite array with total number of 0\u0026rsquo;s, then 1\u0026rsquo;s and followed by 2\u0026rsquo;s. Could you come up with a one-pass algorithm using only constant space? Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public void sortColors(int[] nums) { int l = 0; int m = 0; int h = nums.length - 1; while (m \u0026lt;= h) { if (nums[m] == 0) { swap(nums, l, m); l++; m++; } else if (nums[m] == 1) { m++; } else if (nums[m] == 2) { swap(nums, m, h); h--; } } } void swap(int[] nums, int i, int j) { int c = nums[i]; nums[i] = nums[j]; nums[j] = c; } } ","permalink":"https://volyx.in/posts/2020-06-20-sort-colors-imported/","summary":"\u003cp\u003eGiven an array with n objects colored red, white or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white and blue.\u003c/p\u003e\n\u003cp\u003eHere, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.\u003c/p\u003e\n\u003cp\u003eNote: You are not suppose to use the library\u0026rsquo;s sort function for this problem.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [2,0,2,1,1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,0,1,1,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eFollow up:\u003c/p\u003e","title":"Sort Colors"},{"content":"Given an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.\nYou may return any answer array that satisfies this condition.\n1 2 3 4 5 Example 1: Input: [3,1,2,4] Output: [2,4,3,1] The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted. Note:\n1 \u0026lt;= A.length \u0026lt;= 5000 0 \u0026lt;= A[i] \u0026lt;= 5000 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int[] sortArrayByParity(int[] A) { int n = A.length; int i = 0; int j = 1; while (i \u0026lt; n \u0026amp;\u0026amp; j \u0026lt; n) { if (A[i] % 2 == 1) { j = i + 1; while (j \u0026lt; n \u0026amp;\u0026amp; A[j] % 2 == 1) { j++; } if (j == n) { break; } int c = A[i]; A[i] = A[j]; A[j] = c; } i++; } return A; } } ","permalink":"https://volyx.in/posts/2020-06-19-sort-array-by-parity-imported/","summary":"\u003cp\u003eGiven an array A of non-negative integers, return an array consisting of all the even elements of A, followed by all the odd elements of A.\u003c/p\u003e\n\u003cp\u003eYou may return any answer array that satisfies this condition.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [3,1,2,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [2,4,3,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Sort Array By Parity"},{"content":"Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.\nSort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.\nYou may return any answer array that satisfies this condition.\nExample 1:\n1 2 3 Input: [4,2,5,7] Output: [4,5,2,7] Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted. Note:\n2 \u0026lt;= A.length \u0026lt;= 20000 A.length % 2 == 0 0 \u0026lt;= A[i] \u0026lt;= 1000 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int[] sortArrayByParityII(int[] A) { int n = A.length; int i = 0; int j = 1; while (i \u0026lt; n) { if (A[i] % 2 == 1) { while (A[j] % 2 == 1) { j = j + 2; } int c = A[i]; A[i] = A[j]; A[j] = c; } i = i + 2; } return A; } } ","permalink":"https://volyx.in/posts/2020-06-19-sort-array-by-parity-ii-imported/","summary":"\u003cp\u003eGiven an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.\u003c/p\u003e\n\u003cp\u003eSort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.\u003c/p\u003e\n\u003cp\u003eYou may return any answer array that satisfies this condition.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [4,2,5,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,5,2,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Sort Array By Parity II"},{"content":"Given n, how many structurally unique BST\u0026rsquo;s (binary search trees) that store values 1 \u0026hellip; n?\nExample:\n1 2 3 4 5 6 7 8 9 10 Input: 3 Output: 5 Explanation: Given n = 3, there are a total of 5 unique BST\u0026#39;s: 1 3 3 2 1 \\ / / / \\ \\ 3 2 1 1 3 2 / / \\ \\ 2 1 2 3 Notes: Catalan\u0026rsquo;s numbers:\n1 2 3 C(0) = C(1) = 1 C(2) = C(1) * C(0) + C(0) * C(1) C(3) = C(2) * C(1) + C(1) * C(1) + C(1) * C(2) Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int numTrees(int n) { int[] dp = new int[n + 1]; dp[0] = 1; dp[1] = 1; for (int i = 2; i \u0026lt;= n; i++) { for (int j = 0; j \u0026lt;= i - 1; j++) { dp[i] += dp[j] * dp[i - j - 1]; } } System.out.println(Arrays.toString(dp)); return dp[n]; } } ","permalink":"https://volyx.in/posts/2020-06-19-unique-binary-search-trees-imported/","summary":"\u003cp\u003eGiven n, how many structurally unique BST\u0026rsquo;s (binary search trees) that store values 1 \u0026hellip; n?\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGiven n = 3, there are a total of 5 unique BST\u0026#39;s:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   1         3     3      2      1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \\       /     /      / \\      \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     3     2     1      1   3      2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /     /       \\                 \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   2     1         2                 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNotes: Catalan\u0026rsquo;s numbers:\u003c/p\u003e","title":"Unique Binary Search Trees"},{"content":"Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.\nHere, a circular array means the end of the array connects to the beginning of the array. (Formally, C[i] = A[i] when 0 \u0026lt;= i \u0026lt; A.length, and C[i+A.length] = C[i] when i \u0026gt;= 0.)\nAlso, a subarray may only include each element of the fixed buffer A at most once. (Formally, for a subarray C[i], C[i+1], \u0026hellip;, C[j], there does not exist i \u0026lt;= k1, k2 \u0026lt;= j with k1 % A.length = k2 % A.length.)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Example 1: Input: [1,-2,3,-2] Output: 3 Explanation: Subarray [3] has maximum sum 3 Example 2: Input: [5,-3,5] Output: 10 Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10 Example 3: Input: [3,-1,2,-1] Output: 4 Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4 Example 4: Input: [3,-2,2,-3] Output: 3 Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3 Example 5: Input: [-2,-3,-1] Output: -1 Explanation: Subarray [-1] has maximum sum -1 Note:\n-30000 \u0026lt;= A[i] \u0026lt;= 30000 1 \u0026lt;= A.length \u0026lt;= 30000 Dev notes:\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int maxSubarraySumCircular(int[] A) { int N = A.length; int ans = A[0]; int curr = A[0]; for (int i = 1; i \u0026lt; N; i++) { curr = Math.max(curr, 0) + A[i]; ans = Math.max(ans, curr); } int[] rightsums = new int[N]; rightsums[N - 1] = A[N - 1]; for (int i = N - 2; i \u0026gt;= 0; i--) { rightsums[i] = rightsums[i + 1] + A[i]; } int[] maxright = new int[N]; maxright[N-1] = A[N-1]; for (int i = N - 2; i \u0026gt;= 0; i--) { maxright[i] = Math.max(maxright[i + 1], rightsums[i]); } int leftsum = 0; for (int i = 0; i \u0026lt; N - 2; i++) { leftsum +=A[i]; ans = Math.max(ans, leftsum + maxright[i + 2]); } return ans; } } ","permalink":"https://volyx.in/posts/2020-06-18-maximum-sum-circular-subarray-imported/","summary":"\u003cp\u003eGiven a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.\u003c/p\u003e\n\u003cp\u003eHere, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 \u0026lt;= i \u0026lt; A.length, and C[i+A.length] = C[i] when i \u0026gt;= 0.)\u003c/p\u003e\n\u003cp\u003eAlso, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], \u0026hellip;, C[j], there does not exist i \u0026lt;= k1, k2 \u0026lt;= j with k1 % A.length = k2 % A.length.)\u003c/p\u003e","title":"Maximum Sum Circular Subarray"},{"content":"\nGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nExample:\n1 2 3 Input: [-2,1,-3,4,-1,2,1,-5,4], Output: 6 Explanation: [4,-1,2,1] has the largest sum = 6. Follow up:\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int maxSubArray(int[] nums) { if (nums.length == 1) { return nums[0]; } int dp = nums[0]; int answer = nums[0]; for (int i = 1; i \u0026lt; nums.length; i++) { dp = Math.max(dp, 0) + nums[i]; answer = Math.max(answer, dp); } return answer; } } Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int maxSubArray(int[] nums) { int n = nums.length; int[] dp = new int[n]; int max = nums[0]; for (int i = 0; i \u0026lt; n; i++) { if (i == 0) { dp[i] = nums[i]; } else { dp[i] = Math.max(nums[i], dp[i - 1] + nums[i]); max = Math.max(dp[i], max); } } return max; } } ","permalink":"https://volyx.in/posts/2020-06-17-maximum-subarray/","summary":"\u003cp\u003e\u003cimg alt=\"53. Maximum Subarray\" loading=\"lazy\" src=\"https://leetcode.com/problems/maximum-subarray/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [-2,1,-3,4,-1,2,1,-5,4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [4,-1,2,1] has the largest sum = 6.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eFollow up:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolution:\u003c/p\u003e","title":"53. Maximum Subarray"},{"content":"Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou may assume no duplicates in the array.\nExample 1:\n1 2 Input: [1,3,5,6], 5 Output: 2 Example 2:\n1 2 Input: [1,3,5,6], 2 Output: 1 Example 3:\n1 2 Input: [1,3,5,6], 7 Output: 4 Example 4:\n1 2 Input: [1,3,5,6], 0 Output: 0 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int searchInsert(int[] nums, int target) { int l = 0; int r = nums.length - 1; while (l \u0026lt;= r) { int mid = l + (r - l) / 2; if (nums[mid] \u0026lt; target) { l = mid + 1; } else { r = mid - 1; } } return l; } } ","permalink":"https://volyx.in/posts/2020-06-16-search-insert-position-imported/","summary":"\u003cp\u003eGiven a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\u003c/p\u003e\n\u003cp\u003eYou may assume no duplicates in the array.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,3,5,6], 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,3,5,6], 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 3:\u003c/p\u003e","title":"Search Insert Position"},{"content":"Given an integer, write a function to determine if it is a power of two.\nExample 1:\n1 2 3 Input: 1 Output: true Explanation: 20 = 1 Example 2:\n1 2 3 Input: 16 Output: true Explanation: 24 = 16 Example 3:\n1 2 Input: 218 Output: false Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public boolean isPowerOfTwo2(int n) { if (n == 0 ) { return false; } if (n == 1) { return true; } while (n % 2 == 0 \u0026amp;\u0026amp; n \u0026gt; 2) { n = n / 2; } return n == 0 || n == 2; } public boolean isPowerOfTwo(int n) { if (n == 0 ) { return false; } if (n == Integer.MIN_VALUE) { return false; } return (n \u0026amp; (n - 1)) == 0; } } ","permalink":"https://volyx.in/posts/2020-06-09-power-of-two-imported/","summary":"\u003cp\u003eGiven an integer, write a function to determine if it is a power of two.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 20 = 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 24 = 16\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 3:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: 218\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Power of two"},{"content":"A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.\nNow given an M x N matrix, return True if and only if the matrix is Toeplitz.\nExample 1:\n1 2 3 4 5 6 7 8 9 10 11 Input: matrix = [ [1,2,3,4], [5,1,2,3], [9,5,1,2] ] Output: True Explanation: In the above grid, the diagonals are: \u0026#34;[9]\u0026#34;, \u0026#34;[5, 5]\u0026#34;, \u0026#34;[1, 1, 1]\u0026#34;, \u0026#34;[2, 2, 2]\u0026#34;, \u0026#34;[3, 3]\u0026#34;, \u0026#34;[4]\u0026#34;. In each diagonal all elements are the same, so the answer is True. Example 2:\n1 2 3 4 5 6 7 8 Input: matrix = [ [1,2], [2,2] ] Output: False Explanation: The diagonal \u0026#34;[1, 2]\u0026#34; has different elements. Note:\nmatrix will be a 2D array of integers. matrix will have a number of rows and columns in range [1, 20]. matrix[i][j] will be integers in range [0, 99]. Follow up:\nWhat if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once? What if the matrix is so large that you can only load up a partial row into the memory at once? Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int uniquePaths(int m, int n) { int[][] dp = new int[n][m]; Arrays.fill(dp[0], 1); for (int i = 1; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { dp[i][j] += dp[i - 1][j]; if (j \u0026gt; 0) { dp[i][j] += dp[i][j - 1]; } } } return dp[n-1][m-1]; } } ","permalink":"https://volyx.in/posts/2020-06-09-toeplitz-matrix-imported/","summary":"\u003cp\u003eA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same element.\u003c/p\u003e\n\u003cp\u003eNow given an M x N matrix, return True if and only if the matrix is Toeplitz.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ematrix = [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [1,2,3,4],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [5,1,2,3],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [9,5,1,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: True\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn the above grid, the diagonals are:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026#34;[9]\u0026#34;, \u0026#34;[5, 5]\u0026#34;, \u0026#34;[1, 1, 1]\u0026#34;, \u0026#34;[2, 2, 2]\u0026#34;, \u0026#34;[3, 3]\u0026#34;, \u0026#34;[4]\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eIn each diagonal all elements are the same, so the answer is True.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Toeplitz Matrix"},{"content":"A robot is located at the top-left corner of a m x n grid (marked \u0026lsquo;Start\u0026rsquo; in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \u0026lsquo;Finish\u0026rsquo; in the diagram below).\nHow many possible unique paths are there?\nAbove is a 7 x 3 grid. How many possible unique paths are there?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 Example 1: Input: m = 3, n = 2 Output: 3 Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. Right -\u0026gt; Right -\u0026gt; Down 2. Right -\u0026gt; Down -\u0026gt; Right 3. Down -\u0026gt; Right -\u0026gt; Right Example 2: Input: m = 7, n = 3 Output: 28 Constraints:\n1 \u0026lt;= m, n \u0026lt;= 100 It\u0026rsquo;s guaranteed that the answer will be less than or equal to 2 * 10 ^ 9. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int uniquePaths(int m, int n) { int[][] dp = new int[n][m]; Arrays.fill(dp[0], 1); for (int i = 1; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; m; j++) { dp[i][j] += dp[i - 1][j]; if (j \u0026gt; 0) { dp[i][j] += dp[i][j - 1]; } } } return dp[n-1][m-1]; } } Solution 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int uniquePaths(int m, int n) { int[][] dp = new int[m][n]; dp[0][0] = 1; for (int i = 0; i \u0026lt; m; i++) { for (int j = 0; j \u0026lt; n; j++) { if (i == 0 \u0026amp;\u0026amp; j == 0) continue; if (i \u0026gt; 0) { dp[i][j] += dp[i - 1][j]; } if (j \u0026gt; 0) { dp[i][j] += dp[i][j - 1]; } } } return dp[m-1][n-1]; } } ","permalink":"https://volyx.in/posts/2020-06-09-unique-paths-imported/","summary":"\u003cp\u003eA robot is located at the top-left corner of a m x n grid (marked \u0026lsquo;Start\u0026rsquo; in the diagram below).\u003c/p\u003e\n\u003cp\u003eThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked \u0026lsquo;Finish\u0026rsquo; in the diagram below).\u003c/p\u003e\n\u003cp\u003eHow many possible unique paths are there?\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-06-09-ex1.png\"\u003e\u003c/p\u003e\n\u003cp\u003eAbove is a 7 x 3 grid. How many possible unique paths are there?\u003c/p\u003e","title":"Unique Paths"},{"content":"You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: amount = 5, coins = [1, 2, 5] Output: 4 Explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 Example 2: Input: amount = 3, coins = [2] Output: 0 Explanation: the amount of 3 cannot be made up just with coins of 2. Example 3: Input: amount = 10, coins = [10] Output: 1 Note:\nYou can assume that\n0 \u0026lt;= amount \u0026lt;= 5000 1 \u0026lt;= coin \u0026lt;= 5000 the number of coins is less than 500 the answer is guaranteed to fit into signed 32-bit integer Recursive Solution 1 2 3 4 5 6 7 8 9 10 class Solution { public int change(int amount, int[] coins) { return change(0, amount, coins); } int change(int k, int amount, int[] coins) { if (amount == 0) return 1; if (amount \u0026lt; 0 || k == coins.length) return 0; return change(k, amount - coins[k], coins) + change(k + 1, amount, coins); } } Recursive with Memo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int change(int amount, int[] coins) { int[][] dp = new int[coins.length][amount + 1]; for (int i = 0; i \u0026lt; coins.length; i++) { Arrays.fill(dp[i], -1); } return change(0, amount, coins, dp); } int change(int k, int amount, int[] coins, int[][] dp) { if (amount == 0) return 1; if (amount \u0026lt; 0 || k == coins.length) return 0; if (dp[k][amount] != -1) return dp[k][amount]; return dp[k][amount] = change(k, amount - coins[k], coins, dp) + change(k + 1, amount, coins, dp); } } DP Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int change(int amount, int[] coins) { int[][] dp = new int[coins.length + 1][amount + 1]; for (int i = 0 ; i \u0026lt;= coins.length; i++) { dp[i][0] = 1; } for (int i = 1; i \u0026lt;= coins.length; i++) { for (int j = 1; j \u0026lt;= amount; j++) { if (j \u0026gt;= coins[i-1]) { dp[i][j] = dp[i][j - coins[i-1]] + dp[i-1][j]; } else { dp[i][j] = dp[i-1][j]; } } } return dp[coins.length][amount]; } } One Dimensionl DP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int change(int amount, int[] coins) { int[] dp = new int[amount + 1]; dp[0] = 1; for (int coin: coins) { for (int i = coin; i \u0026lt; dp.length; i++) { if (i - coin \u0026gt;= 0) { dp[i] += dp[i - coin]; } } } return dp[amount]; } } ","permalink":"https://volyx.in/posts/2020-06-08-coin-change-2-imported/","summary":"\u003cp\u003eYou are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: amount = 5, coins = [1, 2, 5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: there are four ways to make up the amount:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5=5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5=2+2+1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5=2+1+1+1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e5=1+1+1+1+1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: amount = 3, coins = [2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: the amount of 3 cannot be made up just with coins of 2.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: amount = 10, coins = [10] \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Coin Change 2"},{"content":"Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.\nNote: The number of people is less than 1,100.\n1 2 3 4 5 6 7 Example Input: [[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]] Output: [[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]] Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int[][] reconstructQueue(int[][] people) { Arrays.sort(people, (a,b) -\u0026gt; { int compare = Integer.compare(a[0], b[0]); if (compare != 0) { return -compare; } return Integer.compare(a[1], b[1]); }); List\u0026lt;int[]\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); for (int[] person: people) { list.add(person[1], person); } return list.toArray(new int[0][0]); } } Solution 2021-10-24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int[][] reconstructQueue(int[][] people) { Arrays.sort(people, (a, b) -\u0026gt; { int r = a[0] - b[0]; if (r == 0) return a[1] - b[1]; return -r; }); List\u0026lt;int[]\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int[] person: people) { int i = 0; int before = person[1]; while (i \u0026lt; res.size() \u0026amp;\u0026amp; before \u0026gt; 0) { if (res.get(i)[0] \u0026gt;= person[0]) { before--; } i++; } res.add(i, person); } int[][] ans = new int[people.length][2]; int i = 0; for (int[] p: res) { ans[i++] = p; } return ans; } } ","permalink":"https://volyx.in/posts/2020-06-07-queue-reconstruction-by-height-imported/","summary":"\u003cp\u003eSuppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.\u003c/p\u003e\n\u003cp\u003eNote:\nThe number of people is less than 1,100.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Queue Reconstruction by Height"},{"content":"Given a non-empty list of words, return the k most frequent elements.\nYour answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.\n1 2 3 4 5 6 Example 1: Input: [\u0026#34;i\u0026#34;, \u0026#34;love\u0026#34;, \u0026#34;leetcode\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;love\u0026#34;, \u0026#34;coding\u0026#34;], k = 2 Output: [\u0026#34;i\u0026#34;, \u0026#34;love\u0026#34;] Explanation: \u0026#34;i\u0026#34; and \u0026#34;love\u0026#34; are the two most frequent words. Note that \u0026#34;i\u0026#34; comes before \u0026#34;love\u0026#34; due to a lower alphabetical order. 1 2 3 4 5 6 Example 2: Input: [\u0026#34;the\u0026#34;, \u0026#34;day\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;sunny\u0026#34;, \u0026#34;the\u0026#34;, \u0026#34;the\u0026#34;, \u0026#34;the\u0026#34;, \u0026#34;sunny\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;is\u0026#34;], k = 4 Output: [\u0026#34;the\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;sunny\u0026#34;, \u0026#34;day\u0026#34;] Explanation: \u0026#34;the\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;sunny\u0026#34; and \u0026#34;day\u0026#34; are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively. Note:\nYou may assume k is always valid, 1 ≤ k ≤ number of unique elements. Input words contain only lowercase letters. Follow up:\nTry to solve it in O(n log k) time and O(n) extra space. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public List\u0026lt;String\u0026gt; topKFrequent(String[] words, int k) { Map\u0026lt;String, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); for (String word : words) { map.put(word, map.getOrDefault(word, 0) + 1); } PriorityQueue\u0026lt;String\u0026gt; queue = new PriorityQueue\u0026lt;\u0026gt;((a, b) -\u0026gt; { Integer compare = Integer.compare(map.get(a), map.get(b)); if (compare != 0) { return -compare; } return a.compareTo(b); }); for (String word : map.keySet()) { queue.add(word); } List\u0026lt;String\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); while (!queue.isEmpty() \u0026amp;\u0026amp; k \u0026gt; 0) { result.add(queue.poll()); k--; } return result; } } Solution 2021-09-03 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 class Solution { Queue\u0026lt;int[]\u0026gt; q; Map\u0026lt;String, Integer\u0026gt; wordIndex = new HashMap\u0026lt;\u0026gt;(); String[] words; int[][] heap; int n = 0; int k; public List\u0026lt;String\u0026gt; topKFrequent(String[] words, int k) { this.q = new PriorityQueue\u0026lt;int[]\u0026gt;((a, b) -\u0026gt; { return compare(a, b); }); this.k = k; this.words = words; Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; words.length; i++) { String word = words[i]; Integer index = wordIndex.get(word); if (index == null) { index = i; wordIndex.put(word, index); } freq.put(index, freq.getOrDefault(index, 0) + 1); } // System.out.println(\u0026#34;freq: \u0026#34; + freq); // System.out.println(\u0026#34;wordIndex: \u0026#34; + wordIndex); heap = new int[k + 1][]; for (var entry: freq.entrySet()) { int[] word = new int[] { entry.getKey(), entry.getValue()}; // System.out.println(\u0026#34;word: \u0026#34; + Arrays.toString(word)); add(word); // System.out.println(\u0026#34;after : \u0026#34; + Arrays.deepToString(heap)); // System.out.println(\u0026#34;q : \u0026#34; + Arrays.deepToString(q.toArray())); } List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (size() \u0026gt; 0) { // System.out.println(\u0026#34;min : \u0026#34; + Arrays.deepToString(heap)); int[] max = poll(); int index = max[0]; res.add(0, words[index]); } return res; } void add(int[] word) { // if (n \u0026lt; k) { // heap[++n] = word; // swim(n); // } else { // if (compare(word, heap[1]) \u0026gt; 0) { // heap[1] = word; // sink(n); // } // } q.add(word); if (size() \u0026gt; k) { poll(); } } // heap propery - min heap parent \u0026lt; child // change if parent \u0026gt; child; j \u0026gt; i void swim(int i) { int j = i / 2; if (j \u0026gt; 0 \u0026amp;\u0026amp; compare(heap[i], heap[j]) \u0026lt; 0) { swap(i, j); swim(j); } } int compare(int[] i, int[] j) { int c = Integer.compare(i[1], j[1]); if (c == 0) { c = - words[i[0]].compareTo(words[j[0]]); } // System.out.println(\u0026#34;\\tcompare \u0026#34; + compare + \u0026#34; \u0026#34; + i + \u0026#34; \u0026#34; + j); return c; } int[] poll() { // int[] max = heap[1]; // heap[1] = heap[n--]; // heap[n + 1][0] = -1; // heap[n + 1][1] = -1; // sink(1); // return max; return q.poll(); } int size() { // return n; return q.size(); } void sink(int i) { // System.out.println(\u0026#34;\\t\u0026#34; + Arrays.deepToString(heap)); // System.out.println(\u0026#34;\\tsink \u0026#34; + i); int left = 2 * i; int right = 2 * i + 1; int smallest = i; if (left \u0026lt; heap.length \u0026amp;\u0026amp; compare(heap[smallest], heap[left]) \u0026gt; 0) { smallest = left; } if (right \u0026lt; heap.length \u0026amp;\u0026amp; compare(heap[smallest], heap[right]) \u0026gt; 0) { smallest = right; } if (i != smallest) { swap(i, smallest); sink(smallest); } } void swap(int i, int j) { var temp = heap[i]; heap[i] = heap[j]; heap[j] = temp; } public List\u0026lt;String\u0026gt; topKFrequent2(String[] words, int k) { Map\u0026lt;String, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (String word: words) { freq.put(word, freq.getOrDefault(word, 0) + 1); } TreeSet\u0026lt;String\u0026gt;[] buckets = new TreeSet[words.length + 1]; for (var entry: freq.entrySet()) { Integer i = entry.getValue(); String word = entry.getKey(); TreeSet\u0026lt;String\u0026gt; bucket = buckets[i]; if (bucket == null) { bucket = new TreeSet\u0026lt;\u0026gt;(); } bucket.add(word); buckets[i] = bucket; } System.out.println(Arrays.deepToString(buckets)); List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (int i = buckets.length - 1; i \u0026gt;= 0 \u0026amp;\u0026amp; res.size() \u0026lt; k; i--) { if (buckets[i] == null) { continue; } for (String word: buckets[i]) { if (res.size() == k) { break; } res.add(word); } } return res; } } Solution 2021-11-25 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public List\u0026lt;String\u0026gt; topKFrequent(String[] words, int k) { Map\u0026lt;String, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (String word: words) { freq.put(word, freq.getOrDefault(word, 0) + 1); } PriorityQueue\u0026lt;String\u0026gt; q = new PriorityQueue\u0026lt;\u0026gt;((a, b) -\u0026gt; { int c = freq.get(a).compareTo(freq.get(b)); if (c != 0) return c; return - a.compareTo(b); }); for (var e: freq.entrySet()) { q.add(e.getKey()); if (q.size() \u0026gt; k) { q.poll(); } } List\u0026lt;String\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); while (q.size() \u0026gt; 0) { res.add(0, q.poll()); } return res; } } ","permalink":"https://volyx.in/posts/2020-06-06-top-k-frequent-words/","summary":"\u003cp\u003eGiven a non-empty list of words, return the k most frequent elements.\u003c/p\u003e\n\u003cp\u003eYour answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;i\u0026#34;, \u0026#34;love\u0026#34;, \u0026#34;leetcode\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;love\u0026#34;, \u0026#34;coding\u0026#34;], k = 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;i\u0026#34;, \u0026#34;love\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;i\u0026#34; and \u0026#34;love\u0026#34; are the two most frequent words.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Note that \u0026#34;i\u0026#34; comes before \u0026#34;love\u0026#34; due to a lower alphabetical order.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;the\u0026#34;, \u0026#34;day\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;sunny\u0026#34;, \u0026#34;the\u0026#34;, \u0026#34;the\u0026#34;, \u0026#34;the\u0026#34;, \u0026#34;sunny\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;is\u0026#34;], k = 4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [\u0026#34;the\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;sunny\u0026#34;, \u0026#34;day\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \u0026#34;the\u0026#34;, \u0026#34;is\u0026#34;, \u0026#34;sunny\u0026#34; and \u0026#34;day\u0026#34; are the four most frequent words,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    with the number of occurrence being 4, 3, 2 and 1 respectively.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Top K Frequent Words"},{"content":"Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.\nNote:\n1 \u0026lt;= w.length \u0026lt;= 10000 1 \u0026lt;= w[i] \u0026lt;= 10^5 pickIndex will be called at most 10000 times. Example 1:\n1 2 3 4 Input: [\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;] [[[1]],[]] Output: [null,0] Example 2:\n1 2 3 4 Input: [\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;,\u0026#34;pickIndex\u0026#34;] [[[1,3]],[],[],[],[],[]] Output: [null,0,1,1,1,0] Explanation of Input Syntax:\nThe input is two lists: the subroutines called and their arguments. Solution\u0026rsquo;s constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren\u0026rsquo;t any.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { private int[] cum; private int sum = 0; public Solution(int[] w) { cum = new int[w.length]; for (int i = 0; i \u0026lt; w.length; i++) { sum += w[i]; cum[i] = sum; } System.out.println(Arrays.toString(cum)); } public int pickIndex() { int idx = (int) (Math.random() * sum) + 1; int l = 0; int r = cum.length - 1; System.out.println(idx); while (l \u0026lt; r) { int m = l + (r - l) / 2; if (idx \u0026gt; cum[m]) { l = m + 1; } else { r = m; } } return l; } } /** * Your Solution object will be instantiated and called as such: * Solution obj = new Solution(w); * int param_1 = obj.pickIndex(); */ ","permalink":"https://volyx.in/posts/2020-06-05-random-pick-with-weight-imported/","summary":"\u003cp\u003eGiven an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e1 \u0026lt;= w.length \u0026lt;= 10000\u003c/li\u003e\n\u003cli\u003e1 \u0026lt;= w[i] \u0026lt;= 10^5\u003c/li\u003e\n\u003cli\u003epickIndex will be called at most 10000 times.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\u0026#34;Solution\u0026#34;,\u0026#34;pickIndex\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[[1]],[]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [null,0]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Random Pick with Weight"},{"content":"There are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].\nReturn the minimum cost to fly every person to a city such that exactly N people arrive in each city.\nExample 1:\n1 2 3 4 5 6 7 8 9 Input: [[10,20],[30,200],[400,50],[30,20]] Output: 110 Explanation: The first person goes to city A for a cost of 10. The second person goes to city A for a cost of 30. The third person goes to city B for a cost of 50. The fourth person goes to city B for a cost of 20. The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city. Note:\n1 \u0026lt;= costs.length \u0026lt;= 100 It is guaranteed that costs.length is even. 1 \u0026lt;= costs[i][0], costs[i][1] \u0026lt;= 1000 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int twoCitySchedCost(int[][] costs) { int sum = 0; int n = costs.length; Arrays.sort(costs, (a, b) -\u0026gt; { return Integer.compare(a[0] - a[1], b[0] - b[1]); }); for (int i = 0; i \u0026lt; n; i++) { if (i \u0026gt;= n/2) { sum += costs[i][1]; } else { sum += costs[i][0]; } } return sum; } } ","permalink":"https://volyx.in/posts/2020-06-04-two-city-scheduling-imported/","summary":"\u003cp\u003eThere are 2N people a company is planning to interview. The cost of flying the i-th person to city A is costs[i][0], and the cost of flying the i-th person to city B is costs[i][1].\u003c/p\u003e\n\u003cp\u003eReturn the minimum cost to fly every person to a city such that exactly N people arrive in each city.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [[10,20],[30,200],[400,50],[30,20]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 110\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe first person goes to city A for a cost of 10.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe second person goes to city A for a cost of 30.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe third person goes to city B for a cost of 50.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe fourth person goes to city B for a cost of 20.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Two City Scheduling"},{"content":"Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.\nGiven linked list \u0026ndash; head = [4,5,1,9], which looks like following:\nExample 1:\n1 2 3 Input: head = [4,5,1,9], node = 5 Output: [4,1,9] Explanation: You are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function. Example 2:\n1 2 3 Input: head = [4,5,1,9], node = 1 Output: [4,5,9] Explanation: You are given the third node with value 1, the linked list should become 4 -\u0026gt; 5 -\u0026gt; 9 after calling your function. Note:\nThe linked list will have at least two elements. All of the nodes\u0026rsquo; values will be unique. The given node will not be the tail and it will always be a valid node of the linked list. Do not return anything from your function. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public void deleteNode(ListNode node) { node.val = node.next.val; node.next = node.next.next; } } ","permalink":"https://volyx.in/posts/2020-06-03-delete-node-in-a-linked-list-imported/","summary":"\u003cp\u003eWrite a function to delete a node (except the tail) in a singly linked list, given only access to that node.\u003c/p\u003e\n\u003cp\u003eGiven linked list \u0026ndash; head = [4,5,1,9], which looks like following:\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: head = [4,5,1,9], node = 5\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,1,9]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: You are given the second node with value 5, the linked list should become 4 -\u0026gt; 1 -\u0026gt; 9 after calling your function.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Delete Node in a Linked List"},{"content":"Implement a trie with insert, search, and startsWith methods.\nExample:\nTrie trie = new Trie();\ntrie.insert(\u0026ldquo;apple\u0026rdquo;); trie.search(\u0026ldquo;apple\u0026rdquo;); // returns true trie.search(\u0026ldquo;app\u0026rdquo;); // returns false trie.startsWith(\u0026ldquo;app\u0026rdquo;); // returns true trie.insert(\u0026ldquo;app\u0026rdquo;); trie.search(\u0026ldquo;app\u0026rdquo;); // returns true\nNote:\nYou may assume that all inputs are consist of lowercase letters a-z. All inputs are guaranteed to be non-empty strings. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 class Trie { Trie[] children = new Trie[26]; boolean isLeaf = false; /** Initialize your data structure here. */ public Trie() { } /** Inserts a word into the trie. */ public void insert(String word) { Trie node = this; for (int i = 0; i \u0026lt; word.length(); i++) { char c = word.charAt(i); if (node.children[c - \u0026#39;a\u0026#39;] == null) { node.children[c - \u0026#39;a\u0026#39;] = new Trie();; } node = node.children[c - \u0026#39;a\u0026#39;]; } node.isLeaf = true; } /** Returns if the word is in the trie. */ public boolean search(String word) { Trie node = this; for (int i = 0; i \u0026lt; word.length(); i++) { char c = word.charAt(i); node = node.children[c - \u0026#39;a\u0026#39;]; if (node == null) { return false; } } return node.isLeaf; } /** Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) { Trie node = this; for (int i = 0; i \u0026lt; prefix.length(); i++) { char c = prefix.charAt(i); node = node.children[c - \u0026#39;a\u0026#39;]; if (node == null) { return false; } } return true; } } /** * Your Trie object will be instantiated and called as such: * Trie obj = new Trie(); * obj.insert(word); * boolean param_2 = obj.search(word); * boolean param_3 = obj.startsWith(prefix); */ ","permalink":"https://volyx.in/posts/2020-06-03-implement-trie-imported/","summary":"\u003cp\u003eImplement a trie with insert, search, and startsWith methods.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cp\u003eTrie trie = new Trie();\u003c/p\u003e\n\u003cp\u003etrie.insert(\u0026ldquo;apple\u0026rdquo;);\ntrie.search(\u0026ldquo;apple\u0026rdquo;);   // returns true\ntrie.search(\u0026ldquo;app\u0026rdquo;);     // returns false\ntrie.startsWith(\u0026ldquo;app\u0026rdquo;); // returns true\ntrie.insert(\u0026ldquo;app\u0026rdquo;);\ntrie.search(\u0026ldquo;app\u0026rdquo;);     // returns true\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou may assume that all inputs are consist of lowercase letters a-z.\u003c/li\u003e\n\u003cli\u003eAll inputs are guaranteed to be non-empty strings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTrie\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Trie\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e children \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Trie\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e26\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e isLeaf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/** Initialize your data structure here. */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTrie\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/** Inserts a word into the trie. */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(String word) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Trie node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e word.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e word.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node.\u003cspan style=\"color:#a6e22e\"\u003echildren\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ec \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                node.\u003cspan style=\"color:#a6e22e\"\u003echildren\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ec \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Trie();;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node.\u003cspan style=\"color:#a6e22e\"\u003echildren\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ec \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        node.\u003cspan style=\"color:#a6e22e\"\u003eisLeaf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/** Returns if the word is in the trie. */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esearch\u003c/span\u003e(String word) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Trie node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e word.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e word.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node.\u003cspan style=\"color:#a6e22e\"\u003echildren\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ec \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e node.\u003cspan style=\"color:#a6e22e\"\u003eisLeaf\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/** Returns if there is any word in the trie that starts with the given prefix. */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estartsWith\u003c/span\u003e(String prefix) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Trie node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e prefix.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e prefix.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node.\u003cspan style=\"color:#a6e22e\"\u003echildren\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ec \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * Your Trie object will be instantiated and called as such:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * Trie obj = new Trie();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * obj.insert(word);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * boolean param_2 = obj.search(word);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * boolean param_3 = obj.startsWith(prefix);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Implement Trie (Prefix Tree)"},{"content":"Given a collection of intervals, merge all overlapping intervals.\nExample 1:\n1 2 3 Input: [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]] Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. Example 2:\n1 2 3 Input: [[1,4],[4,5]] Output: [[1,5]] Explanation: Intervals [1,4] and [4,5] are considered overlapping. NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public static int[][] merge(int[][] intervals) { Arrays.sort(intervals, Comparator.comparingInt(a -\u0026gt; a[0])); List\u0026lt;int[]\u0026gt; result = new ArrayList\u0026lt;\u0026gt;(); for (int[] curr : intervals) { if (result.isEmpty()) { result.add(curr); continue; } int[] prev = result.get(result.size() - 1); if (prev[1] \u0026lt; curr[0]) { result.add(curr); } else { prev[1] = Math.max(curr[1], prev[1]); } } return result.toArray(new int[0][0]); } } ","permalink":"https://volyx.in/posts/2020-06-03-merge-intervals-imported/","summary":"\u003cp\u003eGiven a collection of intervals, merge all overlapping intervals.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [[1,3],[2,6],[8,10],[15,18]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,6],[8,10],[15,18]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [[1,4],[4,5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [[1,5]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.\u003c/p\u003e","title":"Merge Intervals"},{"content":"Invert a binary tree.\nExample:\nInput:\n1 2 3 4 5 4 / \\ 2 7 / \\ / \\ 1 3 6 9 Output:\n1 2 3 4 5 4 / \\ 7 2 / \\ / \\ 9 6 3 1 Trivia: This problem was inspired by this original tweet by Max Howell:\nGoogle: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so f*** off. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode invertTree(TreeNode root) { if (root == null) { return null; } Queue\u0026lt;TreeNode\u0026gt; queue = new LinkedList\u0026lt;\u0026gt;(); queue.add(root); while (!queue.isEmpty()) { TreeNode node = queue.poll(); TreeNode tmp = node.left; node.left = node.right; node.right = tmp; if (node.left != null) queue.add(node.left); if (node.right != null) queue.add(node.right); } return root; } public TreeNode invertTree2(TreeNode root) { if (root == null) { return null; } TreeNode left = invertTree2(root.left); TreeNode right = invertTree2(root.right); root.left = right; root.right = left; return root; } } ","permalink":"https://volyx.in/posts/2020-06-02-invert-binary-tree-imported/","summary":"\u003cp\u003eInvert a binary tree.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cp\u003eInput:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   /   \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  2     7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e / \\   / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1   3 6   9\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eOutput:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   /   \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  7     2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e / \\   / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e9   6 3   1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eTrivia:\nThis problem was inspired by this original tweet by Max Howell:\u003c/p\u003e","title":"Invert Binary Tree"},{"content":"Koko loves to eat bananas. There are N piles of bananas, the i-th pile has piles[i] bananas. The guards have gone and will come back in H hours.\nKoko can decide her bananas-per-hour eating speed of K. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than K bananas, she eats all of them instead, and won\u0026rsquo;t eat any more bananas during this hour.\nKoko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.\nReturn the minimum integer K such that she can eat all the bananas within H hours.\nExample 1:\n1 2 Input: piles = [3,6,7,11], H = 8 Output: 4 Example 2:\n1 2 Input: piles = [30,11,23,4,20], H = 5 Output: 30 Example 3:\n1 2 Input: piles = [30,11,23,4,20], H = 6 Output: 23 Note:\n1 \u0026lt;= piles.length \u0026lt;= 10^4 piles.length \u0026lt;= H \u0026lt;= 10^9 1 \u0026lt;= piles[i] \u0026lt;= 10^9 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public int minEatingSpeed(int[] piles, int H) { int l = 1; int r = Integer.MAX_VALUE; while (l \u0026lt; r) { int m = l + (r - l) / 2; if (possible(piles, m, H)) { r = m; } else { l = m + 1; } } return l; } boolean possible(int[] piles, int speed, int hours) { int t = 0; for (int p : piles) { t += (p - 1) / speed + 1; } return t \u0026lt;= hours; } } ","permalink":"https://volyx.in/posts/2020-06-01-koko-eating-bananas-imported/","summary":"\u003cp\u003eKoko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours.\u003c/p\u003e\n\u003cp\u003eKoko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won\u0026rsquo;t eat any more bananas during this hour.\u003c/p\u003e","title":"Koko Eating Bananas"},{"content":"Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\nNote:\nThe length of num is less than 10002 and will be ≥ k. The given num does not contain any leading zero. Example 1:\n1 2 3 Input: num = \u0026#34;1432219\u0026#34;, k = 3 Output: \u0026#34;1219\u0026#34; Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest. Example 2:\n1 2 3 Input: num = \u0026#34;10200\u0026#34;, k = 1 Output: \u0026#34;200\u0026#34; Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes. Example 3:\n1 2 3 Input: num = \u0026#34;10\u0026#34;, k = 2 Output: \u0026#34;0\u0026#34; Explanation: Remove all the digits from the number and it is left with nothing which is 0. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { public String removeKdigits(String num, int k) { int size = num.length(); if (k == size) { return \u0026#34;0\u0026#34;; } Stack\u0026lt;Character\u0026gt; stack = new Stack\u0026lt;\u0026gt;(); int counter = 0; // 1432219 // 1219 // 439 // stack [1,3] // counter = 2 // k = 2 // size = 7 while (counter \u0026lt; size) { while (k \u0026gt; 0 \u0026amp;\u0026amp; !stack.isEmpty() \u0026amp;\u0026amp; stack.peek() \u0026gt; num.charAt(counter)) { stack.pop(); k--; } stack.push(num.charAt(counter)); counter++; } while (k \u0026gt; 0) { stack.pop(); k--; } StringBuilder sb = new StringBuilder(); while (!stack.isEmpty()) { sb.append(stack.pop()); } sb.reverse(); while (sb.length() \u0026gt; 1 \u0026amp;\u0026amp; sb.charAt(0) == \u0026#39;0\u0026#39;) { sb.deleteCharAt(0); } return sb.toString(); } } ","permalink":"https://volyx.in/posts/2020-06-01-remove-k-digits-imported/","summary":"\u003cp\u003eGiven a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe length of num is less than 10002 and will be ≥ k.\u003c/li\u003e\n\u003cli\u003eThe given num does not contain any leading zero.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = \u0026#34;1432219\u0026#34;, k = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;1219\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Remove K Digits"},{"content":"Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\nExample:\n1 2 Input: S = \u0026#34;ADOBECODEBANC\u0026#34;, T = \u0026#34;ABC\u0026#34; Output: \u0026#34;BANC\u0026#34; Note:\nIf there is no such window in S that covers all characters in T, return the empty string \u0026ldquo;\u0026rdquo;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Solution { public String minWindow(String s, String t) { int[] freq = new int[128]; int counter = t.length(); for (char c : t.toCharArray()) { freq[c]++; } int start = 0; int end = 0; int minStart = 0; int minLength = Integer.MAX_VALUE; // Move end to find a valid window. while (end \u0026lt; s.length()) { char c = s.charAt(end); if (freq[c] \u0026gt; 0) { counter--; } freq[c]--; end++; while (counter == 0) { if (end - start \u0026lt; minLength) { minStart = start; minLength = end - start; } char startChar = s.charAt(start); freq[startChar]++; if (freq[startChar] \u0026gt; 0) { counter++; } start++; } } if (minLength == Integer.MAX_VALUE) { return \u0026#34;\u0026#34;; } return s.substring(minStart, minStart + minLength); } } ","permalink":"https://volyx.in/posts/2020-05-31-minimum-window-substring-imported/","summary":"\u003cp\u003eGiven a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;ADOBECODEBANC\u0026#34;, T = \u0026#34;ABC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: \u0026#34;BANC\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf there is no such window in S that covers all characters in T, return the empty string \u0026ldquo;\u0026rdquo;.\u003c/li\u003e\n\u003cli\u003eIf there is such window, you are guaranteed that there will always be only one unique minimum window in S.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSolution:\u003c/p\u003e","title":"Minimum Window Substring"},{"content":"Given a binary tree, return the inorder traversal of its nodes\u0026rsquo; values.\nExample:\n1 2 3 4 5 6 7 8 Input: [1,null,2,3] 1 \\ 2 / 3 Output: [1,3,2] Follow up: Recursive solution is trivial, could you do it iteratively?\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { private List\u0026lt;Integer\u0026gt; list = new ArrayList\u0026lt;\u0026gt;(); public List\u0026lt;Integer\u0026gt; inorderTraversal(TreeNode root) { if (root == null) { return Collections.emptyList(); } Stack\u0026lt;TreeNode\u0026gt; q = new Stack\u0026lt;\u0026gt;(); TreeNode curr = root; while (!q.isEmpty() || curr != null) { while (curr != null) { q.push(curr); curr = curr.left; } curr = q.pop(); list.add(curr.val); curr = curr.right; } return list; } public List\u0026lt;Integer\u0026gt; inorderTraversal2(TreeNode root) { if (root == null) { return Collections.emptyList(); } inorderTraversal(root.left); list.add(root.val); inorderTraversal(root.right); return list; } } ","permalink":"https://volyx.in/posts/2020-05-30-binary-tree-inorder-traversal-imported/","summary":"\u003cp\u003eGiven a binary tree, return the inorder traversal of its nodes\u0026rsquo; values.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,null,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    /\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [1,3,2]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eFollow up: Recursive solution is trivial, could you do it iteratively?\u003c/p\u003e","title":"Binary Tree Inorder Traversal"},{"content":"Remove all elements from a linked list of integers that have value val.\nExample:\n1 2 Input: 1-\u0026gt;2-\u0026gt;6-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;6, val = 6 Output: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { if (head == null) { return head; } while (head != null \u0026amp;\u0026amp; head.val == val) { head = head.next; } ListNode node = head; ListNode prev = null; while (node != null) { if (node.val == val) { prev.next = node.next; } else { prev = node; } node = node.next; } return head; } } ","permalink":"https://volyx.in/posts/2020-05-30-remove-linked-list-elements-imported/","summary":"\u003cp\u003eRemove all elements from a linked list of integers that have value val.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:  1-\u0026gt;2-\u0026gt;6-\u0026gt;3-\u0026gt;4-\u0026gt;5-\u0026gt;6, val = 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * Definition for singly-linked list.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * public class ListNode {\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *     int val;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *     ListNode next;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *     ListNode() {}\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *     ListNode(int val) { this.val = val; }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e ListNode \u003cspan style=\"color:#a6e22e\"\u003eremoveElements\u003c/span\u003e(ListNode head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (head \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (head \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e head.\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ListNode node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ListNode prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (node \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node.\u003cspan style=\"color:#a6e22e\"\u003eval\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                prev.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e;  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node.\u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Remove Linked List Elements"},{"content":"In a town, there are N people labelled from 1 to N. There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody. Everybody (except for the town judge) trusts the town judge. There is exactly one person that satisfies properties 1 and 2. You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.\nIf the town judge exists and can be identified, return the label of the town judge. Otherwise, return -1.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: N = 2, trust = [[1,2]] Output: 2 Example 2: Input: N = 3, trust = [[1,3],[2,3]] Output: 3 Example 3: Input: N = 3, trust = [[1,3],[2,3],[3,1]] Output: -1 Example 4: Input: N = 3, trust = [[1,2],[2,3]] Output: -1 Example 5: Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]] Output: 3 Constraints:\n1 \u0026lt;= N \u0026lt;= 1000 0 \u0026lt;= trust.length \u0026lt;= 10^4 trust[i].length == 2 trust[i] are all different trust[i][0] != trust[i][1] 1 \u0026lt;= trust[i][0], trust[i][1] \u0026lt;= N Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int findJudge(int N, int[][] trust) { int[] count = new int[N + 1]; for (int i = 0; i \u0026lt; trust.length; i++) { count[trust[i][1]]++; count[trust[i][0]]--; } for (int i = 1; i \u0026lt; N + 1; i++) { if (count[i] == N - 1) { return i; } } return -1; } } Solution 2021-01-03 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int findJudge(int n, int[][] trust) { int[] in = new int[n + 1]; int[] out = new int[n + 1]; for (int[] tr: trust) { in[tr[1]]++; out[tr[0]]++; } // in [0, 0, 1] // out[0, 1, 0] for (int i = 1; i \u0026lt; in.length; i++) { if (in[i] == n - 1 \u0026amp;\u0026amp; out[i] == 0) { return i; } } return -1; } } ","permalink":"https://volyx.in/posts/2020-05-29-find-the-town-judge-imported/","summary":"\u003cp\u003eIn a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.\u003c/p\u003e\n\u003cp\u003eIf the town judge exists, then:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe town judge trusts nobody.\u003c/li\u003e\n\u003cli\u003eEverybody (except for the town judge) trusts the town judge.\u003c/li\u003e\n\u003cli\u003eThere is exactly one person that satisfies properties 1 and 2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.\u003c/p\u003e","title":"Find the Town Judge"},{"content":"You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.\nFollow up: Your solution should run in O(log n) time and O(1) space.\nExample 1:\n1 2 Input: nums = [1,1,2,3,3,4,4,8,8] Output: 2 Example 2:\n1 2 Input: nums = [3,3,7,7,10,11,11] Output: 10 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^5 0 \u0026lt;= nums[i] \u0026lt;= 10^5 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public int singleNonDuplicate(int[] nums) { int l = 0; int r = nums.length - 1; while (l \u0026lt; r) { int mid = l + (r - l) / 2; boolean isEven = (r - mid) % 2 == 0; if (nums[mid] == nums[mid - 1]) { if (isEven) { r = mid - 2; } else { l = mid + 1; } } else if (nums[mid] == nums[mid + 1]) { if (isEven) { l = mid + 2; } else { r = mid - 1; } } else { return nums[mid]; } } return nums[l]; } } ","permalink":"https://volyx.in/posts/2020-05-29-single-element-in-a-sorted-array-imported/","summary":"\u003cp\u003eYou are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.\u003c/p\u003e\n\u003cp\u003eFollow up: Your solution should run in O(log n) time and O(1) space.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [1,1,2,3,3,4,4,8,8]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [3,3,7,7,10,11,11]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 10\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraints:\u003c/p\u003e","title":"Single Element in a Sorted Array"},{"content":"Given a positive integer num, write a function which returns True if num is a perfect square else False.\nFollow up: Do not use any built-in library function such as sqrt\nExample 1:\n1 2 Input: num = 16 Output: true Example 2:\n1 2 Input: num = 14 Output: false Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public boolean isPerfectSquare(int num) { return isPerfectSquareSearch(num); } public boolean isPerfectSquareNewTon(int num) { if (num \u0026lt; 2) return true; int root = num; while (root - num / root \u0026gt; 0) { root = (root + num/root) / 2; System.out.printf(\u0026#34;%d\\n\u0026#34;, root); } return root * root == num; } public boolean isPerfectSquareSearch(int num) { if (num \u0026lt; 2) return true; long left = 2, right = num / 2, x; while (left \u0026lt;= right) { x = left + (right - left) / 2; if (x * x == num) return true; if (x * x \u0026gt; num) { right = x - 1; } else { left = x + 1; } System.out.printf(\u0026#34;%d\\n\u0026#34;, x); } return false; } float abs(int num) { if (num \u0026lt; 0) return -num; else return num; } } ","permalink":"https://volyx.in/posts/2020-05-29-valid-perfect-square-imported/","summary":"\u003cp\u003eGiven a positive integer num, write a function which returns True if num is a perfect square else False.\u003c/p\u003e\n\u003cp\u003eFollow up: Do not use any built-in library function such as sqrt\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = 16\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: num = 14\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisPerfectSquare\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num) { \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e isPerfectSquareSearch(num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisPerfectSquareNewTon\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (num \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 2) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e root \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (root \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e num \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e root \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            root \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (root \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e num\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003eroot) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e 2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\\n\u0026#34;\u003c/span\u003e, root);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e root \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root  \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisPerfectSquareSearch\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (num \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 2) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2, right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e num \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e 2, x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e left) \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e 2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e num) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e num) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d\\n\u0026#34;\u003c/span\u003e, x);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eabs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (num \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003enum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e num;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Valid perfect sqaure"},{"content":"You are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.\nExample 1:\n1 2 Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] Output: true Example 2:\n1 2 Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]] Output: false Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public boolean checkStraightLine(int[][] coordinates) { // x2 - x1 int xdiff = coordinates[1][0] - coordinates[0][0]; // y2 - y1 int ydiff = coordinates[1][1] - coordinates[0][1]; for (int i = 2; i \u0026lt; coordinates.length; i++) { int curr_xdiff = coordinates[i][0] - coordinates[i-1][0]; int curr_ydiff = coordinates[i][1] - coordinates[i-1][1]; if (ydiff * curr_xdiff != xdiff * curr_ydiff) { return false; } } return true; } } ","permalink":"https://volyx.in/posts/2020-05-28-check-if-it-is-a-straight-line-imported/","summary":"\u003cp\u003eYou are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points make a straight line in the XY plane.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eExample 1:\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-05-28-ex1.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cem\u003eExample 2:\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"/images/2020-05-28-ex2.jpg\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeckStraightLine\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e coordinates) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// x2 - x1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e xdiff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// y2 - y1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e ydiff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 2; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e coordinates.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e curr_xdiff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e curr_ydiff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e coordinates\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (ydiff \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr_xdiff  \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e xdiff \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr_ydiff) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Check If It Is a Straight Line"},{"content":"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\n1 2 3 4 Input: [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2:\n1 2 3 4 Input: [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int rob(int[] nums) { if (nums.length == 0) { return 0; } if (nums.length == 1) { return nums[0]; } int[] dp = new int[nums.length]; dp[0] = nums[0]; dp[1] = Math.max(nums[0], nums[1]); for (int i = 2; i \u0026lt; nums.length; i++) { dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]); } return Math.max(dp[dp.length - 1], dp[dp.length - 2]); } } ","permalink":"https://volyx.in/posts/2020-05-27-house-robber-imported/","summary":"\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\u003c/p\u003e\n\u003cp\u003eGiven a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.\u003c/p\u003e","title":"House Robber"},{"content":"Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.\nExample 1:\n1 2 Input: [-4,-1,0,3,10] Output: [0,1,9,16,100] Example 2:\n1 2 Input: [-7,-3,2,3,11] Output: [4,9,9,49,121] Note:\n1 2 3 1 \u0026lt;= A.length \u0026lt;= 10000 -10000 \u0026lt;= A[i] \u0026lt;= 10000 A is sorted in non-decreasing order. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Forward declaration of guess API. * @param num your guess * @return -1 if num is lower than the guess number *\t1 if num is higher than the guess number * otherwise return 0 * int guess(int num); */ public class Solution extends GuessGame { public int guessNumber(int n) { int l = 0; int r = n + 1; while (l \u0026lt; r) { int mid = l + (r - l) / 2; int guess = guess(mid); if (guess == 0) { return mid; } if (guess == 1) { l = mid; } else { r = mid + 1; } } return r; } } ","permalink":"https://volyx.in/posts/2020-05-27-squares-of-a-sorted-array-imported/","summary":"\u003cp\u003eGiven an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [-4,-1,0,3,10]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [0,1,9,16,100]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [-7,-3,2,3,11]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [4,9,9,49,121]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    1 \u0026lt;= A.length \u0026lt;= 10000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    -10000 \u0026lt;= A[i] \u0026lt;= 10000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    A is sorted in non-decreasing order.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Squares of a Sorted Array"},{"content":"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\nExample:\n1 2 3 4 5 6 7 8 9 Given the sorted array: [-10,-3,0,5,9], One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST: 0 / \\ -3 9 / / -10 5 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode sortedArrayToBST(int[] nums) { TreeNode node = new TreeNode(); return buildTree(nums, 0, nums.length - 1); } TreeNode buildTree(int[] nums, int left, int right) { if (left \u0026gt; right) { return null; } int mid = left + (right - left) / 2; TreeNode node = new TreeNode(nums[mid]); node.left = buildTree(nums, left, mid - 1); node.right = buildTree(nums, mid + 1, right); return node; } } ","permalink":"https://volyx.in/posts/2020-05-26-convert-sorted-array-to-binary-search-tree-imported/","summary":"\u003cp\u003eGiven an array where elements are sorted in ascending order, convert it to a height balanced BST.\u003c/p\u003e\n\u003cp\u003eFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eGiven the sorted array: [-10,-3,0,5,9],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   -3   9\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   /   /\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e -10  5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Convert Sorted Array to Binary Search Tree"},{"content":"We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I\u0026rsquo;ll tell you whether the number is higher or lower.\nYou call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):\n1 2 3 -1 : My number is lower 1 : My number is higher 0 : Congrats! You got it! Example :\n1 2 Input: n = 10, pick = 6 Output: 6 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Forward declaration of guess API. * @param num your guess * @return -1 if num is lower than the guess number *\t1 if num is higher than the guess number * otherwise return 0 * int guess(int num); */ public class Solution extends GuessGame { public int guessNumber(int n) { int l = 0; int r = n + 1; while (l \u0026lt; r) { int mid = l + (r - l) / 2; int guess = guess(mid); if (guess == 0) { return mid; } if (guess == 1) { l = mid; } else { r = mid + 1; } } return r; } } ","permalink":"https://volyx.in/posts/2020-05-26-%D1%81ousins-in-binary-tree-imported/","summary":"\u003cp\u003eWe are playing the Guess Game. The game is as follows:\u003c/p\u003e\n\u003cp\u003eI pick a number from 1 to n. You have to guess which number I picked.\u003c/p\u003e\n\u003cp\u003eEvery time you guess wrong, I\u0026rsquo;ll tell you whether the number is higher or lower.\u003c/p\u003e\n\u003cp\u003eYou call a pre-defined API guess(int num) which returns 3 possible results (-1, 1, or 0):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e-1 : My number is lower\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e 1 : My number is higher\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e 0 : Congrats! You got it!\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample :\u003c/p\u003e","title":"Cousins in Binary Tree"},{"content":"he i-th person has weight people[i], and each boat can carry a maximum weight of limit.\nEach boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person. (It is guaranteed each person can be carried by a boat.)\nExample 1:\n1 2 3 Input: people = [1,2], limit = 3 Output: 1 Explanation: 1 boat (1, 2) Example 2:\n1 2 3 Input: people = [3,2,2,1], limit = 3 Output: 3 Explanation: 3 boats (1, 2), (2) and (3) Example 3:\n1 2 3 Input: people = [3,5,3,4], limit = 5 Output: 4 Explanation: 4 boats (3), (3), (4), (5) Note:\n1 2 1 \u0026lt;= people.length \u0026lt;= 50000 1 \u0026lt;= people[i] \u0026lt;= limit \u0026lt;= 30000 Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int numRescueBoats(int[] people, int limit) { int i = 0; int j = people.length - 1; int counter = 0; Arrays.sort(people); while (i \u0026lt;= j) { if (people[i] + people[j] \u0026lt;= limit) { i++; } j--; counter++; } return counter; } } ","permalink":"https://volyx.in/posts/2020-05-25-boats-to-save-people-imported/","summary":"\u003cp\u003ehe i-th person has weight people[i], and each boat can carry a maximum weight of limit.\u003c/p\u003e\n\u003cp\u003eEach boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.\u003c/p\u003e\n\u003cp\u003eReturn the minimum number of boats to carry every given person.  (It is guaranteed each person can be carried by a boat.)\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: people = [1,2], limit = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: 1 boat (1, 2)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Boats to Save People"},{"content":"Every non-negative integer N has a binary representation. For example, 5 can be represented as \u0026ldquo;101\u0026rdquo; in binary, 11 as \u0026ldquo;1011\u0026rdquo; in binary, and so on. Note that except for N = 0, there are no leading zeroes in any binary representation.\nThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1. For example, the complement of \u0026ldquo;101\u0026rdquo; in binary is \u0026ldquo;010\u0026rdquo; in binary.\nFor a given number N in base-10, return the complement of it\u0026rsquo;s binary representation as a base-10 integer.\nExample 1:\n1 2 3 Input: 5 Output: 2 Explanation: 5 is \u0026#34;101\u0026#34; in binary, with complement \u0026#34;010\u0026#34; in binary, which is 2 in base-10. Example 2:\n1 2 3 Input: 7 Output: 0 Explanation: 7 is \u0026#34;111\u0026#34; in binary, with complement \u0026#34;000\u0026#34; in binary, which is 0 in base-10. Example 3:\n1 2 3 Input: 10 Output: 5 Explanation: 10 is \u0026#34;1010\u0026#34; in binary, with complement \u0026#34;0101\u0026#34; in binary, which is 5 in base-10. Note:\n1 2 0 \u0026lt;= N \u0026lt; 10^9 This question is the same as 476: https://leetcode.com/problems/number-complement/ Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /** * Forward declaration of guess API. * @param num your guess * @return -1 if num is lower than the guess number *\t1 if num is higher than the guess number * otherwise return 0 * int guess(int num); */ class Solution { public int bitwiseComplement(int N) { StringBuilder sb = new StringBuilder(); String binary = Integer.toString(N, 2); for (int i = 0; i \u0026lt; binary.length(); i++) { if (binary.charAt(i) == \u0026#39;0\u0026#39;) { sb.append(\u0026#39;1\u0026#39;); } else { sb.append(\u0026#39;0\u0026#39;); } } return Integer.valueOf(sb.toString(), 2); } public int bitwiseComplement2(int N) { int result = 0; int power = 1; while (N \u0026gt; 0) { result += (N % 2 ^ 1) * power; power \u0026lt;\u0026lt;= 1; N \u0026gt;\u0026gt;= 1; } return result; } } ","permalink":"https://volyx.in/posts/2020-05-25-complement-of-base-10-integer-imported/","summary":"\u003cp\u003eEvery non-negative integer N has a binary representation.  For example, 5 can be represented as \u0026ldquo;101\u0026rdquo; in binary, 11 as \u0026ldquo;1011\u0026rdquo; in binary, and so on.  Note that except for N = 0, there are no leading zeroes in any binary representation.\u003c/p\u003e\n\u003cp\u003eThe complement of a binary representation is the number in binary you get when changing every 1 to a 0 and 0 to a 1.  For example, the complement of \u0026ldquo;101\u0026rdquo; in binary is \u0026ldquo;010\u0026rdquo; in binary.\u003c/p\u003e","title":"Complement of Base 10 Integer"},{"content":"In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\nTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\nWe are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.\nReturn true if and only if the nodes corresponding to the values x and y are cousins.\nExample 1:\n1 2 Input: root = [1,2,3,4], x = 4, y = 3 Output: false Example 2:\n1 2 Input: root = [1,2,3,null,4,null,5], x = 5, y = 4 Output: true Example 3:\n1 2 Input: root = [1,2,3,null,4], x = 2, y = 3 Output: false Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isCousins(TreeNode root, int x, int y) { int[] r = bfs(root, -1, x, 0); int[] l = bfs(root, -1, y, 0); return l[0] != r[0] \u0026amp;\u0026amp; l[1] == r[1]; } int[] bfs(TreeNode node, int parent, int value, int level) { if (node.val == value) { return new int[]{parent, level}; } int[] result = new int[]{-1, -1}; if (node.left != null) { result = bfs(node.left, node.val, value, level + 1); } if (result[0] != -1) { return result; } if (node.right != null) { result = bfs(node.right, node.val, value, level + 1); } if (result[0] != -1) { return result; } return new int[]{-1, -1}; } } ","permalink":"https://volyx.in/posts/2020-05-25-ransom-note-imported/","summary":"\u003cp\u003eIn a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.\u003c/p\u003e\n\u003cp\u003eTwo nodes of a binary tree are cousins if they have the same depth, but have different parents.\u003c/p\u003e\n\u003cp\u003eWe are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.\u003c/p\u003e\n\u003cp\u003eReturn true if and only if the nodes corresponding to the values x and y are cousins.\u003c/p\u003e","title":"Cousins in Binary Tree"},{"content":"Given a string, find the first non-repeating character in it and return it\u0026rsquo;s index. If it doesn\u0026rsquo;t exist, return -1.\nExamples:\n1 2 3 4 5 s = \u0026#34;leetcode\u0026#34; return 0. s = \u0026#34;loveleetcode\u0026#34;, return 2. Note: You may assume the string contain only lowercase letters.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public int firstUniqChar(String s) { Map\u0026lt;Character, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); freq.put(c, freq.getOrDefault(c, 0) + 1); } for (int i = 0; i \u0026lt; s.length(); i++) { char c = s.charAt(i); if (freq.get(c) == 1) { return i; } } return -1; } } ","permalink":"https://volyx.in/posts/2020-05-25-first-unique-character-in-a-string-imported/","summary":"\u003cp\u003eGiven a string, find the first non-repeating character in it and return it\u0026rsquo;s index. If it doesn\u0026rsquo;t exist, return -1.\u003c/p\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003es = \u0026#34;leetcode\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ereturn 0.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003es = \u0026#34;loveleetcode\u0026#34;,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ereturn 2.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote: You may assume the string contain only lowercase letters.\u003c/p\u003e\n\u003cp\u003eSolution:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efirstUniqChar\u003c/span\u003e(String s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eCharacter, Integer\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e freq \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e HashMap\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e s.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            freq.\u003cspan style=\"color:#a6e22e\"\u003eput\u003c/span\u003e(c, freq.\u003cspan style=\"color:#a6e22e\"\u003egetOrDefault\u003c/span\u003e(c, 0) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e s.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (freq.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(c) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 1) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"First Unique Character in a String"},{"content":"Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\nYou may assume that the array is non-empty and the majority element always exist in the array.\nExample 1:\n1 2 Input: [3,2,3] Output: 3 Example 2:\n1 2 Input: [2,2,1,1,1,2,2] Output: 2 Solution:\n1 2 3 4 5 6 class Solution { public int majorityElement(int[] nums) { Arrays.sort(nums); return nums[nums.length/2]; } } ","permalink":"https://volyx.in/posts/2020-05-25-majority-element-imported/","summary":"\u003cp\u003eGiven an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.\u003c/p\u003e\n\u003cp\u003eYou may assume that the array is non-empty and the majority element always exist in the array.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [3,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [2,2,1,1,1,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution:\u003c/p\u003e","title":"Majority Element"},{"content":"Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\nEach letter in the magazine string can only be used once in your ransom note.\nExample 1:\n1 2 Input: ransomNote = \u0026#34;a\u0026#34;, magazine = \u0026#34;b\u0026#34; Output: false Example 2:\n1 2 Input: ransomNote = \u0026#34;aa\u0026#34;, magazine = \u0026#34;ab\u0026#34; Output: false Example 3:\n1 2 Input: ransomNote = \u0026#34;aa\u0026#34;, magazine = \u0026#34;aab\u0026#34; Output: true Constraints: You may assume that both strings contain only lowercase letters.\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public boolean canConstruct(String ransomNote, String magazine) { int[] freq = new int[26]; for (int i = 0; i \u0026lt; magazine.length(); i++) { freq[magazine.charAt(i) - \u0026#39;a\u0026#39;]++; } for (int j = 0; j \u0026lt; ransomNote.length(); j++) { int index = ransomNote.charAt(j) - \u0026#39;a\u0026#39;; freq[index]--; if (freq[index] \u0026lt; 0) { return false; } } return true; } } ","permalink":"https://volyx.in/posts/2020-05-22-guess-number-higher-or-lower-imported/","summary":"\u003cp\u003eGiven an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.\u003c/p\u003e\n\u003cp\u003eEach letter in the magazine string can only be used once in your ransom note.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: ransomNote = \u0026#34;a\u0026#34;, magazine = \u0026#34;b\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Guess Number Higher or Lower"},{"content":"You\u0026rsquo;re given strings J representing the types of stones that are jewels, and S representing the stones you have. Each character in S is a type of stone you have. You want to know how many of the stones you have are also jewels.\nThe letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \u0026ldquo;a\u0026rdquo; is considered a different type of stone from \u0026ldquo;A\u0026rdquo;.\nExample 1:\n1 2 Input: J = \u0026#34;aA\u0026#34;, S = \u0026#34;aAAbbbb\u0026#34; Output: 3 Example 2:\n1 2 Input: J = \u0026#34;z\u0026#34;, S = \u0026#34;ZZ\u0026#34; Output: 0 Note:\n1 2 S and J will consist of letters and have length at most 50. The characters in J are distinct. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int numJewelsInStones(String J, String S) { final Set\u0026lt;Character\u0026gt; jewels = new HashSet\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; J.length(); i++) { jewels.add(Character.valueOf(J.charAt(i))); } int count = 0; for (int i = 0; i \u0026lt; S.length(); i++) { if (jewels.contains(Character.valueOf(S.charAt(i)))) { count++; } } return count; } } ","permalink":"https://volyx.in/posts/2020-05-20-jewels-and-stones-imported/","summary":"\u003cp\u003eYou\u0026rsquo;re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.\u003c/p\u003e\n\u003cp\u003eThe letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so \u0026ldquo;a\u0026rdquo; is considered a different type of stone from \u0026ldquo;A\u0026rdquo;.\u003c/p\u003e","title":"First Bad Version"},{"content":"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, \u0026hellip;, n] and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.\n1 2 3 4 5 6 7 8 9 Example: Given n = 5, and version = 4 is the first bad version. call isBadVersion(3) -\u0026gt; false call isBadVersion(5) -\u0026gt; true call isBadVersion(4) -\u0026gt; true Then 4 is the first bad version. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 //* The isBadVersion API is defined in the parent class VersionControl. boolean isBadVersion(int version); */ public class Solution extends VersionControl { public int firstBadVersion(int n) { // 11110 // 2 0 5 // 1 3 5 // int l = 0 ; int r = n; while (l \u0026lt; r) { int mid = l + (r - l) / 2; if (!isBadVersion(mid)) { l = mid + 1; } else { r = mid; } } return r; } } Solution 2021-06-15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* The isBadVersion API is defined in the parent class VersionControl. boolean isBadVersion(int version); */ public class Solution extends VersionControl { public int firstBadVersion(int n) { int l = 0; int r = n; // 11111110000 while (l \u0026lt;= r) { int mid = l + (r - l) / 2; if (!isBadVersion(mid)) { l = mid + 1; } else { r = mid - 1; } } return l; } } Solution 2021-10-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /* The isBadVersion API is defined in the parent class VersionControl. boolean isBadVersion(int version); */ /* n = 5 0 0 0 1 1 0 1 2 3 4 1 2 3 4 5 ^ 3 4 4 5 ^ */ public class Solution extends VersionControl { public int firstBadVersion(int n) { int lo = 0; int hi = n; while (lo \u0026lt; hi) { // 0 \u0026lt; 4; 3 \u0026lt; 4 int mid = lo + (hi - lo) / 2; // 2 if (isBadVersion(mid) == false) { lo = mid + 1; } else { hi = mid; } } return lo; } } Solution 2021-11-10 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 /* The isBadVersion API is defined in the parent class VersionControl. boolean isBadVersion(int version); */ public class Solution extends VersionControl { public int firstBadVersion(int n) { int lo = 1; int hi = n; while (lo \u0026lt; hi) { int mid = lo + (hi - lo) / 2; if (isBadVersion(mid)) { hi = mid; } else { lo = mid + 1; } } return lo; } } ","permalink":"https://volyx.in/posts/2020-05-19-first-bad-version-imported/","summary":"\u003cp\u003eYou are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\u003c/p\u003e\n\u003cp\u003eSuppose you have n versions [1, 2, \u0026hellip;, n] and you want to find out the first bad one, which causes all the following ones to be bad.\u003c/p\u003e","title":"First Bad Version"},{"content":"Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.\nNote: You may assume k is always valid, 1 ≤ k ≤ BST\u0026rsquo;s total elements.\nExample 1:\n1 2 3 4 5 6 7 Input: root = [3,1,4,null,2], k = 1 3 / \\ 1 4 \\ 2 Output: 1 Example 2:\n1 2 3 4 5 6 7 8 9 Input: root = [5,3,6,2,4,null,null,1], k = 3 5 / \\ 3 6 / \\ 2 4 / 1 Output: 3 Follow up: What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\nSolution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int level = 0; int answer = -1; public void inorder(TreeNode node, int k) { if (node == null) { return; } inorder(node.left, k); level++; if (level == k) { answer = node.val; return; } inorder(node.right, k); } public int kthSmallest(TreeNode root, int k) { inorder(root, k); return answer; } } ","permalink":"https://volyx.in/posts/2020-05-18-kth-smallest-element-in-a-bst-copy-imported/","summary":"\u003cp\u003eGiven a binary search tree, write a function kthSmallest to find the kth smallest element in it.\u003c/p\u003e\n\u003cp\u003eNote:\nYou may assume k is always valid, 1 ≤ k ≤ BST\u0026rsquo;s total elements.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [3,1,4,null,2], k = 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e 1   4\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":" Kth Smallest Element in a BST"},{"content":"Given a string, your task is to count how many palindromic substrings in this string.\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\nExample 1:\n1 2 3 Input: \u0026#34;abc\u0026#34; Output: 3 Explanation: Three palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;. Example 2:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 Input: \u0026#34;aaa\u0026#34; Output: 6 Explanation: Six palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aaa\u0026#34;. ``` Note: ``` The input string length won\u0026#39;t exceed 1000. ``` Solution ```java class Solution { public int countSubstrings(String s) { int n = s.length(); int[][] a = new int[n][n]; int count = 0; for (int i = 0; i \u0026lt; n; i++) { a[i][i] = 1; count++; } for (int col = 1; col \u0026lt; n; col++) { for (int row = 0; row \u0026lt; col; row++) { if (row == col - 1 \u0026amp;\u0026amp; s.charAt(col) == s.charAt(row)) { a[row][col] = 1; count++; } else if (a[row + 1][col - 1] == 1 \u0026amp;\u0026amp; s.charAt(col) == s.charAt(row) ) { a[row][col] = 1; count++; } } } return count; } } ``` ![example](/images/2020-05-15-palindromic-substring_1_optimized.png) ![example](/images/2020-05-15-palindromic-substring-matrix_optimized.png) ","permalink":"https://volyx.in/posts/2020-05-15-palindromic-substrings-copy-imported/","summary":"\u003cp\u003eGiven a string, your task is to count how many palindromic substrings in this string.\u003c/p\u003e\n\u003cp\u003eThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Three palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \u0026#34;aaa\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Six palindromic strings: \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aa\u0026#34;, \u0026#34;aaa\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    The input string length won\u0026#39;t exceed 1000.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSolution \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```java\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclass Solution {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    public int countSubstrings(String s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        int n = s.length();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        int[][] a = new int[n][n];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        int count = 0;        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        for (int i = 0; i \u0026lt; n; i++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            a[i][i] = 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            count++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        for (int col = 1; col \u0026lt; n; col++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            for (int row = 0; row \u0026lt; col; row++) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                if (row == col - 1 \u0026amp;\u0026amp; s.charAt(col) == s.charAt(row)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    a[row][col] = 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    count++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } else if (a[row + 1][col - 1] == 1 \u0026amp;\u0026amp; s.charAt(col) == s.charAt(row) ) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                     a[row][col] = 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    count++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        return count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e![example](/images/2020-05-15-palindromic-substring_1_optimized.png)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e![example](/images/2020-05-15-palindromic-substring-matrix_optimized.png)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Palindromic Substrings"},{"content":"Given an array of strings, group anagrams together.\nExample:\n1 2 3 4 5 6 7 Input: [\u0026#34;eat\u0026#34;, \u0026#34;tea\u0026#34;, \u0026#34;tan\u0026#34;, \u0026#34;ate\u0026#34;, \u0026#34;nat\u0026#34;, \u0026#34;bat\u0026#34;], Output: [ [\u0026#34;ate\u0026#34;,\u0026#34;eat\u0026#34;,\u0026#34;tea\u0026#34;], [\u0026#34;nat\u0026#34;,\u0026#34;tan\u0026#34;], [\u0026#34;bat\u0026#34;] ] Note:\nAll inputs will be in lowercase. The order of your output does not matter. Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; groupAnagrams(String[] strs) { Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); int[] c = new int[26]; for (String s : strs) { Arrays.fill(c, 0); for (int i = 0 ; i \u0026lt; s.length(); i++) { c[s.charAt(i) - \u0026#39;a\u0026#39;]++; } String code = Arrays.toString(c); List\u0026lt;String\u0026gt; list = map.get(code); if (list == null) { list = new ArrayList\u0026lt;\u0026gt;(); } list.add(s); map.put(code, list); } return new ArrayList\u0026lt;\u0026gt;(map.values()); } } Solution 2021-11-15 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; groupAnagrams(String[] strs) { Map\u0026lt;String, List\u0026lt;String\u0026gt;\u0026gt; keyToList = new HashMap\u0026lt;\u0026gt;(); for (String s: strs) { char[] charString = s.toCharArray(); Arrays.sort(charString); String sortedWord = String.valueOf(charString); List\u0026lt;String\u0026gt; anagrams = keyToList.getOrDefault(sortedWord, new ArrayList\u0026lt;\u0026gt;()); anagrams.add(s); keyToList.put(sortedWord, anagrams); } List\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; res = new ArrayList\u0026lt;\u0026gt;(); for (var anagrams: keyToList.values()) { res.add(anagrams); } return res; } } ","permalink":"https://volyx.in/posts/2020-05-14-group-anagrams-imported/","summary":"\u003cp\u003eGiven an array of strings, group anagrams together.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [\u0026#34;eat\u0026#34;, \u0026#34;tea\u0026#34;, \u0026#34;tan\u0026#34;, \u0026#34;ate\u0026#34;, \u0026#34;nat\u0026#34;, \u0026#34;bat\u0026#34;],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u0026#34;ate\u0026#34;,\u0026#34;eat\u0026#34;,\u0026#34;tea\u0026#34;],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u0026#34;nat\u0026#34;,\u0026#34;tan\u0026#34;],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [\u0026#34;bat\u0026#34;]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAll inputs will be in lowercase.\u003c/li\u003e\n\u003cli\u003eThe order of your output does not matter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"solution\"\u003eSolution\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroupAnagrams\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e strs) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString, List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e map \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e HashMap\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e26\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (String s : strs) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Arrays.\u003cspan style=\"color:#a6e22e\"\u003efill\u003c/span\u003e(c, 0);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0 ; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e s.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                c\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003es.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            String code \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Arrays.\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e(c);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e map.\u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(code);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (list \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            list.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(s);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            map.\u003cspan style=\"color:#a6e22e\"\u003eput\u003c/span\u003e(code, list);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e(map.\u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution-2021-11-15\"\u003eSolution 2021-11-15\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egroupAnagrams\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e strs) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString, List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e keyToList \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e HashMap\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (String s: strs) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e charString \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.\u003cspan style=\"color:#a6e22e\"\u003etoCharArray\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Arrays.\u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(charString);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            String sortedWord \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e String.\u003cspan style=\"color:#a6e22e\"\u003evalueOf\u003c/span\u003e(charString);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e anagrams \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e keyToList.\u003cspan style=\"color:#a6e22e\"\u003egetOrDefault\u003c/span\u003e(sortedWord, \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            anagrams.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(s);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            keyToList.\u003cspan style=\"color:#a6e22e\"\u003eput\u003c/span\u003e(sortedWord, anagrams);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        List\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eString\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e anagrams: keyToList.\u003cspan style=\"color:#a6e22e\"\u003evalues\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res.\u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(anagrams);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Group Anagrams"},{"content":"Given a non-empty binary tree, find the maximum path sum.\nFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\nExample 1:\n1 2 3 4 5 6 7 Input: [1,2,3] 1 / \\ 2 3 Output: 6 Example 2:\n1 2 3 4 5 6 7 8 9 Input: [-10,9,20,null,null,15,7] -10 / \\ 9 20 / \\ 15 7 Output: 42 Notes: We need to compute best sum of left-rooted path and right-rooted path in dfs. And compare the answer with complete tree of left + rigth + value inside dfs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int answer = Integer.MIN_VALUE; int dfs(TreeNode node) { if (node == null) { return 0; } int x = dfs(node.left); int y = dfs(node.right); answer = Math.max(answer, node.val + x + y); return Math.max(0, node.val + Math.max(x,y)); } public int maxPathSum(TreeNode root) { dfs(root); return answer; } } ","permalink":"https://volyx.in/posts/2020-05-13-binary-tree-maximum-path-sum-imported/","summary":"\u003cp\u003eGiven a non-empty binary tree, find the maximum path sum.\u003c/p\u003e\n\u003cp\u003eFor this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain at least one node and does not need to go through the root.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     2   3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 6\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Binary Tree Maximum Path Sum"},{"content":"Given a 2D binary matrix filled with 0\u0026rsquo;s and 1\u0026rsquo;s, find the largest square containing only 1\u0026rsquo;s and return its area.\nExample:\n1 2 3 4 5 6 7 8 Input: 1 0 1 0 0 1 0 1 1 1 1 1 1 1 1 1 0 0 1 0 Output: 4 Solution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int maximalSquare(char[][] matrix) { int n = matrix.length; if (n == 0) { return 0; } int m = matrix[0].length; int[][] dp = new int[n][m]; int answer = 0; for (int i = 0; i \u0026lt; n; ++i) { for (int j = 0; j \u0026lt; m; ++j) { if (matrix[i][j] == \u0026#39;1\u0026#39;) { dp[i][j] = 1; if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { dp[i][j] += Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1])); } answer = Math.max(answer, dp[i][j]); } } } return answer * answer; } } ","permalink":"https://volyx.in/posts/2020-05-12-maximal-square-imported/","summary":"\u003cp\u003eGiven a 2D binary matrix filled with 0\u0026rsquo;s and 1\u0026rsquo;s, find the largest square containing only 1\u0026rsquo;s and return its area.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 0 1 0 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 0 1 1 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 1 1 1 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e1 0 0 1 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution\u003c/p\u003e","title":"Maximal Square"},{"content":"Given two strings text1 and text2, return the length of their longest common subsequence.\nA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, \u0026ldquo;ace\u0026rdquo; is a subsequence of \u0026ldquo;abcde\u0026rdquo; while \u0026ldquo;aec\u0026rdquo; is not). A common subsequence of two strings is a subsequence that is common to both strings.\nIf there is no common subsequence, return 0.\nExample 1:\n1 2 3 Input: text1 = \u0026#34;abcde\u0026#34;, text2 = \u0026#34;ace\u0026#34; Output: 3 Explanation: The longest common subsequence is \u0026#34;ace\u0026#34; and its length is 3. Example 2:\n1 2 3 Input: text1 = \u0026#34;abc\u0026#34;, text2 = \u0026#34;abc\u0026#34; Output: 3 Explanation: The longest common subsequence is \u0026#34;abc\u0026#34; and its length is 3. Example 3:\n1 2 3 Input: text1 = \u0026#34;abc\u0026#34;, text2 = \u0026#34;def\u0026#34; Output: 0 Explanation: There is no such common subsequence, so the result is 0. Constraints:\n1 2 3 1 \u0026lt;= text1.length \u0026lt;= 1000 1 \u0026lt;= text2.length \u0026lt;= 1000 The input strings consist of lowercase English characters only. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 class Solution { private Map\u0026lt;Integer, Integer\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); private String _text1, _text2; private Integer buildKey(int len1, int len2) { return Objects.hash(len1 + \u0026#34;_\u0026#34; + len2); } public int myLCS(int len1, int len2) { if (len1 == 0 || len2 == 0) { return 0; } Integer key = buildKey(len1, len2); if (map.containsKey(key)) { return map.get(key); } if (_text1.charAt(len1 - 1) == _text2.charAt(len2 - 1)) { int value = 1 + myLCS(len1 - 1, len2 - 1); map.put(key, value); return value; } int left = myLCS(len1, len2 - 1); int right = myLCS(len1 - 1, len2); map.put(key, Math.max(left, right)); return Math.max(left, right); } public int iterativeLCS(String a, String b) { int n = a.length(); int m = b.length(); int[][] dp = new int[n + 1][m + 1]; for (int i = 0; i \u0026lt; n; ++i) { for (int j = 0; j \u0026lt; m; ++j) { if (a.charAt(i) == b.charAt(j)) { dp[i+1][j+1] = 1 + dp[i][j]; } else { dp[i+1][j+1] = Math.max(dp[i + 1][j], dp[i][j + 1]); } } } return dp[n][m]; } public int longestCommonSubsequence(String _text1, String _text2) { return iterativeLCS(_text1, _text2); } private Integer buildKey(String text1, String text2) { return Objects.hashCode(text1 + \u0026#34;_\u0026#34; + text2); } public int longestCommonSubsequence2(String text1, String text2) { if (text1.isEmpty() || text2.isEmpty()) { return 0; } Integer key = buildKey(text1, text2); if (map.containsKey(key)) { return map.get(key); } if (text1.charAt(text1.length() - 1) == text2.charAt(text2.length() - 1)) { text1 = text1.substring(0, text1.length() - 1); text2 = text2.substring(0, text2.length() - 1); int value = 1 + longestCommonSubsequence(text1, text2); map.put(key, value); return value; } int left = longestCommonSubsequence(text1, text2.substring(0, text2.length() - 1)); int right = longestCommonSubsequence(text1.substring(0, text1.length() - 1), text2); map.put(key, Math.max(left, right)); return Math.max(left, right); } public int longestCommonSubsequence1(String text1, String text2) { if (text1.isEmpty() || text2.isEmpty()) { return 0; } if (text1.charAt(text1.length() - 1) == text2.charAt(text2.length() - 1)) { text1 = text1.substring(0, text1.length() - 1); text2 = text2.substring(0, text2.length() - 1); return 1 + longestCommonSubsequence(text1, text2); } return Math.max( longestCommonSubsequence(text1, text2.substring(0, text2.length() - 1)), longestCommonSubsequence(text1.substring(0, text1.length() - 1), text2) ); } } ","permalink":"https://volyx.in/posts/2020-05-09-longest-common-subsequence-imported/","summary":"\u003cp\u003eGiven two strings text1 and text2, return the length of their longest common subsequence.\u003c/p\u003e\n\u003cp\u003eA subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, \u0026ldquo;ace\u0026rdquo; is a subsequence of \u0026ldquo;abcde\u0026rdquo; while \u0026ldquo;aec\u0026rdquo; is not). A common subsequence of two strings is a subsequence that is common to both strings.\u003c/p\u003e\n\u003cp\u003eIf there is no common subsequence, return 0.\u003c/p\u003e","title":"Longest Common Subsequence"},{"content":"Given an array of non-negative integers, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nDetermine if you are able to reach the last index.\nExample 1:\n1 2 3 Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2:\n1 2 3 Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 3 * 10^4 0 \u0026lt;= nums[i][j] \u0026lt;= 10^5 Solution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public boolean canJump(int[] nums) { if (nums.length == 1) { return true; } boolean[] hops = new boolean[nums.length]; hops[0] = true; for (int i = 0; i \u0026lt; nums.length; i++) { if (!hops[i]) { return false; } for (int j = nums[i]; j \u0026gt; 0; j--) { if (i + j \u0026gt; nums.length - 1) { continue; } hops[i + j] = true; } } return hops[nums.length - 1]; } } Solution2\n1 2 3 4 5 6 7 8 9 10 11 12 class Solution { public boolean canJump(int[] nums) { int canReach = 0; for (int i = 0; i \u0026lt;= canReach; i++) { if (i == nums.length - 1) { return true; } canReach = Math.max(canReach, i + nums[i]); } return false; } } Youtube explanation link\n","permalink":"https://volyx.in/posts/2020-05-05-jump--game-imported/","summary":"\u003cp\u003eGiven an array of non-negative integers, you are initially positioned at the first index of the array.\u003c/p\u003e\n\u003cp\u003eEach element in the array represents your maximum jump length at that position.\u003c/p\u003e\n\u003cp\u003eDetermine if you are able to reach the last index.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [2,3,1,1,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e","title":"Jump Game"},{"content":"Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.\nget(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\nThe cache is initialized with a positive capacity.\nFollow up: Could you do both operations in O(1) time complexity?\nExample:\n1 2 3 4 5 6 7 8 9 10 11 LRUCache cache = new LRUCache( 2 /* capacity */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // returns 1 cache.put(3, 3); // evicts key 2 cache.get(2); // returns -1 (not found) cache.put(4, 4); // evicts key 1 cache.get(1); // returns -1 (not found) cache.get(3); // returns 3 cache.get(4); // returns 4 Solution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class LRUCache { private LinkedList\u0026lt;Node\u0026gt; list = new LinkedList\u0026lt;\u0026gt;(); private Map\u0026lt;Integer, Node\u0026gt; map = new HashMap\u0026lt;\u0026gt;(); private int capacity; public LRUCache(int capacity) { this.capacity = capacity; } public int get(int key) { if (map.containsKey(key)) { Node node = map.get(key); list.remove(node); list.addFirst(node); return node.value; } else { return -1; } } public void put(int key, int value) { Node node = null; if (map.containsKey(key)) { node = map.get(key); list.remove(node); node.value = value; } else { if (list.size() == capacity) { Node prev = list.pollLast(); map.remove(prev.key); } node = new Node(key, value); } map.put(key, node); list.addFirst(node); } class Node { int key, value; Node(int key, int value) { this.key = key; this.value = value; } public boolean equals(Node other) { return this.key == other.key \u0026amp;\u0026amp; this.value == other.value; } public int hashCode() { return Objects.hashCode(this.key) + Objects.hashCode(this.value); } } } /** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,value); */ ","permalink":"https://volyx.in/posts/2020-05-03-lru-cache-imported/","summary":"\u003cp\u003eDesign and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.\u003c/p\u003e\n\u003cp\u003eget(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.\nput(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\u003c/p\u003e","title":"LRU Cache"},{"content":"Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree.\nWe get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.\nExample 1: 1 2 3 4 5 6 7 Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1] Output: true Explanation: The path 0 -\u0026gt; 1 -\u0026gt; 0 -\u0026gt; 1 is a valid sequence (green color in the figure). Other valid sequences are: 0 -\u0026gt; 1 -\u0026gt; 1 -\u0026gt; 0 0 -\u0026gt; 0 -\u0026gt; 0 Example 2: 1 2 3 Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1] Output: false Explanation: The path 0 -\u0026gt; 0 -\u0026gt; 1 does not exist, therefore it is not even a sequence. Example 3:\nInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1] Output: false Explanation: The path 0 -\u0026gt; 1 -\u0026gt; 1 is a sequence, but it is not a valid sequence.\n1 2 3 4 5 Constraints: 1 \u0026lt;= arr.length \u0026lt;= 5000 0 \u0026lt;= arr[i] \u0026lt;= 9 Each node\u0026#39;s value is between [0 - 9]. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1] [0,1,0,0,1,0,null,null,1,0,0] [0,1,0,1] 0 / \\ 1 0 / \\ / \\ 0 1 0 null / \\ /\\ null,1 0,0 [2,9,3,null,1,null,2,null,8] [2,9,1,8,0] 2 / \\ 9 3 \\ \\ 1 2 \\ 8 */ class Solution { public boolean isValidSequence(TreeNode root, int[] arr) { if (root == null) { return false; } return isValidSequence(root, arr, 0); } public boolean isValidSequence(TreeNode node, int[] arr, int index) { if (node == null) { return false; } System.out.printf(\u0026#34;index %d, node %d\\n\u0026#34;, index, node.val); if (index \u0026gt; arr.length - 1) { return false; } if (node.val != arr[index]) { return false; } if (node.left == null \u0026amp;\u0026amp; node.right == null \u0026amp;\u0026amp; index == arr.length - 1) { return true; } return isValidSequence(node.left, arr, index + 1) || isValidSequence(node.right, arr, index + 1); } } ","permalink":"https://volyx.in/posts/2020-05-01-check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree-copy-imported/","summary":"\u003cp\u003eGiven a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree.\u003c/p\u003e\n\u003cp\u003eWe get the given string from the concatenation of an array of integers arr and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.\u003c/p\u003e\n\u003cp\u003eExample 1:\n\u003cimg alt=\"example1\u0026quot; width=\u0026ldquo;300px\" loading=\"lazy\" src=\"/images/2020-05-01-leetcode_testcase_1x300.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe path 0 -\u0026gt; 1 -\u0026gt; 0 -\u0026gt; 1 is a valid sequence (green color in the figure). \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOther valid sequences are: \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0 -\u0026gt; 1 -\u0026gt; 1 -\u0026gt; 0 \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e0 -\u0026gt; 0 -\u0026gt; 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\n\u003cimg alt=\"alt example2\" loading=\"lazy\" src=\"/images/2020-05-01-leetcode_testcase_2_300x.png\"\u003e\u003c/p\u003e","title":"Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree"},{"content":"Given a range [m, n] where 0 \u0026lt;= m \u0026lt;= n \u0026lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\nExample 1:\n1 2 Input: [5,7] Output: 4 Example 2:\n1 2 Input: [0,1] Output: 0 Solution 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public int rangeBitwiseAnd(int m, int n) { String left = Integer.toString(m, 2); String right = Integer.toString(n, 2); if (left.length() != right.length()) { return 0; } int i = 0; int counter = 1; StringBuilder sb = new StringBuilder(); while (i \u0026lt; left.length()) { if (left.charAt(i) == right.charAt(i)) { sb.append(left.charAt(i)); } else { while (i \u0026lt; left.length()) { sb.append(\u0026#39;0\u0026#39;); i++; } } i++; } return Integer.parseInt(sb.toString(), 2); } } Solution 2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int rangeBitwiseAnd(int m, int n) { int answer = 0; for (int bit = 30; bit \u0026gt;= 0; bit--) { System.out.println(\u0026#34;bit \u0026#34; + bit); System.out.println(Integer.toString((m \u0026amp; (1 \u0026lt;\u0026lt; bit)), 2)); System.out.println(Integer.toString((n \u0026amp; (1 \u0026lt;\u0026lt; bit)), 2)); if ((m \u0026amp; (1 \u0026lt;\u0026lt; bit)) != (n \u0026amp; (1 \u0026lt;\u0026lt; bit))) { break; } else { answer |= m \u0026amp; (1 \u0026lt;\u0026lt; bit); } } return answer; } } ","permalink":"https://volyx.in/posts/2020-04-30-bitwise-and-of-numbers-range-imported/","summary":"\u003cp\u003eGiven a range [m, n] where 0 \u0026lt;= m \u0026lt;= n \u0026lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [5,7]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eExample 2:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-fallback\" data-lang=\"fallback\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 0\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution 1\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erangeBitwiseAnd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        String left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Integer.\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e(m, 2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        String right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Integer.\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e(n, 2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e right.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e counter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        StringBuilder sb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e StringBuilder();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e left.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e right.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                sb.\u003cspan style=\"color:#a6e22e\"\u003eappend\u003c/span\u003e(left.\u003cspan style=\"color:#a6e22e\"\u003echarAt\u003c/span\u003e(i));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e left.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    sb.\u003cspan style=\"color:#a6e22e\"\u003eappend\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Integer.\u003cspan style=\"color:#a6e22e\"\u003eparseInt\u003c/span\u003e(sb.\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e(), 2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eSolution 2\u003c/p\u003e","title":"Bitwise AND of Numbers Range"},{"content":"\nGiven an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\nExample 1:\nInput:nums = [1,1,1], k = 2 Output: 2\nNote:\nThe length of the array is in range [1, 20,000]. The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7]. Hints\n1 2 3 4 5 6 7 8 Hide Hint #1 Will Brute force work here? Try to optimize it. Hide Hint #2 Can we optimize it by using some extra space? Hide Hint #3 What about storing sum frequencies in a hash table? Will it be useful? Hide Hint #4 sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1. Can we use this property to optimize it. Solution:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 class Solution { public int subarraySum(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; freq = new HashMap\u0026lt;\u0026gt;(); int sum = 0; int counter = 0; freq.put(0, 1); for (int i = 0; i \u0026lt; nums.length; i++) { sum = sum + nums[i]; if (freq.containsKey(sum - k)) { counter+= freq.get(sum -k); } freq.put(sum, freq.getOrDefault(sum, 0) + 1); } return counter; } } ## Solution 14-06-2021 ```java class Solution { public int subarraySum(int[] nums, int k) { Map\u0026lt;Integer, Integer\u0026gt; prefix = new HashMap\u0026lt;\u0026gt;(); int count = 0; int sum = 0; prefix.put(0, 1); for (int i = 0; i \u0026lt; nums.length; i++) { sum += nums[i]; if (prefix.containsKey(sum - k)) { count = count + prefix.get(sum - k); } prefix.put(sum, prefix.getOrDefault(sum, 0) + 1); } return count; } } Solution 2021-11-20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int subarraySum(int[] nums, int k) { int n = nums.length; int sum = 0; Map\u0026lt;Integer, Integer\u0026gt; prefixMap = new HashMap\u0026lt;\u0026gt;(); int count = 0; prefixMap.put(0, 1); for (int i = 0; i \u0026lt; n; i++) { sum += nums[i]; if (prefixMap.containsKey(sum - k)) { count += prefixMap.get(sum - k); } prefixMap.put(sum, prefixMap.getOrDefault(sum, 0) + 1); } return count; } } ","permalink":"https://volyx.in/posts/2020-04-28-subarray-sum-equals-k-imported/","summary":"\u003cp\u003e\u003cimg alt=\"560. Subarray Sum Equals K\" loading=\"lazy\" src=\"https://leetcode.com/problems/subarray-sum-equals-k/\"\u003e\u003c/p\u003e\n\u003cp\u003eGiven an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput:nums = [1,1,1], k = 2\nOutput: 2\u003c/p\u003e\n\u003cp\u003eNote:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe length of the array is in range [1, 20,000].\u003c/li\u003e\n\u003cli\u003eThe range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHints\u003c/p\u003e","title":"560. Subarray Sum Equals K"},{"content":"(This problem is an interactive problem.)\nA binary matrix means that all elements are 0 or 1. For each individual row of the matrix, this row is sorted in non-decreasing order.\nGiven a row-sorted binary matrix binaryMatrix, return leftmost column index(0-indexed) with at least a 1 in it. If such index doesn\u0026rsquo;t exist, return -1.\nYou can\u0026rsquo;t access the Binary Matrix directly. You may only access the matrix using a BinaryMatrix interface:\nBinaryMatrix.get(row, col) returns the element of the matrix at index (row, col) (0-indexed). BinaryMatrix.dimensions() returns a list of 2 elements [rows, cols], which means the matrix is rows * cols. Submissions making more than 1000 calls to BinaryMatrix.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.\nFor custom testing purposes you\u0026rsquo;re given the binary matrix mat as input in the following four examples. You will not have access the binary matrix directly.\nExample 1:\n1 2 Input: mat = [[0,0],[1,1]] Output: 0 Example 2:\n1 2 Input: mat = [[0,0],[0,1]] Output: 1 Example 3:\n1 2 Input: mat = [[0,0],[0,0]] Output: -1 Example 4:\n1 2 Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]] Output: 1 Constraints:\n1 2 3 4 5 rows == mat.length cols == mat[i].length 1 \u0026lt;= rows, cols \u0026lt;= 100 mat[i][j] is either 0 or 1. mat[i] is sorted in a non-decreasing way. Dev notes: we start from top corner and find mimimal column index that don\u0026rsquo;t equal 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * // This is the BinaryMatrix\u0026#39;s API interface. * // You should not implement it, or speculate about its implementation * interface BinaryMatrix { * public int get(int row, int col) {} * public List\u0026lt;Integer\u0026gt; dimensions {} * }; */ class Solution { public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) { // [rows, cols] List\u0026lt;Integer\u0026gt; rowCols = binaryMatrix.dimensions(); int rows = rowCols.get(0); int cols = rowCols.get(1); if (rows == 0 \u0026amp;\u0026amp; cols == 0) { return -1; } int maxIndex = Integer.MAX_VALUE; int j = cols - 1; for (int i = 0; i \u0026lt; rows; i++) { while (j \u0026gt; -1 \u0026amp;\u0026amp; binaryMatrix.get(i, j) == 1) { maxIndex = Math.min(maxIndex, j); j--; System.out.printf(\u0026#34;%d %d\\n\u0026#34;, i, j); } } return maxIndex == Integer.MAX_VALUE ? -1: maxIndex; } } ","permalink":"https://volyx.in/posts/2020-04-26-leftmost-column-with-at-least-a-one-imported/","summary":"\u003cp\u003e(This problem is an interactive problem.)\u003c/p\u003e\n\u003cp\u003eA binary matrix means that all elements are 0 or 1. For each individual row of the matrix, this row is sorted in non-decreasing order.\u003c/p\u003e\n\u003cp\u003eGiven a row-sorted binary matrix binaryMatrix, return leftmost column index(0-indexed) with at least a 1 in it. If such index doesn\u0026rsquo;t exist, return -1.\u003c/p\u003e\n\u003cp\u003eYou can\u0026rsquo;t access the Binary Matrix directly.  You may only access the matrix using a BinaryMatrix interface:\u003c/p\u003e","title":"Leftmost Column with at Least a One"},{"content":"Return the root node of a binary search tree that matches the given preorder traversal.\n(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value \u0026lt; node.val, and any descendant of node.right has a value \u0026gt; node.val. Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)\nExample 1:\nInput: [8,5,1,7,10,12] Output: [8,5,10,1,7,null,12]\n1 2 3 Note: 1 \u0026lt;= preorder.length \u0026lt;= 100 The values of preorder are distinct. Dev notes: First solution uses O(n^2) time and space. We find smaller part of the array and greater part, and the recursevilly build subtree.\nSecond solution uses O(N) time and space. We build tree while we iterating throug array\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode bstFromPreorder(int[] preorder) { if (preorder.length == 0 ) { return null; } int rootValue = preorder[0]; List\u0026lt;Integer\u0026gt; smaller = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;Integer\u0026gt; greater = new ArrayList\u0026lt;\u0026gt;(); for (int i = 1; i \u0026lt; preorder.length; i++ ) { if (preorder[i] \u0026lt; rootValue) { smaller.add(preorder[i]); } else { greater.add(preorder[i]); } } TreeNode root = new TreeNode(rootValue); root.left = bstFromPreorder(smaller.stream().mapToInt(i -\u0026gt; i).toArray()); root.right = bstFromPreorder(greater.stream().mapToInt(i -\u0026gt; i).toArray()); return root; } } Solution 2\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { public TreeNode bstFromPreorder(int[] preorder, int id, int limit) { if (id == preorder.length || preorder[id] \u0026gt; limit) { return null; } int rootValue = preorder[id]; TreeNode root = new TreeNode(rootValue); id++; root.left = bstFromPreorder(preorder, id, rootValue); root.right = bstFromPreorder(preorder, id, limit); return root; } public TreeNode bstFromPreorder(int[] preorder) { if (preorder.length == 0 ) { return null; } return bstFromPreorder(preorder, 0, Integer.MAX_VALUE); } } ","permalink":"https://volyx.in/posts/2020-04-25-construct-binary-search-tree-from-preorder-traversal-imported/","summary":"\u003cp\u003eReturn the root node of a binary search tree that matches the given preorder traversal.\u003c/p\u003e\n\u003cp\u003e(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value \u0026lt; node.val, and any descendant of node.right has a value \u0026gt; node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cp\u003eInput: [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]\u003c/p\u003e","title":"Construct Binary Search Tree from Preorder Traversal"},{"content":"Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\n(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\nYou are given a target value to search. If found in the array return its index, otherwise return -1.\nYou may assume no duplicate exists in the array.\nYour algorithm\u0026rsquo;s runtime complexity must be in the order of O(log n).\n1 2 3 4 Example 1: Input: nums = [4,5,6,7,0,1,2], target = 0 Output: 4 1 2 3 4 Example 2: Input: nums = [4,5,6,7,0,1,2], target = 3 Output: -1 Notes: Firstly, we find the index where the numbers start growing, than do basic binary search.\nSolution 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { public int search(int[] nums, int target) { if (nums.length == 0) { return -1; } int n = nums.length; int left = 0; int right = n - 1; // [4,5,6,7,0,1,2] while (left \u0026lt; right) { int mid = left + (right - left) / 2; if (nums[mid] \u0026gt; nums[right]) { left = mid + 1; } else { right = mid; } } int start = left; left = 0; right = n - 1; if (target \u0026gt;= nums[start] \u0026amp;\u0026amp; target \u0026lt;= nums[right]) { left = start; } else { right = start; } while (left \u0026lt;= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { return mid; } if (nums[mid] \u0026lt; target) { left = mid + 1; } else { right = mid - 1; } } return -1; } } Solution 01.06.2021 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int search(int[] nums, int target) { int n = nums.length; int l = 0; int r = n - 1; while (l \u0026lt;= r) { int mid = l + (r - l) / 2; if (nums[mid] == target) { return mid; } else if (isInInterval(nums, target, l, mid)) { r = mid; } else { l = mid + 1; } } return -1; } boolean isInInterval(int[] nums , int t, int l, int r) { // in sorted interval if (nums[l] \u0026lt;= nums[r]) { return t \u0026gt;= nums[l] \u0026amp;\u0026amp; t \u0026lt;= nums[r]; } else { // 4 5 6 .... 1 in shifed interval return t \u0026gt;= nums[l] || t \u0026lt;= nums[r]; } } } ","permalink":"https://volyx.in/posts/2020-04-23-search-in-rotated-sorted-array-imported/","summary":"\u003cp\u003eSuppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\u003c/p\u003e\n\u003cp\u003e(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\u003c/p\u003e\n\u003cp\u003eYou are given a target value to search. If found in the array return its index, otherwise return -1.\u003c/p\u003e\n\u003cp\u003eYou may assume no duplicate exists in the array.\u003c/p\u003e\n\u003cp\u003eYour algorithm\u0026rsquo;s runtime complexity must be in the order of O(log n).\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [4,5,6,7,0,1,2], target = 0\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 4\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: nums = [4,5,6,7,0,1,2], target = 3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: -1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNotes: Firstly, we find the index where the numbers start growing, than do basic binary search.\u003c/p\u003e","title":"Search in Rotated Sorted Array"},{"content":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.\n1 2 3 4 5 6 7 8 9 10 Example: Input: [ [1,3,1], [1,5,1], [4,2,1] ] Output: 7 Explanation: Because the path 1→3→1→1→1 minimizes the sum. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int minPathSum(int[][] grid) { if (grid.length == 0) { return 0; } int[][] dp = new int[grid.length][grid[0].length]; for (int i = 0; i \u0026lt; dp.length; i++) { for (int j = 0; j \u0026lt; dp[i].length; j++) { dp[i][j] = grid[i][j]; // We omit first row and first column if (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { dp[i][j] += Math.min(dp[i - 1][j], dp[i][j - 1]); } else if (i \u0026gt; 0) { dp[i][j] += dp[i - 1][j]; } else if (j \u0026gt; 0) { dp[i][j] += dp[i][j - 1]; } } } return dp[dp.length - 1][dp[0].length - 1]; } } ","permalink":"https://volyx.in/posts/2020-04-20-minimum-path-sum-imported/","summary":"\u003cp\u003eGiven a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\u003c/p\u003e\n\u003cp\u003eNote: You can only move either down or right at any point in time.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [1,3,1],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [1,5,1],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [4,2,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 7\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Because the path 1→3→1→1→1 minimizes the sum.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminPathSum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e grid) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e dp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003egrid.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003egrid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e dp.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#75715e\"\u003e// We omit first row and first column\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e(dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e, dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0)  {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003edp.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003edp\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Minimum Path Sum"},{"content":"Given a 2d grid map of \u0026lsquo;1\u0026rsquo;s (land) and \u0026lsquo;0\u0026rsquo;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Example 1: Input: 11110 11010 11000 00000 Output: 1 ```txt Example 2: Input: 11000 11000 00100 00011 Output: 3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public int numIslands(char[][] grid) { int count = 0; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[i].length; j++) { if (grid[i][j] == \u0026#39;1\u0026#39;) { count++; bfs(grid, i, j); } } } return count; } void bfs(char[][] grid, int i, int j) { if (i \u0026lt; 0 || i \u0026gt;= grid.length) { return; } if (j \u0026lt; 0 || j \u0026gt;= grid[i].length) { return; } if (grid[i][j] == \u0026#39;0\u0026#39;) { return; } grid[i][j] = \u0026#39;0\u0026#39;; bfs(grid, i + 1, j); // up bfs(grid, i, j + 1); // right bfs(grid, i - 1, j); // down bfs(grid, i, j - 1); //left } } Solution 2021-10-23 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class Solution { public int numIslands(char[][] grid) { int count = 0; for (int i = 0; i \u0026lt; grid.length; i++) { for (int j = 0; j \u0026lt; grid[0].length; j++) { if (grid[i][j] == \u0026#39;1\u0026#39;) { dfs(i, j, grid); count++; } } } return count; } int[][] DIRS = new int[][] { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, }; void dfs(int i, int j, char[][] grid) { if (i \u0026lt; 0 || j \u0026lt; 0 || i == grid.length || j == grid[0].length) { return; } if (grid[i][j] != \u0026#39;1\u0026#39;) { return; } grid[i][j] = \u0026#39;0\u0026#39;; for (int[] dir: DIRS) { int x = i + dir[0]; int y = j + dir[1]; dfs(x, y, grid); } } } ","permalink":"https://volyx.in/posts/2020-04-20-number-of-islands-imported/","summary":"\u003cp\u003eGiven a 2d grid map of \u0026lsquo;1\u0026rsquo;s (land) and \u0026lsquo;0\u0026rsquo;s (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e11110\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e11010\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e11000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e00000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e11000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e11000\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e00100\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e00011\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 3\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumIslands\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e grid) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e grid.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    bfs(grid, i, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebfs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e grid, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 0 \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e grid.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 0 \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bfs(grid, i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1, j); \u003cspan style=\"color:#75715e\"\u003e// up\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bfs(grid, i, j \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 1); \u003cspan style=\"color:#75715e\"\u003e// right\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bfs(grid, i \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1, j); \u003cspan style=\"color:#75715e\"\u003e// down\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bfs(grid, i, j \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1); \u003cspan style=\"color:#75715e\"\u003e//left \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"solution-2021-10-23\"\u003eSolution 2021-10-23\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enumIslands\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e grid) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e grid.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dfs(i, j, grid);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e DIRS \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {1, 0},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1, 0},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {0, 1},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {0, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e1},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[][]\u003c/span\u003e grid) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 0 \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e 0 \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e grid.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        grid\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e][\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e dir: DIRS) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e dir\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e dir\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e1\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            dfs(x, y, grid);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Number of Islands"},{"content":"Given an array nums of n integers where n \u0026gt; 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].\n1 2 3 4 Example: Input: [1,2,3,4] Output: [24,12,8,6] Constraint: It\u0026rsquo;s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.\nNote: Please solve it without division and in O(n).\nFollow up: Could you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)\n1 2 3 4 5 6 7 8 Notes: [a,b,c,d,e] [bcde, acde, abed, abce, abcd] [1, a, ab, abc, abcd] [bcde, cde, de, e, 1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public int[] productExceptSelf(int[] nums) { int n = nums.length; int[] leftProduct = new int[n]; int[] rightProduct = new int[n]; int[] result = new int[n]; leftProduct[0] = 1; for (int i = 1; i \u0026lt; n; i++) { leftProduct[i] = leftProduct[i - 1] * nums[i - 1]; } rightProduct[n - 1] = 1; for (int i = n - 1; i \u0026gt; 0; i--) { rightProduct[i - 1] = rightProduct[i] * nums[i]; } for (int i = 0; i \u0026lt; n; i++) { result[i] = leftProduct[i] * rightProduct[i]; } return result; } } Solution 2021-11-21 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Solution { public int[] productExceptSelf(int[] nums) { int n = nums.length; int[] p1 = new int[n]; int[] p2 = new int[n]; Arrays.fill(p1, 1); Arrays.fill(p2, 1); for (int i = 1; i \u0026lt; n; i++) { p1[i] = nums[i - 1]; p1[i] *= p1[i - 1]; } for (int i = n - 1; i \u0026gt; 0; i--) { p2[i - 1] = nums[i]; p2[i - 1] *= p2[i]; } for (int i = 0; i \u0026lt; n; i++) { nums[i] = p1[i] * p2[i]; } return nums; } } Solution 2022-01-24 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { /* Input: nums = [1,2,3,4] Output: [24,12,8,6] 1*2*3*4, 1*3*4, 1*2*4, 1*2*3 [1, 1, 2, 3] = [ 1, 1, 2,6] [2, 3, 4, 1] = [24,12, 4, 1] */ public int[] productExceptSelf(int[] nums) { int n = nums.length; int[] p1 = new int[n]; p1[0] = 1; for (int i = 1; i \u0026lt; n; i++) { p1[i] = nums[i - 1] * p1[i - 1]; } int[] p2 = new int[n]; p2[n - 1] = 1; for (int i = n - 2; i \u0026gt;= 0; i--) { p2[i] = p2[i + 1] * nums[i + 1]; } int[] p = new int[n]; for (int i = 0; i \u0026lt; n; i++) { p[i] = p1[i] * p2[i]; } return p; } } ","permalink":"https://volyx.in/posts/2020-04-19-product-of-array-except-self/","summary":"\u003cp\u003eGiven an array nums of n integers where n \u0026gt; 1,  return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput:  [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: [24,12,8,6]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eConstraint: It\u0026rsquo;s guaranteed that the product of the elements of any prefix or suffix of the array (including the whole array) fits in a 32 bit integer.\u003c/p\u003e","title":"Product of Array Except Self"},{"content":"Given a string containing only three types of characters: \u0026lsquo;(\u0026rsquo;, \u0026lsquo;)\u0026rsquo; and \u0026lsquo;*\u0026rsquo;, write a function to check whether this string is valid. We define the validity of a string by these rules:\nAny left parenthesis \u0026lsquo;(\u0026rsquo; must have a corresponding right parenthesis \u0026lsquo;)\u0026rsquo;. Any right parenthesis \u0026lsquo;)\u0026rsquo; must have a corresponding left parenthesis \u0026lsquo;(\u0026rsquo;. Left parenthesis \u0026lsquo;(\u0026rsquo; must go before the corresponding right parenthesis \u0026lsquo;)\u0026rsquo;. \u0026lsquo;*\u0026rsquo; could be treated as a single right parenthesis \u0026lsquo;)\u0026rsquo; or a single left parenthesis \u0026lsquo;(\u0026rsquo; or an empty string. An empty string is also valid. Example 1:\nInput: \u0026ldquo;()\u0026rdquo; Output: True\nExample 2:\nInput: \u0026ldquo;(*)\u0026rdquo; Output: True\nExample 3:\nInput: \u0026ldquo;(*))\u0026rdquo; Output: True\nNote: The string size will be in the range [1, 100].\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { public boolean checkValidString(String s) { Stack\u0026lt;Integer\u0026gt; open = new Stack(); Stack\u0026lt;Integer\u0026gt; star = new Stack(); char[] chars = s.toCharArray(); for (int i = 0 ; i \u0026lt; chars.length; i++) { if (chars[i] == \u0026#39;(\u0026#39;) { open.push(i); } else if (chars[i] == \u0026#39;*\u0026#39;) { star.push(i); } else if (chars[i] == \u0026#39;)\u0026#39;){ if (!open.isEmpty()) { open.pop(); } else if (!star.isEmpty()) { star.pop(); } else { return false; } } } while (!open.isEmpty()) { if (star.isEmpty()) { return false; } else if (star.peek() \u0026gt; open.peek()) { star.pop(); open.pop(); } else { return false; } } return true; } } ","permalink":"https://volyx.in/posts/2020-04-19-valid-parenthesis-string-imported/","summary":"\u003cp\u003eGiven a string containing only three types of characters: \u0026lsquo;(\u0026rsquo;, \u0026lsquo;)\u0026rsquo; and \u0026lsquo;*\u0026rsquo;, write a function to check whether this string is valid. We define the validity of a string by these rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAny left parenthesis \u0026lsquo;(\u0026rsquo; must have a corresponding right parenthesis \u0026lsquo;)\u0026rsquo;.\u003c/li\u003e\n\u003cli\u003eAny right parenthesis \u0026lsquo;)\u0026rsquo; must have a corresponding left parenthesis \u0026lsquo;(\u0026rsquo;.\u003c/li\u003e\n\u003cli\u003eLeft parenthesis \u0026lsquo;(\u0026rsquo; must go before the corresponding right parenthesis \u0026lsquo;)\u0026rsquo;.\u003c/li\u003e\n\u003cli\u003e\u0026lsquo;*\u0026rsquo; could be treated as a single right parenthesis \u0026lsquo;)\u0026rsquo; or a single left parenthesis \u0026lsquo;(\u0026rsquo; or an empty string.\u003c/li\u003e\n\u003cli\u003eAn empty string is also valid.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e","title":"Valid Parenthesis String"},{"content":"You are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:\ndirection can be 0 (for left shift) or 1 (for right shift). amount is the amount by which string s is to be shifted. A left shift by 1 means remove the first character of s and append it to the end. Similarly, a right shift by 1 means remove the last character of s and add it to the beginning. Return the final string after all operations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Example 1: Input: s = \u0026#34;abc\u0026#34;, shift = [[0,1],[1,2]] Output: \u0026#34;cab\u0026#34; Explanation: [0,1] means shift to left by 1. \u0026#34;abc\u0026#34; -\u0026gt; \u0026#34;bca\u0026#34; [1,2] means shift to right by 2. \u0026#34;bca\u0026#34; -\u0026gt; \u0026#34;cab\u0026#34; Example 2: Input: s = \u0026#34;abcdefg\u0026#34;, shift = [[1,1],[1,1],[0,2],[1,3]] Output: \u0026#34;efgabcd\u0026#34; Explanation: [1,1] means shift to right by 1. \u0026#34;abcdefg\u0026#34; -\u0026gt; \u0026#34;gabcdef\u0026#34; [1,1] means shift to right by 1. \u0026#34;gabcdef\u0026#34; -\u0026gt; \u0026#34;fgabcde\u0026#34; [0,2] means shift to left by 2. \u0026#34;fgabcde\u0026#34; -\u0026gt; \u0026#34;abcdefg\u0026#34; [1,3] means shift to right by 3. \u0026#34;abcdefg\u0026#34; -\u0026gt; \u0026#34;efgabcd\u0026#34; Notes: calculate one mega shift. Do shift with two substring method calls.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public String stringShift(String s, int[][] shift) { int n = s.length(); int rightShift = 0; for (int i = 0; i \u0026lt; shift.length; i++) { int[] one = shift[i]; if (one[0] == 0) { rightShift = rightShift + (n - one[1]); } else { rightShift = rightShift + one[1]; } } rightShift = rightShift % n; return s.substring(n - rightShift) + s.substring(0, n - rightShift); } } ","permalink":"https://volyx.in/posts/2020-04-18-perform-string-shifts-imported/","summary":"\u003cp\u003eYou are given a string s containing lowercase English letters, and a matrix shift, where shift[i] = [direction, amount]:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003edirection can be 0 (for left shift) or 1 (for right shift).\u003c/li\u003e\n\u003cli\u003eamount is the amount by which string s is to be shifted.\u003c/li\u003e\n\u003cli\u003eA left shift by 1 means remove the first character of s and append it to the end.\u003c/li\u003e\n\u003cli\u003eSimilarly, a right shift by 1 means remove the last character of s and add it to the beginning.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eReturn the final string after all operations.\u003c/p\u003e","title":"Perform String Shifts"},{"content":"Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.\nExample 1:\n1 2 3 4 5 6 7 8 9 Input: [0,1] Output: 2 Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1. Example 2: ```txt Input: [0,1,0] Output: 2 Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. Note: The length of the given binary array will not exceed 50,000.\nA picture inside solution secture helps a lot. Solution\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int findMaxLength(int[] nums) { Map\u0026lt;Integer, Integer\u0026gt; firstOc = new HashMap\u0026lt;\u0026gt;(); firstOc.put(0, -1); int maxLength = 0; int counter = 0; for (int i = 0; i \u0026lt; nums.length; i++) { counter+= (nums[i] == 0) ? -1: 1; Integer it = firstOc.get(counter); if (it != null) { maxLength = Math.max(maxLength, i - it); } else { firstOc.put(counter, i); } } return maxLength; } } ","permalink":"https://volyx.in/posts/2020-04-17-contiguous-array-imported/","summary":"\u003cp\u003eGiven a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.\u003c/p\u003e\n\u003cp\u003eExample 1:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [0,1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e```txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [0,1,0]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: 2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote: The length of the given binary array will not exceed 50,000.\u003c/p\u003e","title":"Contiguous Array"},{"content":"We have a collection of stones, each stone has a positive integer weight.\nEach turn, we choose the two heaviest stones and smash them together. Suppose the stones have weights x and y with x \u0026lt;= y. The result of this smash is:\nIf x == y, both stones are totally destroyed; If x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x. At the end, there is at most 1 stone left. Return the weight of this stone (or 0 if there are no stones left.)\n1 2 3 4 5 6 7 8 9 Example 1: Input: [2,7,4,1,8,1] Output: 1 Explanation: We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that\u0026#39;s the value of last stone. Note:\n1 \u0026lt;= stones.length \u0026lt;= 30 1 \u0026lt;= stones[i] \u0026lt;= 1000 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int lastStoneWeight(int[] stones) { PriorityQueue\u0026lt;Integer\u0026gt; heap = new PriorityQueue\u0026lt;\u0026gt;((s1, s2) -\u0026gt; { return -Integer.compare(s1, s2); }); for (Integer stone: stones) { heap.add(stone); } System.out.println(\u0026#34;heap size =\u0026#34; + heap.size()); while (heap.size() \u0026gt; 1) { Integer a = heap.poll(); Integer b = heap.poll(); System.out.println(\u0026#34;a = \u0026#34; + a + \u0026#34; b = \u0026#34; + b); if (a == b) { continue; } heap.add(Math.abs(a - b)); } return heap.isEmpty() ? 0 : heap.poll(); } } ","permalink":"https://volyx.in/posts/2020-04-16-last-stone-weight-imported/","summary":"\u003cp\u003eWe have a collection of stones, each stone has a positive integer weight.\u003c/p\u003e\n\u003cp\u003eEach turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights x and y with x \u0026lt;= y.  The result of this smash is:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf x == y, both stones are totally destroyed;\u003c/li\u003e\n\u003cli\u003eIf x != y, the stone of weight x is totally destroyed, and the stone of weight y has new weight y-x.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAt the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)\u003c/p\u003e","title":"Last Stone Weight"},{"content":"Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nExample: Given a binary tree\n1 2 3 4 5 1 / \\ 2 3 / \\ 4 5 Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\nNote: The length of path between two nodes is represented by the number of edges between them.\n1 2 3 4 5 {3,4} 1 / \\ {2,2} 2 3{0,1} / \\ {0,1} 4 5{0,1} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { Node dfs(TreeNode root) { if (root == null) { return new Node(); } Node left = dfs(root.left); Node right = dfs(root.right); // diametr, depth int diam = Math.max(Math.max(left.diametr, right.diametr), left.depth + right.depth); return new Node(diam, 1 + Math.max(left.depth, right.depth)); } public int diameterOfBinaryTree(TreeNode root) { return dfs(root).diametr; } class Node { Node() {} Node(int diametr, int depth) { this.diametr = diametr; this.depth = depth; } public int diametr; public int depth; } } Solutions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int maxDistance = 0; public int diameterOfBinaryTree(TreeNode root) { longest(root); return maxDistance; } int longest(TreeNode node) { if (node == null) return 0; int leftLen = longest(node.left); int rightLen = longest(node.right); maxDistance = Math.max(maxDistance, leftLen + rightLen); return 1 + Math.max(leftLen, rightLen); } } Solution 2021-10-29 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int diameter = 0; public int diameterOfBinaryTree(TreeNode root) { depth(root); return diameter; } int depth(TreeNode node) { if (node == null) { return 0; } int left = depth(node.left); int right = depth(node.right); diameter = Math.max(diameter, left + right); return Math.max(left, right) + 1; } } Solution 2021-11-08 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int maxLen = 0; public int diameterOfBinaryTree(TreeNode root) { longestPath(root); return maxLen; } int longestPath(TreeNode node) { if (node == null) { return 0; } int leftLevel = longestPath(node.left); int rightLevel = longestPath(node.right); System.out.println(\u0026#34;node \u0026#34; + node.val + \u0026#34; \u0026#34; + leftLevel + \u0026#34; \u0026#34; + rightLevel); maxLen = Math.max(maxLen, leftLevel + rightLevel); return Math.max(leftLevel, rightLevel) + 1; } } Solution 2021-11-18 Iterative 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public int diameterOfBinaryTree(TreeNode root) { Queue\u0026lt;TreeNode\u0026gt; q = new ArrayDeque\u0026lt;\u0026gt;(); q.add(root); Map\u0026lt;TreeNode, TreeNode\u0026gt; parents = new HashMap\u0026lt;\u0026gt;(); TreeNode deepestNode = root; while (q.size() \u0026gt; 0) { int size = q.size(); for (int i = 0; i \u0026lt; size; i++) { TreeNode node = q.poll(); deepestNode = node; if (node.left != null) { parents.put(node.left, node); q.add(node.left); } if (node.right != null) { parents.put(node.right, node); q.add(node.right); } } } q.add(deepestNode); Set\u0026lt;TreeNode\u0026gt; visited = new HashSet\u0026lt;\u0026gt;(); visited.add(deepestNode); int diameter = 0; while (q.size() \u0026gt; 0) { int size = q.size(); for (int i = 0; i \u0026lt; size; i++) { TreeNode node = q.poll(); for (TreeNode next: new TreeNode[] {node.left, node.right, parents.get(node)}) { if (next != null \u0026amp;\u0026amp; !visited.contains(next)) { q.add(next); visited.add(next); } } } diameter++; } return diameter - 1; } int maxLen = 0; public int diameterOfBinaryTreeRec(TreeNode root) { longest(root); return maxLen; } int longest(TreeNode node) { if (node == null) { return 0; } int left = longest(node.left); int right = longest(node.right); maxLen = Math.max(maxLen, left + right); return Math.max(left, right) + 1; } } Solution 2022-01-30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { int max = -1; public int diameterOfBinaryTree(TreeNode root) { depth(root); return max; } int depth(TreeNode node) { if (node == null) { return 0; } int maxLeft = depth(node.left); int maxRight = depth(node.right); max = Math.max(maxLeft + maxRight, max); return Math.max(maxLeft, maxRight) + 1; } } ","permalink":"https://volyx.in/posts/2020-04-15-diameter-of-binary-tree/","summary":"\u003cp\u003eGiven a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\u003c/p\u003e\n\u003cp\u003eExample:\nGiven a binary tree\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          1\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        2   3\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       / \\\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      4   5\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eReturn 3, which is the length of the path [4,2,1,3] or [5,2,1,3].\u003c/p\u003e","title":"Diameter of Binary Tree"},{"content":"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\npush(x) \u0026ndash; Push element x onto stack. pop() \u0026ndash; Removes the element on top of the stack. top() \u0026ndash; Get the top element. getMin() \u0026ndash; Retrieve the minimum element in the stack. 1 2 3 4 5 6 7 8 9 10 Example: MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --\u0026gt; Returns -3. minStack.pop(); minStack.top(); --\u0026gt; Returns 0. minStack.getMin(); --\u0026gt; Returns -2. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class MinStack { private LinkedList\u0026lt;Node\u0026gt; stack = new LinkedList\u0026lt;\u0026gt;(); /* value, min -3, -3 0, -2 -2, -2 */ /** initialize your data structure here. */ public MinStack() { } public void push(int x) { Node node; if (stack.isEmpty()) { node = new Node(x, x); } else { int min = Math.min(x, stack.peekFirst().min); node = new Node(x, min); } stack.push(node); System.out.printf(\u0026#34;val %d min %d\\n\u0026#34;, node.value, node.min); } public void pop() { Node pop = stack.pop(); System.out.printf(\u0026#34;pop val %d min %d\\n\u0026#34;, pop.value, pop.min); } public int top() { return stack.peekFirst().value; } public int getMin() { Node first = stack.peekFirst(); System.out.printf(\u0026#34;getMin val %d min %d\\n\u0026#34;, first.value, first.min); return first.min; } class Node { Node(int value, int min) { this.value= value; this.min = min; } int value; int min; } } /** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(x); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */ ","permalink":"https://volyx.in/posts/2020-04-14-min-stack-imported/","summary":"\u003cp\u003eDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003epush(x) \u0026ndash; Push element x onto stack.\u003c/li\u003e\n\u003cli\u003epop() \u0026ndash; Removes the element on top of the stack.\u003c/li\u003e\n\u003cli\u003etop() \u0026ndash; Get the top element.\u003c/li\u003e\n\u003cli\u003egetMin() \u0026ndash; Retrieve the minimum element in the stack.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eMinStack minStack = new MinStack();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.push(-2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.push(0);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.push(-3);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.getMin();   --\u0026gt; Returns -3.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.top();      --\u0026gt; Returns 0.\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eminStack.getMin();   --\u0026gt; Returns -2.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e15\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e16\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e17\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e18\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e19\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e20\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e21\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e22\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e23\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e24\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e25\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e26\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e27\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e28\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e29\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e30\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e31\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e32\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e33\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e34\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e35\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e36\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e37\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e38\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e39\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e40\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e41\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e42\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e43\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e44\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e45\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e46\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e47\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e48\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e49\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e50\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e51\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e52\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e53\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e54\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e55\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e56\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e57\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e58\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e59\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e60\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e61\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e62\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e63\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e64\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e65\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e66\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e67\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e68\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e69\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-java\" data-lang=\"java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMinStack\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e LinkedList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e stack \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e LinkedList\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/*     value, min\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e           -3, -3 \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e            0, -2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e           -2, -2  \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e    */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e/** initialize your data structure here. */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMinStack\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Node node;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (stack.\u003cspan style=\"color:#a6e22e\"\u003eisEmpty\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Node(x, x);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e min \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Math.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e(x, stack.\u003cspan style=\"color:#a6e22e\"\u003epeekFirst\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Node(x, min);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        stack.\u003cspan style=\"color:#a6e22e\"\u003epush\u003c/span\u003e(node);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;val %d min %d\\n\u0026#34;\u003c/span\u003e, node.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e, node.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epop\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Node pop \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e stack.\u003cspan style=\"color:#a6e22e\"\u003epop\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pop val %d min %d\\n\u0026#34;\u003c/span\u003e, pop.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e, pop.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etop\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e stack.\u003cspan style=\"color:#a6e22e\"\u003epeekFirst\u003c/span\u003e().\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetMin\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Node first \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e stack.\u003cspan style=\"color:#a6e22e\"\u003epeekFirst\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;getMin val %d min %d\\n\u0026#34;\u003c/span\u003e, first.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e, first.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e first.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Node(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e value, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e min) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003evalue\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e value;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003emin\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e min;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e value;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e min;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/**\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * Your MinStack object will be instantiated and called as such:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * MinStack obj = new MinStack();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * obj.push(x);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * obj.pop();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * int param_3 = obj.top();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e * int param_4 = obj.getMin();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"Min Stack"},{"content":"Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.\n1 2 3 4 5 Example 1: Input: S = \u0026#34;ab#c\u0026#34;, T = \u0026#34;ad#c\u0026#34; Output: true Explanation: Both S and T become \u0026#34;ac\u0026#34;. 1 2 3 4 5 Example 2: Input: S = \u0026#34;ab##\u0026#34;, T = \u0026#34;c#d#\u0026#34; Output: true Explanation: Both S and T become \u0026#34;\u0026#34;. 1 2 3 4 5 Example 3: Input: S = \u0026#34;a##c\u0026#34;, T = \u0026#34;#a#c\u0026#34; Output: true Explanation: Both S and T become \u0026#34;c\u0026#34;. 1 2 3 4 5 Example 4: Input: S = \u0026#34;a#c\u0026#34;, T = \u0026#34;b\u0026#34; Output: false Explanation: S becomes \u0026#34;c\u0026#34; while T becomes \u0026#34;b\u0026#34;. Note:\n1 \u0026lt;= S.length \u0026lt;= 200 1 \u0026lt;= T.length \u0026lt;= 200 S and T only contain lowercase letters and \u0026lsquo;#\u0026rsquo; characters. Follow up:\nCan you solve it in O(N) time and O(1) space? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 class Solution { public boolean backspaceCompare(String S, String T) { StringBuilder s1 = new StringBuilder(); StringBuilder t1 = new StringBuilder(); int i = 0; int j = 0; char[] s = S.toCharArray(); char[] t = T.toCharArray(); while(i \u0026lt; s.length || j \u0026lt; t.length) { if (i \u0026lt; s.length) { if (s[i] == \u0026#39;#\u0026#39;) { if (s1.length() != 0) { s1.deleteCharAt(s1.length() - 1); } } else { s1.append(s[i]); } i++; } if (j \u0026lt; t.length) { if (t[j] == \u0026#39;#\u0026#39;) { if (t1.length() != 0) { t1.deleteCharAt(t1.length() - 1); } } else { t1.append(t[j]); } j++; } } System.out.printf(\u0026#34;%s %s\\n\u0026#34;, s1, t1); return s1.toString().equals(t1.toString()); } } ","permalink":"https://volyx.in/posts/2020-04-13-backspace-string-compare-imported/","summary":"\u003cp\u003eGiven two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;ab#c\u0026#34;, T = \u0026#34;ad#c\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both S and T become \u0026#34;ac\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;ab##\u0026#34;, T = \u0026#34;c#d#\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both S and T become \u0026#34;\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 3:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;a##c\u0026#34;, T = \u0026#34;#a#c\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: true\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: Both S and T become \u0026#34;c\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 4:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: S = \u0026#34;a#c\u0026#34;, T = \u0026#34;b\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: false\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExplanation: S becomes \u0026#34;c\u0026#34; while T becomes \u0026#34;b\u0026#34;.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Backspace String Compare"},{"content":"Given a non-empty, singly linked list with head node head, return a middle node of linked list.\nIf there are two middle nodes, return the second middle node.\nExample 1:\n1 2 3 4 5 Input: [1,2,3,4,5] Output: Node 3 from this list (Serialization: [3,4,5]) The returned node has value 3. (The judge\u0026#39;s serialization of this node is [3,4,5]). Note that we returned a ListNode object ans, such that: ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. Example 2:\n1 2 3 Input: [1,2,3,4,5,6] Output: Node 4 from this list (Serialization: [4,5,6]) Since the list has two middle nodes with values 3 and 4, we return the second one. Note:\nThe number of nodes in the given list will be between 1 and 100. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode middleNode(ListNode head) { /* (1, *) -\u0026gt; (2, *) -\u0026gt; (3, *) -\u0026gt; (4, *) -\u0026gt; (5, null) */ ListNode a = head; ListNode b = head; while (b.next != null) { a = a.next; b = b.next; if (b.next == null) { return a; } b = b.next; } return a; } } ","permalink":"https://volyx.in/posts/2020-04-12-leetcode-new-imported/","summary":"Middle of the Linked List","title":"Middle of the Linked List"},{"content":"Given a non-empty, singly linked list with head node head, return a middle node of linked list.\nIf there are two middle nodes, return the second middle node.\n1 2 3 4 5 6 7 Example 1: Input: [1,2,3,4,5] Output: Node 3 from this list (Serialization: [3,4,5]) The returned node has value 3. (The judge\u0026#39;s serialization of this node is [3,4,5]). Note that we returned a ListNode object ans, such that: ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL. 1 2 3 4 5 Example 2: Input: [1,2,3,4,5,6] Output: Node 4 from this list (Serialization: [4,5,6]) Since the list has two middle nodes with values 3 and 4, we return the second one. Note:\nThe number of nodes in the given list will be between 1 and 100. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode middleNode(ListNode head) { /* (1, *) -\u0026gt; (2, *) -\u0026gt; (3, *) -\u0026gt; (4, *) -\u0026gt; (5, null) */ ListNode a = head; ListNode b = head; while (b.next != null) { a = a.next; b = b.next; if (b.next == null) { return a; } b = b.next; } return a; } } ","permalink":"https://volyx.in/posts/2020-04-12-middle-of-the-linked-list-imported/","summary":"\u003cp\u003eGiven a non-empty, singly linked list with head node head, return a middle node of linked list.\u003c/p\u003e\n\u003cp\u003eIf there are two middle nodes, return the second middle node.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e6\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e7\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 1:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,2,3,4,5]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: Node 3 from this list (Serialization: [3,4,5])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eThe returned node has value 3.  (The judge\u0026#39;s serialization of this node is [3,4,5]).\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNote that we returned a ListNode object ans, such that:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e1\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e2\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e3\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e4\n\u003c/span\u003e\u003cspan style=\"white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e5\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eExample 2:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eInput: [1,2,3,4,5,6]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eOutput: Node 4 from this list (Serialization: [4,5,6])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSince the list has two middle nodes with values 3 and 4, we return the second one.\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003eNote:\u003c/p\u003e","title":"Middle of the Linked List"},{"content":"Малхолленд драйв с Городецким.\nКартина не дожата. Чувствуются не состыковки, не доработки либо сецнария, либо режиссера. В каждый момент времени зритель должен задумываться и сомневаться какой из Богдановых сейчас в кадре, но решение приходит ровно через секунду, и оно всегда правильное. Вопросов не остается. Даже в последнем кадре фильма ехидная ухмыкла Богданова казалось бы должна оставить в нас сомнения - кто перед нами? Но сомнений нет, ведь концовка добрая как в Иронии судьбы 2.\nДа, и сам Богданов часто похож на слегка покачивающегося Антона Городецского из ночного дозора, на учителя из географа, на запивающего таблетки алкоголем Меглина из метода, на Иронию судьбы.\nВ новом амплуа - крутого тусовщика писателя Плахов мне показался интересней, я смотрел на передачу Богданов Live и не узнавал его.\n","permalink":"https://volyx.in/posts/2018-02-05-selfi-new-imported/","summary":"Селфи","title":"Селфи"},{"content":"Есть куча статьей, которые советуют учить английский по фильмам - раз, два. Есть даже целые сайты, которые специализируются на обучении языку по фильмы и сериалам.\nПрокачивать понимание английского не обязательно по фильмам, можно и просто по роликам с ютьюба, по статьям в интернете. Например, если вы маркетолог, то можно проходить курс на английском по маркетингу, если программист - то смотреть видео с зарубежных конференций.\nКоооншенснэс Где-то год я так делал. Сериалы \u0026ldquo;Silicon Valley\u0026rdquo;, \u0026ldquo;Westworld\u0026rdquo; с начала и до конца просмотрел на английском. На ютьюбе нет конференции по Джаве, о которой бы я не знал. Но как выяснилось через несколько недель, с этих двух сериалов я запомнил всего одно слово - коооншенснэс(осознанность). Это конечно, успех. Мой вокабуляр теперь пополнен на целое одно слово. Которое я даже не знаю как может пригодится в беседе. Неплохо для нескольких недель потраченного времени.\nСама идея - учить новый язык по фильмам и сериалам завораживает. Кажется, что вот он естественный и не скучный способ, без напряга и зазубривания слов. И вот ты уже столько вроде фильмов просмотрел - должен уж наверное болтать во всю. Но нет. Так не бывает.\nЕсть два типа сериалов - с понятным простым английским и с непонятным. Сериалы с простым английским скучно смотреть. Просмотрев половину сезона \u0026ldquo;Друзей\u0026rdquo; мне просто надоело. А интересный сериал, со сложным английским часто наполнен редкими словами. Ну например, зачем мне учить как по-английски будут \u0026ldquo;Белые ходоки\u0026rdquo;? Игра Престолов, конечно, мне очень нравится, и я очень хочу смотреть ее в оригинале. Но в ней не разговорный английский.\nВ профессиональном английском тоже можно прокачаться так, что быстро связывать термины весьма простыми английскими словами. Put сюда, get отсюда и т.д. Это конечно тоже полезно, но далеко от моей цели - разговорный английский.\nХау дую дую Для меня разговорный английский - это умение выражать свои мысли на разные темы. Можно практиковать и самому себе задавать разные вопросы, и рассказывать себе под нос, например по пути с работы. Вы сами почувствуете на чем затыкаетесь, и это и будет следующим пунктом назначения - того что нужно подтянуть.\nПоследний из трюков, это смотреть на ютьюьба доклады с TEDx. Мне нравится, что доклад содержит всего одну главную мысль. С виду похоже на сочинение на заданную тему. Вступительные фразы, связывающие части - все очень полезно. Докладчик говорит очень экспрессивно, английский простой, но разговорный. Сами видео длинной около 20 минут. Идеальный уровень новых слов. Переключаем на разных спикеров, и слушаем разные акценты.\nНу и конечно все записывать. Необязательно дословно, можно как конспект, по пунктам. Интересные или непонятные слова обязательно гуглить.\nВот мой список просмотренного с конспектом.\nУспех для каждого разный Успех - это самовыражение, быть босом для самого себя. Возможность выбирать, что делать и как делать. Ключ к успеху - перестать удовлетворять чужим ожиданиям, удовлетворять свои. Верить в себя, тогда остальные начнут верить в тебя тоже. Предлагает 3 принципа, которые помогут достичь успеха\nЧитать больше книг. Если читать 30 минут в день, то это одна книга в месяц. В год - 12 книг. В среднем человек читает столько за 5 лет. Нужно найти лидеров - людей, которыми восхищаетесь. Друзья могут тянуть вниз, лидеры будут тянуть вверх. Окружить себя людьми, которые умнее тебя, которые имеет цели. Установить цели. B - books, I - individuals, G - goals. That, all you need.\nПарень топит за пассивный доход. Из полезного - очень простые слова и приемлемая скорость.\nАвтор говорит, о том что у нас много всяких приспособлений для тайм-менеджмента, но ничего из этого не работает. Все туду-листы и записные книжки работают по алгоритму:\nРасставь приоритет Займи время у менее приоритетной Получается, что мы управляем временем, но его не становится больше - мы просто перетусовываем задачи туда-сюда.\nСпикер предлагает воронку, через которую нужно пропускать задачи:\nМожно ли не делать эту задачу? Можно автоматизировать задачу? Можно делегировать задачу? Спикер утверждает, что людям есть много чему поучиться у дельфинов.\nприспособление сон игры социальные отношения Спикер утверждает что каждого человека можно осчастливить 3 словами.\nTell me more What happened next? ","permalink":"https://volyx.in/posts/2017-07-19-tedx-talks-new-imported/","summary":"Учить разговорный английский по фильмам бесполезно","title":"Английский по TEDx"},{"content":"","permalink":"https://volyx.in/posts/2017-06-24-main-advice-new-imported/","summary":"Самый важный совет для начинающих программистов","title":"Самый важный совет для начинающих программистов"},{"content":"Привет!\nВ выпуске смотрим как Марк Рейнхольд рефакторит проект к джаве 9, изучаем новую утилиту jstat и разбираемся почему решения для Гугла не подходят маленьким приложениям.\nhttps://youtu.be/GkP83hvdeMk\nReal World Java 9 by Trisha Gee\nТриша Ги, девелопер-адвокат из компании Jetbrains показывает, как отрефакторить приложение с восьмой джавы на девятую. Триша пишет код в Inteliji IDEA, в которой уже есть поддержка новых фич.\nhttps://youtu.be/czhSo8rotC4\nMigrating to Modules by Mark Reinhold\nАрхитектор джавы Марк Рейнхольд показывает как разбить существующее приложение на модули. Марк в отличие от Триши пишет код в консоли и собирает проект через коммандную строку. Интересно наблюдать как пишет на джаве архитектор джавы.\n**http://marxsoftware.blogspot.ru/2017/05/jvm-statistics-with-jstat.htm**l\nJVM Statistics with jstat\nАвтор рассказывает о новой утилите для просмотра статистики - ** **jstat. Утилита появится в Java 9. Возникает вопрос зачем она нужна? Ведь все данные из jstat мы можем посмотреть через VisualVM, gc:logs. Дело в том, что теперь с помощью jstat мы сможем подключаться уже к работающей виртуальной машине, и \u0026ldquo;на лету\u0026rdquo; доставать параметры, которые раньше были доступны только, если сконфигурировать их заранее. Большой плюс ещё и в том, что все это можно делать из командной строки. За параметрами и примерами использования — в статью.\nhttps://medium.com/@magnus.chatt/why-you-should-totally-switch-to-kotlin-c7bbde9e10d5\nWhy you should totally switch to Kotlin\nКотлин нехило хайпанул после Google IO, где его объявили официальным языком для написания приложений для андройда. Благодаря этому, интернет наводнили десятки статей о том «нужен ли Котлин», «Котлин не нужен», «Почему следует использовать Котлин». Конечно, лучше самому написать на котлине пару хеллоу-ворлдов, но если нет времени то - можно прочесть статью. В ней автор проходится по фичам языка, и рассказывает чем язык так хорош.\nhttps://plumbr.eu/blog/performance-blog/the-use-of-proxy-indicators-in-service-management\nThe use of proxy indicators in service management\nСтатья о том как SLA приложения зависит от длины очереди, по каким метрикам команда Plumbr мониторит длину очередей между микросервисами и как они к этому пришли.\nhttps://www.infoq.com/articles/Finalize-Exiting-Java\nUnder The Hood with the JVM\u0026rsquo;s Automatic Resource Management\nМетод finalize() пришел в Java из С++ из паттерна RAII(Resource Acquisition Is Initialization) Автор рассказывает о том: как метод finalize() появился в джаве.\n**https://blog.bradfieldcs.com/you-are-not-google-84912cf44af**b\nYou Are Not Google\nВашим данным скорее всего подойдет обычная SQL база данных. Не согласны? Добро пожаловать в статью, в которой автор рассказывает почему вам не нужны большинство популярных highload решений.\n**http://sgiz.mobi/s3/63243b734400** Опрос\nНапоследок, опрос о работодателях от группы студентов факультета социологии СПбГУ. Они проводят исследование рейтинга IT работодателей Санкт-Петербурга и Москвы. Опрос займет 5 минут. Обязательно приложим результаты опроса. Либо вы увидите их сами на habrahabr.ru в блоге \u0026ldquo;Моего круга\u0026rdquo; и в группе https://vk.com/jugru.\n","permalink":"https://volyx.in/posts/2017-06-19-javaswag-32-new-imported/","summary":"В выпуске смотрим как Марк Рейнхольд рефакторит проект к джаве 9, изучаем новую утилиту jstat и разбираемся почему решения для Гугла не подходят маленьким приложениям.","title":"Javaswag выпуск 32"},{"content":"Привет! В выпуске декомпозируем микросервисы с помощью RabbitMq, читаем мнение о Jigsaw от разработчика ByteBuddy и узнаем, что думает главный архитектор джавы насчет этого.\nhttps://youtu.be/ac1v5kF_FGs\nAsk the architect with Mark Reinhold and Dan Hardiker\nМарк Рейнхольд отвечает на вопросы о Jigsaw и развеивает основные опасения насчет в Java 9.\nhttps://techblog.bozho.net/spring-boot-enablewebmvc-common-use-cases/\nSpring Boot, @EnableWebMvc And Common Use-Cases\nАвтор разбирается как работает аннотация @EnableWebMvc в спринге.\nhttp://blog.codeleak.pl/2017/04/thymeleaf-3-standard-layout-system.html\nTHYMELEAF 3 STANDARD LAYOUT SYSTEM IMPROVEMENTS\nРелиз таймлифа c 3 версии полностью переписан. Пробовал заменить вторую версию на третью и все заработало, кроме тэга th:include. Заменяем тэг th:include на th:insert и все работает из коробки.\nhttps://programmaticponderings.com/2017/05/08/decoupling-microservices-using-message-based-rpc-ipc-with-spring-rabbitmq-and-ampq/\nDecoupling Microservices using Message-based RPC IPC, with Spring, RabbitMQ, and AMPQ\nЧтобы микросервисы не зависили друг от друга обычно делают их \u0026ldquo;слабо связанными\u0026rdquo;. Автор рассматривает один из таких способов используя Spring, RabbitMq и MongoDB.\nhttps://www.insaneprogramming.be/article/2017/05/01/what-i-dont-like-spring-data/\nSpring Data and Clean Architecture\nПост про удобность и неудобность модуля спринг дата для монги. Все именно так, как пишет автор, в начале — восхищение библиотекой, затем — желание избавится.\nhttps://www.infoq.com/presentations/performance-managed-languages\nHigh Performance Managed Languages\nМартин Томпсон рассказывает про методы оптимизации приложений: про стратегии доступа к памяти, про оптимизации в рантайме, и про плюсы языков с \u0026ldquo;рантаймом\u0026rdquo; над статически компилируемыми.\nhttp://mreinhold.org/blog/to-the-jcp-ec\nAn Open Letter to the JCP Executive Committee\nКомпании IBM и Red Hat проголосовали против модульной системы в джаве 9 . В ответ на это главный архитектор Java Марк Рейнхолд написал открытое письмо, в котором намекнул, что Jigsaw будет выпущена даже если комитет будет против. Перед релизом джава 9 становится все жарче и жарче.\nhttp://mydailyjava.blogspot.ru/2017/05/yet-another-jigsaw-opinion-piece.html\nYet another Jigsaw opinion piece\nВ продолжении обсуждения модульной системы Рафаэль Винтерхалтер, создатель известной библиотеки ByteBuddy высказывает свое мнение.\nhttps://www.youtube.com/watch?v=9CJ_BAeOmW0\nDeconstructing REST Security by David Blevins\nИз доклада узнаете зачем хранить состояние аутентификации прямо в запросе.Спикер рассматривает несколько подходов к аутентификации и приходит к \u0026ldquo;идеальному\u0026rdquo; решению. В итоге «победил» Амазон и их кастомная реализация JWT.\nhttps://www.togglz.org/\nTogglz\nTogglz - библиотека, которая позволяет управлять фичами в приложении, по сути это набор Enum, но с удобным менеджером и контекстом.\n","permalink":"https://volyx.in/posts/2017-05-18-javaswag-31-new-imported/","summary":"В выпуске декомпозируем микросервисы с помощью RabbitMq, читаем мнение о Jigsaw от разработчика ByteBuddy и узнаем, что думает главный архитектор джавы насчет этого.","title":"Javaswag выпуск 31"},{"content":"Привет! В выпуске загружаем CPU по полной используя ForkJoinPool, строим архитектуру минимальными средствами и разбираемся что будет с Reflection в Java 9.\nhttp://blog.sokolenko.me/2014/11/javavm-options-production.html\nJava VM Options You Should Always Use in Production\nКаждый раз гуглю эту статью, когда не могу вспомнить, как настроить ротацию логов для сборщика мусора. Решил увековечить ее за это в рассылке. Она мне помогла уже не один раз.\nhttps://www.sitepoint.com/reflection-vs-encapsulation-in-the-java-module-system/\nReflection vs Encapsulation – Stand Off in the Java Module System\nНиколай Парлог рассказывает что будет с рефлекшенем в джаве 9. Если вкратце, то мы сможем управлять видимостью объектов через рефлекшен с помощью \u0026ldquo;директив\u0026rdquo; в module-info.java\nhttps://youtu.be/rUDGQQ83ZtI\nTurbo Charge CPU Utilization in Fork/Join Using the ManagedBlocker by Heinz Kabutz\nХайнз рассказывает как заставить процессор работать на все 100%. Разгоняет он его используя ForkJoinPool и RecursiveTask. Не обошлось без написания своего метода умножения для BigInteger.\nhttps://www.infoq.com/presentations/java-9-gc\nGoodbye PrintGCDetails\u0026hellip; and Other JDK 9 Changes!\nОт том как изменится вывод сборщика мусора в джаве 9.\nhttps://dzone.com/articles/the-garage-architecture\nThe Garage Architecture\nУчимся строить архитектуру из **вна и палок. Как бы выглядела архитектура приложения-стартапа из гаража.\nhttps://balamaci.ro/kafka-streams-for-stream-processing/\nKafka Streams for Stream processing\nA few words about how Kafka works.\nСтатью стоило назвать \u0026ldquo;Кафка квик старт для джава разработчика\u0026rdquo;. В статье рассказывается, что такое Кафка, с примерами, как запустить ее на своем компьютере с несколькими “консюмерами” и “продюсерами”\nhttps://tanyg.in/ia-tvoi-ghipiervizor-v-ighrie-sinii-kit-ili-docker-v-tiestirovanii/\n**Я твой гипервизор в игре \u0026ldquo;Синий кит\u0026rdquo;, или Docker в тестировании **Автор рассказывает о преимуществах запуска тестов в докере. Запускает селениум тесты в контейнере и делится проблемами.\n**http://cr.openjdk.java.net/~briangoetz/amber/pattern-match.htm**l\nPattern Matching for Java\nНа странице всем известного Брайна Гетца выложена статья о том, как мог бы выглядеть паттерн матчинг в джаве. Написано, что ни в коем случае не обещают паттерн матчинг ни в каких ближайших релизах, но вопрос - зачем тогда писать статью об этом? Наверняка, архитекторы джавы втихаря подумывают об этом.\nhttps://github.com/testcontainers/testcontainers-java\n**TestContainers **Не могу не поделиться классной библиотекой для запуска докер контейнеров для ваших интеграционных тестов. Хватит писать моки на базу данных, поднимите настояющую!\n","permalink":"https://volyx.in/posts/2017-04-28-javaswag-30-new-imported/","summary":"В выпуске загружаем CPU по полной используя ForkJoinPool, строим архитектуру минимальными средствами и разбираемся что будет с Reflection в Java 9.","title":"Javaswag выпуск 30"},{"content":"Всем привет! В выпуске создаем докер контейнеры на все случаи жизни, разбираемся с отличиями реактивных систем и ставим себе мавен-плагин для отображения времени выполнения.\nhttps://www.voxxed.com/blog/interview/java-9-coming-nicolai-parlog/\nJava 9 is coming! – Nicolai Parlog\nБудем смотреть видео про модули из джава 9, пока не поймем чем они полезны разработчикам.\nhttps://codefresh.io/blog/java_docker_pipeline/\nCrafting perfect Java Docker build flow\nАвтор рассказывает, как с нуля создать докер контейнеры для джава приложения. Всего три вида контейнеров — для продакшена, для сборки и тестов, для интеграционных тестов. Узнаете как создать свой докер контейнер с линуксом размером всего 170 мегабайт.\nhttps://www.reactivesystems.eu/2017/01/31/things-i-wish-i-knew-when-i-started-building-reactive-systems.html\nThings I Wish I Knew When I Started Building Reactive Systems\nСтроить реактивную архитектуру нужно совершенно иначе, чем монолитную. Об отличиях этой архитектуры и о чем желательно подумать заранее в статье.\nhttps://blog.hackeriet.no/detect-security-holes-during-build/\nDetect security problems at compile time\nПлагин для мавена который \u0026ldquo;проверяет\u0026rdquo; зависимости на уязвимости. Не сам конечно, а просто сверяет версии библиотек со списком тех, в которых найдены критичные баги. Используя плагин можно наконец объяснить своему ПМу почему стоит обновиться на новую версию библиотеки.\n**https://marutsingh.com/2017/03/17/vert-x-master-worker-microservices**/\nVERT.X MASTER WORKER ARCHITECTURE\nПростой пример использования vert.x. В примере автор создает мастер сервис, и несколько сервисов, которые обрабатывают \u0026ldquo;задания\u0026rdquo; от мастера.\n**https://github.com/timgifford/maven-buildtime-extensio**n\nmaven-buildtime-extension Мавен плагин, который пишет сколько времени выполнялась каждая цель.\nhttps://www.infoq.com/presentations/etl-streams\nETL Is Dead, Long Live Streams\nСпикер предлагает пересмотреть архитектуру приложения, и представить все взаимодействие компонентов программы через очередь сообщений. В роли очереди выступает Apache Kafka.\nhttps://zupzup.org/java-0-deps-webapp/\nZero Dependencies Web-App in Java\nПишем простой Http сервер не используя никаких дополнительных библиотек.\nПройти опрос.\nhttps://goo.gl/forms/J1y8QOHCUkb3SXX13\nПо данным разных исследований доля женщин в ИТ-индустрии на данный момент составляет не более 10-20%. Почему же так мало женщин в сфере компьютерных разработок, какова основная причина? Этот вопрос ставит перед собой Анна Камнева, студентка 4 курса факультета социологии СПбГУ. Дорогие женщины-программисты, помогите ей разобраться, пройдя подготовленный ею соцопрос. Чуть позже мы опубликуем результаты исследования на «Хабре», уверены, всем будет очень интересно!\n","permalink":"https://volyx.in/posts/2017-04-07-javaswag-29-new-imported/","summary":"В выпуске создаем докер контейнеры на все случаи жизни, разбираемся с отличиями реактивных систем и ставим себе мавен-плагин для отображения времени выполнения.","title":"Javaswag выпуск 29"},{"content":"Привет! В выпуске запоминающие функции из Java 9, туториал по эластиксерчу и новый сборщик мусора - Эпсилон.\nhttp://www.baeldung.com/elasticsearch-full-text-search-rest-api\nSimple Full-Text Search with ElasticSearch\nАвтор показывает, как с помощью нескольких команд из консоли можно добавить документы в эластиксерч и сразу же начать искать по ним. Простой и понятный туториал об эластиксерче.\nhttp://carlmartensen.com/immutability-made-easy-in-java-9\nJava 9’s Immutable Collections Are Easier To Create But Use With Caution\nВ Java 9 появятся новые методы Set.of, Map.of, которые упростят создание неизменяемых коллекций. В Java 8 для этого требовалось несколько строк, а теперь одна.\nhttps://dzone.com/articles/memoizing-functions-with-core-java9\nMemoizing Functions With Core Java 9\nMemoizing Functions или запоминающие результат функции в восьмой джаве приходилось писать самим. В девятой появится метод Memoizer.memoize, который сделает всю работу за разработчика.\nhttps://youtu.be/88-szpeNfrU\nGetting C/C++ performance out of Java\nДжон Дэвис в своем докладе советует писать код на джаве как в 80-х, 90-х годах на Си. Использовать бинарный формат хранения объектов, и как можно меньше памяти.\nhttp://www.javaspecialists.eu/archive/Issue245.html\nSurprising += Cast\nХейнз Кабутс рассказывает о скрытых преобразованиях типов в простых конструкциях.\nЧтобы до конца в них разобраться придется заглянуть в спецификацию языка.\nhttps://mchernyavska.wordpress.com/2017/02/19/interview-questions-verify-the-braces/\nInterview questions: verify the braces\nЧасто встречающаяся задача с собеседований — «про скобки». Ее первое решение наверняка известно многим, а вот второе через while и replace гораздо лаконичней и проще.\nhttps://habrahabr.ru/post/321856/\nНовый GC Epsilon. У джавы может не быть сборки мусора. Шок. Сенсация\nВ статье рассказывается о новом сборщике мусора под кодовым именем «Эпсилон». «Эпсилон» хоть и сборщик мусора, но мусор не собирает. В статье — о том как он это делает.\nhttps://www.infoq.com/news/2017/02/java-memory-limit-container\nJava 9 Will Adjust Memory Limits if Running with Docker\nВ джава 9 появится опция, которая поможет виртуальной машине понять запущена она в контейнере или нет. Теперь джава сможет управлять выделяемой памятью, зная что она запущена в контейнере.\nhttps://probablydance.com/2017/02/26/i-wrote-the-fastest-hashtable/\nI Wrote The Fastest Hashtable\nДля любителей хардкора и языка Си лонгрид про самую быструю хеш-таблицу по словам автора.\n","permalink":"https://volyx.in/posts/2017-03-16-javaswag-28-new-imported/","summary":"В выпуске запоминающие функции из Java 9, туториал по эластиксерчу и новый сборщик мусора - Эпсилон.","title":"Javaswag выпуск 28"},{"content":"Задание было в том чтобы угадать цвет формы сборной Автсрии. Было не сложно, всего лишь стоило вспомнить цвет флага Австрии, хоть и пришлось погуглить для уверенности.\nКстати в день объявления результатов меня не было в списке победителей, я еще пошутил в чате, что наверное я шестой. Это было 1 февраля.\nОказалось так и есть. 3 февраля мне пришло письмо.\nКонкурс\nСама куртка.\n","permalink":"https://volyx.in/posts/2017-03-07-shoeffel-new-imported/","summary":"Выиграл горнолыжную куртку Schoefel","title":"Выиграл горнолыжную куртку Schoefel"},{"content":"Решил две задачи - A и B. Условия и решения внизу.\nЗадача А Условие Решение Задача B Условие Решение ","permalink":"https://volyx.in/posts/2017-03-04-vkcup-2017-new-imported/","summary":"Учавствовал в Vk Cup 2017. Квалификация 1","title":"Vk Cup 2017"},{"content":"Привет! В выпуске запоминающие функции из Java 9, туториал по эластиксерчу и новый сборщик мусора - Эпсилон.\nhttp://www.baeldung.com/elasticsearch-full-text-search-rest-api\nSimple Full-Text Search with ElasticSearch\nАвтор показывает, как с помощью нескольких команд из консоли можно добавить документы в эластиксерч и сразу же начать искать по ним. Простой и понятный туториал об эластиксерче.\nhttp://carlmartensen.com/immutability-made-easy-in-java-9\nJava 9’s Immutable Collections Are Easier To Create But Use With Caution\nВ Java 9 появятся новые методы Set.of, Map.of, которые упростят создание неизменяемых коллекций. В Java 8 для этого требовалось несколько строк, а теперь одна.\nhttps://dzone.com/articles/memoizing-functions-with-core-java9\nMemoizing Functions With Core Java 9\nMemoizing Functions или запоминающие результат функции в восьмой джаве приходилось писать самим. В девятой появится метод Memoizer.memoize, который сделает всю работу за разработчика.\nhttps://youtu.be/88-szpeNfrU\nGetting C/C++ performance out of Java\nДжон Дэвис в своем докладе советует писать код на джаве как в 80-х, 90-х годах на Си. Использовать бинарный формат хранения объектов, и как можно меньше памяти.\nhttp://www.javaspecialists.eu/archive/Issue245.html\nSurprising += Cast\nХейнз Кабутс рассказывает о скрытых преобразованиях типов в простых конструкциях.\nЧтобы до конца в них разобраться придется заглянуть в спецификацию языка.\nhttps://mchernyavska.wordpress.com/2017/02/19/interview-questions-verify-the-braces/\nInterview questions: verify the braces\nЧасто встречающаяся задача с собеседований — «про скобки». Ее первое решение наверняка известно многим, а вот второе через while и replace гораздо лаконичней и проще.\nhttps://habrahabr.ru/post/321856/\nНовый GC Epsilon. У джавы может не быть сборки мусора. Шок. Сенсация\nВ статье рассказывается о новом сборщике мусора под кодовым именем «Эпсилон». «Эпсилон» хоть и сборщик мусора, но мусор не собирает. В статье — о том как он это делает.\nhttps://www.infoq.com/news/2017/02/java-memory-limit-container\nJava 9 Will Adjust Memory Limits if Running with Docker\nВ джава 9 появится опция, которая поможет виртуальной машине понять запущена она в контейнере или нет. Теперь джава сможет управлять выделяемой памятью, зная что она запущена в контейнере.\nhttps://probablydance.com/2017/02/26/i-wrote-the-fastest-hashtable/\nI Wrote The Fastest Hashtable\nДля любителей хардкора и языка Си лонгрид про самую быструю хеш-таблицу по словам автора.\n","permalink":"https://volyx.in/posts/2017-02-28-javaswag-27-new-imported/","summary":"В выпуске запоминающие функции из Java 9, туториал по эластиксерчу и новый сборщик мусора - Эпсилон.","title":"Javaswag выпуск 27"},{"content":"Привет! В выпуске компилируем код на лету, пишем свой сплитератор и генерируем видео для ютьюба по статьям из википедии.\nhttps://sparktutorials.github.io/2017/01/28/using-spark-with-kotlin.html\nUsing Spark with Kotlin to create a simple CRUD REST API\nХороший способ познакомиться с языком Котлин - написать на нем простой веб-сервис. Библиотека Спарк хорошо подходит для этого. 10 минут и вы добавляете себе еще один язык в резюме.\nhttps://blog.frankel.ch/compilation-java-code-on-the-fly/#gsc.tab=0\nCompilation of Java code on the fly\nЗнали что JVM может компилировать код программно? То есть можно загрузить класс из файла, скомпилировать его \u0026ldquo;на лету\u0026rdquo; и все, его можно использовать. В статье пример кода по загрузке класса извне и набор параметров с которым нужно запускать приложение.\nhttps://www.infoq.com/articles/Building-Reactive-Applications-with-Akka\nBuilding Reactive Applications with Akka Actors and Java 8\nМаркус Эйсель рассказывает о том, как написать распределенное приложение используя модель акторов. Познакомившись с этой моделью вы уже не сможете мыслить иначе - каждый поток будет казаться вам актором. Это очень простая и в тоже время гибкая концепция.\nhttps://www.airpair.com/java/posts/parallel-processing-of-io-based-data-with-java-streams\nFaster parallel processing in Java using Streams and a spliterator\nАвтор показывает как можно написать свой \u0026ldquo;сплитератор\u0026rdquo;, который будет обрабатывать файл по частям. Реализация с его сплитератором, запущенная параллельно работает в 4 раза быстрее чем, однопоточная, и предоставляет красивый декларативный апи.\nhttp://royvanrijn.com/blog/2017/01/vikipedia-a-java-youtube-bot/\nVikipedia: A Java YouTube bot\nАвтор блога написал бота, который превращает статьи из википедии в видео на ютьюбе. Интересно, что будет если сделать несколько тысяч таких ботов?\nhttp://making.duolingo.com/rewriting-duolingos-engine-in-scala\nRewriting Duolingo\u0026rsquo;s engine in Scala\nИнженеры из Дуалинго рассказывают как переписали один из сервисов с питона на скалу. Время ответа сервера сократилось с 700 миллисекунд до 14. В статье — как они пришли к этому решению.\nhttps://building.coursera.org/blog/2016/12/01/should-engineering-managers-write-code-wrong-question/\nShould engineering managers write code? Wrong question.\nНе только разработчики, но и менеджеры в курсере пишут код. Но при этом не для самой курсеры, а для автоматизации своих рутинных задач.\nhttps://plumbr.eu/blog/programming/processing-billions-of-eventsday\nProcessing billions of events/day\nИнженеры из Пламбр рассказывают как декомпозировали свой монолитный сервер на несколько микросервисов. В статье — почему решили переписывать, какие были требования, к чему пришли.\nКартинка https://twitter.com/vitalishkurenko/status/825070719356788736\n","permalink":"https://volyx.in/posts/2017-02-8-javaswag-26-new-imported/","summary":"В выпуске компилируем код на лету, пишем свой сплитератор и генерируем видео для ютьюба по статьям из википедии.","title":"Javaswag выпуск 26"},{"content":"Привет! Это первый выпуск в этом году! Выпуск немного припозднился, но дальше по расписанию. Поехали! В выпуске \u0026ldquo;оживляем\u0026rdquo; Skip List, разбираемся с размеров пула соединений и смотрим видео про улучшение производительности строк в Java 9.\nhttp://bruceeckel.github.io/2017/01/13/constructors-are-not-thread-safe/\nConstructors Are Not Thread-Safe\nБрюс Эккель рассуждает про потоко-небезопасные конструкторы в Java. На примерах показывает к чему это может привести, и как сделать создание объекта потокобезопасным.\nhttp://thenewstack.io/three-stages-software-engineering-scale/\nThe Three Stages of Software Engineering\nТри этапа развития целей проекта - простота, эффективность, организационная структура. Такие приоритеты должны быть у компании по мнению разработчика из Линкадина. Если бы можно было вынести всего одно предложение из всей статьи, то это было бы \u0026ldquo;Пока ваша команда меньше 30 человек основным приоритетом должна быть простота\u0026rdquo;.\nhttp://code.flickr.net/2017/01/05/a-year-without-a-byte/\nA Year Without a Byte\nСервис flick в 2016 году ставил цель сократить расходы на хранение фотографий. Весьма амбициозная задача для фотохостинга, учитывая растущее каждый год количество загружаемого контента! Фликровцы рассказывают как пережали уже существующие фотографии, уменьшили количество резервной памяти на дисках и размеры маленьких версий фоток.\nhttp://ticki.github.io/blog/skip-lists-done-right/\nSkip Lists: Done Right\nСписок с пропусками, он же Skip Lists - несправедливо \u0026ldquo;забытая\u0026rdquo; структура данных в джаве. Статья поможет освежить в памяти его устройство, и напомнит случаи, когда “скип лист” будет полезен.\nhttps://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing\nAbout Pool Sizing Какой должен быть размер пула подключения к базе данных? 10000? 1000? 100?\nЕсли вы хоть раз задумывались над размером пула соединений к базе данных, то эта статья для вас.\nhttps://youtu.be/_evzaAkd594\nAleksey Shipilev - String Enhancements in JDK 9\nЗа 20 минут Алексей Шипилев расскажет про улучшения производительности части строк в грядущей Java 9. Маст си для джава девелопера.\nhttps://medium.com/@lukleDev/how-effective-java-may-have-influenced-the-design-of-kotlin-part-1-45fd64c2f974#.qzpd6ebwm\nHow \u0026ldquo;Effective Java\u0026rdquo; may have influenced the design of Kotlin — Part 1\nНемного Котлина. А именно то,какие улучшения язык Котлин впитал из Джавы.\nhttp://www.baeldung.com/lmax-disruptor-concurrency\nConcurrency with LMAX Disruptor – An Introduction В блоге баелдунга рассказывается о том, как устроен фреймворк дизраптор и как ему удается быть настолько быстрым. Все дело в \u0026ldquo;mechanical sympathy\u0026rdquo; — процессе когда программа работает “в унисон” с железками.\n","permalink":"https://volyx.in/posts/2017-01-31-javaswag-25-new-imported/","summary":"Это первый выпуск в этом году! Выпуск немного припозднился, но дальше по расписанию. Поехали! В выпуске оживляем Skip List, разбираемся с размеров пула соединений и смотрим видео про улучшение производительности строк в Java 9.","title":"Javaswag выпуск 25"},{"content":"О лыжах то я не написал.\nШридиторы очень игривые, устойчивые лыжи. Когда лыжи стоят вертикально, рядом со мной, то кажется что они высокие. Но при катании совершенно это не чувствуется. По ощущениям они короче и маневренней, чем мои предыдущие Динамики с их ростом 171.\nДлина Шредиторов 177см, длинна 184 см мне была бы тоже как раз. Твинтиповские пятки и носы очень сокращают их, и лыжи становятся очень маневернными.\nЛед, бугры, небольшой пухляк им не почем. Они прям просят ехать и по всяким препятствия и преодолевать их. Лед хавают на раз, глазами высматриваешь лед, и едешь чтобы покорить его. Это настоящий вездеход. Раньше я высматривал неровности и объезжал их, сейчас я высматриваю их, чтобы проехать по ним.\nДумаю что 92 ширина мне тоже бы подошла, потому что ширины вообще не чувствуется. 1 сантиметр не сыграл бы роли. Чувствуется устойчивость. Получается, что лыжи едут, а ты им доверяшь и управляешь.\nВообщем я супер-пупер доволен ими! Теперь осталось покорить наконец обер-хутор и продать 92 шредиторы. Ботинки кстати тоже крутые, мои предыдущие кажется вообще не ботинки, а валенки какие-то.\nРадиус поворота в 20 метров - вранье. Я езжу пока только короткими дугами, и лыжи ведут себя прекрасно. На них хочется скокать, подпрыгивать, и переводить на другой кант. И долгую дугу лень ехать из-за этого.\nЯ под впечатлением, поэтому даже минусов пока не могу сказать Боялся что крепы слишком близко к центру. Но вспомнил об этом только когда коньком к подъемнику ехал и 2 раза когда пешком шел пятка на пятку наступила. При езде вообще не заметно.\n","permalink":"https://volyx.in/posts/2017-01-31-shreditor-102-new-imported/","summary":"\u003cp\u003eО лыжах то я не написал.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"shreditor 102\" loading=\"lazy\" src=\"/images/shreditor102.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eШридиторы очень игривые, устойчивые лыжи. Когда лыжи стоят вертикально, рядом со мной, то кажется что они высокие. Но при катании совершенно это не чувствуется. По ощущениям они короче и маневренней, чем мои предыдущие Динамики с их ростом 171.\u003c/p\u003e\n\u003cp\u003eДлина Шредиторов 177см, длинна 184 см мне была бы тоже как раз. Твинтиповские пятки и носы очень сокращают их, и лыжи становятся очень маневернными.\u003c/p\u003e","title":"Шредиторы 102"},{"content":"2017 ❄ год, привет! Делюсь новостями.\nМагистратура.\nСессия закрыта, но не так как хотелось бы. Подавая в магистратуру, я планировал исправить не только свои оценки, но и подход к обучению. Ведь я уже взрослый думал я. Это в студенческие годы я списывал, сдавал экзамены на тройбаны и прогуливал пары. Теперь все будет не так. Буду пахать как раб на галерах, а в конце семестра пожинать плоды, как делают все отличники.\nНо почему-то сильно трудиться в середине семестра не удалось. От дедлайна к делайну я стремился только лишь закрыть контрольную. Вместо того, чтобы в течении 2 недель погружаться в тему, я смотрел лекции по предмету за 2 часа, а затем за час прорешивал контрольную. Радовался когда система ставила мне ✔, и бежал к следующему предмету. Такой марафон длился полгода. С работы — домой, дома до ночи учеба. И мне казалось, что я действительно фигачу, что я стараюсь, учусь — ведь гляньте какой я вечно уставший и занятой — значит учусь, значит результат будет.\nНо не тут-то было. Оказывается, просмотреть лекции и расставить ответы на тесты и задачи это не значит понять материал. Полгода я как хакер «взламывал» систему. Смотрел лекции ради ответов, решал тесты ради высокого рейтинга. Но понимания не приходило. Я не замечал этого, ведь рейтинг глянь какой большой, значит я лучше всех решаю, а значит и разбираюсь, а значит я иду в правильном направлении.\nНа каждом экзамене все это всплыло наружу, на каждом экзамене я получал неожиданный удар под дых. Оказывается, что некоторые темы я не так понял. Когда я решал контрольную на 70 балов, я думал: — «Ого, да это ж почти пять балов». И шел к следующему экзамену.\nДа мне кажется, что если бы я наугад ставит ответы я бы все равно на решал бы на 50%. Я не так трактовал результаты. 70 балов это значит, что я до конца не разобрался, до конца не понял, где ошибся. Нужно срочно вернуться назад и разобрать все задачи до конца. Но нет времени мало, и я бежал радостный к следующему предмету.\nОценки по экзаменам: Теория вероятности — 3, Теория графов 3, Комбинаторика — 3, Теория игр — 4.\nАбсолютно по всем предметам я не получил хорошей оценки. И даже при попытке пересдать теорию вероятности — я все равно не дотянул. Не могу я переступить этот «барьер троечника. Получается, что я учу ровно на столько, сколько требуется для минимального получения зачета. Я переваливаю через порог «удовл.» и все дальше этот предмет меня не волнует. У меня вообще нет мотивации выучить и разобрать досконально в предмете. И привычки тоже. Также я очень снисходителен к себе — всегда все делаю на 30% своих возможностей. Нет стимула, нет желания борьбы. Не знаю откуда ее черпать.\n","permalink":"https://volyx.in/posts/2017-01-27-mipt-session-new-imported/","summary":"\u003cp\u003e2017 ❄ год, привет! Делюсь новостями.\u003c/p\u003e\n\u003cp\u003eМагистратура.\u003c/p\u003e\n\u003cp\u003eСессия закрыта, но не так как хотелось бы. Подавая в магистратуру, я планировал исправить не только свои оценки, но и подход к обучению. Ведь я уже взрослый думал я. Это в студенческие годы я списывал, сдавал экзамены на тройбаны и прогуливал пары. Теперь все будет не так. Буду пахать как раб на галерах, а в конце семестра пожинать плоды, как делают все отличники.\u003c/p\u003e","title":"Сессия закрыта"},{"content":"Привет! В выпуске ограничиваем скорость загрузки с сервера, кэшируем данные из монги в редисе и разбираемся со статической компиляцией в Джаве 9.\nhttps://dzone.com/articles/enabling-caching-in-mongodb-database-with-redis-us\nCaching in MongoDB With Redis Using Spring Boot\nВ статье рассказывается, как можно ускорить работу с монгой, подключив редис кэш, \u0026ldquo;без регистрации и смс\u0026rdquo;, точнее без XML конфигурации.\nhttps://blog.twitter.com/2016/simplify-service-dependencies-with-nodes\nSimplify Service Dependencies with Nodes\nИнженеры из твиттера рассказывают о том как они боролись с ростом количества запросов к \u0026ldquo;микросервисам поиска\u0026rdquo; в приложении. В статье — сражение с циклическими зависимостями данных, асинхронные запросы, собственная опенсорс библиотека Finagle.\nhttp://jug.ru/2016/12/aot-hotspot/\nВремя компилировать: Дмитрий Чуйко и Никита Липский про AOT в HotSpot\nСтатическая компиляция семимильными шагами приходит и в Джава мир. О том для чего она нужна и как все это связано с лозунгом Джава \u0026ldquo;Write once - run anywhere\u0026rdquo;. Дисклеймер - Джава идет в сторону iOS, но это не точно.\nКстати, эту статью написал и прислал подписчик. Если у вас есть чем поделиться с любителями джавы, не стесняйтесь присылать ссылки на почту волыхингмэйл\nhttps://plumbr.eu/blog/monitoring/time-in-distributed-systems\nTime in distributed systems\nИнженеры из Пламбр рассказывают о том, как они синхронизируют время в своих джава агентах. Решение позаимствовано из распределенных систем и будет полезно всем кто интересуется этой темой.\nhttp://book.mixu.net/distsys/single-page.html\n**Distributed systems **for fun and profit Джава мир продолжает двигаться в сторону микросервисов и такие термины как пропускная способность, скорость отклика, отказоустойчивость приходят в джаву из распределенных систем. В ссылке небольшая книга о концепциях и терминах распределенных систем.\nhttp://martin.kleppmann.com/2012/12/05/schema-evolution-in-avro-protocol-buffers-thrift.html\nSchema evolution in Avro, Protocol Buffers and Thrift\nПредставьте, что у вас есть несколько микросервисов, которые обмениваются между собой сообщениями. Что вы будете делать если понадобилось добавить поле в одно из сообщений и при этом нельзя перезапускать все микросервисы? Решение есть. Ваши сообщения должны поддерживать \u0026ldquo;эволюцию схемы\u0026rdquo; - то есть работать только с теми полями, о которых они знают, а “устаревшие” не использовать.\nМартин Клеппман рассказывает о том как с этой проблемой справились в библиотеках Avro, Protocol Buffers, Thrift.\nhttps://ivanyu.me/blog/2016/12/12/about-akka-streams/\nAbout Akka Streams\nАвтор рассказывает о том как с помощью Акка Стримов можно декларативно конструировать асинхронные \u0026ldquo;пайпайны\u0026rdquo; для обработки данных. Автор простым языком объясняет концепции, которые за этим всем стоят.\nhttp://www.nurkiewicz.com/2015/06/writing-download-server-part-i-always.html?m=1\nWriting a download server. Part I: Always stream, never keep fully in memory\nЕсли бы я мог вернуться в прошлое, я передал бы себе следующее послание - \u0026ldquo;Не клади все данные из файла в массив байтов - используй стримы\u0026rdquo;. Однажды я\nстолкнулся с похожим вопросом на собеседовании и провалил тестовое задание. Читайте статью и не делайте как я.\nhttp://www.nurkiewicz.com/2011/03/tenfold-increase-in-server-throughput.html\nTenfold increase in server throughput with Servlet 3.0 asynchronous processing\nПредставьте, что у вашего приложения появился очень активный пользователь, который только и делает что загружает файлы с вашего сервера. Остальным пользователям перестает хватать скорости и сервер начинает тратить много памяти и процессора. Одно из возможных решений это ограничить скорость загрузки с сервера, или сделать ее контролируемой. Томас рассказывает, как написать сервлет, который будет отдавать файлы с одной и той же скоростью, независимо от того сколько пользователей к нему подключилось.\n","permalink":"https://volyx.in/posts/2016-12-16-javaswag-24-new-imported/","summary":"Привет! В выпуске ограничиваем скорость загрузки с сервера, кэшируем данные из монги в редисе и разбираемся со статической компиляцией в Джаве 9.","title":"Javaswag выпуск 24"},{"content":"Привет! В выпуске усатый движок шаблонов, серверный рендеринг и миллиарды реквестов за 120$.\nhttp://www.javamagazine.mozaicreader.com/NovDec2016/Default/25/\nJava Magazine - JUnit 5 Arrives!\nСвежий выпуск журнала Java Magazine. В первой части про изменения в Junit 5. Это самые большие обновления фреймворка с момента его выпуска. Во второй — обсуждение того, как выглядят дизайн паттерны с синтаксисом Java 8.\nhttps://patrickgrimard.io/2016/11/24/server-side-rendering-with-spring-boot-and-react/\nServer side rendering with spring boot and react\nФреймворк Реакт уже победил всех на фронтенде и стремительно врываются в Java мир с рендерингом на сервере. Серверный рендеринг это когда джаваскрипт приложение рендерится в ХТМЛ на сервере и на клиент доставляется уже готовая ХТМЛ страница. JSP, JSF, Thymeleaf похоже уже устарели, давайте поспевать за динамичным фронтендом.\nhttp://blog.joda.org/2015/12/explicit-receiver-parameters.html\nExplicit receiver parameters Коллега прислал в чатик вопрос: скомпилируется ли такой метод public int compareTo(Currency this, Currency other) { ... } ? Я ответил нет. Ведь очевидно же, что this ключевое слово и компилироваться метод с таким названием параметра не должен. Я ошибся. Метод скомпилировался. А перестал он компилироваться, когда я поменял параметры местами. Удивлены? В статье о незамеченной фиче джавы — Explicit receiver parameters.\nhttps://spring.io/blog/2016/11/21/the-joy-of-mustache-server-side-templates-for-the-jvm\nThe Joy of Mustache: Server Side Templates for the JVM\nВ статье рассказывается о движке шаблонов Мусташ, что переводится как \u0026ldquo;Усы\u0026rdquo;. Действительно, если посмотреть под углом на фигурные скобки {},можно разглядеть перевернутые усы. Усатые шаблоны просты, документация практически не нужна. Если в Таймлифе без документации и строчки не написать, то мусташ до безобразия понятен. Достойная замена JSP для нового проекта.\nhttps://dzone.com/articles/the-internal-cache-of-integers\nThe Internal Cache of Integers\nЗнали что выражение Integer.valueOf(17) == Integer.valueOf(17) вернет true, а Integer.valueOf(200) != Integer.valueOf(200) вернет false?\nДело в том, что виртуальная машина хранит кэш целых чисел от -128 до 127 включительно. В статье рассказывается как можно увеличить этот кэш, а также его внутреннее устройство.\nhttps://engineering.linkedin.com/blog/2016/11/application-pauses-when-running-jvm-inside-linux-control-groups\nApplication Pauses When Running JVM Inside Linux Control Groups\nВ Линкадине используют самописные контейнеры и свое приватное облако LPS. Если вы хотите понять как джава взаимодействует с cgroups добро пожаловать в статью. К сожалению даже блог Линкадина заблокирован, так что лучше заходить через VPN.\nhttps://habrahabr.ru/post/316370/\n12 млрд реквестов в месяц за 120$ на java\nВсем кто начинает стартап проект обязательно прочтению. Возможно после вы задумаетесь о том нужна ли вам база данных и сколько вы тратите денег на архитектуру. Статья из серии Minimalist architecture - как минимальным количеством денег сделать надежную архитектуру.\n","permalink":"https://volyx.in/posts/2016-12-02-javaswag-23-new-imported/","summary":"Привет! В выпуске усатый движок шаблонов, серверный рендеринг и миллиарды реквестов за 120$.","title":"Javaswag выпуск 23"},{"content":"Привет!\nВ выпуске стримим данные из MySql с помощью Spring Data, разбираемся с производительностью JVM в докере и знакомимся с проектом Reactor от Spring.\nhttps://medium.com/@johnmcclean/trampolining-a-practical-guide-for-awesome-java-developers-4b657d9c3076#.gqjbui9qd\nTrampolining: a practical guide for awesome Java Developers\nОсновная проблема рекурсивных методов это зависимость от размера стека. С помощью рекурсии можно обрабатывать только небольшие объемы данных, чтобы не поймать StackOverFlowError. Но когда мы переписываем код с рекурсии на очередь например, код становится не таким читаемым. В статье рассказывается о том как можно писать рекурсивный код, который будет выполнятся итеративно.\nhttp://mrhaki.blogspot.ru/2014/05/groovy-goodness-implementing-traits-at.html\nGroovy Goodness: Implementing Traits at Runtime\nВ статье рассказывается про Трейты — конструкцию из языка Груви. Трейт — это интерфейс, который мы можем добавить к классу динамически. Мы как будто подмешиваем свое поведение к уже существующему классу.\nhttps://knes1.github.io/blog/2015/2015-10-19-streaming-mysql-results-using-java8-streams-and-spring-data.html\nStreaming MySQL Results Using Java 8 Streams and Spring Data JPA\nВ статье рассказывается о том как можно отдавать данные из MySql в потоковом режиме. Углубившись в дебри документации к MySql автору удалось сократить время экспорта с **137 секунд до 9! **\nhttp://codeahoy.com/2016/11/16/performance-testing-serverside-applications/\nPerformance Testing Serverside Applications\nВ статье рассказывается как нужно и как не нужно тестировать производительность приложения. Из статьи узнаете почему бессмысленно мерить производительность приложения не в продакшн окружении.\nhttps://techblog.bozho.net/hardcode-server-ip-apps/\nDomain Fallback Mechanism In Apps\nЧто делать если какой-то из больших днс серверов упал? Да, теперь мы не можем подключится к серверу по его домену, а в наше время микросервисов это еще более больно, чем раньше. Автор решает эту проблему с помощью фолбеков - сначала мы пробуем первый домен, если не получается запасной, затем пробуем достучаться по ip адресу.\nhttp://javarticles.com/2016/11/linkedblockingqueue-example.html\nLinkedBlockingQueue Example\nАвтор с отличными примерами и картинками рассказывает о том как работает ‘LinkedBlockingQueue ’ Обязательно запустите примеры из статьи - они хорошо демонстрируют применение этой структуры данных.\nhttps://www.youtube.com/watch?v=6ePUiQuaUos\u0026amp;t=310s\u0026amp;index=47\u0026amp;list=WL\nThe JVM and Docker. A good idea? by Christopher Batey\nКристофер рассказывает о проблемах запуска приложения в Докер контейнере и об инструментах, с помощью которых можно мониторить состояние приложений. Вы знали, например, что если запустить несколько контейнеров с Jetty приложение может неожиданно упасть ¯_(ツ)_/¯ ! Не забывайте смотреть настройки библиотек по умолчанию!\nhttps://www.quora.com/Which-is-better-Play-Framework-or-Spring-MVC-How-should-I-decide-what-to-use\nWhich is better, Play Framework or Spring MVC? How should I decide what to use?\nОтличный ответ с Quora, который претендует на целый пост. О том почему Линкадин перешел со Спринга на Плэй Фреймворк. Вкратце — Спринг очень сложный. Концепции простые, но сложно подружить все его компоненты вместе в рамках большого приложения.\nhttp://musigma.org/java/2016/11/21/reactor.html\nReactive systems using Reactor\nНа смену хайпу про микросервисы приходит \u0026ldquo;новая\u0026rdquo; модная парадигма — реактивность. Теперь мы пишем не просто микросервисы, а реактивные микросервисы. На основе библиотеки Reactor автор рассказывает об основных концепциях реактивных стримов. Реактивность скоро появится в Спринге 5.0 — всем читать и разбираться.\nhttp://upli.st/l/list-of-all-ascii-emoticons\nСегодня десерт. Ссылка самые популярные текстовые эмодзи - чтобы в чате быть на высоте ( ͡° ͜ʖ ͡°)\n","permalink":"https://volyx.in/posts/2016-11-24-javaswag-22-new-imported/","summary":"Привет! В выпуске стримим данные из MySql с помощью Spring Data, разбираемся с производительностью JVM в докере и знакомимся с проектом Reactor от Spring.","title":"Javaswag выпуск 22"},{"content":"В выпуске gRPC, нативная компиляция Java кода и показ метрик из Спринг приложения.\nEnabling Googley microservices with HTTP/2 and gRPC\nЕсли в вашем проекте понадобился RPC(Remote Procedure Call), то обязательно посмотрите на gRPC. gRPC – популярный фреймворк от Гугла поверх протокола HTTP/2. По ссылке слайды из доклада Алекса Борисова с примерами использования и основными концепциями .\nFlame graphs and perf-top for JVMs inside Docker containers\nФлейм графы — новый способ отображения количества использованного CPU приложением. Автор статьи рассказывает как можно написать несколько скриптов для построения флейм графов Java приложения, запущенного в докере.\nIntroduction to FindBugs\nFindBugs — статический анализатор для Java кода. Анализатор просматривает код и выдает список потенциальных ошибок. В статье рассказывается как запускать FindBugs из IDE и встраивать его в процесс сборки приложения.\nIntroduction to WebJars\nВ статье рассказывается как с помощью мавена можно встроить css и javascript библиотеки в ваше приложение. На примере спринг приложения автор рассказывает как с помощью нескольких строк кода добавить в проект Jquery и bootstrap.\nNative Ahead-of-Time Compilation in Java\nВ Java 9 появится возможность компилировать приложение в нативный код. В статье краткое описание утилиты jaotc и видео c JVM Language Summit\nGroovy Excel Builder\nБиблиотека Groovy Excel Builder предлагает удобный DSL для создания Excel файлов. Apache POI используется внутри, а снаружи используется лаконичный АПИ — все то за что так любят Groovy.\nExposing JVM metrics in Spring Boot applications using Dropwizard metric library\nКак вы собираете метрики из своего приложения? В статье рассказывается о том, как встроить библиотеку Metrics в Спринг приложение чтобы собирать всю необходимую статистику.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\n","permalink":"https://volyx.in/posts/2016-11-16-javaswag-21-new-imported/","summary":"В выпуске gRPC, нативная компиляция Java кода и показ метрик из Спринг приложения.","title":"Javaswag выпуск 21"},{"content":"Когда заходишь на страницу со всеми историями на wndlust.ru, страница очень долго загружается. Происходит это только когда база данных находится на удаленном сервере, ну например на сервере в Ирландии.(а именно там датацентр и находится)\nТак выглядит страница со всеми историями. Это список всех опубликованных историй на сайте.\nПри запуске проекта с локальной базой, а на проекте мы используем монгу, то все нормально. Когда я пробовал профилировать приложение с удаленной базой, то нашел кучу каких-то лишних запросов. Почему спринг генерировал их было не понятно.\nМодель в монге выглядела примерно, вот так:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Story { id: \u0026#34;\u0026#34;, records: [], ... // какие-то еще поля } Record { id: \u0026#34;\u0026#34;, images: [], ... // какие-то еще поля } Image { id, \u0026#34;\u0026#34;, ... // какие-то еще поля } Каждый объект хранился в своей отдельной коллекции, и склеивался при получении из базы. У спринга есть аннотация @DbRef, которая и делают всю магию - склеивает объекты в один.\nВ итоге когда при загрузке страницы со всеми историям сначала загружась все истории, затем все записи в истории, затем все картинки из записи. Вместо одного запроса происходило n*m*k запросов!\nСмотрите в логе - сначала загружается BsonString(value='story'), а затем BsonString(value='record'), затем BsonString(value='image').\nТак дело не пойдет, время рефакторинга! Ссылка на гитхаб https://github.com/volyx/spring-data-mongo-dbref\n","permalink":"https://volyx.in/posts/2016-11-10-jokes-from-mongo-2016-new-imported/","summary":"\u003cp\u003eКогда заходишь на страницу со всеми историями на \u003ca href=\"http://wndlust.ru\"\u003ewndlust.ru\u003c/a\u003e, страница очень долго загружается. Происходит это только когда база данных находится на удаленном сервере, ну например на сервере в Ирландии.(а именно там датацентр и находится)\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eТак выглядит страница со всеми историями. Это список всех опубликованных историй на сайте.\u003c/p\u003e\n\u003cp\u003eПри запуске проекта с локальной базой, а на проекте мы используем монгу, то все нормально. Когда я пробовал профилировать приложение с удаленной базой, то нашел кучу каких-то лишних запросов. Почему спринг генерировал их было не понятно.\u003c/p\u003e","title":"Шутки от spring-mongo-data"},{"content":"В выпуске - пишем UDP сервер, оптимизируем код для JIT с помощью JITWatch и разбираемся как работает ThreadLocalRandom.\nA Guide To UDP In Java\nВ статье рассказывается как работать с UDP пакетами в Java. На примере простого UDP сервера и клиента автор рассказывает чем отличаются протоколы TCP от UDP и как это ложится на Java.\nLinked Array Queues, part 1: SPSC\nНитсан разрабатывает библиотеку JCTools и предлагает реализации очередей, которых по его мнению не хватает в Java. В статье рассматривается несколько типов очередей с примерами реализаций из JCTools.\nWhy it rocks to finally understand Java JIT with JITWatch\nJitWatch - утилита которая показывает, как JIT компилятор работает с вашим кодом. В ней можно найти длинные методы в приложении и посмотреть во что компилируется класс. JITWatch поможет найти “узкие места” в коде и переписать их, чтобы код стал JIT-friendly.\nNew Tricks with Dynamic Proxies in Java 8 (part 2)\nВ статье несколько примеров и трюков по использованию прокси-объектов, а также сравнение их производительности.\nDo you really need instanceof?\nАвтор предлагает присмотреться к местам, где в коде используется ‘instanceof’ и попробовать заменить его на паттерн “Визитор”. Станет ли код читабельней или производительней — открытый вопрос. В статье обсуждение и примеры замены.\nGenerational disparity in garbage collection\nРафаэль — создатель известной библиотеки для работы с байт кодом - ByteBuddy. В статье он рассказывает как инструментировал ForkJoinPool и боролся со сборкой долгоживущих объектов в своей библиотеке.\nHTTP headers forwarding in microservices\nНиколас рассказывает о том как можно написать свой “трейсирующий” фреймворк поверх Спринга. Фреймворк добавляет всего три заголовка в запросы к микросервисам. Фреймворк поможет отслеживать работу ваших сервисов и написать кастомный мониторинг для вашего приложения.\nMemory efficient HashSet implementation for Java\nАвтор поставил задачу — написать свой HashSet для hex строк, который будет потреблять меньше памяти чем стандартный из Java. Что в итоге получилось читаем в статье.\nNetty Tutorial Part 1: Introduction to Netty\nПоследние три недели плотно работал с библиотекой Netty - реализовывал RPC(Remote Procedure Call). Про RPC на Netty написано не мало, но как всегда нужен свой “узкозаточенный” мини-фреймворк. Это одна из двух частей статей, которые помогли мне вспомнить основные концепции Netty.\nJava ThreadLocalRandom explained\nАвтор разобрается в алгоритмах которые стоят за генерацией случайных чисел в джаве. Титанический труд прочитать все научные работы, стоящие за константами и “магией” в джаве.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\nhttp://dilbert.com/strip/2016-07-30\n","permalink":"https://volyx.in/posts/2016-11-04-javaswag-20-new-imported/","summary":"В выпуске тонкости экзекъютор сервисов, сохранение объектов в Редис и способы упаковки приложения в исполняемый архив.","title":"Javaswag выпуск 20"},{"content":"Третий раз в жизни сменил работу. О рабочем цикле, размере компании и сленге.\nРабочий цикл Выяснил, что мой примерный рабочий цикл - 2 года. Именно столько требуется на то, чтобы начать подумывать о смене работы. Поэтапно можно разбить так:\n3 месяца - притирка. Время, когда я задаю глупые вопросы, холиварю насчет фрейворков, не с кем особо не общаюсь. На обеде все время смотрю либо в тарелку, либо в телефон. А еще - неловко шучу. Нет все не так плохо - я преувеличиваю, но общее настроение такое. Время, когда работа это работа.\n2 месяца. После прохождения испытательного срока обычно приходит понимание что все - я попал, и тут мне придется работать. Не то чтобы я не хотел, то есть предыдущие 3 месяца я тоже \u0026ldquo;работал\u0026rdquo;, но в воздухе витало какое-то \u0026ldquo;а вдруг нет\u0026rdquo;, \u0026ldquo;а вдруг мы не подойдем друг другу\u0026rdquo;, \u0026ldquo;а вдруг я еще свалю куда-нибудь\u0026rdquo;. Витала неопредленность, я чувствовал себя приглашенным консультантом, у которого есть какое-то привелигированное право на любые действия, потому что все таки я еще не сотрудник. И вот это время прошло, вот твой проект, тебе нужно сделать этот проект лучше.\n6 месяцев. Вторые полгода - время продуктивности. Когда ты верой и кодом крепок, знаешь нюансы, вникаешь в бизнес процессы, легко общаешься на внутреннем сленге. Но иногда все еще попадаешь в просак, из-за того что не знаешь каких-то мелких, но скорее ключевых вещей. Уверенно стоишь на ногах и задерживаешься по вечерам на работе, потому что - то то мы делаем \u0026ldquo;это важно\u0026rdquo;.\n1 год. Спокойное, размеренное рабочее время. Когда все успеваешь быстрее, чем нужно, решаем проблемы в уме, и прикидываешь интерфейсы в голове. Успеваешь поделать еще несколько стронних проектов, на работе посматриваешь курсы. Все чаще начинаешь вчитываться в описание вакансий с hh.ru. Да, ведь ты подписался на него не так давно, ну чтоли чтобы быть на волне.\nБууум. Ого, да ты оказывается тут уже два года. Два года жизни. Коллеги уже и не коллеги, товарищи скорее. И тут бац, а тебя оказывается уже позвали в другую компанию на собес. А затем вдург позвали работать. Вот и что делать?\nРазмер компании Первый опыт работы в компании, в которой меньше 20 человек. Из них половина удаленщиков, поэтому в офисе я не встречал больше 10 человек одноврменно.\nДо этого две компании были численностью больше 100 человек: одна увеличивалась с 60 человек, вторая с 30. Да еще одна международная, куча офисов, куча процессов, под 30-50 разработчиков.\nГрафик посещения офиса - свободный, я пока не превык к работе из дома, поэтому прихожу в офис минимум 4 раза в неделю. В будущем думаю больше работать из дома.\nВнутренний сленг Задачи в такс-трекере во всех компаниях называли всегда по разному. Бага, такска, ишъя, причем с упором на шипениье - ишшша. Везде свои внутренние шуточки - внутречки, из последнего:\nСфотографируй - снять jstack. В Intellij IDEA иконка jstack - фотоаппарат. Сепш - от англисйкого Exception Ифчик, форчик - for, if. Собес - собеседование. ","permalink":"https://volyx.in/posts/2016-11-01-smena-raboti-2016-new-imported/","summary":"\u003cp\u003eТретий раз в жизни сменил работу. О рабочем цикле, размере компании и сленге.\u003c/p\u003e\n\u003ch2 id=\"рабочий-цикл\"\u003eРабочий цикл\u003c/h2\u003e\n\u003cp\u003eВыяснил, что мой примерный рабочий цикл - 2 года. Именно столько требуется на то, чтобы начать подумывать о смене работы. Поэтапно можно разбить так:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e3 месяца - притирка. Время, когда я задаю глупые вопросы, холиварю насчет фрейворков, не с кем особо не общаюсь. На обеде все время смотрю либо в тарелку, либо в телефон. А еще - неловко шучу. Нет все не так плохо - я преувеличиваю, но общее настроение такое. Время, когда работа это работа.\u003c/p\u003e","title":"Смена работы 2016"},{"content":"Привет! В выпуске тонкости экзекъютор сервисов, сохранение объектов в Редис и способы упаковки приложения в исполняемый архив.\nPostConstruct and constructor injection\nЕсли вы не помните в какой последовательности вызывается @Inject и @PostConstruct — эта статья для вас. На примерах кода автор показывает какие механизмы скрыты за этими аннотациями внутри IoC контейнера.\nSmall scale stream processing kata. Part 1: thread pools\nАвтор блога описывает построение архитектуры приложения, которое должно обрабатывать данные в реальном времени со скоростью 1000 запросов в секунду.\nSecuring JAX-RS Endpoints with JWT\nВ статье рассказывается как защитить REST сервисы с помощью JWT токенов. Вы узнаете как написать несколько своих аннотаций и фильтров чтобы самому реализовать систему защиты АПИ приложения.\nA Look at the Java Distributed In-Memory Data Model (Powered by Redis)\nБиблиотека Redison превращает джава объекты в так называемые “живые объекты”. Те в свою очередь, делегируют любые вызовы методов вызовам к Редису. Таким образом живые объекты всегда сохраняют свое состояние в Редис и всегда актуальны.\nJava Bytecode 101\nПрезентация Антона Архипова с питерской конференции Джокер. Для всех, кто хочет разобраться как работает виртуальная машина Джава или написать свой интерпретатор байткода.\nAndroid Networking Tutorial: Getting Started\nВ статье создается Андройд-приложение, которое отображает репозитории с Гитхаба. Акцент делается на работу с сетью. Хорошая статья перед стартом вашего первого приложения на Андроид.\nRetrying operation with Guava Retrying\nGuava Retrying - библиотека позволяет оборачивать методы в “ретрай обертку”, которая реализует повтор операции за вас. Парсили вы сайт и оборвался интернет — библиотека позволяет настроить количество повторов, таймауты, период через который нужно повторить операцию и много чего еще.\nMother F**k the ScheduledExecutorService!\nЯ столкнулся с этим буквально на этой неделе. Вы знали что ScheduledThreadPoolExecutor не бросает Рантайм ошибки? Если в коде где-то спрятался NullPointerException экзекъютор не показывает ошибку, а продолжает спокойно выполняться — будьте осторожней с ним и прочитайте обязательно статью.\nHow to get the running tasks for a Java Executor\nВ статье рассказывается как написать свой экзекъютор для того чтобы мониторить текущие потоки — какие выполняются, а какие уже выполнились.\nA Simple Multi-Threaded Java HTTP Proxy Server\nЕсли вы когда-нибудь задумывались как реализованы прокси-сервера, то вам понравится эта статья. Автор написал свою реализацию прокси сервера на джаве. Она конечно, не готова к использованию в продакшене — но точно поможет разобраться как все устроено.\nHow to Create an Executable JAR with Maven\nВ статье 6 способов как можно с помощью мавен плагинов сделать запускаемый jar-файл.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\n","permalink":"https://volyx.in/posts/2016-10-26-javaswag-19-new-imported/","summary":"В выпуске тонкости экзекъютор сервисов, сохранение объектов в Редис и способы упаковки приложения в исполняемый архив.","title":"Javaswag выпуск 19"},{"content":"Привет! В выпуске коллекции примитивов Trove, автотесты для equals, hashCode и компонент Спринга с 50-ю аннотациями.\nТрансляция конференции Joker\nЗапись трансляции из 2 зала.\nTrove library: using primitive collections for performance\nБиблиотека коллекций для работы с примитивами. TIntArrayList , TIntLinkedList, а также реализации Set и Map. Полезно знать о них, если в приложении важно количество используемой памяти.\nMonster Component in Java with Spring\n50 аннотаций над классом - думаете это нереально? Посмотрите что можно “наконфигурировать” с любимыми аннотациями из Спринга.\nEqualsVerifier\nБиблиотека EqualsVerifier автоматически проверяет реализации методов equals(), hachCode() на корректность. Они важны, но и их всегда лень тестировать. Отлично что есть библиотека, которая делает за нас. Автоматическое тестирование equals(), hachCode() может сохранить вам несколько часов отладки кода на продакшене.\nCombinator Pattern with Java 8\nАвтор блога предлагает писать методы валидации в функциональном стиле - это позволяет составлять из них более сложные функции валидации, как в конструкторе.\nShould tests be ordered or not?\nНиколас Франкел рассуждает о юнит тестах: должны ли они быть упорядочены, какого размера должны быть, и отличаются от интеграционных.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\n","permalink":"https://volyx.in/posts/2016-10-17-javaswag-18-new-imported/","summary":"\u003cp\u003eПривет!\nВ выпуске коллекции примитивов Trove, автотесты для equals, hashCode и компонент Спринга с 50-ю аннотациями.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.youtube.com/watch?v=puYPHysBN7U\"\u003eТрансляция конференции Joker\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eЗапись трансляции из 2 зала.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://java-performance.info/primitive-types-collections-trove-library/\"\u003eTrove library: using primitive collections for performance\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eБиблиотека коллекций для работы с примитивами. \u003ccode\u003eTIntArrayList\u003c/code\u003e\n, \u003ccode\u003eTIntLinkedList\u003c/code\u003e, а также реализации Set и Map. Полезно знать о них, если в приложении важно количество используемой памяти.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://grison.me/2016/09/30/monster-component-java-spring/\"\u003eMonster Component in Java with Spring\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e50 аннотаций над классом - думаете это нереально? Посмотрите что можно “наконфигурировать” с любимыми аннотациями из Спринга.\u003c/p\u003e","title":"Javaswag выпуск 18"},{"content":"Закончился первый месяц обучения в онлайн магистратуре. Сдано уже 3 недели тестов и контрольных работ. Пора делать первые выводы.\nЯ подсчитал что на просмотр одной недели лекций одного курса уходит по 1-2 часа. На вдумчивый просмотр, с пересматриванием тех моментов, которые не понял. Итого, если поднапрячься, то за 2 выходных можно закрыть неделю. Я делал так один раз, и это растягивается на полных два дня \u0026ldquo;ботанья\u0026rdquo;. Потому что за один день хорошо разобраться хвататет времени только в одном предмете - два уже перебор, начинает пухнуть голова. Идеальный вариант просмотреть все лекции в первой половине недели, а на выходные оставить особо сложные задания.\nОрганизаторы призывают задавать вопросы на форуме, но в нем отсуствуют уведомелния на почту, поэтому форум не очень эффективен. Просто нет времени каждый раз проверять - не ответили тебе что-нибудь. Думаю, чат с преподавателем был бы эффективней, потому что каждый раз, когда пишешь на форум, такое ощущение, что пишешь в пустоту.\nПрогресс по предметам за 3 недели Теория игр\nКомбинаторика\nВведение в теорию вероятностей\nТеория графов\nФилософия науки. Актуальные проблемы\nНИР.\nРазброс интересов студентов из внутреннего документа.\n","permalink":"https://volyx.in/posts/2016-09-12-mipt-pervii-mesyac-new-imported/","summary":"\u003cp\u003eЗакончился первый месяц обучения в онлайн магистратуре. Сдано уже 3 недели тестов и контрольных работ. Пора делать первые выводы.\u003c/p\u003e\n\u003cp\u003eЯ подсчитал что на просмотр одной недели лекций одного курса уходит по 1-2 часа. На вдумчивый просмотр, с пересматриванием тех моментов, которые не понял. Итого, если поднапрячься, то за 2 выходных можно закрыть неделю. Я делал так один раз, и это растягивается на полных два дня \u0026ldquo;ботанья\u0026rdquo;. Потому что за один день хорошо разобраться хвататет времени только в одном предмете - два уже перебор, начинает пухнуть голова. Идеальный вариант просмотреть все лекции в первой половине недели, а на выходные оставить особо сложные задания.\u003c/p\u003e","title":"МФТИ. Первый месяц"},{"content":"Привет! В выпуске\nAsynchronous timeouts with CompletableFutures in Java 8 and Java 9\nВ Java 9 CompletableFuture получит несколько методов для асинронной работы с таймаутами: orTimeout, completeOnTimeout, которые особенно пригодятся если если один из ваших вызовов внутри CompletableFuture не отвечает или завис.\nJavaOne 2016\nВидео с JavaOne - для тех кто хочет быт ьна самой передовой. Темы с JavaOne обычно расползаются по конференциям и задают тренд на следущий год.\nConsumer In Place Of Returning List\nЧто если в метод передавать не List, а Consumer? Это избавит от создания списка, который в будущем может не пригодится.\nThe Safe Builder Pattern\nСамый популярный подход для созднания сложных объектов - паттерн Builder, но его недостатком является то, что нельзя проверить на этапе компиляции - все параметры ьыли установлены. Поэтому часто можно неожиданно поймать NullPointerExcetion. В статье рассказывается, как реализовать паттерн Builder без этого недостатка.\nComplete Guide: Inheritance strategies with JPA and Hibernate\nВ статье рассказывается о 4 стратегиях, поддерживаемых Hibernate для храниия объектов с иерархией. \u0026ldquo;Must read\u0026rdquo; для всех у кого проекте используется Hibernate.\nHibernate испортил ваш проект? Нет, это были вы!\nВ статье три полезных видео рассказывающих об устройстве Hibernate, о сложностях испольхования и о пролемах с проиводительностью. Все три видео на русском языке.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\n","permalink":"https://volyx.in/posts/2016-09-26-javaswag-17-new-imported/","summary":"В выпуске видео с JavaOne 2016, модульность в Java 9 и оптимизации JVM.","title":"Javaswag выпуск 17"},{"content":"Привет! В выпуске архитектура Spark, перенос релиза Java 9 и Hibernate Search.\nSpark Architecture\nКратко и доступно об архитектуре Spark для интересующихся распределенными системами и вычислениями.\nMongoDB Java tutorial\nОбучающая статья о работе с Монгой с помощью Java драйвера. От установки - до получения статистики и написания CRUD запросов. Если вы хотите поработать с NoSQL базой, то это самый простой способ начать.\nArchitecture Is About Tradeoffs\nАвтор рассуждает об архитектуре, компромиссах при создании приложения, и о том почему для следующего проекта он не выберет JavaEE.\nDifferent Types of References in Java\nПомните наизусть все основные типы ссылок в Java? Soft, Weak, Phantom ссылки. Если забыли, то эта статья быстро напомнит.\nHow the JVM compares your strings using the craziest x86 instruction you\u0026rsquo;ve never heard of\nВ статье — погружение в исходный код OpenJDK, затем в ассемблер и процессор. Все для того, чтобы разобраться как работает String.compareTo.\nOptional Improvements in Java 9\nВ Java 9 появятся новые методы у Optional - stream(), ifPresentOrElse(), or(). А также метод get() будет помечен как @Deprecated\nHibernate Search and Spring Boot: Simple yet powerful archiving\nАвтор написал приложение, используя Spring Boot и Hibernate Search. Приложение архивирует твиты и позволяет искать по их содержанию. Всем интересующимся Hibernate Search - добро пожаловать в статью.\nThe Ultimate Guide to Java 9\nРелиз Java 9 перенесен на июль 2017, но это не повод расстраиваться. Самое время вспомнить все самые большие изменения, которые запланированы на 9 версию.\nRebutting 5 Common Stream Tropes\nВ статье показывается, как отрефакторить длинный процедурный метод в функциональном стиле, используя Stream API.\nJVM Architecture Diagram\nСхема компонентов виртуальной машины Java с кратким описанием что они делают, и для чего нужны.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\n","permalink":"https://volyx.in/posts/2016-09-18-javaswag-16-new-imported/","summary":"Привет! В выпуске архитектура Spark, перенос релиза Java 9 и Hibernate Search.","title":"Javaswag выпуск 16"},{"content":"Не знаю как так получилось, но я поступил в магистратуру МФТИ. Да еще к тому же бесплатно - выиграл грант на 2 года обучения.\nМагистратура полностью удаленная, то есть все лекции, тесты доступны онлайн и экзамены можно сдать удаленно. Для защиты от списывания используется специальная система - Экзамус. Она следит через веб-камеру за студентом и смотрит за вашим рабочим столом, чтобы вы никуда подглядывали.\nДля обучения используется площадка - MiPTX. Она похожа на все остальные МООК платформы - Coursera, Stepik и Universarium.\nВ первом семестре нужно сдать 6 курсов:\nТеория графов Введение в теорию вероятностей Комбинаторика Теория игр Английский язык Философия науки По английскому и философии зачет, по остальным - экзамен. По всем предметам дедлайн каждую неделю в понедельник.\nВ конце неделе тест или контрольная. Итоговая оценка за экзамен в основном складывается из таких проверочных контрольных. Примерно так выглядит вкладка \u0026ldquo;Прогресс\u0026rdquo; у каждого курса:\nКурс разделен на недели. Всего в курсе около 13 недель.\nКаждую неделю выходит новая неделя из курса, она состоит примерно из 1,5 часа видео лекций, тренировочных заданий и контрольная/тесты. Также есть видео семинары с преподавателем, где можно позадавать вопросы и разобрать тренировочные задачи.\nНа контрольную и тренировочные задания у меня уходит примерно 2-3 часа. Плюс в свободное время я читаю дополнительную литературу по курсу. Я думаю часов 15-20 в неделю магистратура будет занимать.\nИтого 13 недель, 6 предметов. Напряженные будут полгода.\n","permalink":"https://volyx.in/posts/2016-09-12-mipt-magistratura-new-imported/","summary":"\u003cp\u003eНе знаю как так получилось, но я поступил в магистратуру МФТИ. Да еще к тому же бесплатно - выиграл грант на 2 года обучения.\u003c/p\u003e\n\u003cp\u003eМагистратура полностью удаленная, то есть все лекции, тесты доступны онлайн и экзамены можно сдать удаленно. Для защиты от списывания используется специальная система - \u003ca href=\"http://examus.info/\"\u003eЭкзамус\u003c/a\u003e. Она следит через веб-камеру за студентом и смотрит за вашим рабочим столом, чтобы вы никуда подглядывали.\u003c/p\u003e\n\u003cp\u003eДля обучения используется площадка - MiPTX. Она похожа на все остальные МООК платформы - Coursera, Stepik и Universarium.\u003c/p\u003e","title":"Магистратура МФТИ"},{"content":"Привет! В выпуске - новый @Depracted в Java 9, быстрый старт с Grails и микросервисная архитектура.\nWhy Should Java Developers Give Grails a Chance\nАвтор рассказывает как он переписывал Спринг МВЦ приложение на Грэйлс и с какими проблемами столкнулся.\nCreate a Secured Restful API App with Grails 3, PostgreSQL and JMS\nСерия статей по созданию Рест Апи используя Грэйлз.\nWhy I introduced scala in our project\nАвтор решил использовать Скалу для написания тестов для Джава приложения. В статье - как он пришел к этому решению.\nCustom test slice with Spring Boot 1.4\nСпринг выпустил новую фичу - тестовые слайсы. Они позволяют тестировать приложение на каком-то срезе Спрингового контекста. Теперь не нужно запускать все приложение, чтобы выполнить интеграционный тест. Ставите аннотацию @WebMvcTest и Спринг магически настроит все за Вас.\nHow to use CyclicBarrier in Java - Concurrency Tutorail\nЦиклический Барьер не так часто используется в повседневной жизни программиста, но знать что это такое обязательно нужно, чтобы понимать все способы синхронизации потоков.\nВ статье разобран циклический барьер, и показаны примеры его использования.\nJava 8 WatchService API Tutorial\nВ Джава 8 появился новый АПИ для слежения за обновлениями в папке документов. Вешаете слушателя и ловите все изменения с помощью событий.\nПолезно для всех, кто работает в своем приложении с содержимым папки в реальном времени.\nA Proposed Recipe for Designing, Building and Testing Microservices\nКомпания SpectoLabs описывают свой подход разработки и тестирования микросервисов. О том как писать их “с нуля” и о переходе с монолитного приложения.\nIntro to Stream Processing with Spring Cloud Data Flow\nВводная статья по Spring Cloud Data Flow. Это один из молодых проектов Спринга, который упрощает потоковую обработку данных.\nВ статье — как это работает, как настроить сервер стриминга и клиента.\nTutorial: Correct SLF4J logging usage and how to check it\nО том как должно выглядеть логирование ошибок с точки зрения анализатора кода FindBugs.\nManage and reload spring application properties on the fly\nСделать обновление настроек Спринг приложения “на лету”, без перезагрузки сервера не просто.В статье туториал как это сделать.\nInstrumenting Hibernate Connection Providers\nРазработчик Fitbit(это те, с умным браслетом) рассказывает о том как мониторить хибернейт приложение. В статье автор дорабатывает хибернейотвский пул коннектов, чтобы он отдавал еще всякую полезную статистику о себе.\nPlugging Leaky Abstractions\nПочему абстракции в вашем приложении текут и как с этим бороться.\nJDK 9 @Deprecated Annotation Enhancements\nВ статье рассматриваются два новых атрибута - ‘forRemoval’ и ‘since’, которые появятся у аннотации ‘@Deprecated’ в Джава 9. Для чего они нужны - об этом в статье.\nSpring Boot: Sessions actuator endpoint\nАвтор статьи рассказывает как написать эндпойнт для отображения активных ХТТП сессий пользователей.\nЕженедельные выпуски Джавасвэга на почту — http://javaswag.curated.co.\nЕженедельные выпуски Джавасвэга в Телеграме — http://telegram.me/javaswag.\nУдачи!\n","permalink":"https://volyx.in/posts/2016-09-08-javaswag-15-new-imported/","summary":"Привет! В выпуске - новый @Depracted в Java 9, быстрый старт с Grails и микросервисная архитектура.","title":"Javaswag выпуск 15"},{"content":"Задание\nhttps://stepic.org/lesson/Использование-указателей-540/step/8\nНапишите функцию поиска первого вхождения шаблона в текст. В качестве первого параметра функция принимает текст (C-style строка), в которой нужно искать шаблон. В качестве второго параметра строку-шаблон (C-style строка), которую нужно найти. Функция возвращает позицию первого вхождения строки-шаблона, если он присутствует в строке (помните, что в C++ принято считать с 0), и -1, если шаблона в тексте нет.\nУчтите, что пустой шаблон (строка длины 0) можно найти в любом месте текста.\nТребования к реализации: при выполнении данного задания вы можете определять любые вспомогательные функции, если они вам нужны. Вводить или выводить что-либо не нужно. Реализовывать функцию main не нужно.\nРешение\n{% highlight cpp %} #include using namespace std;\nint strstr(const char *text, const char *pattern) { if(pattern[0] == \u0026lsquo;\\0\u0026rsquo;) { return 0; } int j = 0; for (; *text != \u0026lsquo;\\0\u0026rsquo; ; text++) { // cout \u0026laquo; text \u0026laquo; endl; // cout \u0026laquo; pattern[0] \u0026laquo; endl; int i = 0; while (text[i] == pattern[i]) { // cout \u0026laquo; pattern[i] \u0026laquo; endl; i++; if (pattern[i] == \u0026lsquo;\\0\u0026rsquo;) { return j; } } j++; } return -1;\n}\nint main() { cout \u0026laquo; strstr(\u0026ldquo;12345\u0026rdquo;, \u0026ldquo;\u0026rdquo;) \u0026laquo; endl; cout \u0026laquo; strstr(\u0026ldquo;12345\u0026rdquo;, \u0026ldquo;3\u0026rdquo;) \u0026laquo; endl; cout \u0026laquo; strstr(\u0026ldquo;12345\u0026rdquo;, \u0026ldquo;34\u0026rdquo;) \u0026laquo; endl; cout \u0026laquo; strstr(\u0026ldquo;Java Pascal C++ Go\u0026rdquo;, \u0026ldquo;C++\u0026rdquo;) \u0026laquo; endl; } {% endhighlight %}\nСам курс https://stepic.org/course/7\n","permalink":"https://volyx.in/posts/2016-05-24-cplusplus-programming-search-string-pattern-new-imported/","summary":"\u003cp\u003eЗадание\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stepic.org/lesson/%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%83%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B5%D0%B9-540/step/8\"\u003ehttps://stepic.org/lesson/Использование-указателей-540/step/8\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eНапишите функцию поиска первого вхождения шаблона в текст. В качестве первого параметра функция принимает текст (C-style строка), в которой нужно искать шаблон. В качестве второго параметра строку-шаблон (C-style строка), которую нужно найти. Функция возвращает позицию первого вхождения строки-шаблона, если он присутствует в строке (помните, что в C++ принято считать с 0), и -1, если шаблона в тексте нет.\u003c/p\u003e\n\u003cp\u003eУчтите, что пустой шаблон (строка длины 0) можно найти в любом месте текста.\u003c/p\u003e","title":"Поиска первого вхождения шаблона в текст"},{"content":"Задание\nhttps://stepic.org/lesson/Использование-указателей-540/step/6\nОчень часто для работы со строками нам нужно сначала вычислить длину строки. Для C-style строк длина нигде явно не хранится, но её можно вычислить. Напишите функцию, которая вычисляет длину C-style строки. Учтите, что завершающий нулевой символ считать не нужно.\nТребования к реализации: при выполнении этого задания вы можете создавать любые вспомогательные функции. Вводить или выводить что-либо не нужно. Реализовывать функцию main не нужно.\nРешение\n{% highlight cpp %} #include using namespace std;\nunsigned strlen(const char *str) {\nunsigned i = 0; for (; *str != \u0026lsquo;\\0\u0026rsquo;; str++) { i++;\n} return i; }\nint main() { char s[] = \u0026ldquo;Hello World!\\n\u0026rdquo;; cout \u0026laquo; strlen(s); } {% endhighlight %}\nСам курс https://stepic.org/course/7\n","permalink":"https://volyx.in/posts/2016-05-19-cplusplus-programming-string-length-new-imported/","summary":"\u003cp\u003eЗадание\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stepic.org/lesson/%D0%98%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D1%83%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B5%D0%B9-540/step/6\"\u003ehttps://stepic.org/lesson/Использование-указателей-540/step/6\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eОчень часто для работы со строками нам нужно сначала вычислить длину строки. Для C-style строк длина нигде явно не хранится, но её можно вычислить. Напишите функцию, которая вычисляет длину C-style строки. Учтите, что завершающий нулевой символ считать не нужно.\u003c/p\u003e\n\u003cp\u003eТребования к реализации: при выполнении этого задания вы можете создавать любые вспомогательные функции. Вводить или выводить что-либо не нужно. Реализовывать функцию main не нужно.\u003c/p\u003e\n\u003cp\u003eРешение\u003c/p\u003e\n\u003cp\u003e{% highlight cpp %}\n#include \u003c!-- raw HTML omitted --\u003e\nusing namespace std;\u003c/p\u003e","title":"Длина строки"},{"content":"Задание\nhttps://stepic.org/lesson/Использование-указателей-540/step/7\nВам требуется реализовать функцию конкатенации (склейки) двух C-style строк. Функция конкатенации принимает на вход две C-style строки и дописывает вторую в конец первой так, чтобы первая строка представляла из себя одну C-style строку равную конкатенации двух исходных.\nНе забудьте, что в результирующей строке должен быть только один нулевой символ — тот, что является маркером конца строки.\nГарантируется, что в первой строке достаточно памяти (т.е. она располагается в массиве достаточной длины), чтобы разместить конкатенацию обеих строк, но не больше.\nТребования к реализации: при выполнении задания вы можете определять любые вспомогательные функции, если они вам нужны. Выводить или вводить что-либо не нужно. Функцию main определять не нужно.\nРешение\n{% highlight cpp %} #include using namespace std;\nunsigned strlen(const char *str) {\nunsigned i = 0; for (; *str != \u0026lsquo;\\0\u0026rsquo;; str++) { i++;\n} return i; }\nvoid strcat(char *to, const char *from) { unsigned i = strlen(to); for (; *from != \u0026lsquo;\\0\u0026rsquo; ; from++) { to[i] = from[0]; i++; } to[i] = \u0026lsquo;\\0\u0026rsquo;; }\nint main() { char s[] = \u0026ldquo;Hello \u0026ldquo;; char s1[] = \u0026ldquo;World!\u0026rdquo;; strcat(s, s1); cout \u0026laquo; s \u0026laquo; endl; } {% endhighlight %}\nСам курс https://stepic.org/course/7\n","permalink":"https://volyx.in/posts/2016-05-19-cplusplus-programming-string-concat-new-imported/","summary":"Вам требуется реализовать функцию конкатенации (склейки) двух C-style строк. Функция конкатенации принимает на вход две C-style строки и дописывает вторую в конец первой так, чтобы первая строка представляла из себя одну C-style строку равную конкатенации двух исходных.","title":"Склейка строк"},{"content":"\nСразу после прочтения книги я записываю все мысли, которые появились в голове. Затем через некоторое время расшифровываю ее.\nО книге\nУ каждой супружеской пары хотя бы раз в жизни появлялась мысль - открыть семейный бизнес. Кофемолка - роман Михаила Идова о супружеской паре, которая вместе решила открыть венское кафе. Нина и Марк живут на проценты от своего жилья, ведут интеллигентный образ жизни. Нина - арт-фотограф, Марк - пишет отзывы на книги молодых авторов, оба работают не ради денег. Они не готовят, не убирают, а занимаются сугубо умственной \u0026ldquo;творческой\u0026rdquo; деятельностью.\nХипстеры не умею делать дела, или \u0026ldquo;а давай сейчас замутим бизнес\u0026rdquo;\nПод хипстерами часто понимают творческих людей, не таких как все, уникальных, ветряных, безалаберных, тех которые не могут заниматься не любимым делом. Такие свое рода, художники свой жизни. На работе с такими тяжело. Ты либо ремесленник, либо художник. Я бы предпочел работать с ремесленником.\nСвое дело - это тяжкий ежедневный труд - сто раз подумай - ведь это тяжелее твоей работы на какого-то\nНина и Марк открыли кофейню для себя, для души, для друзей. Так не бывает. В бизнесе нет романтики. Бизнес - это всего лишь маржа, разница между прибылью и убытками. Нет маржи - называйте себя хобби. Ави Сосна - воплощение рынка. Он видит не людей, а способ заработать. В худшие времена \u0026ldquo;Кольшинского\u0026rdquo; Марк становится немного Ави.\nКрепкие отношения = препятствия\nОтношения Марка и Нины двигаются в такт с развитием или упадком кофейни. Они долгое время были ограждены от внешнего мира, не было притока новых людей, знакомств. Сидели в квартире и упивались разговорами с друг другом. Настоящие отношения - те, которые испытанны на прочность. Нина и Марк жили в радужном мире с первого своего знакомства и даже через несколько лет их отношения были хрупки. Вранья, Карина, менеджера из соседней кафе - этого ничего не могло произойти в их уютной квартире.\nСудить других, когда сам не пробовал - можно\nМарк рецензирует книги начинающих авторов и его отзывы редко оказываются положительными. Его рецензии похожи больше на разнос, после которого молодые писатели не могут оправиться. Сам Марк не написал ни одной работы. Но это совершенно не значит, что он плохой рецензент. Человек бузусловно может быть экспертом в области, в которой он сам не работал. И даже больше - каждый человек эксперт во всех областях. Уверен, что своей работой Марк спас нескольких горе-писателей. А то что он почувствовал себя в шкуре отрецензированного, и то - что он честно к этому отнесся - это отличный аргумент за адекватность Марка. Оценка вашей работы - это правда, которую вы знали, но боялись сказать себе.\nОценивать работы других это хороший способ развиваться - за счет чьего-то опыта. Учиться на чужих ошибках, а не на своих, анализировать, наблюдать и делать выводы - это можно назвать научным методом, а можно и просто сплетнями - если вы забыли сделать выводы. Если не было вывода, то походу вы просто посплетничали. Для тех, кто сам пробовал - есть специальное название \u0026ldquo;практикующий эксперт\u0026rdquo;.\nP.S. В книге много английского юмора, и почти под каждой шуткой - сноска, объясняющая ее. К концу произошел такой странный эффект, - увидев сноску, я останавливался, и начинал думать в чем же шутка. Думаю автор немного перестарался со сносками. Я эмоционально чувствовал, где автор хотел съязвить, и сноски мне не были нужны. А где не понимал шутки - долго думал и это доставляло неудобство.\n","permalink":"https://volyx.in/posts/2016-05-14-idov-kofemolka-new-imported/","summary":"\u003cp\u003e\u003cimg alt=\"desk\" loading=\"lazy\" src=\"images/%D0%BA%D0%BE%D1%84%D0%B5%D0%BC%D0%BE%D0%BB%D0%BA%D0%B0.jpeg\"\u003e\u003c/p\u003e\n\u003cp\u003eСразу после прочтения книги я записываю все мысли, которые появились в голове. Затем через некоторое время расшифровываю ее.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eО книге\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eУ каждой супружеской пары хотя бы раз в жизни появлялась мысль - открыть семейный бизнес. Кофемолка - роман Михаила Идова о супружеской паре, которая вместе решила открыть венское кафе. Нина и Марк живут на проценты от своего жилья, ведут интеллигентный образ жизни. Нина - арт-фотограф, Марк - пишет отзывы на книги молодых авторов, оба работают не ради денег. Они не готовят, не убирают, а занимаются сугубо умственной \u0026ldquo;творческой\u0026rdquo; деятельностью.\u003c/p\u003e","title":"Михаил Идов Кофемолка"},{"content":"Задание\nhttps://stepic.org/lesson/Стек-вызовов-538/step/10\nВам требуется написать программу, которая \u0026ldquo;переворачивает\u0026rdquo; последовательность положительных целых чисел. На вход подается последовательность разделенных пробелами положительных целых чисел. Последовательность заканчивается нулем. Требуется вывести эту последовательность в обратном порядке.\nНа выводе числа нужно так же разделить пробелами. Завершающий ноль — это просто индикатор конца последовательности, он не является ее частью, т.е. выводить его не нужно.\nТребования к реализации: в данном задании запрещено использовать циклы, а также дополнительную память: массивы, строки или контейнеры (даже, если вы с ними уже знакомы). Вам разрешено заводить вспомогательные функции, если они вам нужны.\nПодсказка: используйте рекурсию.\nSample Input: 15 26 1 42 0\nSample Output: 42 1 26 15\nРешение\n{% highlight cpp %} #include using namespace std;\nvoid read() { int c; std::cin \u0026raquo; c;\nif (c != 0) { read(); } else { return; } cout \u0026lt;\u0026lt; c \u0026lt;\u0026lt; ' '; }\nint main() { read(); return 0; } {% endhighlight %}\n","permalink":"https://volyx.in/posts/2016-05-06-cplusplus-programming-call-stack-new-imported/","summary":"\u003cp\u003eЗадание\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stepic.org/lesson/%D0%A1%D1%82%D0%B5%D0%BA-%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%BE%D0%B2-538/step/10\"\u003ehttps://stepic.org/lesson/Стек-вызовов-538/step/10\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eВам требуется написать программу, которая \u0026ldquo;переворачивает\u0026rdquo; последовательность положительных целых чисел. На вход подается последовательность разделенных пробелами положительных целых чисел. Последовательность заканчивается нулем. Требуется вывести эту последовательность в обратном порядке.\u003c/p\u003e\n\u003cp\u003eНа выводе числа нужно так же разделить пробелами. Завершающий ноль — это просто индикатор конца последовательности, он не является ее частью, т.е. выводить его не нужно.\u003c/p\u003e\n\u003cp\u003eТребования к реализации: в данном задании запрещено использовать циклы, а также дополнительную память: массивы, строки или контейнеры (даже, если вы с ними уже знакомы). Вам разрешено заводить вспомогательные функции, если они вам нужны.\u003c/p\u003e","title":"Стек вызовов"},{"content":"Задание\nhttps://stepic.org/lesson/Указатели-и-массивы-539/step/9\nВ этой задаче вам нужно реализовать функцию, которая сдвигает содержимое массива влево на заданное число позиций (циклический сдвиг).\nНа вход функция принимает массив, его размер и величину сдвига. Например, если на вход функции подан массив: int a[] = { 1, 2, 3, 4, 5 }; и требуется циклически сдвинуть его влево на 2 позиции, то на выходе мы получим числа в таком порядке: 3, 4, 5, 1, 2.\nОбратите внимание, что величина сдвига может быть нулевой, а может быть и больше размера массива, все эти случаи нужно учесть.\nТребования к реализации: вам нужно реализовать только функцию циклического сдвига. При этом она не должна вводить или выводить что-либо. При решении этой задачи вы можете определять любые вспомогательные функции, если они вам нужны. Реализовывать функцию main не нужно. Предполагается, что вам не потребуется дополнительная память, а именно: массивы и стандартные контейнеры. Пользоваться стандартными алгоритмами и контейнерами не разрешается, даже если вы с ними знакомы.\nРекомендация: перед тем, как начать кодировать решение этой задачи, продумайте алгоритм, который вы будете использовать. В данной задаче не проверяется эффективность этого алгоритма (в разумных пределах).\nПодсказка: вам может потребоваться оператор % для вычисления остатка. Наиболее простая реализация этой функции несколько раз использует функцию, которая переставляет элементы массива в обратном порядке.\nРешение:\n{% highlight cpp %} #include using namespace std;\nvoid print(int a[], unsigned size) { cout \u0026laquo; a[0] \u0026laquo; \u0026ldquo;, \u0026ldquo;; cout \u0026laquo; a[1] \u0026laquo; \u0026ldquo;, \u0026ldquo;; cout \u0026laquo; a[2] \u0026laquo; \u0026ldquo;, \u0026ldquo;; cout \u0026laquo; a[3] \u0026laquo; \u0026ldquo;, \u0026ldquo;; cout \u0026laquo; a[4] \u0026laquo; endl; }\nvoid shifRec(int a[], unsigned size, unsigned i) { if (i != 0) { i\u0026ndash;; shifRec(a, 5, i); } else { return; } a[i] = a[i+1]; }\nvoid shif(int a[], unsigned size) { int f = a[0]; shifRec(a, size, size); a[size - 1] = f; }\nvoid rotate(int a[], unsigned size, int shift) { for (int i = 0; i \u0026lt; shift % size; i++) { shif(a, size); } }\nint main() { int a[5] = {1 ,2 ,3 ,4 , 5}; print(a, 5); rotate(a, 5, 7); print(a, 5); return 0; } {% endhighlight %}\n","permalink":"https://volyx.in/posts/2016-05-06-cplusplus-programming-pointers-and-array-new-imported/","summary":"\u003cp\u003eЗадание\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://stepic.org/lesson/%D0%A3%D0%BA%D0%B0%D0%B7%D0%B0%D1%82%D0%B5%D0%BB%D0%B8-%D0%B8-%D0%BC%D0%B0%D1%81%D1%81%D0%B8%D0%B2%D1%8B-539/step/9\"\u003ehttps://stepic.org/lesson/Указатели-и-массивы-539/step/9\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eВ этой задаче вам нужно реализовать функцию, которая сдвигает содержимое массива влево на заданное число позиций (циклический сдвиг).\u003c/p\u003e\n\u003cp\u003eНа вход функция принимает массив, его размер и величину сдвига. Например, если на вход функции подан массив: int a[] = { 1, 2, 3, 4, 5 }; и требуется циклически сдвинуть его влево на 2 позиции, то на выходе мы получим числа в таком порядке: 3, 4, 5, 1, 2.\u003c/p\u003e","title":"Указатели и массивы"},{"content":"Посмотрел фильм \u0026ldquo;Конец прекрасной эпохи\u0026rdquo; режиссёра Станислава Говорухина. Фильм снят по мотивам рассказов Сергея Довлатова из сборника Компромисс.\nФильм черно-белый, и смотрится он как немного советский, в хорошем смысле этого слова. Что побудило 80 летнего режиссёра снять черно-белый фильм в 2015 году? Я посмотрел не было ли у Говорухина еще каких-то черно-белых картин. Картина \u0026ldquo;Weekend\u0026rdquo; снята тоже в черно-белом. Видимо опробовал - понравилось.\nЯ читал рассказы Довлатова - \u0026ldquo;Заповедник\u0026rdquo;, и \u0026ldquo;Встретились, поговорили\u0026rdquo;. На \u0026ldquo;Заповедник\u0026rdquo; даже ходил в театр. Все довлатовские произведения похожи на друг друга, как две капли. Скорее лучше назвать это авторским стилем. И \u0026ldquo;Конец прекрасной эпохи\u0026rdquo; не исключение. Какого то особого режиссерского прочтения я не прочувствовал.\nОстался не отвеченным вопрос - что хотел сказать режиссер. Я так и не понял. Сквозь фильм прослеживается добрая саркастическая ухмылка Довлатова над советским прошлым. Но она никак не вызывает ностальгии. Может быть Говорухин напоминает как жилось раньше, причем напоминает с такой старой отеческой позиции - \u0026ldquo;Вы что забыли? Я вот помню, а вы нет.\u0026rdquo; Ну то есть в бюллетене из двух пунктов: время до 90 годов, время после 2000 годов он ставит галочку рядом с последним.\n== Политический режиссер\nИ вроде бы стало очевидным, если заглянуть в Википедию в раздел политические взгляды.\nЧленом КПСС Станислав Говорухин не был. После перестройки стал одним из лидеров Демократической партии России (ДПР). В 1990 году снял острый публицистический фильм о России в XX веке «Так жить нельзя»[19][32], за который получил кинопремию «Ника». В 1992 году вышли его фильмы «Александр Солженицын» и «Россия, которую мы потеряли»[33], которые отражали широкие антикоммунистические настроения того времени. В последнем Говорухин благосклонно оценивает Российскую империю.\nВ КПСС не вступал. Видимо у творческих людей это было модно. И когда наконец, все рухнуло и художнику развязали руки о выпускает «Александр Солженицын» и «Россия, которую мы потеряли».\nПосле октябрьских событий 1993 года Говорухин постепенно перешёл на сторону левопатриотической оппозиции. В 1996 году он поддерживал лидера коммунистов Г. А. Зюганова во втором туре президентских выборов. В 1999 году был избран депутатом Госдумы третьего созыва от блока «Отечество — Вся Россия» (в списке был под номером шесть и неоднократно говорил о своём восхищении лидерами блока — Е. М. Примаковым и Ю. М. Лужковым).\n19 февраля 2000 года Станислав Говорухин был зарегистрирован кандидатом в президенты Российской Федерации и на президентских выборах, состоявшихся 26 марта 2000 года, набрал 0,44 % голосов избирателей[8]. После выборов Говорухин сказал: «Путин обязан своей победой рабской психологии народа: покажи ему нового царя, он за него и голосует»[34].\nВ 2005 году Говорухин оставил левопатриотическую оппозицию и перешёл на сторону президента Путина, вступив в правящую партию «Единая Россия». На довыборах в Государственную думу в декабре 2005 года Говорухин был в очередной раз избран депутатом, набрав 38,5 % голосов и одержав победу над своим конкурентом — сатириком В. А. Шендеровичем, набравшим 19 % голосов. В 2007 году Говорухин был вновь избран в Госдуму — уже по списку «Единой России» (был третьим в московском региональном списке).\n27 ноября 2011 года на предвыборном съезде «Единой России» Говорухин первым предложил новое выдвижение кандидатуры В. В. Путина в президенты России.\n8 декабря 2011 года Станислав Говорухин был избран главой предвыборного штаба Владимира Путина на президентских выборах 2012 года\nДальше его так понесло, что он даже поддержал Зюганова, не смотря на свои \u0026ldquo;антикоммунистические настроения\u0026rdquo;. Настроение настроением, а голосовать то надо. Наклонная превращает Говорухина из не любимчиков власти очень даже в любимчики. С 2005 Говорухин пускается во все тяжкие и не только переходит на сторону Путина, а дальше и предлагает его как кандидата и возглавляет предвыборный штаб. Хотя когда он баллотировался в президенты(да,да представьте себе) и проиграл выборы он говорил:\n«Путин обязан своей победой рабской психологии народа: покажи ему нового царя, он за него и голосует»\nВидимо режиссер именно этим и занялся - показывает народу нового царя - чтобы за него проголосовали. Неистово несет знамя этих власте-лизов и подхалимов, тем самым обеспечив себе \u0026ldquo;что хочешь то и снимай\u0026rdquo;, хотя по-моему мнению должен заниматься кинематографом.\nПосле всех его политических интриг даже как-то противно было то, что посмотрел фильм. Снят он хорошо, и приятная довлатовская ухмылка есть, но вот сам художник-агитатор не нравится. Хотя может быть художника и ценят по его работам.\nТа самая ухмылка Довлатова. Примерно с таким же лицом я смотрю на Говорухина.\nП.С. У Бродского есть одноименный стих - \u0026ldquo;Конец прекрасной эпохи\u0026rdquo;, который начинается так:\nПотому что искусство поэзии требует слов, я -- один из глухих, облысевших, угрюмых послов второсортной державы, связавшейся с этой, -- не желая насиловать собственный мозг, сам себе подавая одежду, спускаюсь в киоск за вечерней газетой. Прослушайте его в исполнении Александра Васильева\n","permalink":"https://volyx.in/posts/2016-04-03-the-end-of-awesome-epoch-new-imported/","summary":"\u003cp\u003eПосмотрел фильм \u0026ldquo;Конец прекрасной эпохи\u0026rdquo; режиссёра Станислава Говорухина. Фильм снят по мотивам рассказов Сергея Довлатова из сборника Компромисс.\u003c/p\u003e\n\u003cp\u003eФильм черно-белый, и смотрится он как немного советский, в хорошем смысле этого слова. Что побудило 80 летнего режиссёра снять черно-белый фильм в 2015 году? Я посмотрел не было ли у Говорухина еще каких-то черно-белых картин. Картина \u0026ldquo;Weekend\u0026rdquo; снята тоже в черно-белом. Видимо опробовал - понравилось.\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"desc\" loading=\"lazy\" src=\"/images/the-end-of-awesome-epoch.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eЯ читал рассказы Довлатова - \u0026ldquo;Заповедник\u0026rdquo;, и \u0026ldquo;Встретились, поговорили\u0026rdquo;. На \u0026ldquo;Заповедник\u0026rdquo; даже ходил в театр. Все довлатовские произведения похожи на друг друга, как две капли. Скорее лучше назвать это авторским стилем. И \u0026ldquo;Конец прекрасной эпохи\u0026rdquo; не исключение. Какого то особого режиссерского прочтения я не прочувствовал.\u003c/p\u003e","title":"Конец прекрасной эпохи"},{"content":"Давно хотелось разобраться с этим вопросом. Ведь аскидок очень удобен и гибок.\nПосмотрите на его синтаксис и его документацию - это просто красиво.\nК сожалению аскидок командная утилита, и каждый раз генерить html файл не очень удобно.\nЕсть всякие превьюхи для него:\nДесктопный превью написанный на JavaFX - asciidocfx Расширение для хрома Есть расширение для Sublime text и Atom и brackets Почти все они описаны тут\nВсе утилиты такого рода подразумевают WYSIWYG редактирование, но не решают проблему - перегенерирование документов при каждом редактировании.\nПочему нельзя автоматически это делать в браузере? Ведь расширение хрома указывает на то что такая возможность есть.\nИ если бы получилось писать например документацию в аскидок формате и потом отображать динамически браузером это было бы здорово.\nТакая возможность есть! Ладно, хватит болтовни.\n“Talk is cheap. Show me the code.”\nLinus Torvalds\nВесь код доступен на гитхабе Там же приведена инструкция - какчё-куда.\nИ еще раз там же висит демка\nДальше можно полюбоваться на:\nкрасивую документацию грувей, которая тоже использует аскидок; как спринг переводил свои доки на аскидок генерировать rest-документацию с помощью gradle и совсем сумасшедшее превью аскидока на грускрипте(именно из-за грускриптаоно сумасшедшее) Даже Аллен удивлен.\n","permalink":"https://volyx.in/posts/2016-03-25-render-asciidoc-in-browser-new-imported/","summary":"\u003cp\u003eДавно хотелось разобраться с этим вопросом. Ведь аскидок очень удобен и гибок.\u003c/p\u003e\n\u003cp\u003eПосмотрите на его синтаксис и его \u003ca href=\"http://asciidoctor.org/docs/asciidoc-syntax-quick-reference/\"\u003eдокументацию\u003c/a\u003e - это просто красиво.\u003c/p\u003e\n\u003cp\u003eК сожалению аскидок командная утилита, и каждый раз генерить html файл не очень удобно.\u003c/p\u003e\n\u003cp\u003eЕсть всякие превьюхи для него:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eДесктопный превью написанный на JavaFX - \u003ca href=\"http://www.asciidocfx.com/\"\u003easciidocfx\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://chrome.google.com/webstore/detail/asciidoctorjs-live-previe/iaalpfgpbocpdfblpnhhgllgbdbchmia\"\u003eРасширение для хрома\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eЕсть расширение для \u003ca href=\"https://github.com/SublimeText/AsciiDoc\"\u003eSublime text\u003c/a\u003e и \u003ca href=\"https://github.com/asciidoctor/atom-asciidoc-preview\"\u003eAtom\u003c/a\u003e и  \u003ca href=\"https://github.com/asciidoctor/brackets-asciidoc-preview\"\u003ebrackets\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eПочти все они описаны \u003ca href=\"http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/\"\u003eтут\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eВсе утилиты такого рода подразумевают \u003ca href=\"https://ru.wikipedia.org/wiki/WYSIWYG\"\u003eWYSIWYG\u003c/a\u003e редактирование, но не решают проблему - перегенерирование документов при каждом редактировании.\u003c/p\u003e","title":"Рендеринг asccidoc в браузере"},{"content":"Я использую ангуляр, как основной веб-фрейворк для проекта http://wndlust.ru. В течение года работы с ним у меня возникли небольшие проблемы. Все они хорошо известны разработчикам хоть как-то знакомым с ангуляром:\nпроизводительность ng-repeat. Когда мы кладем ng-repeat в ng-repeat, а затем еще в ng-repeat - то scope будет скопирован ровно столько же раз, все слушатели теперь будут слушать друг друга. Обновление нижнего элемента повлечет за собой N^M обновлений. N - количество элементов в ng-repeat, M - количество ng-repeat\u0026rsquo;ов сложный синтаксис директив ng-transclude индексируемость Любой проект, хоть как-то связанный с контентом должен худо-бедно индексироваться. Хотя скорее всего, индексация не помешают любому сайту.\n","permalink":"https://volyx.in/posts/2016-03-22-from-client-side-rendering-to-server-rendering-new-imported/","summary":"\u003cp\u003eЯ использую ангуляр, как основной веб-фрейворк для проекта \u003ca href=\"http://wndlust.ru\"\u003ehttp://wndlust.ru\u003c/a\u003e. В течение года работы с ним у меня возникли небольшие проблемы. Все они хорошо известны разработчикам хоть как-то знакомым с ангуляром:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eпроизводительность \u003ccode\u003eng-repeat\u003c/code\u003e. Когда мы кладем \u003ccode\u003eng-repeat\u003c/code\u003e в \u003ccode\u003eng-repeat\u003c/code\u003e, а затем еще в \u003ccode\u003eng-repeat\u003c/code\u003e - то \u003ccode\u003escope\u003c/code\u003e будет скопирован ровно столько же раз, все слушатели теперь будут слушать друг друга. Обновление нижнего элемента повлечет за собой N^M обновлений. N - количество элементов в ng-repeat, M - количество ng-repeat\u0026rsquo;ов\u003c/li\u003e\n\u003cli\u003eсложный синтаксис директив\u003c/li\u003e\n\u003cli\u003eng-transclude\u003c/li\u003e\n\u003cli\u003eиндексируемость\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eЛюбой проект, хоть как-то связанный с контентом должен худо-бедно индексироваться. Хотя скорее всего, индексация не помешают любому сайту.\u003c/p\u003e","title":"Переходим с клиентской генерации html к серверной"},{"content":"Все ли делаешь правильно? Туда ли гребешь?\nА как определить? Может ты и не гребец вовсе? Может весло вообще не для тебя?\nКак это понять?\nПрислушаться к себе? Слышно что-нибудь? А может и прислушиваться не умеешь?\nВариантов нет. Не умеешь - сиди и слушай, сиди и учись слушать себя.\nСделай что-нибудь. Слушай. Что чувствуешь? Понравилось? Не понравилось? Что вызывает? Что-то ведь должно быть слышно.\nТишина? Значит в громком месте сидишь? Уйди в тихое.\nМолчание? Может и не ты вовсе сделал? Ты вообще там был? Может это само произошло? И твоё участие опосредованно?\nИди дальше и сделай сам и обдумай в тишине.\nПодумай.\n","permalink":"https://volyx.in/posts/2016-03-13-tuda-li-kopaiesh-new-imported/","summary":"\u003cp\u003eВсе ли делаешь правильно? Туда ли гребешь?\u003c/p\u003e\n\u003cp\u003eА как определить? Может ты и не гребец вовсе? Может весло вообще не для тебя?\u003c/p\u003e\n\u003cp\u003eКак это понять?\u003c/p\u003e\n\u003cp\u003eПрислушаться к себе? Слышно что-нибудь? А может и прислушиваться не умеешь?\u003c/p\u003e\n\u003cp\u003eВариантов нет. Не умеешь - сиди и слушай, сиди и учись слушать себя.\u003c/p\u003e\n\u003cp\u003eСделай что-нибудь. Слушай. Что чувствуешь? Понравилось? Не понравилось? Что вызывает? Что-то ведь должно быть слышно.\u003c/p\u003e\n\u003cp\u003eТишина? Значит в громком месте сидишь? Уйди в тихое.\u003c/p\u003e","title":"Все ли делаешь правильно"},{"content":"Задача\nМы будем менять первый и последний элемент, затем второй и второй с конца, и так далее пока не достигнем середины.\n{% highlight java %} public String reverse(String str) {\nchar[] strChars = str.toCharArray(); int startIndex = 0; int endIndex = strChars.length - 1; while (startIndex \u0026lt; endIndex) { // swap characters char temp = strChars[startIndex]; strChars[startIndex] = strChars[endIndex]; strChars[endIndex] = temp; // move towards middle startIndex++; endIndex--; } return new String(strChars); } {% endhighlight %}\nСложность O(n) по времени и O(1) по доп. месту.\n","permalink":"https://volyx.in/posts/2016-03-10-mozgholomka-2-new-imported/","summary":"\u003cp\u003e\u003ca href=\"https://www.interviewcake.com/question/javascript/reverse-string-in-place\"\u003eЗадача\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eМы будем менять первый и последний элемент, затем второй и второй с конца, и так далее пока не достигнем середины.\u003c/p\u003e\n\u003cp\u003e{% highlight java %}\npublic String reverse(String str) {\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003echar[] strChars = str.toCharArray();\n\nint startIndex = 0;\nint endIndex = strChars.length - 1;\n\nwhile (startIndex \u0026lt; endIndex) {\n\n    // swap characters\n    char temp = strChars[startIndex];\n    strChars[startIndex] = strChars[endIndex];\n    strChars[endIndex] = temp;\n\n    // move towards middle\n    startIndex++;\n    endIndex--;\n}\n\nreturn new String(strChars);\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\n{% endhighlight %}\u003c/p\u003e","title":"Написать функцию, переворачивающую строку без использования дополнительной памяти"},{"content":"12x12 - проект Британской высшей школы дизайна в Москве. Создатели описывают ее так:\n\u0026ldquo;12x12\u0026rdquo; — это уникальное событие с оригинальным форматом общения с аудиторией.\nМы пригласили 12 самых интересных специалистов в области дизайна и дали каждому по 12 минут для того, чтобы они смогли поделиться самым важным — опытом!\nОграничения В произведениях Довлатова все слова в предложении начинаются на разные буквы.\nНе возможно решить уравнение, не имея ограничений. Частное решение есть всегда. Непреодолимых ограничений нет.\nШероховатости в дизайне Человек любит шероховатости, не любит когда все гладенько, ровненько.\n","permalink":"https://volyx.in/posts/2016-03-09-12x12-new-imported/","summary":"\u003cp\u003e12x12 - проект Британской высшей школы дизайна в Москве. Создатели описывают ее так:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u0026ldquo;12x12\u0026rdquo; — это уникальное событие с оригинальным форматом общения с аудиторией.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003eМы пригласили 12 самых интересных специалистов в области дизайна и дали каждому по 12 минут для того, чтобы они смогли поделиться самым важным — опытом!\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"ограничения\"\u003eОграничения\u003c/h3\u003e\n\u003cp\u003eВ произведениях Довлатова все слова в предложении начинаются на разные буквы.\u003c/p\u003e\n\u003cp\u003eНе возможно решить уравнение, не имея ограничений. Частное решение есть всегда. Непреодолимых ограничений нет.\u003c/p\u003e","title":"12x12"},{"content":"\nПервая возникшая мысль - это то, что за всю постановку я услышал больше ругательных слов, чем за все предыдущие спектакли, помноженные на 10.\nДаже слух начало резать, когда в сотый раз слышал вариацию на слово \u0026ldquo;гавно\u0026rdquo;, \u0026ldquo;гавнище\u0026rdquo;, \u0026ldquo;гавенный\u0026rdquo; и прочее. Скорее всего это вынужденная мера - попытка заменить более изощренные ругательства синонимами. Совсем ведь не убрать, иначе это будут не настоящие пьяные. Понимаю, почему сделали именно так, как сделали - не убрали, а заменили синонимами. Эмоциональный порыв-настрой передан - думаю это главное.\nПосле спектакля возникло желание прочитать ее в оригинале. Это хороший знак, видимо режиссеру удалось зацепить зрителя, меня так точно.\n\u0026ldquo;Пьяные\u0026rdquo; были написаны по европейскому заказу — специально для театра в Дюссельдорфе. Интересно, что вот так на заказ можно написать шедевр. Вырыпаев по праву занимает одно из мест лучших драматургов современности.\nТекст пьесы есть в журнале \u0026ldquo;Драматургия\u0026rdquo;:\nЧасть 1 Часть 2 Да, есть такой журнал, и в нем печатают пьесы. Аж 6 номеров выпущено.\nПриятно, что темы сильно связанны с сегодняшним днем. Это определенно пьеса наших лет, нашей эпохи. Там есть многое из насущного: и про веганов, и про проституток, но есть и вечные темы про измены, про болезнь, про бессмертие, про бога.\nЦитаты:\nЧерез пьяных говорит Господь\n\u0026hellip;\nЯ Господь Бог, приятель. И ты Господь Бог, Карл. Понимаешь, теперь ты понимаешь, дорогой мой?\nДля тех, кто больше любит слушать-смотреть есть читка пьесы:\nРолик про постановку\n","permalink":"https://volyx.in/posts/2016-03-07-pianyie-v-bdt-new-imported/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"https://media.teatrall.ru/photos/photo/f350c52eaa2ae293d797b573e656bb36.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eПервая возникшая мысль - это то, что за всю постановку я услышал больше ругательных слов, чем за все предыдущие спектакли, помноженные на 10.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eДаже слух начало резать, когда в сотый раз слышал вариацию на слово \u0026ldquo;гавно\u0026rdquo;, \u0026ldquo;гавнище\u0026rdquo;, \u0026ldquo;гавенный\u0026rdquo; и прочее. Скорее всего это вынужденная мера - попытка заменить более изощренные ругательства синонимами. Совсем ведь не убрать, иначе это будут не настоящие пьяные. Понимаю, почему сделали именно так, как сделали - не убрали, а заменили синонимами. Эмоциональный порыв-настрой передан - думаю это главное.\u003c/p\u003e","title":"Пьяные"},{"content":"Начальный код такой:\n{% highlight java %}\npublic static class LinkedListNode {\npublic String value; public LinkedListNode next; public LinkedListNode(String value) { this.value = value; } }\nLinkedListNode a = new LinkedListNode(\u0026ldquo;A\u0026rdquo;); LinkedListNode b = new LinkedListNode(\u0026ldquo;B\u0026rdquo;); LinkedListNode c = new LinkedListNode(\u0026ldquo;C\u0026rdquo;);\na.next = b; b.next = c;\ndeleteNode(b);\n{% endhighlight %}\nЗабегая вперед Мы сможем сделать это за O(1) по сложности и по O(1) по памяти! Ответ будет хитрый и будет работать не на всех входных данных\u0026hellip;\nРазмышляем Первое, что приходит в голову - это пройтись по всем узлам списка с начала до искомого узла. Но по условию у нас нет головного узла, у нас есть только ссылка на удаляемый узел.\nПодождите-ка, как мы вообще удалим узел, если у нас нет ссылки на первый узел?\nМы сделаем так, что указатель предыдущего узла пропустит удаляемый узел, и будет указывать на узел, следующий за удаляемым. Так узлы выглядят до удаления:\nVALUEVALUEVALUENEXTNEXTNEXTNone140Удаляемыйузел\nТак будут выглядеть узлы после удаления:\nVALUEVALUEVALUENEXTNEXTNEXTNone140Удаляемыйузел\nНам нужно как-то пропустить текущий узел и перейти к следующему узлу. Но у нас же нет доступа к предыдущему узлу!\nЧто если кроме как перенаправлять указатель с предыдущего узла существует другой способ перепрыгнуть с предыдущего значения на следующий?\nЧто если мы изменим значение текущего узла вместо удаления его?\nРешение Мы скопируем значение и указатель следующего узла в удаляемый узел. Получится, что предыдущий узел будет пропускать удаляемый узел и указывать на следующий узел.\nТак связный список выглядел до применения функции:\nVALUEVALUEVALUENEXTNEXTNEXTNone382Удаляемыйузел\nПосле будет выгдядеть вот так:\nVALUEVALUEVALUENEXTNEXTNEXTNoneNone322Удаляемыйузел\nВ некоторых языках, например в С нам потребовалось бы руками удалять скопированный узел. Но в Java есть сборщик мусора, который сам позаботится об этом.\n{% highlight java %} public void deleteNode(LinkedListNode nodeToDelete) {\n// get the input node's next node, the one we want to skip to LinkedListNode nextNode = nodeToDelete.next; if (nextNode != null) { // replace the input node's value and pointer with the next // node's value and pointer. the previous node now effectively // skips over the input node nodeToDelete.value = nextNode.value; nodeToDelete.next = nextNode.next; } else { // eep, we're trying to delete the last node! throw new IllegalArgumentException(\u0026quot;Can't delete the last node with this method!\u0026quot;); } } {% endhighlight %}\nЕсть две проблемы в нашем решении:\nПервое, наша функция не работает в случае удаления последнего элемента. Мы можем поменять значение удаляемого элемента на null, но указатель предыдущего узла все также будет ссылаться на этот узел, хоть и со значением null. Мы конечно можем трактовать узлы со значение null как удаленные и останавливать поиск при нахождении такого узла.\nВторое, метод может выдавать неожиданные результаты. Возьмем такой код:\n{% highlight java %} LinkedListNode a = new LinkedListNode(3); LinkedListNode b = new LinkedListNode(8); LinkedListNode c = new LinkedListNode(2);\na.next = b; b.next = c;\ndeleteNode(b); {% endhighlight %}\nЕсть несколько побочных эффектов:\nНе существует эффективного способа переписать ссылки с входящего узла на следующий узел. Например, мы \u0026ldquo;удалили\u0026rdquo; узел который хранит ссылку на переменную b, но на самом деле, мы лишь присваиваем узлу новое значение(2) и новую ссылку next. Если мы имеем другой указатель на b откуда-нибудь из другой части кода и мы предполагаем, что объект имеет свое старое значение(8), что может привести к багам. Если существуют указатели на следующий узел за входящим узлом, то эти указатели будут указывать на \u0026ldquo;висячие узлы\u0026rdquo; (узел, который не достижим из связного списка). В примере выше, узел c будет \u0026ldquo;подвешан\u0026rdquo;. Если мы поменяем c, мы никогда не достигнем это новое значение, двигаясь с головы связного списка до хвоста. Сложность O(1) по времени и O(1) по дополнительной памяти.\nИсточник\n","permalink":"https://volyx.in/posts/2016-03-06-mozgolomka-1-new-imported/","summary":"\u003cp\u003eНачальный код такой:\u003c/p\u003e\n\u003cp\u003e{% highlight java %}\u003c/p\u003e\n\u003cp\u003epublic static class LinkedListNode {\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003epublic String value;\npublic LinkedListNode next;\n\npublic LinkedListNode(String value) {\n    this.value = value;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003eLinkedListNode a = new LinkedListNode(\u0026ldquo;A\u0026rdquo;);\nLinkedListNode b = new LinkedListNode(\u0026ldquo;B\u0026rdquo;);\nLinkedListNode c = new LinkedListNode(\u0026ldquo;C\u0026rdquo;);\u003c/p\u003e\n\u003cp\u003ea.next = b;\nb.next = c;\u003c/p\u003e\n\u003cp\u003edeleteNode(b);\u003c/p\u003e\n\u003cp\u003e{% endhighlight %}\u003c/p\u003e\n\u003ch2 id=\"забегая-вперед\"\u003eЗабегая вперед\u003c/h2\u003e\n\u003cp\u003eМы сможем сделать это за \u003cem\u003eO(1)\u003c/em\u003e по сложности и по \u003cem\u003eO(1)\u003c/em\u003e по памяти! Ответ будет хитрый и будет работать не на всех входных данных\u0026hellip;\u003c/p\u003e","title":"Имея ссылку на узел удалить его из односвязного списка"},{"content":"Вернулся с Красной Поляны, скоро будет видеоотчет. Много проблем было со спусками со склонов с буграми. В этих видео рассказывается о видах спуска с таких склонов.\nСчитывать бугры и планировать траекторию. Заезжая на один из, взглядом находить следующий и готовиться к нему.\nДля начала натренируйте повороты разного радиуса. Они должны быть круглыми, и плавно переходящими из одного в другой. Так вы будете готовы к различным траекториям на склоне.\nПостройте зрительно прямую линию вниз склона и старайтесь держать ее глазами, чтобы повороты были максимально симметричными. Пробуйте постепенно уменьшать, а затем увеличивать радиус, не обрывая поворот.\nТри траектории поворота на бугре:\nПо верхушке бугра, соскальзывая По центру между бугром и его соседом Глубокий поворот, почти по соседнему бугру ","permalink":"https://volyx.in/posts/2016-02-29-po-bughram-new-imported/","summary":"\u003cp\u003eВернулся с Красной Поляны, скоро будет видеоотчет. Много проблем было со спусками со склонов с буграми. В этих видео рассказывается о видах спуска с таких склонов.\u003c/p\u003e\n\u003cp\u003eСчитывать бугры и планировать траекторию. Заезжая на один из, взглядом находить следующий и готовиться к нему.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eДля начала натренируйте повороты разного радиуса. Они должны быть круглыми, и плавно переходящими из одного в другой. Так вы будете готовы к различным траекториям на склоне.\u003c/p\u003e","title":"Катание по буграм"},{"content":"Вы помните основной концепт операционные систем UNIX- подобных систем и утилит? Программа должна быть маленькой и решать строго одну задачу. Это моя интерпретация.\nВот исходная:\nПишите программы, которые делают что-то одно и делают это хорошо. Пишите программы, которые бы работали вместе. Пишите программы, которые бы поддерживали текстовые потоки, поскольку это универсальный интерфейс». SAAS сервисы придерживаются примерно такого же пути. Они пытаются решать одну конкретную задачу. И чем меньше, тем лучше. Лучше и для самих разработчиков приложения - они могут сконцентрироваться на более мелкой проблеме, и для тех кто ищет решение своей проблемы.\n","permalink":"https://volyx.in/posts/2016-02-29-put-unix-v-saas-siervisakh-new-imported/","summary":"\u003cp\u003eВы помните основной концепт операционные систем UNIX- подобных систем и утилит?\nПрограмма должна быть маленькой и решать строго одну задачу. Это моя интерпретация.\u003c/p\u003e\n\u003cp\u003eВот исходная:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eПишите программы, которые делают что-то одно и делают это хорошо.\u003c/li\u003e\n\u003cli\u003eПишите программы, которые бы работали вместе.\u003c/li\u003e\n\u003cli\u003eПишите программы, которые бы поддерживали текстовые потоки, поскольку это универсальный интерфейс».\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSAAS  сервисы придерживаются примерно такого же пути. Они пытаются решать одну конкретную задачу. И чем меньше, тем лучше. Лучше и для самих разработчиков приложения - они могут сконцентрироваться на более мелкой проблеме, и для тех кто ищет решение своей проблемы.\u003c/p\u003e","title":"Путь unix в SAAS сервисах"},{"content":"\nПрочел книгу «Модульные системы в графическом дизайне» Йозефа Мюллера-Брокманна. Книга посвящена одному простому элементу — «модульной сетке» и не пытается покрыть все аспекты дизайна. Книгу не только интересно читать, но и просто приятно держать руках. Хочется гладить ее обложку и водить рукой по страницам — так она прекрасна. Аккуратно, не спеша автор делиться пользой использования модульный сетки и заражает этой любовью читателя. Практические расчеты при построении модульной сетки, расчета кегля шрифта, расстояния между строк, размеров полей наконец-то спускает дизайн с небес до понятный математических расчетов. Здорово, когда существует формула красоты.\nДалее будут наиболее понравившиеся книгшоты(ну как скриншоты, только с книги) и пример расчета модульной сетки.\nСодержание Ссылка на книгу\nРецензия и заметки по книге\nСовет Горбунова по модульной сетке\nИз блога\n","permalink":"https://volyx.in/posts/2016-01-19-modulnaia-siekta-new-imported/","summary":"\u003cp\u003e\u003cimg alt=\"modulnie-sistemy-super\" loading=\"lazy\" src=\"/images/modulnie-sistemy-super.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eПрочел книгу «Модульные системы в графическом дизайне» Йозефа Мюллера-Брокманна. Книга посвящена одному простому элементу  —  «модульной сетке» и не пытается покрыть все аспекты дизайна. Книгу не только интересно читать, но и просто приятно держать руках. Хочется гладить ее обложку и водить рукой по страницам — так она прекрасна. Аккуратно, не спеша автор делиться пользой использования модульный сетки и заражает этой любовью читателя. Практические расчеты при построении модульной сетки, расчета кегля шрифта, расстояния между строк, размеров полей наконец-то спускает дизайн с небес до понятный математических расчетов. Здорово, когда существует формула красоты.\u003c/p\u003e","title":"Модульная секта"},{"content":"\nМлодинов очень увлекательно и доходчиво рассказывает о сложных математических понятиях. Очень жаль, что эта книга не попалась мне во время курса теории вероятности в универеситете. Она сто процентов заинтересует вас в высшей математике и просто без формул объяснит сложные термины из теории вероятности.\nСамой полезной оказалась глава, посвященная условной вероятности. Вся книга читается на раз, я без сомнений готов перечитать ее еще раз.\nНа вероятность влияет тот факт, что событие произойдет, если или при условии, что произойдут другие события. В этом и заключается теорема Байеса или теория условной вероятности. Теорема Бернулли решает следующий вопрос: сколько получится орлов, если планируется произвести много бросков идеальной монеты, в то время как Байес исследовал первоначальную цель Бернулли — вопрос о том, насколько можно быть уверенным в том, что монета идеальна, если выпадает определенное число орлов. Байес разработал условную вероятность в попытке ответить на тот же вопрос, который увлек Бернулли: как по известному факту события вычислить вероятность того, что оно было вызвано данной причиной?\nПредставим, что ваш босс стал отвечать на ваши электронные письма с запозданием. Многие подумают, что это конец, и скоро начальник вас уволит. Подумают они это потому что: если вас собираются уволить, велика вероятность того, что босс перестанет отвечать на ваши письма оперативно. Однако босс может запаздывать с ответом и потому что просто занят. Так что вероятность того что вас скоро уволят, если начальник стал отвечать на письма с задержкой, гораздо ниже, чем вероятность того, что ваш начальник станет отвечать на письма с задержкой если вас ждет увольнение.\nСвоей привлекательностью многие теории заговоров обещаны неправильному пониманию вышеприведенных логических выкладок. То есть все дело в путанице: вероятность того, что ряд событий произойдет, если события эти являются результатом тайного заговора, путают с вероятностью того, что тайный заговор существует, если имеет место ряд событий.\nНа вероятность влияет тот факт, что событие произойдет, если и при условии, что произойдут другие события.\nПредставьте себе компанию людей, незнакомых друг другу. И один из них неожиданно начинает нести ерунду. Кто-то из компании в шутку говорит: — «Он, наверное, спятил.» Условная вероятность может ответить на этот вопрос. Насколько «наверное»? Какова вероятность того, что в компании сумасшедший и, что именно сейчас в данный момент он несет чушь?\nЧтобы разобраться лучше, посмотрим на задаче о двух девочках.\nВ семье двое детей; какова вероятность того, что если один из детей — девочка, то и другой ребенок тоже девочка?\nВ этой задаче пространство элементарных событий изначально такое:\n(мальчик, мальчик), (мальчик, девочка), (девочка, мальчик), (девочка, девочка), Однако оно сокращается до следующих параметров, так как мы уже знаем что один ребенок - девочка:\n(мальчик, девочка), (девочка, мальчик), (девочка, девочка), Получается, что если вы узнаете, что один из детей — девочка, что шансы на семью из двух девочек составляют 1 из 3.\nА теперь представьте, что Млодинов дальше утверждает:\nТот факт, что одну из девочек зовут Флорида, меняет шансы на 1 из 2.\nКажется совершенно невероятным. Видимо, в имени Флорида есть что-то особенное. Давайте разбираться. Итак, условие:\nВ семье двое детей; какова вероятность того, что если один из детей — девочка по имени Флорида, то и другой ребенок тоже девочка?\nВ этой задаче нас интересует помимо пола детей еще и имя, поскольку речь о девочках. Наше первоначальное пространство элементарных событий должно включать в себя все вероятности, поэтому список содержит и пол, и имя. Обозначим девочку по имени Флорида как «девочка Ф», а девочку по имени не Флорида как «девочка не Ф». Обозначим пространство элементарных событий:\n(мальчик, мальчик) (мальчик, девочка Ф.) (мальчик, девочка не Ф.) (девочка Ф., мальчик) (девочка не Ф., мальчик) (девочка не Ф., девочка Ф.) (девочка Ф., девочка не Ф.) (девочка не Ф., девочка не Ф.) (девочка Ф., девочка Ф.). Теперь «урежем». Так как нам известно, что один из детей — девочка по имени Флорида, можно сократить пространство элементарных событий:\n(мальчик, девочка Ф.) (девочка Ф., мальчик) (девочка не Ф., девочка Ф.) (девочка Ф., девочка Ф.) Теперь видно, чем еще эта задача отличается от задачи про двух дочерей. Поскольку утверждения, что девочку зовут Флорида и девочку зовут не Флорида, нельзя назвать равновероятными, не являются таковыми и все элементы пространства элементарных событий.\nВ 1935, последнем году, за который Управление социальным обеспечением предоставило статистику в отношении имени, около 1 из 30.000 девочек были наречены именем Флорида. Поскольку имя становилось все менее популярным, предположим, что сегодня вероятность появления девочки по имени Флорида равна 1 из 1 млн. Это значит следующее: если нам станет известно, что определенную из двух девочку зовут не Флорида, ничего страшного, однако если мы узнаем, что ее зовут Флорида, можно сказать, что мы попали в точку. Вероятность того, что обеих девочек назовут именем Флорида (даже если мы проигнорируем тот факт, что обычно родители избегают давать детям одинаковые имена), настолько мала, что можно спокойно ею пренебречь. Итак, вот что у нас остается:\n(мальчик, девочка Ф.) (девочка Ф., мальчик) (девочка не Ф., девочка Ф.) (девочка Ф., девочка не Ф.). Все эти события в весьма хорошем приближении равновозможны.\nПоскольку 2 из 4, то есть половина элементов пространства элементарных событий являются семьями с двумя девочками, ответом не может быть 1 из 3 — как это было в задаче с двумя дочерьми, — ответом является 1 из 2. Все дело в дополнительной информации — осведомленности насчет имени девочки.\nЕсли вы по-прежнему теряетесь в догадках, то можно представить себе следующее: в очень-очень большой комнате мы собираем 75 млн семей с двумя детьми, из которых хотя бы один ребенок — девочка. Как нам стало известно из задачи с двумя дочерьми, в комнате окажется около 25 млн семей с двумя девочками и 50 млн семей с одной девочкой (25 млн семей, в которых девочка является старшим ребенком, и столько же семей, в которых девочка является младшим ребенком).\nДалее «урезаем»: просим остаться в комнате только те семьи, в которых есть девочки по имени Флорида. Поскольку Флорида — 1 имя на 1 млн имен, останутся около 50 из 50 млн семей с одной девочкой. А из 25 млн семей с двумя девочками 50 тоже останутся: 25 потому, что их первый ребенок назван по имени Флорида, другие 25 потому, что их младшая дочь названа Флоридой.\nВ этом примере всех девочек можно представить как лотерейные билеты; в таком случае девочки по имени Флорида станут выигрышными билетами. И хотя семей, в которых один из двух детей — девочка, в два раза больше, чем семей, в которых оба ребенка — девочки, семьи с двумя девочками обладают двумя лотерейными билетами, поэтому среди выигравших будет примерно одинаковое соотношение семей с одной девочкой и семей с двумя девочками.\nСледовательно, ответ 1/2. Если в семье одну девочку зовут Флорида, то вероятность, того что второй ребенок девочка - 1/2.\n","permalink":"https://volyx.in/posts/2016-01-09-baiies-new-imported/","summary":"\u003cp\u003e\u003cimg alt=\"mlodinov\" loading=\"lazy\" src=\"/images/2016/01/---------2016-01-03-21-05-22.png\"\u003e\u003c/p\u003e\n\u003cp\u003eМлодинов очень увлекательно и доходчиво рассказывает о сложных математических понятиях. Очень жаль, что эта книга не попалась мне во время курса теории вероятности в универеситете. Она сто процентов заинтересует вас в высшей математике и просто без формул объяснит сложные термины из теории вероятности.\u003c/p\u003e\n\u003cp\u003eСамой полезной оказалась глава, посвященная условной вероятности. Вся книга читается на раз, я без сомнений  готов перечитать ее еще раз.\u003c/p\u003e\n\u003cp\u003eНа вероятность влияет тот факт, что событие произойдет, \u003cstrong\u003eесли\u003c/strong\u003e или \u003cstrong\u003eпри условии\u003c/strong\u003e, что произойдут другие события. В этом и заключается \u003ca href=\"https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B5%D0%BC%D0%B0_%D0%91%D0%B0%D0%B9%D0%B5%D1%81%D0%B0\"\u003eтеорема Байеса\u003c/a\u003e или теория условной вероятности. Теорема Бернулли решает следующий вопрос: сколько получится орлов, если планируется произвести много бросков идеальной монеты, в то время как Байес исследовал первоначальную цель Бернулли — вопрос о том, насколько можно быть уверенным в том, что монета идеальна, если выпадает определенное число орлов. Байес разработал условную вероятность в попытке ответить на тот же вопрос, который увлек Бернулли: как по известному факту события вычислить вероятность того, что оно было вызвано данной причиной?\u003c/p\u003e","title":"теорема Байеса"},{"content":"Попытка объяснить словами над чем смеются люди. Сегодня разберемся с ассоциациями и аналогиями.\nАналогия Применяется к ситуациям, похожим на знаменитые моменты или сюжеты в художественных произведениях, известных всем окружающим.\nКакая гадость, эта ваша заливная рыба\nВыражение употребляется, если, например, вы находите эмоциональную аналогию с ситуацией в фильме. Осторожей с такими фразочками, от них сильно попахивает нафаталином. Вы прослывете шутилой старого поколения, ведь такими шутками злоупотребляют папы, дяди, и прочие родственники и друзья их возраста.\nПредложения с аналогиями начинаются с фраз «это как», «как будто», «он бы еще», «а если бы». Вступительные выражения помогают мозгу понять, что это аналогия. Мозгу говорящего при придумывании, а окружающим при прослушивании реплики.\nУслышал реплику на вокзале. Знакомый ехал в отпуск с дувушкой, и получил такую репризу:\nВ лес со своими дровами едешь\nДавайте разберемся, что вообще смешного в этой едкой фразочке. Вход идут сразу две аналогии, поэтому этот «двойной удар юмора» веселит мужскую половину публики. Лучше приберечь это выражение для мужской бани. Итак, состав двойного удара. Первая часть: в отпуск — в лес. Означает, что там много и так народу. Вроде бы пока ничего особенного. Вторая часть расставляет ясность над первой и повергает в смех окружающих: девушка — дрова. Выясняется, что в первой части предложения говорится о женщинах, а аналогия девушка — дрова добавляет остроты и крутости «леснику»-говорящему. Эта шутка подходит только для мужских коллективов, для «курилок и бань» — я так называю публику данной шутки.\nЧем более понятна аналогия, тем смешнее она кажется. Чем больше людей узнают сходство этой ситуации, тем веселей.\nАссоциация Образ, эмоциональное, или интеллектуальное подобие, понятное в большей степени говорящему. Остальные только предполагают путь к этой ассоциации. Похоже на аналогию, но работает больше ваша индивидуальность. Является уменьшенной копией аналогии, или даже подмножеством. Разница в индивидуальности ассоциации. Аналогию сразу понимают окружающие, как известный фильм например, а ассоциация более личная вещь. Очень тонкие ассоциации, приходится затем пояснять словами. Есть известная игра в ассоциации. Первый игрок называет слово, а второй первое слово которое придёт ему на ум.\nНапример: рыба — река, муха — липучка, новый год — похмелье. Тут то и рождается шутка, потому что мозг людей и жизненный опыт весьма похожи. В голове у собеседника выстраивается цепочка, которая объясняет ему, как появилось данная ассоциация. Несколько таких интересных и неожиданных ассоциаций и вы прослывете весьма неординарным и неожиданным человеком. Главное не перебарщивать. Ведь например ассоциация: «голубь — взросление», только оставит в тупик всех остальных, а ассоциация «краб-рубль» повеселит публику более длинной цепочкой размышлений.\nВы можете начать историю с одного сюжета, а закончить ассоциацией. Это самый часто встречающийся прием: \u0026gt; Кто проживает на дне океана? Кто-то, кто-то днище.\nЭта фраза не очень смешна, но хорошо иллюстрирует ассоциацию. Это индивидуальный опыт рассказывающего, а не всем известная фраза. Мы подбираем не сюжет из фильма/книги, как в аналогии, а сначала придумывает ассоциацию к началу рассказа, а затем неожиданно поворачиваем сюжет. Эффект неожиданности один из самых интересных и работающих принцип смешного. В следующих заметках мы обязательно его разберем.\n","permalink":"https://volyx.in/posts/2015-12-31-printsipy-smieshnogho-new-imported/","summary":"\u003cp\u003eПопытка объяснить словами над чем смеются люди. Сегодня разберемся с \u003cstrong\u003eассоциациями\u003c/strong\u003e и \u003cstrong\u003eаналогиями\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"аналогия\"\u003eАналогия\u003c/h2\u003e\n\u003cp\u003eПрименяется к ситуациям, похожим на знаменитые моменты или сюжеты в художественных произведениях, известных всем окружающим.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://youtu.be/RyvKNJ9mOTI\"\u003eКакая гадость, эта ваша заливная рыба\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eВыражение употребляется, если, например, вы находите эмоциональную аналогию с ситуацией в фильме. \u003cem\u003eОсторожей с такими фразочками, от них сильно попахивает нафаталином. Вы прослывете шутилой старого поколения, ведь такими шутками злоупотребляют папы, дяди, и прочие родственники и друзья их возраста.\u003c/em\u003e\u003c/p\u003e","title":"Принципы смешного"},{"content":"Повороты (Урок 7) Положение тела при коротких поворотах(7.1)\nВерхняя часть тела должна быть зафиксирована, и направлена вниз по склону, а двигаются только нижняя часть тела. Это идеал, к которому нужно стремиться.\nУпражнение - палки подмышками.\nУпражнение - спуск по буграм, поворот на каждом возвышении.\nУпражнение - вытянутые руки без палок.\nПоложение тела при длинных поворотах(7.2)\nПри длинных поворотах корпус сильнее наклоняется вперед.\nПараллельная линия между лыжами, коленями, тазом плечами и руками.\nУпражнение - без палок, внешняя рука в повороте направлена вперед, внутренняя рука опирается на колено.\nДавление на канты(7.3)\nРегулируя давление на кант, лыжу можно управлять дугой и динамикой поворота.\nТочность поворота(7.4)\nПрофи может повернуть именно там, где он планировал повернуть. Выбрать ровный склон, отметить глазами точки на нем, пытаться повернуть именно рядом с ними. Увеличить расстояние между ними.\nВыходы из поворотов(7.5)\nПробовать прокатиться на канте дольше. Таким способом можно регулировать скорость поворота.\nУрок 8. Катание вне лыжных трасс Выступление(8.1)\nПроверь погоду, послушай советов, если ты начинающий.\nПрогрессивный поворот(8.2)\nПоворот, с длинным завершающем движением. Стараемся проехать на канте, как можно дольше. Даст время подготовится к следующему повороту и больше контроля над лыжами.\nВыбор линии спуска(8.3)\nПланировать линию до начала спуска и стараться не сходить с неё.\nПодметить все препятствия кочки, деревья, камни и спланировать маршрут как можно дальше от них.\nВсегда останавливаться на склоне если не до конца уверенны. Выбрать более часть склона, в которой уверен наверняка.\nМежду препятствиями можно строить невидимые ворота, через которые прокладывать маршрут.\n8.4 - Катание по рыхлому снегу Подстраиваться под снег\nКомпенсировать качество снега - жесткость/мягкость/рыхлость можно положением корпуса, наклоняясь вперед, назад или в стороны.\nОглядываться по сторонам, выбирать комфортный радиус дуги и пытаться предвидеть качество склона.\nПри сильном ветре и образующейся корке используем прогрессивные повороты, помогая лыжам цепляться за снег.\nДержать позицию корпуса, чтобы кочки и жесткая снежная поверхность не смогли выбить из баланса.\n8.5 - Катание между деревьев Только при хорошей видимости.\nВыбирать только широкие просветы между деревьями.\nЕсли просвет сужается, то остановиться и попробовать сдвинуться вбок по склону.\nВсегда кататься только с другом.\nМенять траекторию движения в зависимости от деревьев.\nГибко подстраиваться под изменяющие обстоятельства.\nПрыжки(Урок 9) Прыгать только вертикально вверх, сохраняя баланс.\nВажная часть это плавное начальное движение.\nЧувствовать баланс в полете.\nКатание по пухляку Одеть лыжи на пухляке Лыжа должна смотреть под углом вверх Рюкзак с воздушной подушкой Специальная подушка для воздуха при падении. Как встать с пухляка Скрестить палки и опереться на них. Как найти отцепившуюся лыжу в глубоком снеге Просто должена быть с собой лопатка и всяике прикольные горнолыжные штучки. Лайфхаки. Доминирующая нога Как держать палку правильно Прижимать шнурок палки к ручке палки Точки на склоне Не смотреть вниз Ритм Найти свой ритм. ","permalink":"https://volyx.in/posts/2015-12-22-uroki-dlia-ghornolyzhnikov-new-imported/","summary":"Обзоры видео треннингов по горнолыжному спуску.","title":"Уроки для горнолыжников"},{"content":"\nБезжалостная чистка ссылок примерно каждые две недели. Без цензуры и преукрас, только то, что добавил в закладки(в покет)\nJavaOne Sessions посмотрел несколько про Docker Principles for Writing Maintainable Code Куча акронимов, с расшифровокой Best Practices for Designing a Pragmatic RESTful API Webpack скринкаст Highload на Java: о чем нужно помнить http://jakub.marchwicki.pl/posts/2015/06/04/maven-wrapper/ Введение в RxJava, часть первая – Вступление: Ключевые типы Введение в RxJava, часть первая – Вступление: Почему Rx? Дюк, вынеси мусор! — Часть 3 Дюк, вынеси мусор! — Часть 2 Дюк, вынеси мусор! — Часть 1 Лекции Технопарка: мастер-класс Алексея Рыбака «Про то, что я бы хотел, чтобы мне рассказали, пока я учился» Angular 2 Router: High-Level Overview Isomorphic JavaScript: The Future of Web Apps http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/ Чему мы научились, разрабатывая backend Фильтр Блума Coupling Versus Autonomy in Microservices How We Get Things Done – Productivity Stacks For Tech Startups ","permalink":"https://volyx.in/posts/2015-12-21-pustoi-pocket-new-imported/","summary":"\u003cp\u003e\u003cimg alt=\"pocket\" loading=\"lazy\" src=\"/images/2015/11/pocket-logo-icon.png\"\u003e\u003c/p\u003e\n\u003cp\u003eБезжалостная чистка ссылок примерно каждые две недели. Без цензуры и преукрас, только то, что добавил в закладки(\u003ca href=\"https://getpocket.com\"\u003eв покет\u003c/a\u003e)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.reddit.com/r/java/comments/3requx/javaone_2015_sessions/\"\u003eJavaOne Sessions\u003c/a\u003e\nпосмотрел несколько про Docker\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://customgears.net/blog/principles-for-writing-maintainable-code/\"\u003ePrinciples for Writing Maintainable Code\u003c/a\u003e Куча акронимов, с расшифровокой\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\"\u003eBest Practices for Designing a Pragmatic RESTful API\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://learn.javascript.ru/webpack-screencast\"\u003eWebpack скринкаст\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/270059/\"\u003eHighload на Java: о чем нужно помнить\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://jakub.marchwicki.pl/posts/2015/06/04/maven-wrapper/\"\u003ehttp://jakub.marchwicki.pl/posts/2015/06/04/maven-wrapper/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/270023/\"\u003eВведение в RxJava, часть первая – Вступление: Ключевые типы\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/269417/\"\u003eВведение в RxJava, часть первая – Вступление: Почему Rx?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/269863/\"\u003eДюк, вынеси мусор! — Часть 3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/269707/\"\u003eДюк, вынеси мусор! — Часть 2\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/269621/\"\u003eДюк, вынеси мусор! — Часть 1\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/269687/\"\u003eЛекции Технопарка: мастер-класс Алексея Рыбака «Про то, что я бы хотел, чтобы мне рассказали, пока я учился»\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://yakovfain.com/2015/11/02/angular-2-router-high-level-overview/\"\u003eAngular 2 Router: High-Level Overview\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eIsomorphic JavaScript: The Future of Web Apps \u003ca href=\"http://nerds.airbnb.com/isomorphic-javascript-future-web-apps/\"\u003ehttp://nerds.airbnb.com/isomorphic-javascript-future-web-apps/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://m.habrahabr.ru/company/parallels/blog/269927/\"\u003eЧему мы научились, разрабатывая backend\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://habrahabr.ru/post/112069/\"\u003eФильтр Блума\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.voxxed.com/blog/2015/04/coupling-versus-autonomy-in-microservices/\"\u003eCoupling Versus Autonomy in Microservices\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.voxxed.com/blog/2015/09/how-we-get-things-done-productivity-stacks-for-tech-startups/\"\u003eHow We Get Things Done – Productivity Stacks For Tech Startups\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Пустой карман"},{"content":"Вы знали, что с помощью треугольника Паскаля можно рассчитать количество сочетаний? Да, тех самых непонятных сочетаний из теории вероятности.\nНапример, сколькими способами можно выбрать 3 школьников из 10.\nДопустим, физрук зашел в класс, и как обычно решил забрать трёх крепеньких мальчиков. Всего в классе 10 мальчиков. Ему важна последовательность этих мальчиков.\nЕсли он выберет Петрова, Иванова, Сидорова, то этот способ будет отличаться от Сидорова, Петрова, Иванова. Для этого нам потребуется треугольник Паскаля.\nНас интересует 10 ряд. И в нём четвёртое число.\nОтвет: 120.\nПо-другому треугольник Паскаля можно записать вот так:\nПравильно, ведь на самом деле треугольник Паскаля состоит из сочетаний. И можно запросто проверить по формуле сочетаний.\nЗначит, нам нужно выбрать из n k сочетаний. Для нашего примера n=10 k=3.\n","permalink":"https://volyx.in/posts/2015-12-21-trieugholnik-paskalia-i-vieroiatnost-new-imported/","summary":"\u003cp\u003eВы знали, что с помощью треугольника Паскаля можно рассчитать количество сочетаний?\nДа, тех самых непонятных сочетаний из теории вероятности.\u003c/p\u003e\n\u003cp\u003eНапример, сколькими способами можно выбрать 3 школьников из 10.\u003c/p\u003e\n\u003cp\u003eДопустим, физрук зашел в класс, и как обычно решил забрать трёх крепеньких мальчиков.\nВсего в классе 10 мальчиков. Ему важна последовательность этих мальчиков.\u003c/p\u003e\n\u003cp\u003eЕсли он выберет Петрова, Иванова, Сидорова, то этот способ будет отличаться от Сидорова, Петрова, Иванова.\nДля этого нам потребуется треугольник Паскаля.\u003c/p\u003e","title":"Треугольник Паскаля"},{"content":"В детстве у моего брата было плохое зрение. Из-за этого мы очень часто ходили к окулисту. Мы это — мама, брат, я. Мы ходили достаточно часто, поэтому даже были знакомы с окулистом ну точнее мама знакома.\nМеня всегда брали с собой и проверяли зрение и мне, — так сказать, заодно. Я всегда гордился своими здоровыми глазами. Ну представьте: сначала врач-окулист проверяет зрение брату, и со вздохами говорит цифру маме — «минус пять». Мама вздыхает, переживает, ведь старшему сыну всего десять лет, а уже такая тенденция, они долго обсуждают будущие очки, капли, гимнастику для глаз, таблетки, что нужно меньше читать, смотреть телевизор, смотреть в компьютер, ну и вообще меньше куда-либо смотреть. В процессе обсудят все и вся, и царя, и Ельцина, и власть, и цены на таблетки. И пару раз пройдутся по рецепту сначала вниз, а затем вверх. Ведь понять что-то в почерке врача почти не возможно.\nА затем говорят, — «Ну давайте и младшего посмотрим». И еще обязательно добавят — «Они так похожи», а мама скажет, что не всем, — «Что у младшего зрение хорошее, что он в маму пошёл». Я быстро садился и мгновенно произносил: Н К И Б М Ш И Б. Я до сих пор наизусть помню эту строчку.\nДальше я спрыгивал со стула и шел в обратную сторону под слова окулиста — «единичка». Дальше мы шли домой, слушая будущие запреты и новые изменения в нашей жизни. После каждого такого похода время проводимое перед компьютером и телевизором уменьшалось. Ежедневно пились таблетки — «черника-форте». Хоть мое зрение не падало, я все равно делал это заодно. Возможно, мне были какие-то поблажки, может быть я просто забыл. Но обычно запрет применялся к обоим, и не важно кто виноват. Виноваты всегда двое.\nТак происходило много лет, наверное, лет пять. Пока моё уникальное преимущество не стало пропадать. Тут я уже вышел на арену, окруженную вздохами и фразами — «Ослепнешь совсем».\nПосле какого-то длинного перерыва моё зрение ухудшилось на единичку на одном глазу и на половинку на втором. И это был удар ниже пояса. Мне казалось, что мир не справедлив. Я получил, как мне казалось гораздо большую порцию запретов. Это не укладывалось в моей голове — «Как так, у брата аж минус пять, а у меня всего минус один. А ему можно сидеть за компьютером, а мне нет. У него же в пять раз хуже зрение?» Но ответ был — «У него уже зрение упало, за тебя мы еще повоюем».\nВойна продолжилась, я получил походы на электрофорез и черные очки с дырочками. На электрофорезе меня немного било током в глаза. Видимо это как-то помогало чему-то. Спалось там чудно, так что я не особо паниковал. Но с некоторыми переменами я отказывался соглашаться.\nСпустя годы мое зрение устаканилось в районе минус трёх. У ношу очки только за рулем или когда смотрю на доску. И спустя наверное пять лет я опять пошел к окулисту. Ножки тряслись.\nВо-первых очень сильно изменилось оборудование — я все время смотрел в какие-то странные гаджеты. Складывалось ощущение, что к окулисту давно никто не заходил, и он решил просто испробовать всё на мне. Я обалдел уже только от проектора цифр и букв на стену(это вместо всем известной таблички), а потом меня добили всякими приборами в которых показывались картинки.\nВо-вторых мое зрение не упало! А даже улучшилось! Сейчас оно −1.75 на оба глаза с небольшим астигматизмом на левом. Я так этому рад. Я рассчитывал на самые худшие варианты минус пять например. Все же я по 9 часов сижу за компьютером и глаза у меня часто устают. А тут такой подарок судьбы.\nЯ шел радостный как будто мне вновь можно сидеть за компьютером больше брата.\n","permalink":"https://volyx.in/posts/2015-12-13-you-can-play-computer-new-imported/","summary":"\u003cp\u003eВ детстве у моего брата было плохое зрение. Из-за этого мы очень часто ходили к окулисту. Мы это — мама, брат, я. Мы ходили достаточно часто, поэтому даже были знакомы с окулистом ну точнее мама знакома.\u003c/p\u003e\n\u003cp\u003eМеня всегда брали с собой и проверяли зрение и мне, — так сказать, заодно. Я всегда гордился своими здоровыми глазами. Ну представьте: сначала врач-окулист проверяет зрение брату, и со вздохами говорит цифру маме — «минус пять». Мама вздыхает, переживает, ведь старшему сыну всего десять лет, а уже такая тенденция, они долго обсуждают будущие очки, капли, гимнастику для глаз, таблетки, что нужно меньше читать, смотреть телевизор, смотреть в компьютер, ну и вообще меньше куда-либо смотреть. В процессе обсудят все и вся, и царя, и Ельцина, и власть, и цены на таблетки. И пару раз пройдутся по рецепту сначала вниз, а затем вверх. Ведь понять что-то в почерке врача почти не возможно.\u003c/p\u003e","title":"Можно играть в компьютер"},{"content":"Фильм снимался в течении 12 лет с одними и теми же актёрами. Только из-за этого фильм уникален.\nВ нём нет никаких ярких вспышек и запоминающихся поворотов сюжетов. Просто жизнь и этим он просто невероятно затягивает. Убийственно интересно «подглядывать» за героями. Чем-то с схоже с «Шоу Трумэна», но тут то герой в реальном мире.\nВзрослеющие, меняющиеся на твоих глазах герои захватывают своими простыми проблемами не хуже «Игры престолов». Нет никакой тяжелой социальщины или бытовухи. Нет ничего, кроме взросления американского мальчика.\nСюжет настолько обычен, что любая бабушка на остановке наверняка может рассказать такую историю — неудачное замужество, одинокая мать ставит на ноги двоих детей, второе замужество, \u0026hellip; и так далее. Серия жизненности.\nДостоверность сто процентная. Можно даже попробовать поугадывать год, в котором снимался каждый отрывок. Не нужно быть американцем, там полно глобальных событий — выход книги Гарри Поттера, война в Ираке, выборы Барака Обамы.\nФильм определённо придется по душе и по американской, и по русской.\n","permalink":"https://volyx.in/posts/2015-12-13-otrochiestvo-new-imported/","summary":"\u003cp\u003eФильм снимался в течении 12 лет с одними и теми же актёрами. Только из-за этого фильм уникален.\u003c/p\u003e\n\u003cp\u003eВ нём нет никаких ярких вспышек и запоминающихся поворотов сюжетов. Просто жизнь и этим он просто невероятно затягивает. Убийственно интересно «подглядывать» за героями. Чем-то с схоже с «Шоу Трумэна», но тут то герой в реальном мире.\u003c/p\u003e\n\u003cp\u003eВзрослеющие, меняющиеся на твоих глазах герои захватывают своими простыми проблемами не хуже «Игры престолов». Нет никакой тяжелой социальщины или бытовухи. Нет ничего, кроме взросления американского мальчика.\u003c/p\u003e","title":"Отрочество"},{"content":" Альбом нужно слушать строго по порядку. Сюжет вертиться вокруг персонажей:\nГуру Алиса Марк мэр Фаны так заслушиваются историей, что переживают за героями как за сериалом.\nЕсли слушать не альбом, а по одному отдельному треку, то с может показаться, что это какая-то ерунда, какой-то непонятный рэп-артхаус.\nНасладиться мнения рэп-критиков\nМне такой сюжетный альбом очень нравится. Видимо, такие альбомы гораздо тяжелее выпускать, - этот ждали около 4 лет.\nЧитка доставляет. Втягиваешься все сильнее и сильнее, подсаживаешься.\nПриятного прослушивания, подсаживайтесь!\n","permalink":"https://volyx.in/posts/2015-12-02-oxxxymiron-gorgorod-new-imported/","summary":"\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eАльбом нужно слушать строго по порядку. Сюжет вертиться вокруг персонажей:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eГуру\u003c/li\u003e\n\u003cli\u003eАлиса\u003c/li\u003e\n\u003cli\u003eМарк\u003c/li\u003e\n\u003cli\u003eмэр\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eФаны так заслушиваются историей, что переживают за героями как за сериалом.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/content/images/2015/12/fcd75af088ac6ef3a5d0cd9b5b78e1ab.png\"\u003e\u003c/p\u003e\n\u003cp\u003eЕсли слушать не альбом, а по одному отдельному треку, то с может показаться, что это какая-то ерунда, какой-то непонятный рэп-артхаус.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/content/images/2015/12/8ca7b182e6c2b6ef96c89b039148652a.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"http://www.rap.ru/discography/1020\"\u003eНасладиться мнения рэп-критиков\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eМне такой сюжетный альбом очень нравится. Видимо, такие альбомы гораздо тяжелее выпускать, - этот ждали около 4 лет.\u003c/p\u003e","title":"Oxxxymiron - Горгород"},{"content":" Наш фильм 2012 года. Состоит из четырёх историй.\nПредыстория заполнилась фразой:\nУ вас есть романы? Сейчас романы популярны. У вас есть романы? Рассказы никому не нужны.\nи конечно Влади из Касты. Первая Тамада представляет будущим молодожёнам детальный план их свадьбы. Пара хочет знать все очень подробно и тамада даёт им эту подробность, опускаясь в фарс.\n«А что я буду чувствовать?» — спрашивает будущая невеста. Тамада предлагает несколько вариантов эмоций, на выбор. Выбор также прост как между рисом и зерном. Рис выбран, потому что по-европейски.\nВедущий показывает как нужно танцевать первый танец, нежно, аккуратно.\nПредлагает на выбор два вида дарения — открытое и закрытое. (Когда видно, кто сколько подарил и когда не видно) Невеста выбирает открытый: — Я хочу сразу знать кто-нас любит, а кто нет. Неудивительно, если ты ничего не чувствуешь — это хороший индикатор\nПрям хочется посоветовать посмотреть этот отрывок все ведущим мероприятий.\nВторая Круговорот взятки в природе. И всем надо и всех понимаешь. Кто за маму, кто за дочь, кто за сына, кто за себя.\nСцена в туалете в военкомате бесподобна и смешна. Комедии у наших пока получаются так себе, а вот трагикомедии на высоте. «Рассказы» этому подтверждение.\nКомедии у наших пока получаются так себе, а вот трагикомедии на высоте. «Рассказы» этому подтверждение.\nЦепочка взяток заканчивается сценой с президентом, где взятка дается доверием. Похоже, мило.\nТретья Про библиотекаршу, которой чтение книг дало дар предвидения. Теперь к ней обращается полиция с просьбой найти пропавшую девочку.\nПересказывать даже не имеет смысла. Это нужно смотреть, чувствовать и переживать. Так русской душой веет, что и грустно, и весело одновременно. Фильм не с душком, а с душой.\nФильм не с душком, а с душой.\nЧетвертая И апокалипсис - четвертая история. На ней меня мотало по всей комнате, как пятиклассника.\nБыло как-то и неловко, и нелепо, и чувствовалось, что правда все это. Что происходит оно где-то рядом с тобой. И все думалось, что закончится всё как-нибудь глупо, как в сериалах и молоденькая девочка окажется дочкой его коллеги с работы. Но нет\u0026hellip; Сегал добил, додержал.\nТезке по фамилии аплодирует другой Сигал.\nСтоит смотреть. Стоит обсуждать. Пока начните с трейлера, чтоб уж точно посмотреть.\n","permalink":"https://volyx.in/posts/2015-11-26-rasskazy-mikhaila-sieghala-new-imported/","summary":"\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eНаш фильм 2012 года.\nСостоит из четырёх историй.\u003c/p\u003e\n\u003cp\u003eПредыстория заполнилась фразой:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eУ вас есть романы? Сейчас романы популярны. У вас есть романы? Рассказы никому не нужны.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eи конечно Влади из Касты.\n\u003cimg loading=\"lazy\" src=\"/content/images/2015/11/910482662.jpg\"\u003e\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch1 id=\"первая\"\u003eПервая\u003c/h1\u003e\n\u003cp\u003eТамада представляет будущим молодожёнам детальный план их свадьбы. Пара хочет знать все очень подробно и тамада даёт им эту подробность, опускаясь в фарс.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/content/images/2015/11/28035-001.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e«А что я буду чувствовать?» — спрашивает будущая невеста. Тамада предлагает несколько вариантов эмоций, на выбор. Выбор также прост как между рисом и зерном. Рис выбран, потому что по-европейски.\u003c/p\u003e","title":"Рассказы Михаила Сегала"},{"content":"Шнурки-обидчики Два раза на тренировке натёр левую ногу. При топсах справа правая нога опорная, а левая выполняет пружинистую функцию. Стоит на носке и немного выгнута в сторону.\nПоследний раз свои кроссовки я перешнуровывал где-то год назад. Привык как-то, что всунул ногу и все, пошёл играть.\nИ вот сегодня, когда почувствовал, что нога снова начала затекать, решил перешнуровать их.\nИ все нога при изгибе перестала елозить и я заиграл лучше.\nЭто просто какой-то карнавал тупости и лени. Столько терпеть, натирать ногу в кровь, мучаться. А проблему можно было решить просто вытянув руку и перешнуровав шнурки.\nДорогое удовольствие В метросторое, куда я хожу на теннис, наконец-то появились абонеметны на месяц. Сейчас одна тренировка стоит 500 рублей. А месячный абонемент будет стоить 4 тысячи рублей. Три занятия в неделю. Думаю как раз набрать форму перед Новым годом. И на месяц после, чтобы быть в тоннусе перед Красной поляной. В горных лыжах колени — это основа основ.\nТакже думаю о том, чтобы найти себе спаринг партнёра. Тогда можно тренироваться с утра! Ну и толку больше. Я давно, достиг того уровня, что знаю все свои теннисные проблемы. Ну и приятный бонус аренда стола на двоих, а это 800 рублей, хотя я не уточнял.\nРаботает не то, что видно При достижении определённого уровня в любом виде спорта на передний план выходят те части тела, о которых по внешнему виду и не скажешь.\nК примеру, в теннисе очень важны спина и ноги, хотя вроде бы на вид все действие происходит с другими частями тела.\nВ горных лыжах очень важен корпус. С виду он вообще статичен, и работают одни колени. Но нет, это корпус перебрасывает колени а не наоборот.\nПоходу так во всех видах спорта. У лыжников важны руки - хотя на лыжах стоят ноги. У волейболистов ноги - хотя мяч ловят руки. Вот такие маленькие и очевидные открытия.\nВсем теннис ребзя!\n","permalink":"https://volyx.in/posts/2015-11-12-trillier-zashnurovannyie-new-imported/","summary":"\u003ch2 id=\"шнурки-обидчики\"\u003eШнурки-обидчики\u003c/h2\u003e\n\u003cp\u003eДва раза на тренировке натёр левую ногу. При топсах справа правая нога опорная, а левая выполняет пружинистую функцию. Стоит на носке и немного выгнута в сторону.\u003c/p\u003e\n\u003cp\u003eПоследний раз свои кроссовки я перешнуровывал где-то год назад. Привык как-то, что всунул ногу и все, пошёл играть.\u003c/p\u003e\n\u003cp\u003eИ вот сегодня, когда почувствовал, что нога снова начала затекать, решил перешнуровать их.\u003c/p\u003e\n\u003cp\u003eИ все нога при изгибе перестала елозить и я заиграл лучше.\u003c/p\u003e\n\u003cp\u003eЭто просто какой-то карнавал тупости и лени. Столько терпеть, натирать ногу в кровь, мучаться. А проблему можно было решить просто вытянув руку и перешнуровав шнурки.\u003c/p\u003e","title":"Шнурки"},{"content":"Periscope - приложение, которое позволяет вести онлайн трансляцию со своего телефона.\nДругие люди могут подключиться к трансляции и общаться с ведущим с помощью чата. Это похоже на всем известный чатрулет, но не совсем, ведь здесь видно только одного собеседника.\nНачать трансляцию можно одним нажатием кнопки, прощай сложный в настройке youtube! Прощай запись своих вебинаров, а затем долгая загрузка их обратно в интернет. Periscope сохранит все ваши трансляции.\nНемного цифр Через 10 дней после запуска у Periscope был уже 1 миллион пользователей. А через месяц после запуска твитер покупает его за 100 млн долларов. Такому сногсшибательному росту можно только позавидовать. А диванные аналитики говорили, что - \u0026ldquo;интернет уже не тот\u0026hellip; взрывного роста уже не будет.. рынок охладел\u0026hellip;\u0026rdquo;. А вот на тебе сначала - Убер и теперь Перископ!\nНа главном экране приложения карта, на которой можно выбрать трансляцию с любого уголка планеты. И смотреть например, рассвет в Бразилии, или бэкстейдж с концерта. Или смотреть трансляции пользователей, на которых подписан. Если ваш друг начал трансляцию - то тебе обязательно придет уведомление.\nПользователи онлайн подключаются к вашей трансляции и комментируют онлайн. Вы видите комментарии в нижней части экрана вместе с видео.\nОтдельный респект разработчикам приложения. Ведь с такой скоростью роста количества пользователей молодые приложения часто \u0026ldquo;выбывают из гонки\u0026rdquo;, становятся недоступными из-за огромного количества новых пользователей и не подготовленной к нагрузке инфраструктуры. Чувствуется поддержка сильного twitter\u0026rsquo;а за спиной.\n","permalink":"https://volyx.in/posts/2015-11-06-periscope-new-imported/","summary":"\u003cp\u003e\u003ca href=\"https://www.periscope.tv/\"\u003ePeriscope\u003c/a\u003e - приложение, которое позволяет вести онлайн трансляцию со своего телефона.\u003c/p\u003e\n\u003cp\u003eДругие люди могут подключиться к трансляции и общаться с ведущим с помощью чата. Это похоже на всем известный чатрулет, но не совсем, ведь здесь видно только одного собеседника.\u003c/p\u003e\n\u003cp\u003eНачать трансляцию можно одним нажатием кнопки, прощай сложный в настройке youtube! Прощай запись своих вебинаров, а затем долгая загрузка их обратно в интернет. Periscope сохранит все ваши трансляции.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/per-br.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"немного-цифр\"\u003eНемного цифр\u003c/h2\u003e\n\u003cp\u003eЧерез 10 дней после запуска у Periscope был уже 1 миллион пользователей. А через месяц после запуска твитер покупает его за 100 млн долларов. Такому сногсшибательному росту можно только позавидовать. А диванные аналитики говорили, что - \u0026ldquo;интернет уже не тот\u0026hellip; взрывного роста уже не будет.. рынок охладел\u0026hellip;\u0026rdquo;.\nА вот на тебе сначала - Убер и теперь Перископ!\u003c/p\u003e","title":"Перископ"},{"content":"Н учился со мной в одном университете, даже на одном факультете.\nВ то время пока я раздолбайничал, курил в туалетах, оттусивал во двориках, прогуливал пары, Н все учил и разбирался в каждом предмете, который был предоставлен ВУЗом.\nКогда мне казалось, что предметы становятся все ущербней и скучнее, Н брал и разбирался в каждом из них. Находил что-то интересное в наискучнейших учебниках.\nВ это же время на задней парте вздыхал я с мыслью - \u0026ldquo;Господи, опять какой-то тупой препод с какой-то туфтой\u0026rdquo; и планировал не ходить.\nТак вот после 5 лет раздолбайничества*(ну ладно 2х, с 3 курса то я начал уже писать код за деньги, и начал понимать для чего это все)* у меня открылся такой страшный голод к знаниям.\nМожет быть это еще подпитанно работой по профессии. Ведь сталкиваешься со словами и вроде что-то знакомое\u0026hellip; ты где-то слышал этот термин, но уже ничего о нем не помнишь.\nСейчас этот голод творит со мной странные вещи. Я поглащаю как обезумевший курсы с курсеры, степика, хожу на все возможные встречи и конференции для разработчиков.\nДоходит даже до такого.\nФакты таковы.\nЯ работаю по профессии. Н решил украшать мероприятия свадебными шарами. Надувными. У меня всего один вопрос.\nГде в надувных шарах - Мат. анализ, Дискретную математика, Лин. алгебра, УрматФиз, диффуры?\nИнтеграл от воздушного шара? Уравнения в частных производных 2-го порядка? Хоть какое-нибудь из пространств линейной алгебры? Коши? Лагранж куда вы смотрели?\nВселенная ты смешная!\n","permalink":"https://volyx.in/posts/2015-10-26-diffury-mat-analiz-vozdushnyie-shary-new-imported/","summary":"\u003cp\u003e\u003cem\u003eН учился со мной в одном университете, даже на одном факультете.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eВ то время пока я раздолбайничал, курил в туалетах, оттусивал во двориках, прогуливал пары, Н все учил и разбирался в каждом предмете, который был предоставлен ВУЗом.\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eКогда мне казалось, что предметы становятся все ущербней и скучнее, Н брал и разбирался в каждом из них. Находил что-то интересное в наискучнейших учебниках.\u003c/em\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eВ это же время на задней парте вздыхал я с мыслью - \u0026ldquo;Господи, опять какой-то тупой препод с какой-то туфтой\u0026rdquo; и планировал не ходить.\u003c/p\u003e","title":"Диффуры и шары"},{"content":"Для проекта понадобилось отображать пользовательские маршруты на карте. То есть пользователь должен уметь:\nВвести название города, населенного пункта или какого-то географического объекта Должны найтись координаты этого объекта Возможность строить маршрут на карте Расставлять фотографии на карте по встроенным координатам Координаты из фотографии\nhttps://blueimp.github.io/JavaScript-Load-Image/\nПример Вон сами координаты: GPSLatitude, GPSLongtitude\nПоиск координат по названиям географических объектов:\nМожно поиграться с веб-сервисом с помощью параметров ссылки\nGoogleMap\nРасставлять на карте точки с \u0026ldquo;кастомным маркером\u0026rdquo; и соединить их маршрутом:\nПримерное решение описал, для себя, поэтому оно просто 100% должно быть не оптимальным и можно сделать лучше.\n","permalink":"https://volyx.in/posts/2015-10-19-google-map-api-new-imported/","summary":"Для проекта понадобилось отображать пользовательские маршруты на карте","title":"Гугл Мап Апи"},{"content":"Порой программисты, как люди очень увлеченные, забывают основополагающие составляющие любой задачи, такие например как - \u0026ldquo;цель\u0026rdquo;.\nДаже если кажется, что все очевидно, попробуй составить план, набросай каркас, как можно глубже попробуй продумать и понять как это будет работать. Чтобы это сделать необходимо задуматься о том - \u0026ldquo;Для чего это нужно\u0026rdquo;.\nКод - это инструмент. Но периодически каждый программист заигрывается в него, ведь писать код - это то что мы любим. И тогда это превращается в рытье траншеи не зная для чего. Код - это не сама цель.\nЧаще задавай себе вопрос - \u0026ldquo;Зачем?\u0026rdquo;\n","permalink":"https://volyx.in/posts/2015-10-19-priezhdie-chiem-pisat-kod-vkliuchi-mozgh-new-imported/","summary":"\u003cp\u003eПорой программисты, как люди очень увлеченные, забывают основополагающие составляющие любой задачи, такие например как - \u0026ldquo;цель\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eДаже если кажется, что все очевидно, попробуй составить план, набросай каркас, как можно глубже попробуй продумать и понять как это будет работать. Чтобы это сделать необходимо задуматься о том - \u0026ldquo;Для чего это нужно\u0026rdquo;.\u003c/p\u003e\n\u003cp\u003eКод - это инструмент. Но периодически каждый программист заигрывается в него, ведь писать код - это то что мы любим. И тогда это превращается в рытье траншеи не зная для чего. Код - это не сама цель.\u003c/p\u003e","title":"Прежде чем писать код - включи мозг"},{"content":"Если что-то делать очень долго, то обязательно получится.\nА с момента идеи, прошло уже больше года. Вот и думается а что сделано?\nГде эти толпы пользователей ещё весной?\nОднако путь пройден и опыт набран. Без него не было бы много, что имеем сейчас. А имеем полу-работающий проект, такой мвп, но с двумя \u0026ldquo;п\u0026rdquo; - МВПП Минимальной Вэйлубл Продукт Плять. А также понимание, что продажи это все. Большое спасибо ФРИИ, за эту такую простую мысль.\nУчат звонить, продавать, говорить, а только потом делать, а ещё потом гордиться этим. Хотя тут и с готовым проектом не так легко начать продавать. Это насколько нужно быть дерзким чтобы торговать воздухом?\n","permalink":"https://volyx.in/posts/2015-10-05-dielfinarii-new-imported/","summary":"Если что-то делать очень долго, то обязательно получится.","title":"Дельфинарий"},{"content":"\n{% highlight java %} def permutation(String input){ permutation(\u0026quot;\u0026quot;, input); }\ndef permutation(String perm, String word) { if (word.isEmpty()) { println(perm + word);\n} else { for (int i = 0; i \u0026lt; word.length(); i++) { permutation(perm + word.charAt(i), word.substring(0, i) + word.substring(i + 1, word.length())); } } }\npermutation(\u0026ldquo;123\u0026rdquo;) {% endhighlight%}\n","permalink":"https://volyx.in/posts/2015-08-28-permutation-new-imported/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/permutation.png\"\u003e\u003c/p\u003e\n\u003cp\u003e{% highlight java %}\ndef permutation(String input){\npermutation(\u0026quot;\u0026quot;, input);\n}\u003c/p\u003e\n\u003cp\u003edef permutation(String perm, String word) {\nif (word.isEmpty()) {\nprintln(perm + word);\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e    } else {\n        for (int i = 0; i \u0026lt; word.length(); i++) {\n            permutation(perm + word.charAt(i), word.substring(0, i) \n                                    + word.substring(i + 1, word.length()));\n        }\n    }\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e}\u003c/p\u003e\n\u003cp\u003epermutation(\u0026ldquo;123\u0026rdquo;)\n{% endhighlight%}\u003c/p\u003e","title":"Перестановочки"},{"content":"== Поделить связанный список по значению\nЗадача Дан связанный список и целое число //N// из этого списка. Поделить связный список вокруг одного узла, так чтобы узлы с меньшим значением находились до него, а узлы со значениями больше //N// после него.\nРешение Решение похоже на\nThis is much like the partition function for quick sort. When using arrays we have to be careful not to shift elements around, because array shifts are expensive operations. But when we use a linked list we don’t have to worry about this. We could have a list that stores all values less than N and a list that stores all values greater than N and equal to N. Then we can merge the 2 lists and the N node together to get the resulting list. Here is the outline for the algorithm\ncreate 2 empty lists, one to store values smaller, other to store values greater scan the list from head to tail at each step if the current node is smaller than N append it to the smaller list if the current node is larger than N append it to the larger list append the list is complete append N and larger to the smaller list to have the final result Here is the code\n[source, java] static LinkedListNode partition(LinkedListNode head, int v) { LinkedListNode smHead = null; LinkedListNode smTail = null;\nLinkedListNode gtHead = null; LinkedListNode gtTail = null; LinkedListNode cur = head; while(cur != null) { LinkedListNode next = cur.next; cur.next = null; if (cur.data \u0026lt; v) { if (smHead == null) { smHead = cur; smTail = smHead; } else { smTail.next = cur; smTail = cur; } } else { if (gtHead == null) { gtHead = cur; gtTail = gtHead; } else { gtTail.next = cur; gtTail = cur; } } cur = next; } if (smHead == null) return gtHead; smTail.next = gtHead; return smHead; } ","permalink":"https://volyx.in/posts/2015-08-27-partition_linked_list-new-imported/","summary":"\u003cp\u003e== Поделить связанный список по значению\u003c/p\u003e\n\u003ch1 id=\"задача\"\u003eЗадача\u003c/h1\u003e\n\u003cp\u003eДан связанный список и целое число //N// из этого списка. Поделить связный список вокруг одного узла, так чтобы узлы с меньшим значением находились до него, а узлы со значениями больше //N// после него.\u003c/p\u003e\n\u003ch1 id=\"решение\"\u003eРешение\u003c/h1\u003e\n\u003cp\u003eРешение похоже на\u003c/p\u003e\n\u003cp\u003eThis is much like the partition function for quick sort. When using arrays we have to be careful not to shift elements around, because array shifts are expensive operations. But when we use a linked list we don’t have to worry about this. We could have a list that stores all values less than N and a list that stores all values greater than N and equal to N. Then we can merge the 2 lists and the N node together to get the resulting list. Here is the outline for the algorithm\u003c/p\u003e","title":"Поделить связанный список по значению"},{"content":":icons: font\n:sectanchors:\n== Веб-компоненты\nНепонятно как затесавшийся доклад про веб-компоненты на JEEConf\nLess JS! Web components for back-end developers. (Olga Semeniuk, Belarus) ++++\nОчень понравилась такая очевидная вещь:\n++++\nВеб-компоненты состоят из следующих частей:\nTemplates. Фрагменты HTML, которые программист собирается использовать в будущем. Содержимое тегов парсится браузером, но не вызывает выполнение скриптов и загрузку дополнительных ресурсов (изображений, аудио…) пока мы не вставим его в документ. Shadow DOM. Shadow DOM позволяет изменять внутреннее представление HTML элементов, оставляя внешнее представление неизменным. Отличный пример — элементы и *. В коде мы размещаем один тег, а браузер отображает несколько элементов (слайдеры, кнопки, окно проигрывателя). В Chrome эти и некоторые другие элементы используют Shadow DOM. Custom Elements. Позволяют создавать и определять API собственных HTML элементов. В HTML теперь будут такие теги как * или *? Imports. Импорт необходимых ресурсов для компонента - css например. Хороший пример реализации компонентов это Polymer.\nПример объявления полимеровского элемента: [source,html] \u0026lt;div\u0026gt;{{greeting}}\u0026lt;/div\u0026gt; \u0026lt;!-- динамические данные компонента--\u0026gt; У полимера также есть библиотека уже готовых ((https://elements.polymer-project.org/ компонент)).\nimage::../../img/polymer-cc.png[]\n((https://elements.polymer-project.org/elements/gold-cc-input Компонент)) для ввода номера кредитной карты, естественно в материальном дизайне, куда без него.\nПолимеровские компоненты очень похожи на ангуряровские директивы. В итоге синтаксис одинаковый, то есть сходу то и не отличить, что это полимер или ангуляр?\n== ((https://www.polymer-project.org/1.0/ Polymer))\n[source,html] == ((https://angular.io/ Ангуляр 2)) Обещает нам подобный синтаксис\nimage::../../img/angular2.png[]\nНевооруженным взглядом видно, что они одинаковы.\n== Какой же в итоге выберет гугл?\nСопутствующие статьи:\n((http://habrahabr.ru/post/210058/ Составляющие веб-компонентов)) ((https://github.com/GoogleWebComponents пример веб-компонентов от гугла)) ((https://elements.polymer-project.org/ полимеровские компоненты)) ","permalink":"https://volyx.in/posts/2015-08-26-web_components-new-imported/","summary":"\u003cp\u003e:icons: font\u003c/p\u003e\n\u003cp\u003e:sectanchors:\u003c/p\u003e\n\u003cp\u003e== Веб-компоненты\u003c/p\u003e\n\u003cp\u003eНепонятно как затесавшийся доклад про веб-компоненты на JEEConf\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLess JS! Web components for back-end developers. (Olga Semeniuk, Belarus)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e++++\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eОчень понравилась такая очевидная вещь:\u003c/p\u003e\n\u003cp\u003e++++\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eВеб-компоненты состоят из следующих частей:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eTemplates\u003c/strong\u003e. Фрагменты HTML, которые программист собирается использовать в будущем. Содержимое тегов \u003cem\u003e\u003c!-- raw HTML omitted --\u003e\u003c/em\u003e парсится браузером, но не вызывает выполнение скриптов и загрузку дополнительных ресурсов (изображений, аудио…) пока мы не вставим его в документ.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShadow DOM\u003c/strong\u003e. Shadow DOM позволяет изменять внутреннее представление HTML элементов, оставляя внешнее представление неизменным. Отличный пример — элементы \u003cem\u003e\u003c!-- raw HTML omitted --\u003e\u003c/em\u003e и \u003c!-- raw HTML omitted --\u003e*. В коде мы размещаем один тег, а браузер отображает несколько элементов (слайдеры, кнопки, окно проигрывателя). В Chrome эти и некоторые другие элементы используют Shadow DOM.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Elements\u003c/strong\u003e. Позволяют создавать и определять API собственных HTML элементов. В HTML теперь будут такие теги как \u003c!-- raw HTML omitted --\u003e* или \u003c!-- raw HTML omitted --\u003e*?\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eImports\u003c/strong\u003e. Импорт необходимых ресурсов для компонента - css например.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eХороший пример реализации компонентов это Polymer.\u003c/p\u003e","title":"Веб-компоненты"},{"content":"\nОсновная мысль RTFM!\nЕдинственный верный и правильный мануал по публикации в централ - ((http://central.sonatype.org/pages/apache-maven.html)), остальное все - чушь и старье. Надолго запомню, что читать нужно только официальную документацию - все остальное - не актуально. Потратил на этой ерунде долгие 2 часа, а когда нашел мануал - справился за 15 минут. Хотя нужно быть честным - и пока автоматически у меня не получилось \u0026ldquo;релизнуть\u0026rdquo;. Заходил в ((https://oss.sonatype.org)) и загружал библиотеки руками.\nТеперь с нетерпением жду когда мое творенье, а точнее сказать просто форкнутое чужое творенье появится в центральном репозиториии. А звучит то как - \u0026ldquo;в Центральном!\u0026rdquo;.\nИтак про форкнутую библиотеку, если говорить по русски - то стыренную, а именно:\nскомпилированную; выложенную в централ; Но стыренную официально с подтверждением, а точнее с отсутсвием такого от самого владельца.\nТак что совесть моя чиста. А тем временем скачать ее хотели многие, судите сами:\nИсточник\nПохоже пока заинтересованные люди работали в компании её поддерживали, а потом перестали, в то время как монга только развивалась и обрастала новыми инструментами.\nНовый дом библиотеки теперь тут - (https://github.com/volyihin/mongeez). Скачать можно так:\n{% highlight xml %} com.github.volyihin mongeez 0.9.5 {% endhighlight %}\nА вот и в самом централе:\nUpdate: Мне только что пришло письмо от Олексия.\nИ вот теперь встала дилемма. С одной стороны релиз сделан, и мне не сильно нужна помощь, с другой стороны - совесть.\n","permalink":"https://volyx.in/posts/2015-08-26-maven_central-new-imported/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/sonatype.png\"\u003e\u003c/p\u003e\n\u003cp\u003eОсновная мысль RTFM!\u003c/p\u003e\n\u003cp\u003eЕдинственный верный и правильный мануал по публикации в централ - ((\u003ca href=\"http://central.sonatype.org/pages/apache-maven.html))\"\u003ehttp://central.sonatype.org/pages/apache-maven.html))\u003c/a\u003e, остальное все - чушь и старье. Надолго запомню, что читать нужно только официальную документацию - все остальное - не актуально. Потратил на этой ерунде долгие 2 часа, а когда нашел мануал - справился за 15 минут. Хотя нужно быть честным - и пока автоматически у меня не получилось \u0026ldquo;релизнуть\u0026rdquo;. Заходил в ((\u003ca href=\"https://oss.sonatype.org\"\u003ehttps://oss.sonatype.org\u003c/a\u003e)) и загружал библиотеки руками.\u003c/p\u003e","title":"Первый релиз в Maven Central"},{"content":"Попробуйте сверстать одну страничку на html, и вот увидите, что вы обязательно подключили к ней jquery. Никакое современное приложение «не написать» без jquery. В разумных пределах, конечно. Взаимодействие с формой, если вы не безумный верстатель, который делает запросы на формах с инпутами потребует динамики. Сделать что-нибудь на клик по кнопке — опять динамика. А если есть динамика то нужен javascript.\nИзучение javascript часто начинают с jquery, потому что его синтаксис понятен. Не нужно знать программирования, чтобы написать какое-то простейшее действие, jquery использует css селекторы, которые понятны каждому человеку, знакомому с css и html. И так все приложение «стряпается» на jquery, а затем когда разработчик умнеет, то переписывать на javascript уже нет смысла, ведь и так работает.\nAjax. Хотя существует даже caйт, который как бы призван мотивировать не использовать jquery, но мне кажется он вызывает противоположный эффект. Посмотрите на синтаксис.\nПлагины. Потребности современного веб-сайта покрываются jquery плагинами. Они правда сниискали наролную любовь. Jquery UI, Jquery Mobile да они есть на каждом третьем сайте.\nВзаимодействие с фреймворками. Пишите вы на angularjs, backbone — без разницы. Однажды вам потребуется библиотека, вы пойдете гуглить и первым в списке окажется jquery плагин. Так уж сложилось.\nЯ не знаю, что выгонит jquery с этой ниши. ECMAScript 6, Сомневаюсь. Это библиотека пережила уже многие стандарты и порадила целый класс jquery программистов. Как же кривость языка и отстуствие правильных иструментов сыграло на руку, и не отпугнуло. Начинаете проект, подключайте jquery сразу.\nPS. В этой заметке всего лишь 16 раз используется слово jquery, и тут без него никуда.\n","permalink":"https://volyx.in/posts/2015-08-13-jquery_win-new-imported/","summary":"\u003cp\u003eПопробуйте сверстать одну страничку на html, и вот увидите, что вы обязательно подключили к ней jquery.\nНикакое современное приложение «не написать» без jquery. В разумных пределах, конечно.\nВзаимодействие с формой, если вы не безумный верстатель, который делает запросы на формах с инпутами потребует динамики. Сделать что-нибудь на клик по кнопке — опять динамика. А если есть динамика то нужен javascript.\u003c/p\u003e\n\u003cp\u003eИзучение javascript часто начинают с jquery, потому что его синтаксис понятен. Не нужно знать программирования, чтобы написать какое-то простейшее действие, jquery использует css селекторы, которые понятны каждому человеку, знакомому с css и html. И так все приложение «стряпается» на jquery, а затем когда разработчик умнеет, то переписывать на javascript уже нет смысла, ведь и так работает.\u003c/p\u003e","title":"Jquery победил. Пост из прошлого"},{"content":"Задача Написать функцию, которая удалит символы из строки.\nstring removeChars( string str, string remove ); Символы, которые содержатся в //str//, удалить из //remove// . Пример. Дана строка //Battle of the Vowels: Hawaii vs. Grozny//. Удалить //aeiou//. Функция //removeChars// вернёт такой результат - //Bttl f th Vwls: Hw vs. Grzny//. Решение Разделим задачу на две части. Для каждого символа определим - удалять ли его? Потом, само удаление соответствующего символа. Сначала мы обсудим удаление символа. Удаление символа из строки алгоритмически эквивалентно удалению элемента из массива. В памяти массив хранится одним блоком, так что не получится удалить элемент из середины эффективно, как можно было бы сделать со связным списком. Вместо этого в массиве мы переставим элементы таким образом, чтобы вместо удаляемого элемента сразу шли следующие за ним. Если мы удалим символ //c// из строки //abcd//, то мы можем либо двинуть символы //ab// на одну позицию вперед, либо сдвинуть символ //d// на одну позицию назад. Оба подхода приводят к одному и тому же результату - //abd//. Кроме того, подвинув данные, также уменьшим размер строки на один символ. Получается, в первом случае мы уничтожим первый элемент, а во втором - последний. В большинстве языков программирования гораздо легче удалять элемент с конца массива(либо уменьшая длину строки на один, либо записывая последним элементом //null//, в зависимости от языка) чем с начала, поэтому сдвигать символы в начало это наилучший вариант. Каково время работы алгоритма в наихудшем случае, если мы удалим все символы в строке //str//? Для каждого удаления потребуется сдвигать остальные символы назад на одну позицию. Если строка длинны //n//, то потребуется сдвинуть последний символ //n - 1// раз, предпоследний - //n - 2// раза. В итоге //O(n^2)// на удаление. Если мы удалим символы строки с конца, то получится немного эффективнее, но сложность останется такая же - //O(n^2)// в худшем случае. Сдвигать один и тот же символ несколько раз подряд не очень эффективно. Попробуем избежать этого. Что если создать строковый буфер и модифицировать его вместо исходной строки? Затем мы копируем символы из буфера, пропуская те символы, которые удалим. Когда закончится построение результирующей строки, то можно скопировать ее в исходную. Каждый символ передвигается как минимум 2 раза, что в итоге дает удаление за //O(n)//. Однако мы приобретаем затраты на память этого буфера, который размером с исходную строка, и затраты на копирование обратно уже итоговой строки. Получается, что мы перемещаем каждый символ как минимум дважды, вместо O(n) удаления. Однако, мы несем затраты по памяти на вернменный буфер, который такого же размера как и исходная строка, и затраты на копирование модифицированной строки обратно в исходную. Попробуем избежать этих издержек, но оставить сложность алгоритма O(n).\nДля релаизации O(n) алгоритма мы будем следить за позицеей символа в исходной строке и позицией символа в строке-буфере. Обе позиции изначально равны 0. Значение первой позиции мы увеличим на один, когда будем читать из строки, а значение второй позиции - когда будем записывать в буфер.\nДругими словами, когда мы копируем символ, мы увеличваем значения обоих счетчиков на единицу, но когда мы удаляем символ, мы увеличиваем только исходный счетчик. Значит, исходный счетчик имеет либо такое же значение, либо больше чем значние счетчика буфера.\nПосле того, как мы прочитали символ из исходной строки ( счетчик прошел этот символ), мы больше не нуждаемся в этом символе - потому что затем мы скопируем модифицированную строку поверх него. To implement the O(n) algorithm just described, you need to track a source position for the read location in the original string and a destination position for the write position in the temporary buffer. These positions both start at zero.\nThe source position is incremented every time you read, and the destination position is incremented every time you write.\nIn other words, when you copy a character, you increment both positions, but when you delete a character, you increment only the source position. This means the source position is always the same as or ahead of the destination position.\nAfter you read a character from the original string (that is, the source position has advanced past it), you no longer need that character — because you’re just going to copy the modified string over it.\nBecause the destination position in the original string is always a character you don’t need anymore, you can write directly into the original string, eliminating the temporary buffer entirely.\nThis is still an O(n) algorithm but without the memory and time overhead of the earlier version. Now that you know how to delete characters, consider the task of deciding whether to delete a particular character.\nThe easiest way to do this is to compare the character to each character in remove and delete it if it matches any of them.\nHow efficient is this? If str is n characters long and remove is m characters long, then in the worst case you make m comparisons for each of n characters, so the algorithm is O(nm). You can’t avoid checking each of the n characters in str, but perhaps you can make the lookup that determines whether a given character is in remove better than O(m). If you’ve already read the solution to “Find the First Nonrepeated Character,” this should sound familiar. Just as you did in that problem, you can use remove to build an array or hash table that has constant time lookup, thus giving an O(n) solution. The trade-offs between hash tables and arrays are the same as previously discussed. In this case, an array is most appropriate when str and remove are long and characters have relatively few possible values (for example, ASCII strings). A hash table may be a better choice when str and remove are short or characters have many possible values (for example, Unicode strings). Either choice could be acceptable as long as you justify it appropriately. This time, you’re told that the inputs are ASCII strings, so the array wouldn’t be too big; because the previous implementation used a hash table, try using an array for this one.\n","permalink":"https://volyx.in/posts/2015-06-24-remove_specified_characters-new-imported/","summary":"Серия задачек на подумать, осознать. На этот раз будем разбираться с удалением смимволов из строки.","title":"Удаление символов из строки"},{"content":"Groovy отличный язык, если захотелось прям с ходу взять и написать какой-то алгоритм или скрипт. Советую всем программистам иногда \u0026ldquo;разминать\u0026rdquo; свои интерпрайзные мозги какими-нибудь задачками.\nЭтот алгоритм, наверное, является самым популярным алгоритмом сортировки. Он весьма прост, быстр и сортирует задействуя минимальное количество дополнительной памяти. Для большинства задач, где требуется сортировка \u0026ldquo;Quick sort\u0026rdquo; является хорошим выбором.\n{% highlight java %} // массив, который будем сортировать def a = [1,5,7,8,45,7,45,34,45,78,9]\n/**\nПечать массива. Наверное, такой метод, уже есть, елнь было искать. */ void printArr(a) {\na.each{i -\u0026gt;\nprint i + ', ' }\n}\n/**\nСортировка */ void sort(a) { sort(a, 0, a.size() - 1) } void sort(a, s, e) { int index = partition(a, s, e)\nprintArr(a); if (s \u0026lt; index -1 ) sort(a, s, index -1) if (index \u0026lt; e) sort(a, index, e) }\n/**\nНаходим \u0026ldquo;средний\u0026rdquo; элемент и сортируем относительно него */ def partition(a, s , e) { int p = (s + e) / 2\ndef i = s; def j = e; def pivot = a[p]; println \u0026ldquo;pivot=\u0026rdquo; + pivot\nwhile (i\u0026lt;=j) { while (a[i] \u0026lt; pivot) { i++; }\nwhile (a[j] \u0026gt; pivot) { j-- } println \u0026quot;i=\u0026quot; + i + \u0026quot; j=\u0026quot; + j def tmp; if (i\u0026lt;=j) { tmp = a[i] a[i] = a[j] a[j] = tmp println \u0026quot;swap \u0026quot; + a[i] + \u0026quot; \u0026quot; + a[j] + \u0026quot; i j \u0026quot; + i + \u0026quot;-\u0026quot; + j i++ j-- } printArr(a); } println \u0026ldquo;index=\u0026rdquo; + i\nreturn i }\nprintln \u0026ldquo;Исходный массив:\u0026rdquo; printArr(a);\nsort(a) println \u0026ldquo;Отсортированный:\u0026rdquo; printArr(a) {% endhighlight %}\n","permalink":"https://volyx.in/posts/2015-06-08-groovy_quicksort-new-imported/","summary":"\u003cp\u003eGroovy отличный язык, если захотелось прям с ходу взять и написать какой-то алгоритм или скрипт. Советую всем программистам иногда \u0026ldquo;разминать\u0026rdquo; свои интерпрайзные мозги какими-нибудь задачками.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/quicksort.png\"\u003e\u003c/p\u003e\n\u003cp\u003eЭтот алгоритм, наверное, является самым популярным алгоритмом сортировки. Он весьма прост, быстр и сортирует задействуя минимальное количество дополнительной памяти. Для большинства задач, где требуется сортировка \u0026ldquo;Quick sort\u0026rdquo; является хорошим выбором.\u003c/p\u003e\n\u003cp\u003e{% highlight java %}\n// массив, который будем сортировать\ndef a = [1,5,7,8,45,7,45,34,45,78,9]\u003c/p\u003e\n\u003cp\u003e/**\u003c/p\u003e","title":"Groovy. Быстрая сортировка."},{"content":":icons: font\n:sectanchors:\nЯ знаю 2 способа проверить держит ли поток монитор на объект.\nМожно вызвать у объекта методы wait() или notify(), которые выбросят исключение если вызваны не из синхронизированного блока. И собственно алгоритм такой - вызываем newspaper.wait() и если этот метод бросает исключние, значит лока нет!\nМожно вызвать статический метод holdsLock(Object obj) класса Thread, который и вернет true если поток владеет монитором этого объекта.\n","permalink":"https://volyx.in/posts/2015-04-14-thread_hold_lock-new-imported/","summary":"Выполняется код под каким-то монитором или нет?","title":"Захвачен ли монитор потоком на данный объект"},{"content":":icons: font\n:sectanchors:\n== Использование команды nohup\nКоманда nohup имеет следующий формат:\n[source, bash] nohup command \u0026amp; Предположим, вы хотите, чтобы команда grep осуществила поиск во всех файлах в вашем текущем каталоге строки \u0026ldquo;word\u0026rdquo; и перенаправила вывод в файл word.list, и затем, не ожидая завершения, вы хотите выйти из системы, то введите следующую строку:\n[source, bash] nohup grep word * \u0026gt; word.list \u0026amp; Вы можете завершить команду nohup с помощью команды kill.\n","permalink":"https://volyx.in/posts/2015-04-14-nohup-new-imported/","summary":"Все процессы, за исключением at и batch, завершаются, когда вы выходите из системы. Если вы хотите, чтобы после вашего выхода из системы процесс в фоновом режиме продолжал выполняться, то вам необходимо использовать команду nohup","title":"Команда nohup"},{"content":":icons: font\n:sectanchors:\n== Задача ATOI\nWrite a function to convert a string into an integer. (This function is called A to I (or atoi()) because we are converting an ASCII string into an integer.) Good answer: Go through the string from beginning to end. If the first character is a negative sign, remember this fact. Keep a running total, which starts at 0. Each time you reach a new digit, multiply the total by 10 and add the new digit. When you reach the end, return the current total, or, if there was a negative sign, the inverse of the number. Okay answer: Another approach is to go through the string from end to beginning, again keeping a running total. Also, remember a number x representing which digit you are currently on; x is initially 1. For each character, add the current digit times x to the running total, and multiply x by 10. When you reach the beginning, return the current total, or, if there was a negative sign, the inverse of the number. Note: The interviewer is likely to ask you about the limitations of your approach. You should mention that it only works if the string consists of an optional negative sign followed by digits. Also, mention that if the number is too big, the result will be incorrect due to overflow.\n","permalink":"https://volyx.in/posts/2015-04-13-question_atoi-new-imported/","summary":"Как сказал David Wheeler, все проблемы в Computer Science могут быть решены еще одним уровнем абстракции. Netty как раз предлагает такой уровень абстракции для клиент-серверных приложений, работающих через NIO(non-blocking input-output). Netty упрощает разработку TCP, UDP серверов, но также дает доступ к использованию низкоуровнего API, представляя свои высокоуровневые абстракции.","title":"Задача ATOI"},{"content":":icons: font\n:sectanchors:\n== Shared Objects and Synchronization\nOn the first day of your new job, your boss asks you to find all primes between 1 and 1010 (never mind why), using a parallel machine that supports ten concurrent threads. This machine is rented by the minute, so the longer your program takes, the more it costs. You want to make a good impression. What do you do? As a first attempt, you might consider giving each thread an equal share of the input domain. Each thread might check 109 numbers, as shown in Fig. 1.1. This approach fails, for an elementary, but important reason. Equal ranges of inputs do not necessarily produce equal amounts of work. Primes do not occur uniformly: there are many primes between 1 and 109, but hardly any between 9·109 and 1010. To make matters worse, the computation time per prime is not the same in all ranges: it usually takes longer to test whether a large number is prime than a\n","permalink":"https://volyx.in/posts/2015-02-1-shared_objects_and_synchronization-new-imported/","summary":"Как сказал David Wheeler, все проблемы в Computer Science могут быть решены еще одним уровнем абстракции. Netty как раз предлагает такой уровень абстракции для клиент-серверных приложений, работающих через NIO(non-blocking input-output). Netty упрощает разработку TCP, UDP серверов, но также дает доступ к использованию низкоуровнего API, представляя свои высокоуровневые абстракции.","title":"Shared Objects and Synchronization"},{"content":"Сборка Nginx с модулями nginx-upload-module nginx-rtmp-module\nДля начало скачиваем последнюю стабильную версию nginx:\nwget http://nginx.org/download/nginx-1.4.6.tar.gz tar xzf nginx-1.4.6.tar.gz Далее с github скачиваем нужные нам модули:\ngit clone https://github.com/yaoweibin/nginx_cross_origin_module.git git clone https://github.com/arut/nginx-rtmp-module.git git clone -b 2.2 git://github.com/vkholodkov/nginx-upload-module.git git clone https://github.com/masterzen/nginx-upload-progress-module.git Устонавливаем библиотеку libpcre3-dev:\napt-get install libpcre3-dev после:\ncd nginx-1.4.6/ конфигурируем:\n./configure \u0026ndash;add-module=../nginx-upload-module \u0026ndash;add-module=../nginx-upload-progress-module \u0026ndash;add-module=../nginx_cross_origin_module \u0026ndash;add-module=../nginx-rtmp-module \u0026ndash;prefix=/etc/nginx/ \u0026ndash;sbin-path=/usr/sbin/nginx \u0026ndash;conf-path=/etc/nginx/nginx.conf \u0026ndash;error-log-path=/var/log/nginx/error.log \u0026ndash;http-log-path=/var/log/nginx/access.log \u0026ndash;pid-path=/var/run/nginx.pid \u0026ndash;lock-path=/var/run/nginx.lock \u0026ndash;http-client-body-temp-path=/var/cache/nginx/client_temp \u0026ndash;user=nginx \u0026ndash;group=nginx \u0026ndash;with-http_realip_module \u0026ndash;with-http_addition_module \u0026ndash;with-http_sub_module \u0026ndash;with-http_mp4_module \u0026ndash;with-http_gzip_static_module \u0026ndash;with-http_random_index_module \u0026ndash;with-http_secure_link_module \u0026ndash;with-http_stub_status_module \u0026ndash;with-file-aio принеобходимости можно еще добавить доболнительные параметры!\nmake make install\nПроверяем что у нас получилось: root@root:~# nginx -V nginx version: nginx/1.4.6 built by gcc 4.7.2 (Debian 4.7.2-5) TLS SNI support enabled configure arguments: \u0026ndash;add-module=../nginx-upload-module \u0026ndash;add-module=../nginx-upload-progress-module \u0026ndash;add-module=../nginx_cross_origin_module \u0026ndash;add-module=../nginx-rtmp-module \u0026ndash;prefix=/etc/nginx/ \u0026ndash;sbin-path=/usr/sbin/nginx \u0026ndash;conf-path=/etc/nginx/nginx.conf \u0026ndash;error-log-path=/var/log/nginx/error.log \u0026ndash;http-log-path=/var/log/nginx/access.log \u0026ndash;pid-path=/var/run/nginx.pid \u0026ndash;lock-path=/var/run/nginx.lock \u0026ndash;http-client-body-temp-path=/var/cache/nginx/client_temp \u0026ndash;user=nginx \u0026ndash;group=nginx \u0026ndash;with-http_realip_module \u0026ndash;with-http_addition_module \u0026ndash;with-http_sub_module \u0026ndash;with-http_mp4_module \u0026ndash;with-http_gzip_static_module \u0026ndash;with-http_random_index_module \u0026ndash;with-http_secure_link_module \u0026ndash;with-http_stub_status_module \u0026ndash;with-file-aio\n","permalink":"https://volyx.in/posts/2015-01-26-nginx_with_modules-new-imported/","summary":"by Brian Goetz, Tim Peierls, Joshua Bloch, Joseph Bowbeer, David Holmes, Doug Lea. I was fortunate indeed to have worked with a fantastic team on the design and implementation of the concurrency features added to the Java platform in Java 5.0 and Java 6. Now this same team provides the best explanation yet of these new features, and of concurrency in general. Concurrency is no longer a subject for advanced users only. Every Java developer should read this book. \u0026ndash;Martin Buchholz","title":"Сборка Nginx с модулями"},{"content":"\nКак сказал David Wheeler, все проблемы в Computer Science могут быть решены еще одним уровнем абстракции. Netty как раз предлагает такой уровень абстракции для клиент-серверных приложений, работающих через NIO(non-blocking input-output). Netty упрощает разработку TCP, UDP серверов, но также дает доступ к использованию низкоуровнего API, представляя свои высокоуровневые абстракции.\nБлокирующий против неблокирующего ввода-вывода в JVM Продолжающийся рост веба увеличивает потребность в обработке все большего количества данных через сеть и возможностей масштабирования. Эффективность приложений выходит на первое место и встречается со спросом на эту эффективность. К счастью, Java уже поставляется со всеми инструментами, необходимыми для создания эффективных и масштабируемых приложений. Хотя ранние версии Java поддерживали работу с сетью, в Java 1.4 был представлен NIO API, который упрощал разработку клиент-серверных приложений.\nНовый ввод-вывод (NIO.2), представленный в Java 7, дает возможность писать асинхронный, работающий с сетью код и также предлагает более высокоуровневый API , чем его предшественник.\nДля работы с сетью у вас есть всего два варианта:\nИспользовать IO, известный как блокирующий ввод-вывод Использовать NIO, известный как новый/неблокирующий ввод-вывод Блокирующие сокеты\nНеблокирующие сокеты\nНа рисунках 1,2 показано, что блокирующий ввод-вывод использует по выделенному потоку на на каждое соединение, это означает, что мы имеем связь один-к-одному между подключениями и потоками, которая ограничивает количество потоков, которое может создать JVM.\nЗапомнив это концептуальное отличие, попробуем написать простой сервер, используя разные подходы. Сервер будет принимать запросы от клиента, и отправлять их назад.\n{% highlight java %} import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.net.ServerSocket; import java.net.Socket;\npublic class PlainEchoServer { public void serve(int port) throws IOException { final ServerSocket socket = new ServerSocket(port); // \u0026lt;1\u0026gt; try { while (true) { final Socket clientSocket = socket.accept(); // \u0026lt;2\u0026gt; System.out.println(\u0026ldquo;Accepted connection from \u0026quot; + clientSocket); new Thread(new Runnable() { // \u0026lt;3\u0026gt; @Override public void run() { try { BufferedReader reader = new BufferedReader( new InputStreamReader(clientSocket.getInputStream())); PrintWriter writer = new PrintWriter(clientSocket .getOutputStream(), true); while(true) { // \u0026lt;4\u0026gt; writer.println(reader.readLine()); writer.flush();\n} } catch (IOException e) { e.printStackTrace(); try { clientSocket.close(); } catch (IOException ex) { // ignore on close } } } }).start(); // \u0026lt;5\u0026gt; } } catch (IOException e) { e.printStackTrace(); } } public static void main(String[] args) throws IOException { new PlainEchoServer().serve(9000); } } {% endhighlight %}\nПривязываем сервер к порту Блокируем основной поток, пока клиент не подключится Создаем новый поток и обрабатываем подключение клиента Читаем введенные клиентом данные и записываем их назад Запускаем поток Подключиться к такому серверу можно с помощью telnet, например вот так:\n{% highlight bash %} telnet localhost 9000 {% endhighlight %}\nНа каждого нового клиента требуется создать отдельный поток. Можно, конечно, сделать какой-нибудь pool потоков, чтобы уменьшить затраты на создание каждый раз нового потока, и переиспользовать уже созданные, но это поможет лишь только на время. Основная проблема все же остается: количество одновременных клиентов будет ограничено количеством потоков, обрабатывающих их. Когда приложению необходимо обрабатывать одновременно тысячи клиентов, это становится большой проблемой.\nЭта проблема исчезает, если мы будем использовать NIO, как например, в следующем примере. Но для начала важно узнать основные концепции в NIO.\nОсновные концепции NIO Java 7 представила новый NIO API, известный как NIO.2, но можно так же использовать и \u0026ldquo;просто\u0026rdquo; NIO. Хотя новый API также асинхронный, он отличается от исходной реализации NIO, как API, так и реализацией. Хотя API не сильно отличаются, они оба имеют одинаковые возможности. Например, обе реализации используют одну и ту же абстракцию под названием ByteBuffer, как обертку для данных.\nBytebuffer ByteBuffer - это основа для обоих NIO APIs, так же как и в Netty. ByteBuffer может быть создан как и в Java куче (heap), так и напрямую, что означает, что он будет хранится вне кучи. Использование буфера напрямую обычно быстрее, когда мы передаем его какому-то каналу (channel), но стоимость создание и очистки/удаления такого буфера выше. В обоих случаях, API Bytebuffer\u0026rsquo;а один и тот же, который позволяет одним унифицированный образом управлять данными в буфере. ByteBuffer позволяет одним и тем же данным быть легко доступными между разными экземплярами Bytebuffer, без необходимости копировать внутренние данные. Так же он предоставляет другие операции, который ограничивают видимость внутренних данных.\nSlicing ByteBuffer\nРазрезание (Slicing) ByteBuffer позволяет создать новый экземпляр, который будет ссылаться на те же данные, как и исходный ByteBuffer, но делать доступным только часть этих данных. Это полезно для минимизации количества копирований данных, но разрешает доступ только к части этих данных.\nТипичное использование ByteBuffer включает следущее:\nЗаписать данные в ByteBuffer Вызвать ByteBuffer.flip() для смены режима на чтение Чтение данных из ByteBuffer Вызов либо ByteBuffer.clear(), либо ByteBuffer.compact() Когда данные пишутся в ByteBuffer, он следит за количеством данных, записанных в него, сохраняя позицию индекса записи. Перед тем, как прочитать данные нужно вызвать Bytebuffer.flip(), чтобы сменить режим с записи на режим чтения. Вызов метода ByteBuffer.flip() устанавливает ограничение в ByteBuffer в текущую позицию, а затем устанавливает ее в 0. Таким образом можно считать все данные из ByteBuffer.\nЧтобы опять записать данные в ByteBuffer, нужно вернуться в режим чтения, а затем вызвать следующие методы:\nByteBuffer.clear() Очищает все данные в буфере ByteBuffer.compact() Очищает только те данные, которые были прочтены, и перемещает все непрочитанные данные в начало и сдвигает позицию, типичное использование: {% highlight java %} Channel inChannel = \u0026hellip;.; ByteBuffer buf = ByteBuffer.allocate(48); int bytesRead = -1; do { bytesRead = inChannel.read(buf); //\u0026lt;1\u0026gt; if (bytesRead != -1) { buf.flip(); //\u0026lt;2\u0026gt; while(buf.hasRemaining()){ System.out.print((char) buf.get()); //\u0026lt;3\u0026gt; } buf.clear(); //\u0026lt;4\u0026gt; } } while (bytesRead != -1); inChannel.close(); {% endhighlight %}\nПрочитать данные из канала (Channel) в ByteBuffer Подготовим буфер для чтения Прочитаем байты из ByteBuffer,с каждым вызовом get() обновляем индекс позиции на 1 Подготовим буфер для записи Теперь, когда понятно, как работать с ByteBuffer, рассмотрим концепцию селекторов (Selectors).\nРабота с NIO селекторами (Selectors) NIO API использует основанный на селекторах подход для обработки сетевых событий и данных. Канал (channel) выступает в роли соединения между сущностями, способными осуществлять операции ввода-вывода над такими сущностями как как файл или сокет. Селектор это NIO компонент, который определяет готов ли канал или несколько каналов для чтения/записи, получается что один селектор способен обработать множество подключений, сводящий на нет необходимость для использования модели поток-на-соединение, как было блокирующем сервере из первого примера.\nЧтобы использовать селектор нужно выполнит следующие шаги:\nСоздать один или несколько селекторов, в которых можно зарегистрировать каналы (channels) Когда каналы зарегистрированы, нужно указать события,к которые будут прослушиваться. Существует 4 типа событий: OP_ACCEPT OP_CONNECT OP_READ OP_WRITE Когда каналы зарегистрированы, необходимо вызвать метод Selector.select(), который заблокирует основной поток, пока какое-нибудь из событий не произойдет. Когда метод разблокируется, можно получить все экземпляры SelectionKey(содержит ссылки на зарегистрированный канал и тип события) и выполнить свой код. Что конкретно выполнять зависит от типа события, которое пришло. SelectedKey может содержать больше чем одно событие в один промежуток времени. Чтобы увидеть как это работает на деле, нужно реализовать неблокирующую версию сервера из предыдущего примера.\n{% highlight java %} import java.io.IOException; import java.net.InetSocketAddress; import java.net.ServerSocket; import java.nio.ByteBuffer; import java.nio.channels.SelectionKey; import java.nio.channels.Selector; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; import java.util.Iterator; import java.util.Set;\npublic class PlainNioEchoServer { public void serve(int port) throws IOException { System.out.println(\u0026ldquo;Listening for connections on port \u0026quot; + port); ServerSocketChannel serverChannel = ServerSocketChannel.open(); ServerSocket ss = serverChannel.socket(); InetSocketAddress address = new InetSocketAddress(port); ss.bind(address); // \u0026lt;1\u0026gt; serverChannel.configureBlocking(false); Selector selector = Selector.open(); serverChannel.register(selector, SelectionKey.OP_ACCEPT); // \u0026lt;2\u0026gt; while (true) { try { selector.select(); // \u0026lt;3\u0026gt; } catch (IOException ex) { ex.printStackTrace(); // handle in a proper way break; } Set readyKeys = selector.selectedKeys();// \u0026lt;4\u0026gt; Iterator iterator = readyKeys.iterator(); while (iterator.hasNext()) { SelectionKey key = (SelectionKey) iterator.next(); iterator.remove();//; \u0026lt;5\u0026gt; try { if (key.isAcceptable()) { ServerSocketChannel server = (ServerSocketChannel) key.channel(); SocketChannel client = server.accept();// \u0026lt;6\u0026gt; System.out.println(\u0026ldquo;Accepted connection from \u0026quot; + client); client.configureBlocking(false); client.register(selector, SelectionKey.OP_WRITE | SelectionKey.OP_READ, ByteBuffer.allocate(100));// \u0026lt;7\u0026gt; } if (key.isReadable()) {// \u0026lt;8\u0026gt; SocketChannel client = (SocketChannel) key.channel(); ByteBuffer output = (ByteBuffer) key.attachment(); client.read(output);// \u0026lt;9\u0026gt; } if (key.isWritable()) {// \u0026lt;10\u0026gt; SocketChannel client = (SocketChannel) key.channel(); ByteBuffer output = (ByteBuffer) key.attachment(); output.flip(); client.write(output);// \u0026lt;11\u0026gt; output.compact(); } } catch (IOException ex) { key.cancel(); try { key.channel().close(); } catch (IOException cex) { } } } } }\npublic static void main(String[] args) throws IOException { new PlainNioEchoServer().serve(9091); } } {% endhighlight %}\nПривязываем сервер к порту Регистрируем канал с селектором для прослушивания событий типа \u0026ldquo;accept\u0026rdquo; Блокируем пока какой-то селектор не сработает Получаем все экземпляры SelectedKey Убираем SelectedKey из итератора Принимаем соединение клиента Регистрируем соединение в селекторе и устанавливаем ByteBuffer Проверяем SelectedKey на чтение Читаем данные в ByteBuffer Проверяем SelectedKey на запись Записываем данные их ByteBuffer в канал Этот пример гораздо сложнее, чем предыдущая версия. Такая сложность - это своего рода компромисс. Асинхронный код обычно сложнее, чем его синхронная версия. Семантически, исходный NIO и NIO.2 API одинаковые, но на самом деле их реализация разная. Далее мы разработаем 3 версию нашего сервера.\nEchoServer, основанный на NIO.2 В отличие от первой реализации NIO, NIO.2 позволяет отлавливать конкретные операции ввода-вывода и завершить их специальным классом-обработчиком (CompletionHandler). Это класс должен выполняется после завершения какой-либо операции. Таким образом он запускается внутренним механизмом NIO и реализация скрыта от разработчика. Так же гарантируется,что только один обработчик будет выполняться для одного канала в один промежуток времени. Этот подход позволяет упростить код, потому что убирается вся сложность работы с многопоточным кодом.\nОсновное различие между NIO и NIO.2 это то, что не требуется самому проверять - произошло ли какое-то событие и вызывать необходимый обработчик. В NIO.2 нужно только запустить IO (input-output) операцию и зарегистрировать обработчик (CompletionHandler), который будет получать уведомления, когда операция завершится. Поэтому необходимость писать свою собственную логику на проверку завершения операция отпадает. Сейчас, давайте посмотрим как будет выглядеть асинхронный EchoServer , реализованный с помощью NIO.2 API.\n{% highlight java %} import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.AsynchronousServerSocketChannel; import java.nio.channels.AsynchronousSocketChannel; import java.nio.channels.CompletionHandler; import java.util.concurrent.CountDownLatch;\npublic class PlainNio2EchoServer {\npublic void serve(int port) throws IOException { System.out.println(\u0026quot;Listening for connections on port \u0026quot; + port); final AsynchronousServerSocketChannel serverChannel = AsynchronousServerSocketChannel.open(); InetSocketAddress address = new InetSocketAddress(port); serverChannel.bind(address); // \u0026lt;1\u0026gt; final CountDownLatch latch = new CountDownLatch(1); serverChannel.accept(null, new CompletionHandler\u0026lt;AsynchronousSocketChannel, Object\u0026gt;() { // \u0026lt;2\u0026gt; @Override public void completed(final AsynchronousSocketChannel channel, Object attachment) { serverChannel.accept(null, this);// \u0026lt;3\u0026gt; ByteBuffer buffer = ByteBuffer.allocate(100); channel.read(buffer, buffer, new EchoCompletionHandler(channel));// \u0026lt;4\u0026gt; } @Override public void failed(Throwable throwable, Object attachment) { try { serverChannel.close();// \u0026lt;5\u0026gt; } catch (IOException e) { // ingnore on close } finally { latch.countDown(); } } }); try { latch.await(); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } } private final class EchoCompletionHandler implements CompletionHandler\u0026lt;Integer, ByteBuffer\u0026gt; { private final AsynchronousSocketChannel channel; EchoCompletionHandler(AsynchronousSocketChannel channel) { this.channel = channel; } @Override public void completed(Integer result, ByteBuffer buffer) { buffer.flip(); channel.write(buffer, buffer, new CompletionHandler\u0026lt;Integer, ByteBuffer\u0026gt;() { // \u0026lt;6\u0026gt; @Override public void completed(Integer result, ByteBuffer buffer) { if (buffer.hasRemaining()) { channel.write(buffer, buffer, this);// \u0026lt;7\u0026gt; } else { buffer.compact(); channel.read(buffer, buffer, EchoCompletionHandler.this);// \u0026lt;8\u0026gt; } } @Override public void failed(Throwable exc, ByteBuffer attachment) { try { channel.close(); } catch (IOException e) { // ingnore on close } } }); } @Override public void failed(Throwable exc, ByteBuffer attachment) { try { channel.close(); } catch (IOException e) { // ingnore on close } } } public static void main(String[] args) throws IOException { new PlainNio2EchoServer().serve(9092); } } {% endhighlight %}\nПривяжем сервер к порту Начинаем принимать новые подключения. Как только соединение установлено - ompletionHandler будет вызван Опять принимаем новый соединения Запускаем операцию чтения из channel, CompletionHandler будет уведомлен, когда что-нибудь будет прочитано Закрываем socket если произошла ошибка Запускаем операцию записи в channel, CompletionHandler будет уведомлен, когда что-нибудь будет записано Запускаем еще раз операцию чтения, если что-то осталось в ByteBuffer Запускаем операцию чтения в channel, CompletionHandler будет уведомлен, когда что-нибудь будет прочитано На первый взгляд может показаться, что в NIO.2 гораздо больше кода, чем в предыдущем примере с NIO. Но можно обратить внимание, что NIO.2 берет обработку многопоточности на себя и также создание так называемого цикла событий (event loop) . Этот подход упрощает разработку многопоточного приложения на NIO, даже если на первый взгляд код кажется сложным. Так как сложность приложений увеличивается, пропасть между этими подходами становится более очевидной, потому что во второй версии получается более читаемый код. Далее мы посмотрим на проблемы, который существуют в обоих реализациях NIO.\nПроблемы с NIO и как Netty решает эти проблемы Далее будут рассмотрены некоторые проблемы и ограничения реализации в Java NIO API, и как Netty решает эти проблемы. Если вы уже используете классы из пакета NIO - это шаг в правильном направлении, но пользователи весьма ограничены в способах его использования. Проблемы, с которыми вы столкнетесь, являются результатом дизайна, который был сделан в прошлом, и который сейчас не так то легко поменять.\nПроблемы кроссплатформенности и совместимости NIO фреймворк довольно низкоуровневый и сильно зависит от того, как сама операционная система обрабатывает операции ввода-вывода. Поэтому выполнить требование унифицированного API в Java, который должен вести себя одинаково на всех платформах, не очень простая задача.\nКогда используешь NIO часто можно заметить, что код хорошо работает под Linux, например, в отличие от Windows. Это утверждение справедливо, кстати, не только для NIO.\n[TIP] Даже если вы не используете NIO, очень важно тестировать ваше приложение на всех операционных системах, которые хотите поддерживать. Если все ваши тесты успешно выполняются на рабочей станции с Linux, удостоверьтесь, что они так же себя ведут и на других ОС. Если не проверили - приготовьтесь к неожиданностям.\nМожет показаться, что NIO.2 поддерживается только в Java 7, и если ваше приложение работает на Java 6, то вы не сможете его использовать. Так же пока еще нет поддержки в NIO.2 каналов, работающих с датаграмами (datagram channels) (для приложений использующих UDP), поэтому использование NIO.2 ограничивается только TCP протоколом. Netty успешно скрывает эту проблему, и предоставляет общий API, который работает одинаково и на Java 6 и на Java 7. Не придется беспокоиться о версии Java, Netty API будет работать одинаково хорошо и предоставлять простой и удобный интерфейс.\nИспользовать ByteBuffer \u0026hellip; или нет Как вы видели ранее, ByteBuffer используется, как контейнер данных. К сожалению, JDK не имеет реализации контейнера ByteBuffer, которая бы позволяла обернуть массив экземпляров ByteBuffer. Эта функциональность бы очень пригодилась для минимизации количества копирований данных. Если вы вдруг решили реализовать эту структуру самостоятельно, не теряйте зря время, ByteBuffer имеет приватный конструктор, и поэтому невозможно от него наследоваться. Netty предоставляет свою реализацию ByteBuffer, которая обходит эти ограничения и предоставляет несколько вариантов конструкторов, методов для ByteBuffer в своем простом API.\nРассеивание данных и сбор (Scattering and gathering may leak) Многие реализации каналов (channel) поддерживают рассеивание данных и сбор (scattering and gathering). Этото функционал позволяет читать и писать из нескольких экземпляров ByteBuffer одновременно, при этом с большей производительностью. Таким способом устроено ядро операционной системы, которое дает большую производительность на чтение/запись, потому что ядро ОС гораздо ближе к \u0026ldquo;железу\u0026rdquo;, и знает как обрабатывать данные наиболее эффективным способом. Рассеивание/сбор часто используется для разделения разных экземпляров ByteBuffer для того, чтобы обрабатывать каждый экземпляр отдельно. Например, если мы захотим, чтобы заголовок находился в одном ByteBuffer, а тело с данными в другом. На рисунке показано как осуществляется рассеивающееся чтение. Мы передаем массив экземпляров ByteBuffer в ScatteringByteChannel и данные \u0026ldquo;рассеиваются\u0026rdquo; с одного канала (channel) к разным буферам.\nСбор (Gathering) работает похожим образом, но данные наоборот - записываются в канал (channel). Вы передаете массив экземпляров ByteBuffer в метод GatheringByteChannel.write() и данные собираются из буферов в канал (channel).\nК сожалению, эта функциональность была сломана до одной из последних обновлений Java 6 и Java 7, использование ее приводило к утечке памяти и OutOfMemoryError. Нужно быть осторожным, когда используешь рассеивание/сбор (scattering/gathering) , и удостовериться что используется необходимая версия Java.\nПодавление известного бага с событием epoll (Squashing the famous epoll bug) На Linux-подобных операционных системах селектор (selector) использует уведомления epoll об IO событиях над объектом. Этот высоко-производительный способ позволят ОС работать асинхронно с сетевым стэком. К сожалению, известный баг с epoll может привести к неправильному состоянию селектора, что приводит к 100% загрузке CPU и бесконечному ожиданию (spinning). Единственный способ восстановить состояние - это пересоздать (recycle) старый селектор и переместить зарегистрированный экземпляр канала в только что созданный селектор. Что же произойдет если метод Selector.select() перестанет блокировать и сразу же вернет результат, даже если ни одного SelectionKeys не будет существовать. Это противоречит тому, что написано в javadoc - Selector.select() must not unblock if nothing is selected. Список проблем с epoll ограничен, и Netty пытается автоматически обнаруживать их и предотвращать. Следующий код демонстрирует баг с epoll:\n{% highlight java %} \u0026hellip; while (true) { int selected = selector.select(); \u0026lt;1\u0026gt; Set readyKeys = selector.selectedKeys(); Iterator iterator = readyKeys.iterator(); \u0026lt;2\u0026gt; while (iterator.hasNext()) { \u0026lt;3\u0026gt; \u0026hellip; \u0026hellip; \u0026lt;4\u0026gt; } } \u0026hellip; {% endhighlight %}\nНе блокирует и возвращает 0, если ничего не было выбрано Получает все SelectedKeys, Iterator будет пуст и ничего выбрано не будет Проходит во всем SelectedKeys из Iterator, но в этот блок кода никогда не зайдет, потому что ничего небудет выбрано Дальнейшая работа В итоге получается что небольшой кусок кода съедает весь CPU.\n{% highlight java %} \u0026hellip; while (true) { \u0026hellip; } \u0026hellip; {% endhighlight %}\nЗначение никогда не будет false, и код зависнет в бесконечном цикле и постепенно выест весь CPU, тем самым вытесняя остальные процессы. Это лишь несколько возможных проблеем, с которому можно столкнуться при использовании неблокирующего ввода-вывода. К сожалению, даже после многих лет разработки в этой области некоторые проблемы еще не решены, и Netty успешно абстрагирует разработчиков от этих проблем.\n","permalink":"https://volyx.in/posts/2015-01-22-netty_in_action-new-imported/","summary":"В выпуске тонкости экзекъютор сервисов, сохранение объектов в Редис и способы упаковки приложения в исполняемый архив.","title":"Обзор книги Netty in Action"},{"content":"image::../../img/learning_openshift.jpg[]\nАнализировать зависимости в вашем мавен проекте можно с помощью команды dependency:analyze.\nAnalyze your Maven Project Dependencies with dependency:analyze When working on a larger Maven project it might happen that you lose track of the dependecies in your project. Over time you are adding new dependencies, remove code or move code to modules so some of the dependencies become obsolete. Though I did lots of Maven projects I have to admit I didn\u0026rsquo;t know until recently that the dependency plugin contains a useful goal for solving this problem: dependency:analyze.\nThe dependency:analyze mojo can find dependencies that are declared for your project but are not necessary. Additionally it can find dependecies that are used but are undeclared, which happens when you are directly using transitive dependencies in your code.\nAnalyzing Dependencies I am showing an example with the Odftoolkit project. It contains quite some dependencies and is old enough that some of them are outdated. ODFDOM is the most important module of the project, providing low level access to the Open Document structure from Java code. Running mvn dependency:tree we can see its dependencies at the time of writing:\n[source] mvn dependency:tree [INFO] Scanning for projects\u0026hellip; [INFO] [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] Building ODFDOM 0.8.10-incubating-SNAPSHOT [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] [INFO] \u0026mdash; maven-dependency-plugin:2.1:tree (default-cli) @ odfdom-java \u0026mdash; [INFO] org.apache.odftoolkit:odfdom-java:jar:0.8.10-incubating-SNAPSHOT [INFO] +- org.apache.odftoolkit:taglets:jar:0.8.10-incubating-SNAPSHOT:compile [INFO] | - com.sun:tools:jar:1.7.0:system [INFO] +- xerces:xercesImpl:jar:2.9.1:compile [INFO] | - xml-apis:xml-apis:jar:1.3.04:compile [INFO] +- junit:junit:jar:4.8.1:test [INFO] +- org.apache.jena:jena-arq:jar:2.9.4:compile [INFO] | +- org.apache.jena:jena-core:jar:2.7.4:compile [INFO] | +- commons-codec:commons-codec:jar:1.5:compile [INFO] | +- org.apache.httpcomponents:httpclient:jar:4.1.2:compile [INFO] | +- org.slf4j:jcl-over-slf4j:jar:1.6.4:compile [INFO] | +- org.apache.httpcomponents:httpcore:jar:4.1.3:compile [INFO] | +- org.slf4j:slf4j-api:jar:1.6.4:compile [INFO] | +- org.slf4j:slf4j-log4j12:jar:1.6.4:compile [INFO] | - log4j:log4j:jar:1.2.16:compile [INFO] +- org.apache.jena:jena-core:jar:tests:2.7.4:test [INFO] +- net.rootdev:java-rdfa:jar:0.4.2:compile [INFO] | - org.apache.jena:jena-iri:jar:0.9.1:compile [INFO] - commons-validator:commons-validator:jar:1.4.0:compile [INFO] +- commons-beanutils:commons-beanutils:jar:1.8.3:compile [INFO] +- commons-digester:commons-digester:jar:1.8:compile [INFO] - commons-logging:commons-logging:jar:1.1.1:compile [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] BUILD SUCCESS [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] Total time: 1.877s [INFO] Finished at: Mon Jan 20 00:41:05 CET 2014 [INFO] Final Memory: 13M/172M [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; The project contains some direct dependencies with a lot of transitive dependencies. When running mvn dependency:analyze on the project we will see that our dependencies don\u0026rsquo;t seem to be correct:\nmvn dependency:analyze [INFO] Scanning for projects\u0026hellip; [INFO] [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] Building ODFDOM 0.8.10-incubating-SNAPSHOT [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] [\u0026hellip;] [INFO] \u0026laquo;\u0026lt; maven-dependency-plugin:2.1:analyze (default-cli) @ odfdom-java \u0026laquo;\u0026lt; [INFO] [INFO] \u0026mdash; maven-dependency-plugin:2.1:analyze (default-cli) @ odfdom-java \u0026mdash; [WARNING] Used undeclared dependencies found: [WARNING] org.apache.jena:jena-core:jar:2.7.4:compile [WARNING] xml-apis:xml-apis:jar:1.3.04:compile [WARNING] Unused declared dependencies found: [WARNING] org.apache.odftoolkit:taglets:jar:0.8.10-incubating-SNAPSHOT:compile [WARNING] org.apache.jena:jena-arq:jar:2.9.4:compile [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] BUILD SUCCESS [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; [INFO] Total time: 4.769s [INFO] Finished at: Mon Jan 20 00:43:27 CET 2014 [INFO] Final Memory: 28M/295M [INFO] \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; The second part of the warnings is easier to understand; we have declared some dependencies that we are never using, the taglets and jena-arq. When comparing this with the output we got above you will notice that the largest set of transitive dependencies was imported by the jena-arq dependency. And we don\u0026rsquo;t even need it.\nThe first part seems to be more difficult: there are two used but undeclared dependencies found. What does it mean? Shouldn\u0026rsquo;t compiling fail if there are any dependencies that are undeclared? No, it just means that we are directly using a transitive dependency from our code which we should better declare ourselves.\nBreaking the Build on Dependency Problems If you want to find problems with your dependencies as early as possible it\u0026rsquo;s best to integrate the check in your build. The dependency:analyze goal we have seen above is meant to be used in a standalone way, for automatic execution there is the analyze-only mojo. It automatically binds to the verify phase and can be declared like this:\nA final word of caution: the default analyzer works on the bytecode level so in special cases it might not notice a dependency correctly, e.g. when you are using constants from a dependency that are inlined.\n","permalink":"https://volyx.in/posts/2015-01-12-maven_dependency-new-imported/","summary":"123","title":"Maven Dependencies"},{"content":"image::../../img/learning_openshift.jpg[]\nhttps://www.openshift.com/[Openshift] was attractive for me in early days their beginnings. I\u0026rsquo;m really now don\u0026rsquo;t remember when my first application was deployed. Over the years I was seeing many other PaaS, but every time when I was touching their, and when unexpectedly I was needing to quick deploying of my java application - I was returning back after some time. As for me, i think, it\u0026rsquo;s most comfortable service for quick deployment and prototyping your applications.\nOver this years he is growing up and start supporting many frameworks and technologies . Naturally, I\u0026rsquo;m was especially interested in such projects as apache tomcat, jboss eap, mysql, mongodb. Full list of supported technologies you can see in https://marketplace.openshift.com/home[openshift market]\nWhen i was getting offer to write small review on book https://www.packtpub.com/virtualization-and-cloud/learning-openshift[Learning Openshift] I don\u0026rsquo;t thinking a lot and quickly agree, because it was curious for me: \u0026ldquo;Could be that I skipped something very important for me about openshift?\u0026rdquo;.\nSince I consider myself a very experienced user https://www.openshift.com/[openshift], bronze plan, after all. I briefly ran the first chapter, because all of these steps to configure many times I cranked on different machines, their home and knew almost by heart. My attention was drawn to Chapter 6, which shows an example of the rapid development of java-application using spring, mongodb. An example of how quickly write such an application and I would like to bring here. Materials taken from books.\nFor the impatient http://mlbparks-onpaas.rhcloud.com/ here\u0026rsquo;s an example of what happens in the end application. If a site does not start immediately - refresh a few times, it happens.\nAnd of course the shortest and most guide how to make a similar application and picture to be interested.\nimage::../../img/learning_openshift_1.jpg[]\n[source,bash] $ rhc app create springmlb tomcat7 mongodb-2.4 \u0026ndash;from-code https://github.com/gshipley/springmlb.git This is for those who have already registered and established in openshift rhc, ask for others to follow here https://developers.openshift.com/en/overview-what-is-openshift.html. This is not difficult.\nAfter the command to connect to our application using ssh for this in the console run the command.\n[source,bash] $ rhc app ssh springmlb https://developers.openshift.com/en/managing-remote-connection.html[Документация по ключам ssh]\nAfter we connect to our car load json data file and save it in a folder / tmp on the remote machine. To do this, run the command:\n[source,bash] $ cd /tmp $ wget https://raw.github.com/gshipley/springmlb/master/mlbparks.json Import everything in Mongo [source,bash] $ mongoimport \u0026ndash;jsonArray -d $OPENSHIFT_APP_NAME -c teams \u0026ndash;type json \u0026ndash;file /tmp/mlbparks.json -h $OPENSHIFT_MONGODB_DB_HOST \u0026ndash;port $OPENSHIFT_MONGODB_DB_PORT -u $OPENSHIFT_MONGODB_DB_USERNAME -p $OPENSHIFT_MONGODB_DB_PASSWORD Then you can check by going to the appropriate url\nimage::../../img/learning_openshift_2.jpg[]\nJust a very good example of the development of similar applications is here https://blog.openshift.com/day-22-developing-single-page-applications-with-spring-mongodb-and-angularjs/[developing-single-page-applications-with-spring-mongodb-and-angularjs] This blog author https://github.com/shekhargulati[Shekhar Gulati], he has a very interesting https://blog.openshift.com/learning-30-technologies-in-30-days-a-developer-challenge/ [series of articles] in which it within 30 days of developing one application per day, using openshift.\n","permalink":"https://volyx.in/posts/2015-01-12-learning_openshift_eng-new-imported/","summary":"\u003cp\u003eimage::../../img/learning_openshift.jpg[]\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.openshift.com/%5BOpenshift%5D\"\u003ehttps://www.openshift.com/[Openshift]\u003c/a\u003e was attractive for me in early days their beginnings. I\u0026rsquo;m really now don\u0026rsquo;t remember when my first application was deployed. Over the years I was seeing many other PaaS, but every time when I was touching their, and when unexpectedly I was needing to quick deploying of my java application - I was returning back after some time. As for me, i think, it\u0026rsquo;s most comfortable service for quick deployment and prototyping your applications.\u003c/p\u003e","title":"Reviewing book Learning OpenShift"},{"content":"После предисловия (Глава 1), книга разделена на четыре части:\nОсновы. Первая часть (Глава 2-5) сфокусирована на основные концепции многопоточности и потокобезопасности, а так же на том, как из многопоточных блоков ,представленных библиотеками классов Java, составлять свои потокобезопасные классы. Так же в первой части вы найдете шпаргалку, суммирующую самые важные правила, приведенные в первой части.\nГлавы 2 и 3 (Потокобезопасность Thread Safety ,Обмен объектами Sharing Objects) составляют основу этой книги. Так же в них находятся все правила, которые позволяют избежать многопоточных опасностей, учат правильно создавать потокобезопасные классы, и проверяют на потокобезопасность. У читателей, которые предпочитают теории практику, может появиться соблазн пропустить Часть 2, но не забудьте вернуться к Главам 2-3 перед тем, как начать писать многопоточный код.\nГлава 4 рассказывает о том, как составлять из отдельных потокобезопасных классов более большие потокобезопасные конструкции.\nГлава 5 рассказывает о многопоточных реализациях коллекций и синхранизаторов, поставляемых самой Java.\nЧасть 2 посвящена структурированию многопоточных приложений. Рассказыват, как используя потоки увеличить пропускную способность и \u0026ldquo;отзывчивость\u0026rdquo; многопоточных приложений.\nChapter 4 (Composing Objects) covers techniques for composing threadͲsafe classes into larger threadͲsafe classes.\nChapter 5 (Building Blocks) covers the concurrent building blocksͲthreadͲsafe collections and synchronizersͲprovided by the platform libraries. Structuring Concurrent Applications. Part II (Chapters 6Ͳ9) describes how to exploit threads to improve the throughput or responsiveness of concurrent applications. Chapter 6 (Task Execution) covers identifying parallelizable tasks and executing them within the taskͲexecution framework. Chapter 7 (Cancellation and Shutdown) deals with techniques for convincing tasks and threads to terminate before they would normally do so; how programs deal with cancellation and shutdown is often one of the factors that separate truly robust concurrent applications from those that merely work. Chapter 8 (Applying Thread Pools) addresses some of the more advanced features of the taskͲexecution framework. Chapter 9 (GUI Applications) focuses on techniques for improving responsiveness in singleͲthreaded subsystems. Liveness, Performance, and Testing. Part III (Chapters 10Ͳ12) concerns itself with ensuring that concurrent programs actually do what you want them to do and do so with acceptable performance. Chapter 10 (Avoiding Liveness Hazards) describes how to avoid liveness failures that can prevent programs from making forward progress. Chapter 11 (Performance and Scalability) covers techniques for improving the performance and scalability of concurrent code. Chapter 12 (Testing Concurrent Programs) covers techniques for testing concurrent code for both correctness and performance. Advanced Topics. Part IV (Chapters 13Ͳ16) covers topics that are likely to be of interest only to experienced developers: explicit locks, atomic variables, nonͲblocking algorithms, and developing custom synchronizers. Co\n","permalink":"https://volyx.in/posts/2015-01-12-concurrency_in_practice-new-imported/","summary":"by Brian Goetz, Tim Peierls, Joshua Bloch, Joseph Bowbeer, David Holmes, Doug Lea. I was fortunate indeed to have worked with a fantastic team on the design and implementation of the concurrency features added to the Java platform in Java 5.0 and Java 6. Now this same team provides the best explanation yet of these new features, and of concurrency in general. Concurrency is no longer a subject for advanced users only. Every Java developer should read this book. \u0026ndash;Martin Buchholz","title":"Обзор книги Java Concurrency in Practice"},{"content":"Мне приглянулся openshift с самого начала. Я уже не помню, когда я первый раз задеплоил туда свое первое приложение. На протяжении всех этих лет я конечно поглядывал одним глазком на конкурентов, но каждый раз, когда мне неожиданно нужен был сервис для развертывания java-приложения, я непременно вспоминал про openshift и возвращался назад. По мне, так это самый удобный сервис для быстрого деплоя, прототипированя ваших приложений.\nС годами Openshift заматерел, обзавелся поддержкой большого количества фрэймворков и технологий. Мне естественно нравятся java штуки, который предоставляет openshift - всякие apache tomcat, jboss eap и моя любимая mongodb. Полный список технологий можно поcмотреть тут https://marketplace.openshift.com/home.\nКогда мне предложили написать ревью на книгу Learning Openshift я сразу согласился, потому что меня разрывало любопытство, что может быть я пропутил что-то очень важное в опешифте и непременно нужно это узнать.\nТак как я считаю себя весьма опытным пользователем openshift, бронзовый план все-таки. То я бегло пробежал первые главы, потому что все эти шаги по настройки я много раз проворачивал на разных своих домашних машинах и знал почти наизусть. Мое внимание привлекла глава 6, в которой показывался пример быстрой разработки java-приложения с использованием spring, mongodb. Пример как быстро написать такое приложение я и хотел бы здесь привести. Материалы взяты из книги.\nДля нетерпеливых http://mlbparks-onpaas.rhcloud.com/ вот пример того, какое приложение получится в итоге. Если сайт сразу не загрузится - обновите несколько раз, такое бывает.\nНу и конечно и самое кратчайшее руководство, как сделать аналогичное приложение и картинка чтобы заинтересовать.\n{% highlight bash %} $ rhc app create springmlb tomcat7 mongodb-2.4 \u0026ndash;from-code https://github.com/gshipley/springmlb.git {% endhighlight %}\nЭто для тех кто уже зарегистрировался в openshift и установил rhc, для остальных сюда Это не сложно.\nПосле выполненой команды подключимся к нашему приложении с помощью ssh для этого в консоли нужно выполнить команду\n{% highlight bash %} $ rhc app ssh springmlb {% endhighlight %}\nДокументация по ключам ssh\nПосле того как мы подключились к нашей машине загрузим json файл с данными и сохраним в папке /tmp на удаленной машине. Для этого выполним команду:\n{% highlight bash %} $ cd /tmp $ wget https://raw.github.com/gshipley/springmlb/master/mlbparks.json {% endhighlight %}\n{% highlight bash %} $ mongoimport \u0026ndash;jsonArray -d $OPENSHIFT_APP_NAME -c teams \u0026ndash;type json \u0026ndash;file /tmp/mlbparks.json -h $OPENSHIFT_MONGODB_DB_HOST \u0026ndash;port $OPENSHIFT_MONGODB_DB_PORT -u $OPENSHIFT_MONGODB_DB_USERNAME -p $OPENSHIFT_MONGODB_DB_PASSWORD {% endhighlight %}\nПотом можно проверить, зайдя по соответствующему url\nВот собственно и все! Более подробную информацию можно увидеть в книге https://www.packtpub.com/virtualization-and-cloud/learning-openshift\nТак же очень хороший пример разработки похожего приложения находится тут developing-single-page-applications-with-spring-mongodb-and-angularjs\nЭто блог разработчика Shekhar Gulati, у него есть очень интересный цикл статей, в котором он в течении 30 дней разрабатывает по одному приложению в день с используя openshift\n","permalink":"https://volyx.in/posts/2015-01-12-learning-openshift-new-imported/","summary":"\u003cp\u003eМне приглянулся openshift с самого начала. Я уже не помню, когда я первый раз задеплоил туда свое первое приложение. На протяжении всех этих лет я конечно поглядывал одним глазком на конкурентов, но каждый раз, когда мне неожиданно нужен был сервис для развертывания java-приложения, я непременно вспоминал про openshift и возвращался назад. По мне, так это самый удобный сервис для быстрого деплоя, прототипированя ваших приложений.\u003c/p\u003e\n\u003cp\u003eС годами \u003ca href=\"https://www.openshift.com\"\u003eOpenshift\u003c/a\u003e заматерел, обзавелся поддержкой большого количества фрэймворков и технологий. Мне естественно нравятся java штуки, который предоставляет openshift - всякие apache tomcat, jboss eap и моя любимая mongodb. Полный список технологий можно поcмотреть тут \u003ca href=\"https://marketplace.openshift.com/home\"\u003ehttps://marketplace.openshift.com/home\u003c/a\u003e.\u003c/p\u003e","title":"Обзор книги Learning OpenShift"},{"content":"С годами https://www.openshift.com/[Openshift] заматерел, обзавелся поддержкой большого количества фрэймворков и технологий. Мне естественно нравятся java штуки, который предоставляет openshift - всякие apache tomcat, jboss eap и моя любимая mongodb. Полный список технологий можно поcмотреть тут https://marketplace.openshift.com/home.\nКогда мне предложили написать ревью на книгу https://www.packtpub.com/virtualization-and-cloud/learning-openshift[Learning Openshift] я сразу согласился, потому что меня разрывало любопытство, что может быть я пропутил что-то очень важное об openshift и непременно нужно это узнать.\nТак как я считаю себя весьма опытным пользователем https://www.openshift.com/[openshift], бронзовый план все-таки. То я бегло пробежал первые главы, потому что все эти шаги по настройки я много раз проворачивал на разных своих домашних машинах и знал почти наизусть. Мое внимание привлекла глава 6, в которой показывался пример быстрой разработки java-приложения с использованием spring, mongodb. Пример как быстро написать такое приложение я и хотел бы здесь привести. Материалы взяты из книги.\nДля нетерпеливых http://mlbparks-onpaas.rhcloud.com/ вот пример того, какое приложение получится в итоге. Если сайт сразу не загрузится - обновите несколько раз, такое бывает.\nНу и конечно и самое кратчайшее руководство, как сделать аналогичное приложение и картинка чтобы заинтересовать.\nimage::../../img/learning_openshift_1.jpg[]\n[source,bash] $ rhc app create springmlb tomcat7 mongodb-2.4 \u0026ndash;from-code https://github.com/gshipley/springmlb.git Это для тех кто уже зарегистрировался в openshift и установил rhc, для остальных прошу следовать сюда https://developers.openshift.com/en/overview-what-is-openshift.html. Это не сложно.\nПосле выполненой команды подключимся к нашему приложении с помощью ssh для этого в консоли нужно выполнить команду\n[source,bash] $ rhc app ssh springmlb https://developers.openshift.com/en/managing-remote-connection.html[Документация по ключам ssh]\nПосле того как мы подключились к нашей машине загрузим json файл с данными и сохраним в папке /tmp на удаленной машине. Для этого выполним команду:\n[source,bash] $ cd /tmp $ wget https://raw.github.com/gshipley/springmlb/master/mlbparks.json Импортнем все в монгу [source,bash] $ mongoimport \u0026ndash;jsonArray -d $OPENSHIFT_APP_NAME -c teams \u0026ndash;type json \u0026ndash;file /tmp/mlbparks.json -h $OPENSHIFT_MONGODB_DB_HOST \u0026ndash;port $OPENSHIFT_MONGODB_DB_PORT -u $OPENSHIFT_MONGODB_DB_USERNAME -p $OPENSHIFT_MONGODB_DB_PASSWORD Потом можно проверить, зайдя по соответствующему url\nimage::../../img/learning_openshift_2.jpg[]\nВот собственно и все! Более подробную информацию можно увидеть в книге https://www.packtpub.com/virtualization-and-cloud/learning-openshift\nТак же очень хороший пример разработки похожего приложения находится тут https://blog.openshift.com/day-22-developing-single-page-applications-with-spring-mongodb-and-angularjs/[developing-single-page-applications-with-spring-mongodb-and-angularjs] Это блог разработчика https://github.com/shekhargulati[Shekhar Gulati], у него есть очень интересный https://blog.openshift.com/learning-30-technologies-in-30-days-a-developer-challenge/[цикл статей], в котором он в течении 30 дней разрабатывает по одному приложению в день с используя openshift\n","permalink":"https://volyx.in/posts/2015-01-12-learning_openshift-new-imported/","summary":"Мне очень приглянулся openshift с самого начала. Я уже не помню, когда я первый раз задеплоил туда свое первое приложение. На протяжении всех этих лет я конечно поглядывал одним глазком на конкурентов, но каждый раз, когда мне неожиданно нужен был сервис для развертывания java-приложения, я непременно вспоминал про openshift и возвращался назад. По мне, так это самый удобный сервис для быстрого деплоя, прототипированя ваших приложений.","title":"Обзор книги Learning OpenShift"},{"content":"\nВ файле какого-нибудь изображения хранится очень много всякой полезной информации, например: дата съемки, размеры, всякие уровни компресии, марка и модель фотоаппарата и т д \u0026hellip; Хотелось бы как-то получить ее в java\nВсе это в java можно вытащить с помощью удобной библиотеки metadata-extractor. Она умеет понимать следущие форматы:\nExif IPTC XMP JFIF / JFXX ICC Profiles Photoshop fields PNG properties BMP properties GIF properties Например вот Exif\nА вот краткий пример на groovy, который позволяет получить достаточно много информации\n{% highlight groovy %} @Grapes( @Grab(group=\u0026lsquo;com.drewnoakes\u0026rsquo;, module=\u0026lsquo;metadata-extractor\u0026rsquo;, version=\u0026lsquo;2.7.0\u0026rsquo;) )\nimport com.drew.metadata.; import com.drew.metadata.exif.; import com.drew.imaging.ImageMetadataReader;\nFile jpegFile = new File(\u0026ldquo;C:\\Users\\Public\\Pictures\\Sample Pictures\\Koala.jpg\u0026rdquo;); Metadata metadata = ImageMetadataReader.readMetadata(jpegFile);\nfor (Directory directory : metadata.getDirectories()) { for (Tag tag : directory.getTags()) { System.out.println(tag); } }\n// obtain the Exif directory ExifSubIFDDirectory directory = metadata.getDirectory(ExifSubIFDDirectory.class);\n// query the tag\u0026rsquo;s value Date date = directory.getDate(ExifSubIFDDirectory.TAG_DATETIME_ORIGINAL);\nprintln ExifSubIFDDirectory.TAG_DATETIME_ORIGINAL + \u0026ldquo;=\u0026rdquo; + date {% endhighlight %}\n{% highlight bash %} [JPEG] Compression Type - Baseline [JPEG] Data Precision - 8 bits [JPEG] Image Height - 768 pixels [JPEG] Image Width - 1024 pixels [JPEG] Number of Components - 3 [JPEG] Component 1 - Y component: Quantization table 0, Sampling factors 1 horiz/1 vert [JPEG] Component 2 - Cb component: Quantization table 1, Sampling factors 1 horiz/1 vert [JPEG] Component 3 - Cr component: Quantization table 1, Sampling factors 1 horiz/1 vert [JFIF] Version - 1.2 [JFIF] Resolution Units - inch [JFIF] X Resolution - 96 dots [JFIF] Y Resolution - 96 dots [Exif IFD0] Date/Time - 2009:03:12 13:48:28 [Exif IFD0] Artist - Corbis [Exif IFD0] Unknown tag (0x4746) - 4 [Exif IFD0] Unknown tag (0x4749) - 63 [Exif IFD0] Windows XP Author - ?? ???? [Exif IFD0] Unknown tag (0xea1c) - [2036 bytes] [Exif SubIFD] Date/Time Original - 2008:02:11 11:32:43 [Exif SubIFD] Date/Time Digitized - 2008:02:11 11:32:43 [Exif SubIFD] Sub-Sec Time Original - 17 [Exif SubIFD] Sub-Sec Time Digitized - 17 [Exif SubIFD] Unknown tag (0xea1c) - [1972 bytes] [Exif Thumbnail] Thumbnail Compression - JPEG (old-style) [Exif Thumbnail] X Resolution - 72 dots per unit [Exif Thumbnail] Y Resolution - 72 dots per unit [Exif Thumbnail] Thumbnail Offset - 313 bytes [Exif Thumbnail] Thumbnail Length - 4834 bytes [Xmp] Rating - 4.0 [Adobe JPEG] DCT Encode Version - 1 [Adobe JPEG] Flags 0 - 0 [Adobe JPEG] Flags 1 - 0 [Adobe JPEG] Color Transform - YCbCr 36867=Mon Feb 11 11:32:43 FET 2008 {% endhighlight %}\n","permalink":"https://volyx.in/posts/2014-12-18-metaextractor-new-imported/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/metadata.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eВ файле какого-нибудь изображения хранится очень много всякой полезной информации, например: дата съемки, размеры, всякие уровни компресии, марка и модель фотоаппарата и т д \u0026hellip; Хотелось бы как-то получить ее в java\u003c/p\u003e\n\u003cp\u003eВсе это в java можно вытащить с помощью удобной библиотеки \u003ca href=\"https://github.com/drewnoakes/metadata-extractor\"\u003emetadata-extractor\u003c/a\u003e. Она умеет понимать следущие форматы:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Exchangeable_image_file_format\"\u003eExif\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/IPTC\"\u003eIPTC\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Extensible_Metadata_Platform\"\u003eXMP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/JPEG_File_Interchange_Format\"\u003eJFIF / JFXX\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/ICC_profile\"\u003eICC\u003c/a\u003e Profiles\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Photoshop\"\u003ePhotoshop\u003c/a\u003e fields\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Portable_Network_Graphics\"\u003ePNG\u003c/a\u003e properties\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/BMP_file_format\"\u003eBMP\u003c/a\u003e properties\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://en.wikipedia.org/wiki/Graphics_Interchange_Format\"\u003eGIF\u003c/a\u003e properties\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eНапример вот \u003ca href=\"http://en.wikipedia.org/wiki/Exchangeable_image_file_format\"\u003eExif\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/Exif.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003eА вот краткий пример на \u003ccode\u003egroovy\u003c/code\u003e, который позволяет получить достаточно много информации\u003c/p\u003e","title":"Получение метаданых о фотографии"},{"content":"Белая береза Под моим окном Принакрылась снегом, Точно серебром.\nНа пушистых ветках Снежною каймой Распустились кисти Белой бахромой.\nИ стоит береза В сонной тишине, И горят снежинки В золотом огне.\nА заря, лениво Обходя кругом, Обсыпает ветки Новым серебром.\n‹1913›\n","permalink":"https://volyx.in/posts/2014-12-15-poem/","summary":"\u003cp\u003eБелая береза\nПод моим окном\nПринакрылась снегом,\nТочно серебром.\u003c/p\u003e\n\u003cp\u003eНа пушистых ветках\nСнежною каймой\nРаспустились кисти\nБелой бахромой.\u003c/p\u003e\n\u003cp\u003eИ стоит береза\nВ сонной тишине,\nИ горят снежинки\nВ золотом огне.\u003c/p\u003e\n\u003cp\u003eА заря, лениво\nОбходя кругом,\nОбсыпает ветки\nНовым серебром.\u003c/p\u003e\n\u003cp\u003e‹1913›\u003c/p\u003e","title":"Береза — Есенин Сергей Александрович"},{"content":"Cтруктура, известная у программистов как дерево, используется довольно часто. Соответственно, так же часто возникает проблема отладки кода, который работает с этой структурой. Очень удобно иметь под рукой удобный метод \u0026ldquo;toString()\u0026rdquo;, который нарисует это дерево, например в консоли в графическом виде.\nПечатает дерево в консоли, с помощью System.out {% highlight java %}\npublic void print(TreeNode root) { print(root, \u0026ldquo;\u0026rdquo;, true); }\nprivate void print(TreeNode root, String prefix, boolean isTail) { System.out.println(prefix + (isTail ? \u0026ldquo;└── \u0026quot; : \u0026ldquo;├── \u0026ldquo;) + root.toString()); List children = Collections.list(root.children()); for (int i = 0; i \u0026lt; children.size() - 1; i++) { print(children.get(i), prefix + (isTail ? \u0026quot; \u0026quot; : \u0026ldquo;│ \u0026ldquo;), false); } if (children.size() \u0026gt; 0) { print(children.get(children.size() - 1), prefix + (isTail ? \u0026quot; \u0026quot; : \u0026ldquo;│ \u0026ldquo;), true); } } {% endhighlight %}\nВывод: {% highlight java %} └── rootFakeNode └── lock0 ├── branchName0 └── lock1 ├── branchName0 └── lock0 └── branchName0 {% endhighlight %} Вау, красотища!!!\n","permalink":"https://volyx.in/posts/2014-12-02-print-tree-new-imported/","summary":"\u003cp\u003eCтруктура, известная у программистов как дерево, используется довольно часто. Соответственно, так же часто возникает проблема отладки кода, который работает с этой структурой. Очень удобно иметь под рукой удобный метод \u0026ldquo;toString()\u0026rdquo;, который нарисует это дерево, например в консоли в графическом виде.\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/print-tree.png\"\u003e\u003c/p\u003e\n\u003cp\u003eПечатает дерево в консоли, с помощью System.out\n{% highlight java %}\u003c/p\u003e\n\u003cp\u003epublic void print(TreeNode root) {\nprint(root, \u0026ldquo;\u0026rdquo;, true);\n}\u003c/p\u003e\n\u003cp\u003eprivate void print(TreeNode root, String prefix, boolean isTail) {\nSystem.out.println(prefix + (isTail ? \u0026ldquo;└── \u0026quot; : \u0026ldquo;├── \u0026ldquo;) + root.toString());\nList\u003c!-- raw HTML omitted --\u003e children = Collections.list(root.children());\nfor (int i = 0; i \u0026lt; children.size() - 1; i++) {\nprint(children.get(i), prefix + (isTail ? \u0026quot;    \u0026quot; : \u0026ldquo;│   \u0026ldquo;), false);\n}\nif (children.size() \u0026gt; 0) {\nprint(children.get(children.size() - 1), prefix + (isTail ? \u0026quot;    \u0026quot; : \u0026ldquo;│   \u0026ldquo;), true);\n}\n}\n{% endhighlight %}\u003c/p\u003e","title":"Красивишная печать дерева в консоль TreeNode"},{"content":"Если посмотреть определени замыкания в link:http://bit.ly/15CgKnT[википедии], то мы увидем следующее:\n.Замыкание\nЗамыкание (англ. closure) в программировании — функция, в теле которой присутствуют ссылки на переменные, объявленные вне тела этой функции в окружающем коде и не являющиеся её параметрами. Говоря другим языком, замыкание — функция, которая ссылается на свободные переменные в своём контексте.\nНаверное, самый простой способ понять, что такое замыкание, это представить его в виде переменной, которая имеет супер-возможность - доступ к другим локальным перменным, объявленным в той же области видимости, что и само замыкание.\nДавайте сразу же посмотрим пример на javascript\u0026rsquo;e [source,javascript] var setKeyPress = function(callback) { document.onkeypress = callback; }\nvar initialize = function() { var black = false; # \u0026lt;1\u0026gt; document.onclick = function() { black = !black; document.body.style.backgroundColor = black ? \u0026ldquo;#000000\u0026rdquo; : \u0026ldquo;transparent\u0026rdquo;; }\nvar displayValOfBlack = function() { alert(black); } setKeyPress(displayValOfBlack); };\ninitialize(); Функция \u0026lt;1\u0026gt;, присвоенная к полям-функциям document.onclick, и функция displayValOfBlack - функции-замыкания. Заметьте, что они обе имеют ссылки на булеву переменную black, но эта перменная инициализируется не в теле функции. Из-за того, что black является локальной переменной по отношению к той области видимости, где определена функция, мы можем получить доступ до нее.\nЗамыкание, так же как и экземпляр объекта, есть способ представления функциональности и данных, связанных и упакованных вместе.\nIf you put this in an HTML page:\nClick to change to black Hit [enter] to see \u0026ldquo;true\u0026rdquo; Click again, changes back to white Hit [enter] to see \u0026ldquo;false\u0026rdquo; This demonstrates that both have access to the same black, and can be used to store state without any wrapper object.\nThe call to setKeyPress is to demonstrate how a function can be passed just like any variable. The scope preserved in the closure is still the one where the function was defined.\nClosures are commonly used as event handlers, especially in JavaScript and ActionScript. Good use of closures will help you implicitly bind variables to event handlers without having to create an object wrapper. However, careless use will lead to memory leaks (such as when an unused but preserved event handler is the only thing to hold on to large objects in memory, especially DOM objects, preventing garbage collection).\nЗамыкание — это особый вид функции. Она определена в теле другой функции и создаётся каждый раз во время её выполнения. Синтакстически это выглядит как функция, находящаяся целиком в теле другой функции. При этом вложенная внутренняя функция содержит ссылки на локальные переменные внешней функции. Каждый раз при выполнении внешней функции происходит создание нового экземпляра внутренней функции, с новыми ссылками на переменные внешней функции.\n","permalink":"https://volyx.in/posts/2014-11-18-closure-new-imported/","summary":"Добавить новое поведение в существующий метод легко, но часто это бывает не совсем верным решением. Когда изначально создается какой-то метод, то он обычно делает строго одно действие. Любое добавление нового кода выглядит немного подозрительно. Скорее всего, вы добавляете новый код, потому что хотите, чтобы он выполнялся в одно время с уже существующим кодом.","title":"Замыкания"},{"content":"Простой кейс: у вас лежит где-то папка с фотографиями, которые используются в блоге и жестко \u0026ldquo;закодированны\u0026rdquo;, но размер их очень большой. Загрузка страницы занимает около МИНУТЫ! Итак, ваша задача изменить параметры каждой фотки, не меняя названия и к тому же сохранить исходные фотографии. Можно конечно надолго зависнуть в интернете и потратить время на изучение и опробование разных готовых бесплатных программ, или можно быстро на коленке написать свое решение например на groovy!\nПолезные штуки если вы зашли сюда случайно.\nСкачать Groovy Веб-консоль, чтобы потренироваться и понять что такое groovy Менеджер зависимостей Grape, по типу maven, gradle. Динамически подгружает необходимые библиотеки для скрипта. Сразу к делу, вот итоговый скрипт:\n{% highlight groovy %}\n@Grapes( @Grab(group=\u0026lsquo;org.imgscalr\u0026rsquo;, module=\u0026lsquo;imgscalr-lib\u0026rsquo;, version=\u0026lsquo;4.2\u0026rsquo;) ) import static org.imgscalr.Scalr.*; import org.imgscalr.Scalr; import javax.imageio.ImageIO; import javax.imageio.IIOException; import java.awt.image.BufferedImage;\ndef srcFolder = \u0026ldquo;src\u0026rdquo;; // Из какой папки берем фотки def destFolder = srcFolder + \u0026ldquo;/result/\u0026rdquo;; //В какую складываем\nBufferedImage img = null; def amount = 0 new File(srcFolder).eachFile() { f -\u0026gt;\ntry { img = ImageIO.read(f); } catch (IOException e) { println \u0026quot;IOException \u0026quot; + f.getName() return; } catch (IIOException ei) { println \u0026quot;IIOException\u0026quot; return; } if (img == null) return; BufferedImage thumbnail = Scalr.resize(img, 1000); File outputfile = new File(destFolder + f.getName()); ImageIO.write(thumbnail, \u0026quot;jpg\u0026quot;, outputfile); println \u0026quot;Path \u0026quot; + outputfile.toURL(); amount++; }\nprintln amount + \u0026quot; images resized\u0026quot;\n{% endhighlight %}\n","permalink":"https://volyx.in/posts/2014-11-10-image-resize-groovy-new-imported/","summary":"\u003cp\u003eПростой кейс: у вас лежит где-то папка с фотографиями, которые используются в блоге и жестко \u0026ldquo;закодированны\u0026rdquo;, но размер их очень большой. Загрузка страницы занимает около МИНУТЫ! Итак, ваша задача изменить параметры каждой фотки, не меняя названия и к тому же сохранить исходные фотографии. Можно конечно надолго зависнуть в интернете и потратить время на изучение и опробование разных готовых бесплатных программ, или можно быстро на коленке написать свое решение например на groovy!\u003c/p\u003e","title":"Изменить размер фотографий с помощью groovy и imgscalr"},{"content":"Давайте опять вернемся к нашему классу Employee [source,java] class Employee { public void pay() { Money amount = new Money(); for (Iterator it = timecards.iterator(); it.hasNext(); ) { Timecard card = (Timecard)it.next(); if (payPeriod.contains(date)) { amount.add(card.getHours() * payRate); } } payDispatcher.pay(this, date, amount); } \u0026hellip; } Допустим мы хотим логировать тот факт, что мы платим какому-то определенному, особенному работнику. Первое, что мы можем сделать - это создать например, класс, который тоже будет иметь метод pay() и вызвать его. Экземпляр этого классу будет принадлежать Employee, и выполнять работу по логированию в своем методе pay(), а затем делегировать работнику, так что бы он совершил оплату. Обычно, самый простой способ сделать это, если вы не можете создать объект при тестировании, это выделить интерфейс от класса и реализовать его.\nВ следующем примере LoggingEmployee наследует Employee и таким образом после логирования мы можем выполнить метод оплаты от экземпляра Employee. [source,java] class LoggingEmployee extends Employee { public LoggingEmployee(Employee e) { employee = e; } public void pay() { logPayment(); employee.pay(); } private void logPayment() { \u0026hellip; } \u0026hellip; } Эта техника называется - Декоратор паттерн. Мы создали объекты класс, которые \u0026ldquo;оборачивают\u0026rdquo; исходные объекты и позволяют добавить какое-то новое поведение. Класс-обертка должен иметь такой же интерфейс, что и исходный класс, чтобы клиенты даже не заметили, что работают с другим классом. В нашем примере LoggingEmployee - это декоратор Employee. Он должен иметь метод pay() и все остальные методы которые есть у Employee.\nДекоратор - это хороший способ добавить функциональность,если редактируемый метод pay() уже вызывается из кучи мест. Однако есть еще способ обернуть метод без декоратора. Давайте представим, что нам нужно логировать вызовы метода \u0026lsquo;pay()\u0026rsquo; всего из одного места. Вместо того ,чтобы оорачивать это все в декоратор, мы можем положитье его в другой класс, который принимает экземпляр Employee, производит оплату, а затем записывает инофрмацию об этом событии. Давайте напишем вот таклй маленький класс:\n[source,java] class LoggingPayDispatcher { private Employee e; public LoggingPayDispatcher(Employee e) { this.e = e; }\npublic void pay() { employee.pay(); logPayment(); } private void logPayment() { ... } ... } Сейчас мы можем создать экземпляр LogPayDispatcher одном месте, только в том,где нужно записывать сообщения о платежах. Now we can create LogPayDispatcher in the one place where we need to log payments. The key to Wrap Class is that you are able to add new behavior into a system without adding it to an existing class. When there are many calls to the code you want to wrap, it often pays to move toward a decorator-ish wrapper. When you use the decorator pattern, you can transparently add new behavior to a set of existing calls like pay()all at once. On the other hand, if the new behavior only has to happen in a couple of places, creating a wrapper that isn\u0026rsquo;t decorator-ish can be very useful. Over time, you should pay attention to the responsibilities of the wrapper and see if the wrapper can become another high-level concept in your system.\n","permalink":"https://volyx.in/posts/2014-11-05-wrap-class-new-imported/","summary":"Напарник метода-оберки по оборачиванию, но на уровень выше - это класс - обертка. Он использует примерно такой же подход. Если нам требуется добавить новое поведение в систему, мы  можем добавить его в существующий метод, но также мы можем добавить его к чему-нибудь еще. К тому, кого тоже использует этот метод. Это что-нибудь другое и есть наш класс-обертка.","title":"Класс - обёртка"},{"content":"\nДобавить новое поведение в существующий метод легко, но часто это бывает не совсем верным решением. Когда изначально создается какой-то метод, то он обычно делает строго одно действие. Любое добавление нового кода выглядит немного подозрительно. Скорее всего, вы добавляете новый код, потому что хотите, чтобы он выполнялся в одно время с уже существующим кодом.\nРаньше, такой способ называли \u0026ldquo;временным связыванием\u0026rdquo;, код становится довольно некрасивым, если делать это слишком часто. Если группировать процедуры вместе только потому что они должны выполняться в одно и тоже время, то связь между ними весьма слаба. Позже может выясниться, что один метод не используется без другого, и с этой точки зрения они должны логически быть одним методом. Но не торопитесь склеивать их в один метод, потому что вернуть назад может быть нелегко.\nКогда нужно добавить какое-то поведение, вы можете это сделать не таким запутанным путем. Один подход - это использовать \u0026ldquo;Ветвлящийся метод\u0026rdquo;, но существует и другой подход, который иногда очень полезен. Называется он - \u0026ldquo;метод обертка\u0026rdquo;. Пример:\n{% highlight java %} public class Employee { \u0026hellip; public void pay() { Money amount = new Money(); for (Iterator it = timecards.iterator(); it.hasNext(); ) { Timecard card = (Timecard)it.next(); if (payPeriod.contains(date)) { amount.add(card.getHours() * payRate); } } payDispatcher.pay(this, date, amount); } } {% endhighlight %}\nВ этом методе складывается время работы за день для одного работника и затем отправляется в PayDispatcher. Давайте предположим, что требования изменились. Каждый раз, когда мы платим работнику, нам нужно обновлять файл с информацией о работнике для отправки в какую-либо систему отчетов. Самый простой вариант - это добавить код в метод pay(). В конце концов наш новый код должен выполняться вместе с методом pay(), правильно же? Давайте так и сделаем:\n{% highlight java %} public class Employee { private void dispatchPayment() { Money amount = new Money(); for (Iterator it = timecards.iterator(); it.hasNext(); ) { Timecard card = (Timecard)it.next(); if (payPeriod.contains(date)) { amount.add(card.getHours() * payRate); } } payDispatcher.pay(this, date, amount); }\npublic void pay() { logPayment(); dispatchPayment(); } private void logPayment() { ... } } {% endhighlight %}\nМы переименовали метод pay() в dispatchPayment() и сделали его private. Затем создали новый метод pay(), который бужет вызывать наш dispatchPayment(). Новый метод pay()сначала логирует момент оплаты, а потом отправляет ее на обработку. Те клиенты, которые используют методpay()не узнают об изменении, да им и не нужно. Они как обычно будут вызывать метод 'pay()', и все будет по-старому. Это один из возможных видов \u0026quot;метода обертки\u0026quot;. Мы создаем метод с названием нашего старого метода, и в теле вызываем старый метод. Делается это для того, чтобы добавить новое поведение к существующему методу. Каждый раз, когда клиент вызывает методpay()` происходит логирование - и такой вид \u0026ldquo;метода обертки\u0026rdquo; оказался, как раз к месту.\nСуществуют также второй вариант этого подхода, который мы можем использовать, когда хотим только добавить новый метод, метод, который никто кроме нас не вызывает. В предыдущем примере, если мы хотим, чтобы логирование было более явным, мы можем добавить метод makeLoggedPayment() в классе Employee:\n{% highlight java %} public class Employee { public void makeLoggedPayment() { logPayment(); pay(); }\npublic void pay() { ... } private void logPayment() { ... } } {% endhighlight %}\nМетод обертка - это хороший способ добавить новый функционал, сохраняя при этом своеобразное разделение со старым кодом. Существует только несколько минусов. Первый - это то, что новый функционал не смешан с логикой старого. Подождите, разве я сказал это плохо? Вообще-то, нет, в общем - зависит от ситуации. Второй минус - это то, что вы должны придумать новое имя для старого метода.\nВ нашем случае, я переименовал pay() в dispatchPayment(). Это имя конечно, притянуто за уши. Мне не очень нравится, как заканчивается код в нашем примере. Метод dispatchPayment() делает гораздо больше, чем просто \u0026ldquo;обрабатывает платеж\u0026rdquo;: он так же вычисляет сумму платежа. Если бы я хотел протестировать этот метод, то скорее всего я выделелил бы еще одну функцию - calculatePay() и тогда бы метод pay() выглядел как-то так:\n{% highlight java %} public void pay() { logPayment(); Money amount = calculatePay(); dispatchPayment(amount); } {% endhighlight %}\nТеперь, кажется, каждый метод делает только то - что должен.\nВот шаги, которые мы сделали в первой версии нашего метода - обертки: . Находим метод, который будем менять . Если изменение может быть сформулировано, как последовательность утверждений, то переименовываем этот метод, а рядом создаем новый метод с именем и сигнатурами предыдущего. . Из старого делаем вызов нового . Добавляем необходимый код в старый метод и покрываем тестами - если это возможно\nВо второй версии метода обертки: . Находим метод, который будем менять . Если изменение может быть сформулированно, как последовательность утверждений, то создаем новый метод для этого . Создаем третий метод, который будет вызывать наш новый метод, а затем старый\nМинусы Иногда приводит к менее понятным именам методов. Например метод pay() мы переименовали в dispatchPay(), который менее интуитивно понятен, только потому что нам нужно какое-то новое имя метода. Конечно ,если у вас есть какие-то инструменты для рефакторинга, которые позволяют быстро переименовывать методы - это этот минус не такой болезненный. Плюсы Не увеличивает размеры изначальных методов Добавляемый функционал не зависит от старого функционала ","permalink":"https://volyx.in/posts/2014-10-25-wrap-method-new-imported/","summary":"\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/method_wrapper.jpeg\"\u003e\u003c/p\u003e\n\u003cp\u003eДобавить новое поведение в существующий метод легко, но часто это бывает не совсем верным решением. Когда изначально создается какой-то метод, то он обычно делает строго одно действие. Любое добавление нового кода выглядит немного подозрительно. Скорее всего, вы добавляете новый код, потому что хотите, чтобы он выполнялся в одно время с уже существующим кодом.\u003c/p\u003e\n\u003cp\u003eРаньше, такой способ называли \u0026ldquo;временным связыванием\u0026rdquo;, код становится довольно некрасивым, если делать это слишком часто. Если группировать процедуры вместе только потому что они должны выполняться в одно и тоже время, то связь между ними весьма слаба. Позже может выясниться, что один метод не используется без другого, и с этой точки зрения они должны логически быть одним методом. Но не торопитесь склеивать их в один метод, потому что вернуть назад может быть нелегко.\u003c/p\u003e","title":"Метод - обёртка"},{"content":"В этом случае, вы можете создать другой класс, который будет содержать в себе необходимые изменения, чтобы использовать их в исходном классе.\nДавайте взглянем на простой пример:\n[source,cpp] std::string QuarterlyReportGenerator::generate() { std::vector \u0026lt; Result \u0026gt; results = database.queryResults( beginDate, endDate); std::string pageText; pageText += \u0026ldquo;\u0026rdquo; \u0026ldquo;Quarterly Report\u0026rdquo; \u0026ldquo;\u0026rdquo;; if (results.size() != 0) { for (std::vector \u0026lt; Result \u0026gt; ::iterator it = results.begin(); it != results.end(); ++it) { pageText += \u0026ldquo;\u0026rdquo;; pageText += \u0026ldquo;\u0026rdquo; + it - \u0026gt; department + \u0026ldquo;\u0026rdquo;; pageText += \u0026ldquo;\u0026rdquo; + it - \u0026gt; manager + \u0026ldquo;\u0026rdquo;; char buffer[128]; sprintf(buffer, \u0026ldquo;$%d\u0026rdquo;, it - \u0026gt; netProfit / 100); pageText += std::string(buffer); sprintf(buffer, \u0026ldquo;$%d\u0026rdquo;, it - \u0026gt; operatingExpense / 100); pageText += std::string(buffer); pageText += \u0026ldquo;\u0026rdquo;; } } else { pageText += \u0026ldquo;No results for this period\u0026rdquo;; } pageText += \u0026ldquo;\u0026rdquo;; pageText += \u0026ldquo;\u0026rdquo;; pageText += \u0026ldquo;\u0026rdquo;; return pageText; } Давайте, предположим, что нам нужно добавить в этот код html заголовок для таблицы. Заголвок должен выглядеть вот так: [source,cpp] \u0026ldquo;DepartmentManagerProfitExpenses\u0026rdquo; Кроме того, предположим, что это большой класс, и что покрытие его тестами займет по времени где-то день - а мы не можем себе этого позволить. Попробуем инкапсулировать все наши изменения в новом классе QuarterlyReportTableHeaderProducer :\n[source,cpp] using namespace std; class QuarterlyReportTableHeaderProducer { public: string makeHeader(); }; string QuarterlyReportTableProducer::makeHeader() { return \u0026ldquo;DepartmentManager\u0026rdquo; \u0026ldquo;ProfitExpenses\u0026rdquo;; } } Позже мы сможем вызвать его методы из класса [source,cpp] QuarterlyReportGenerator::generate(): \u0026hellip; QuarterlyReportTableHeaderProducer producer; pageText += producer.makeHeader(); \u0026hellip; Уверен, что глядя, на этом изменение вы скажите - \u0026ldquo;Для такого маленького изменения создавать целый класс? Как еще один класс улучшит мою архитектуру? Он только усложнит код.\u0026rdquo; Да, с этой точки зрения это правда. единственная причина, по которой можно такое сделать - это большое количество зависимостей, но давай-те присмотримся поближе.\nА что если назвать этот класс QuarterlyReportTableHeaderGenerator и вынести из него интерфейс?\n[source,cpp] class QuarterlyReportTableHeaderGenerator { public: string generate(); }; QuarterlyReportTableHeaderGenerator это такой же генератор, как и QuarterlyReportGenerator. У них обоих есть метод generate(), который возвращает строковое значение. Можно сделать интерфейс, который обобщит код создания: [source,cpp] class HTMLGenerator { public: virtual ~HTMLGenerator() = 0; virtual string generate() = 0; }; class QuarterlyReportTableHeaderGenerator : public HTMLGenerator { public: \u0026hellip; virtual string generate(); \u0026hellip; }; class QuarterlyReportGenerator : public HTMLGenerator { public: \u0026hellip; virtual string generate(); \u0026hellip; }; Также мы можем покрыть QuarterlyReportGenerator тестами и изменить его реализацию так, чтобы он выполнял большинство своей работы с помощью генераторов. В этом случае, мы можем обернуть класс концепцией, которую уже используем в приложении. Возможно, что в некоторых классах, мы не сможем так сделать. Но это не значит, что нужно сдаваться. Некоторые \u0026ldquo;ветвящиеся классы\u0026rdquo; не приводятся к концепции всего приложения, вместо этого они становятся новыми! Может получится так, что через некоторое время после создания \u0026ldquo;ветвящегося класса\u0026rdquo; вы найдете похожу концепцию.\nЧерез два месяца после создания \u0026ldquo;ветвящегося класса\u0026rdquo; ваше мнение о нем может изменится. Сам факт добавления нового класса в систему дает вам пищу для размышления. Когда вы будете делать изменения где-то рядом с ним обязательно подумайте - являются ли эти изменения частью новой концепции или требуют изменения старой концепции. Это все входит в процесс проектирования архитектуры вашего приложения.\nПо сути всего два случая, когда нужно задуматься о применении \u0026ldquo;ветвящегося класса\u0026rdquo;.\nПервый - ваши изменения в классе добавляют новую зону ответсвенности в одном из классов. Например, в приложении для расчета налогов, некоторые отчисления возможны только в определенные времена года. Можно с легкостью добавить проверку на принадлежность к времени года к классу TaxCalculator, но эта проверка не входит в зону ответственности TaxCalculator - рассчитывать налог? Возможно, это должен быть какой-то другой класс. Второй пример - как раз рассмотрен выше. У нас небольшая функциональность, которую, в принципе, мы можем добавить к существующему классу, но мы не сможем протестировать этот метод. Если нам повезло, и мы отдельно можем покрыть тестами только этот метод, то \u0026ldquo;метод ветвления\u0026rdquo; нам подойдет, но к сожалению, не всегда так везет. Хотя у обоих подходов достаточно разная мотивация для применения, в конечном итоге результат примерно один. Является ли добавляемая функциональность настолько значимой, чтобы быть новой зоной ответсвенности - это тяжелое решение. Даже больше, из-за того, что код все время меняется, решение использовать подход \u0026ldquo;ветвящийся класс\u0026rdquo; часто выглядит лучше в ретроспективе.\n=== Плюсы и минусы Основное преимущество использования \u0026ldquo;класса\u0026rdquo; - это своеобразный взгляд в будущее, уверенность в том, если придется менять еще раз, то вы будете к этому готовы.\n","permalink":"https://volyx.in/posts/2014-10-14-sprout-class-new-imported/","summary":"Ветвление методом это хорошо, но в некоторых ситуациях, например с кучей зависимоcтей, этот подход проигрывает другой технике. Рассмотрим ситуацию, когда вы должны внести изменения в класс, но нет никакой возможности создать зависимые объекты для тестирования. Получается, что не возможно вставить ответвляющийся метод и покрыть его тестами. Возможно, ваш класс просто зависит от тяжелых в создании объектов или имеет какие-то скрытые зависимости. Чтобы избавится от них, вам нужно сделать глубокий рефакторинг и отделить их, для того чтобы протестировать.","title":"Ветвление классом"},{"content":"Самое сложное в этом всем - это решиться все-таки покрыть сначала тестами, находясь под давлением того, что вы не знаете сколько времени уйдет на добавлении новой фичи. Часто в \u0026ldquo;легаси\u0026rdquo; проектах очень сложно определить сколько времени потребуется на добавление фичи. Существует несколько техник.\nКогда программисту говорят добавить в приложение новую функциональность, это можно воспринимать в первую очередь, как последовательность таких действий как:\nНапиши новый метод или добавь новый кусок кода к существующему методу. А также вызови его из места, где нужно внедрить эту новую функциональность. Удостоверься, что все работает, как надо. Обычно написать тесты, покрывающие именно места вызова нашего нового метода нелегко, но зато по крайней мере мы можем \u0026ldquo;покрыть тестами\u0026rdquo; добавленный нами новый метод.\nПредставьте, себе такой код.\nПример. [source,java] public class TransactionGate { public void postEntries(List entries) { for (Iterator it = entries.iterator(); it.hasNext(); ) { Entry entry = (Entry)it.next(); entry.postDate(); } transactionBundle.getListManager().add(entries); } \u0026hellip; } Например, нам нужно добавить код для проверки того, что ни один из новых вхождений еще не находится в transactionBundle до того, как установим дату этому вхождению и добавим в transactionBundle.getListManager(). Глядя на postEntries, кажется, что новое изменение нужно добавить в начало метода - до цикла. Но, на самом деле, это должно случится внутри цикла. Например, мы можем сделать так:\n[source,java] public class TransactionGate { public void postEntries(List entries) { List entriesToAdd = new LinkedList(); for (Iterator it = entries.iterator(); it.hasNext(); ) { Entry entry = (Entry)it.next(); if (!transactionBundle.getListManager().hasEntry(entry) { entry.postDate(); entriesToAdd.add(entry); } } transactionBundle.getListManager().add(entriesToAdd); } \u0026hellip; } Наша вставка кажется небольшим изменением функционала, но на самом деле это не так. Теперь, как мы можем проверить, что наше изменение делает именно, то что мы хотим? Ведь нет никакого разделителя, который бы отличал новый код от старого. Хуже еще то, что мы сделали код немного непонятней. Мы смешали две операции здесь: установка даты и проверка на дублирование. Этот метод довольно небольшой, но уже менее понятный и плюс - мы добавили временную переменную.\nДобавление временной переменной - необязательно плохо, но иногда оно приносит с собой и новый код. Если изменение, которое мы сделали, включает работу со всеми уникальными вхождениями до того,как мы их добавим, то тогда существует только одно место, где изменение должно находится : прямо в этом методе. Было бы заманчиво просто положить наше новое изменение прямо в этот метод, но может мы можем сделать это каким-либо другим способом?\nДа. Мы можем вынести наш код в отдельную операцию. Мы можем использовать подход TDD (link:http://en.wikipedia.org/wiki/Test-driven_development[Test-Driven-Development]) и создать новый метод uniqueEntries: [source,java] public class TransactionGate { \u0026hellip; List uniqueEntries(List entries) { List result = new ArrayList(); for (Iterator it = entries.iterator(); it.hasNext(); ) { Entry entry = (Entry)it.next(); if (!transactionBundle.getListManager().hasEntry(entry) { result.add(entry); } } return result; } \u0026hellip; } В этом случае будет легко написать код для тестирования нового добавленного метода. Теперь мы можем вернуться нашему изначальному примеру и вызвать метод. [source,java] public class TransactionGate { \u0026hellip; public void postEntries(List entries) { entriesToAdd = uniqueEntries(entries); for (Iterator it = entriesToAdd.iterator(); it.hasNext(); ) { Entry entry = (Entry)it.next(); entry.postDate(); } transactionBundle.getListManager().add(entriesToAdd); } \u0026hellip; } У нас еще все-таки осталась одна временная переменная, но код стал более упорядоченным. Если нам понадобится добавить еще функциональность, которой понадобится список уникальных вхождений, то мы сможем использовать этот же метод. Если в дальнейшем, наш метод будет вызываться очень часто, то мы легко сможем вынести его в новый класс. Фокус в том, чтобы держать этот метод небольшим и понятным с первого взгляда - это увеличивает читаемость все класса в целом.\nЭто был пример добавления функционала путем \u0026ldquo;ответвления\u0026rdquo; с помощью метода. В процессе мы выполнили следующие шаги:\n. Идентифицировать место, в котором требуются изменения. . Если изменение формулируется как последовательность утверждений в одном месте в методе, написать вызов метода, который будет включать все эти утверждения. . Определить какие локальные переменные нужны для вызова из исходного метода и подставить все необходимые аргументы. . Определить должен ли ответвяющий метод возвращать какое-нибудь значение. . Написать тест на наш новый метод.\nЯ рекомендую использовать метод ветвления когда вы видите, что назначение нового кода отличается от уже существующего или вы не можете покрыть тестами изначальный метод. Предпочтительно, конечно, добавить этот метод в одну строчку.\nИногда, когда вы хотите использовать метод ветвления, зависимостей в вашем классе настолько много, что вы не можете создать экземпляр без создания большого количества заглушек и фейковых объектов.\nАльтернатива этому подходу - это передавать везде null.\nКогда не подошли предыдущие подходы, рассмотрите возможность сделать метод public static. Вы можете передать экземпляр исходного класса как аргумент, это позволит сделать вам ваши изменения.\nЭто может показаться странным - делать метод статическим для наших целей, но в устаревшем (legacy) коде это может быть полезным. Как правило, много статических методов в одном классе - это плацдарм для рефакторинга. Часто, если вы видите несколько статических методов и вы замечаете ,что они работают с одними и теме же переменными, лучше перенести эти статические методы в новый класс, и сделать их методами экземпляра. Когда понадобится вернуть их назад - это будет несложно.\n=== Минусы\nКод не становится лучше, мы просто добавляем новый метод, который будет покрыт тестом. === Плюсы\nЧеткое разделение старого кода и нового Использована литература [bibliography]\n[[[legacy]]] Working Effectively with Legacy Code. p.51 ","permalink":"https://volyx.in/posts/2014-10-14-sprout-method-new-imported/","summary":"Такая ситуация наверняка была с каждым. Представьте к вам подходит ваш начальник и говорит: - Клиенты требуют от нас новую фичу - сможем мы сегодня ее добавить? Обычно все что вы можете пролепетать в ответ это:- Я не знаю\u0026hellip; смотря куда \u0026hellip;. смотря что \u0026hellip; И тут вы задумываетесь\u0026hellip; Ну, допустим, мы сможем ее быстро добавить. А как мыпротестируем, что ничего не сломали? А в слух говорите, что-то типа:- А как срочно она нужна?Вы понимаете , что  нужно будет сделать это изменение в 10 местах и это займет 5 часов, но в конечном итоге мы никак не сможем удостовериться, что код работает правильно и что на других концах приложения ничего не отвалилось!","title":"Ветвление методом"},{"content":"== Изменения кода проекта\nЕсли копнуть глубже, то существуют всего 4 причины для изменения кода в проекте:\n. Добавить новую link:https://ru.wikipedia.org/wiki/%D0%A4%D0%B8%D1%87%D0%B0[фичу] . link:https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D0%B3[Зафиксить баг] . Улучшить дизайн . Оптимизировать что-то\n=== Добавление фичи и устранение бага Добавление новой фичи кажется самым простым изменением, которое мы можем сделать. Допустим программа ведет себя одним образом, а пользователи говорят, что должна вести себя по другому.\nДавайте, предположим, что мы работаем над веб-приложением, и менеджер говорит нам, что он хочет сдвинуть логотип сайта с лево на право. Обсудив это с ним, мы понимаем, что на самом деле это не так просто. Хотя менеджер просит передвинуть только логотип, на самом деле он хочет еще некоторых изменений. Может быть он захочет добавить анимации в следующем релизе? Нужно понять - это фиксинг бага или добавление новой фичи? Это зависит от вашей позиции\u0026hellip;\nС точки зрения заказчика - он абсолютно определенно просит вас решить конкретную проблему. Может быть менеджер посмотрел на сайт и собрал митинг с людьми из своего отдела, и они решили изменить положение логотипа, поэтому и запросили данную фичу.\nС точки зрения разработчика, изменение вполне может выглядеть, как новая фича. В некоторых компаниях сдвиг логотипа рассматривают как баг фикс, несмотря на тот факт, что команда собирается делать достаточно много новой работы. На самом деле все это очень субъективно. Кто-то видит это как багфикс, кто-то как фичу.\nГрустно, то что во многих компаниях багфиксы и фичи учитываются отдельно из-за требований всяческих отделов качества и тестирования. На человеческом уровне можно до бесконечности спорить является ли добавляемое изменение фичей или багофиксом, но это в конечном итоге это всего лишь изменение кода и исходников. Технически, для нас важно изменение поведения: большая разница между добавлением нового поведения и изменения старого.\nПоведение - это одно из главных понятий в разработке программного обеспечения. Это то, от чего зависят пользователи программы. Пользователи любят, когда мы добавляем новое поведение(если они его очень хотели), но если мы убираем или изменяем поведение программы(пытаясь починить какие-то баги), то пользователи перестают верить нам. В нашем примере про логотип, давайте попробуем понять - мы добавляем новое поведение? Да, после нашего изменения система будет отображать логотип с другой стороны страницы. Избавляемся ли мы от какого либо поведения? Да, мы не хотим, чтобы логотип был слева. Давайте копнем немного глубже. Предположим,что заказчик хочет добавить логотип в правую часть страницы, но слева еще нет логотипа. Да, мы собираемся добавить новое поведение, но заменяем ли мы какое-то старое? Так что мы изменяем, добавляем или оба действия сразу?\nПолучается, что нужно четко определить различие между этими действиями - это полезно для разработчика. Если мы должны изменить код, мы можем изменить поведение. Если мы только добавляем код и вызываем его откуда-то, мы всегда добавляем новое поведение. Давайте взглянем на другой пример: [source,java] public class CDPlayer { public void addTrackListing(Track track) { \u0026hellip; } \u0026hellip; } Добавим новый метод: [source,java] public class CDPlayer { public void addTrackListing(Track track) { \u0026hellip; } public void replaceTrackListing(String name, Track track) { \u0026hellip; } \u0026hellip; } Когда мы добавили новый метод, добавили ли мы новое поведение или изменили старое? Ответ: нет. Добавление нового метода не меняет поведение пока этот новый метод где-то не вызван. Давайте сделаем другое изменение. Добавим новую кнопку в интерфейс CD плеера. Кнопка дает пользователям возможность заменить играющий трек. Тем самым мы добавили новое поведение, которое содержится в методе replaceTrackListing(), но также мы очень тонко изменили поведение. Пользовательский интерфейс отобразится совершенно по другому при нажатию на кнопку. Возможно, UI будет отображаться на микросекунду дольше. Кажется невозможным добавить новое поведение без изменения его в какой-то степени.\n","permalink":"https://volyx.in/posts/2014-10-05-working-with-legacy-code-new-imported/","summary":"Рефакторинг кода - это определенно круто! Это то, что вы должны делать каждый день для того, чтобы выжить в мире постоянно изменяющихся требований. Существуют подходы изменения кодбэйза проекта, следуя которым можно сильно упростить себе жизнь. Хотя все разработчики в принципе, интуитивно следуют им, но в слух их не произносят. Самые близкие из них часто можно встретить в книгах о рефакторинге.","title":"Обзор книги Working with legacy code"},{"content":"Hello.\nPixyll is a simple, beautiful theme for Jekyll that emphasizes content rather than aesthetic fluff. It\u0026rsquo;s mobile first, fluidly responsive, and delightfully lightweight.\nIt\u0026rsquo;s pretty minimal, but leverages large type and drastic contrast to make a statement, on all devices.\nWhere is it? Checkout the Github repository to download it, request a feature, or report a bug.\nIt\u0026rsquo;s free, and open source (MIT).\n","permalink":"https://volyx.in/posts/2014-06-11-welcome-to-pixyll-new-imported/","summary":"Pixyll is a simple, beautiful theme for Jekyll that emphasizes content rather than aesthetic fluff.","title":"Hello, Pixyll!"},{"content":"= Бабушкин рассказ на кухне\n== Часть 1\nНу я ничего о них не могу сказать. У меня составлено древо их, хоть и небольшое. Сейчас пойдем посмотрим Я вам покажу. Но я их тоже никого не знаю \u0026hellip; только отца да деда, да и больше никого. Знаю еще откуда свекровь, это ваша бабушка из\u0026hellip;. где Некрасовы все живут. Они Некрасовы за Двиной живут. Ты был же в деревне? Ты представляешь где они есть? Не, не был. Ты разве никогда в деревне не был?\u0026hellip; Там же у нас Северная Двина она очень широкая река, очень большая\u0026hellip; Я очень хочу съездить, но я не знаю куда. Теперь уже дом продали\u0026hellip; А там где отец жил, там вообще все развалилось, там уже никого нет, я имею ввиду, что деревня уже вся заросла травой, лесом. Очень жаль, что вы небыли. Я не знаю откуда эти Волыхины, не знаю\u0026hellip; да они веками там жили, так бог их знает\u0026hellip; Но, как раньше говорили - было переселение с Западной Украины, не то что переселение \u0026hellip; они сами бежали оттуда, бежали в эти леса. Может кто-то был ссыльный, я не знаю. Но ссыльные они были в какие времена, времена революции, времена Сталина..(времена не Сталина, более ранние) У нас там в основном сидели за это все, там где Соловецкие острова, Соловецкий монастырь, там в основном заключенные. Я бывала там один раз, но это было\u0026hellip; Как гость надеюсь? Не как гость, у нас экскурсия была. Но все равно, помимо экскурсии у нас Зоя, Евгения жена, она занималась туризмом, и она нас к группе устраивала, своих родственников. Я просто нелегально там была, но все равно мы ходили со всей группой. Но я что хочу сказать, вот казематы все эти я видела, как они там сидели. Но кто в основном сидели? Я же тоже не очень хорошо все это знаю. Вы наверное по истории больше знаете. Но до этого же был монастырь, монастырь известный, там жили в основном монахи, и женщины там были. Я к чему это веду\u0026hellip; Моя тетя, мамина старшая сестра, она девочкой повредила себе ногу, она была почти инвалид. И ее как девочку отправили в этот монастырь, ее взяли на учебу. Ее научили там шить, научили ремеслу, и она все жизнь была очень хорошей портнихой, когда вернулась домой. Какие года это? Если моя мама, бабушка ваша, 1892 года рождения. Так это старшая сестра, она старше лет на 30 - их же было 5 сестер, моя мама была последней. Если это 1860 год, это значит твоя бабушка застала крепостное право? Там крепостного права не было. Это северные люди, были свободные люди от всего. Только их считали\u0026hellip; “царёвы люди”, они только подать платили царю, никаких помещиков, никаких фабрикантов не было. Они занимались своим ремеслом. За счет леса жили, вырабатывали дегать, вырабатывали смолы. А по Северной Двине ходили баржи, пароходики ходили. И они всю эту продукцию скупали. == Часть 2\nНу а наши предки что делали? Наши предки вырабатывали дёгать, вырабатывали соль (не соль, а смолу. соль в приисках вырабывают, а смола с деревьев). Даже моя мама, в молодости занималась этим. В лесу большие печи, заглубленные в землю, и в эти печи загружались сосновые двухметровые бревнышки. А как загружались? Их не жгли, они их ставили в печки, большая температура, и с них смола и дёгать, все это текло. Это очень тяжелый труд. Нужно было заходить внутрь, закрывали себя, закутывались, всего себя обвязывали. Я к чему все это. У моей мамы первые два сына умерли при родах, потому что она занималась таким трудом в такой температуре и как только наступали роды, ребенок рождался и умирал сразу, задыхался\u0026hellip; как мама рассказывала, задыхался и сразу умирал. И вот дядя Женя уже третий (бабушке недавно рассказали, что не третий а четвертый ребенок. перед этим трое умерло) ребенок был. Это у же маме запретили заниматься этой работой и только тогда третий ребеночек выжил. Потому что она загрузку этих печей вела при очень высокой температуре, будучи беременной даже, а этого делать нельзя. Ну а папа? Мой папа. Когда уже начинали создаваться колхозы он был очень деловой человек, он хозяин. Он не хотел идти в колхоз, хотел заниматься своим хозяйством, хотел жить дома. Потому что у них в домик, когда мама выходила замуж, у них был очень ветхий домик. Плохо они жили, была плохая земля. И отец решил построить себе дом. Стали строить дом, двухэтажный дом. И так как ему приходилось все самому делать, он очень заболел и в 31 году, мне было 2 годика - он умер. От простуды, очень простудился, курил еще много, и у него с легкими проблемы были. Врачи какие тогда были. Никаких не были. Привезут из города или района врача, а он приедет попьянствует, а лечить то нечем было. Все же он дом не достроил. Была у них лошадь, куплена, своя лошадь, надо было вывозить из леса стройматериалы. А когда колхозы стали образовываться и стали отбирать хозяйство, он очень не хотел отдавать свою любимицу - лошадь. Не хотел, но пришлось сдать в колхоз. И начался голод 29-30 год, это голод и он умер, и в 31 году он умер. Мамочка осталась с 4 детьми: дядя Женя, тетя Зоя, Кенюшка, Иннокентий который погиб во время войны, 26 года и я. И остались мы в этом доме ,недостроенный дом, но крыша была, второй этаж был хорошо отделан, и первый этаж, только летом жили (на втором этаже только летом) стенки белые, струганые все это дерево, смолой-,деревом пахло! == Часть 3\nДеревня “Бутырская” - это Завъяловы, Некрасовы, Волковы. А Волыхины, это Павел Михайлович\u0026hellip; это деревня совсем развалилась, там всего несколько домиков было. Они как-то больше землей занимались, лесом, огородом.. Деревня называлась “Истопная”, и там они занимались заготовкой леса, дрова вывозили к Двине, там высокая гора и на грузили на баржи\u0026hellip; А они как там оказались в этой “Истопной” Как они там оказались я не знаю. Ко мне не давно приходил знакомый, он летчик, его отец летчик - они на левом берегу живут. Юрка (этого летчика зовут Олег) его зовут. И вот он занялся архивом, в Верхней Томи, в районом центре решил создать как бы музей, память об этих деревнях и собирал фотографии - ко мне пришел. А так как я самая старшая - я много чего ему рассказала. Его дед был председатель колхоза, а его отец закончил наше Воронежское Авиационное училище, его сын тоже его закончил. Он в прошлом году у меня побывал и много фотографий забрал, сказал что все отпечатает и вернет, а копии сдаст в музей. Я думаю он вернет их. Единственное мне жалко фотографии моей мамы\u0026hellip; он чето ухватился за нее. Председатель колхоза, его дед, был сирота, а ему хотелось узнать его родственников. Он почему то решил, что она наш родственник. Александр Яковлевич, он суровый был, но он же председатель, ему положено. (председателя зовут Илья, не факт что Яковлевич) == Часть 4\nОн к нам приезжал, еще Павел Михайлович был. И мы к нему ездили на левый берег, когда этот Юрка был еще маленький и мы у них бывали, но у меня телефона их не осталось. Но это я могу у своих родственников достать - но я надеюсь он вернет. Он очень обещал, так что я думаю что он вернет. А мне еще фотографии жалко - вот Кеня, брат мой, он же кончал школу и они классом фотографировались и он тоже две фотографии эти забрал. Они были с надписями с обратной стороны, там перечислено, кто сфотографирован. Он уже на пенсии, как летчик. И вот у меня фотографий не осталось, мне конечно жаль, но .. Надо найти его телефон\u0026hellip; Вот этих Волыхиных, почему-то было очень мало. Вот эта деревенька Истопная, там всего домов 15 было в то время - откуда их, кто они \u0026hellip; - их мало было. А вот Волковы больше всего и Завъяловы больше всего. Я вот в интернете смотрю, ищу Волыхиных - их мало, но они есть, и даже чем то на нас похожи. Вторая деревня была Сопилово, потому что там в основном Сопиловы были. Там тоже Волыхины были. А вот в нашей их было мало. То есть все Волыхины - это наши дальние родственники каким-то образом? Да, мы ведь с Павлом Михайловичем родственники в 5 колене, мы родня - мы это знали. Наши бабушки рассказывали, - наши пра-пра-пра бабушки были двоюродными(троюродными) сестрами. Поэтому мы это знали. Мы так посчитали 5 -7 колена, это еще мама моя рассказывала. Получается, что если до 5 колена все друг друга знали, то значит все там и жили? Жили, а где же они жили. Значит они переселялись еще раньше? Раньше, гораздо раньше, даже не до революции, а может быть до гражданской войны. Мы так считали, что с западной Украины тогда бежали, или может еще откуда - вообщем откуда они, мы не знали здесь на нашем севере, и какой их царь батюшка переселял, я не знаю. Ну хорошо, 5 колен, это много. Это лет 200. Раньше в этих местах был мужской монастырь. И поэтому такие хорошие церкви стояли в Бутырке. А как он возник, мы не знаем. Я надеялась, что этот Юрка придет, что он все узнает. Он в архиве смотрел, сказал, что там есть когда отец мой умер, от какой болезни, простуда легких у него была - это в архиве он узнал в Верхней Тойме. == Часть 5\nИ вот как там образовался мужской монастырь, откуда он там , и поэтому там две красивые церкви стояли - одна деревянная. Это все в деревне Бутырская? Да, а вот Северная Двина, ее правый берег, это когда к Архангельску она течет, ее правый берег очень высокий. И когда бочки катали, дрова на баржу грузили были сделали такие лестницы, по которым скатывали их. И церкви построили на этом высоком берегу. В Бутырской холодно? Это ж север. Там наверное 9 месяцев зима? Холодно. Я в школе когда училась было 35 градусов мороза. А училась я за 5 километров. Представь, 30 градусов мороза им мы бежим в школу 5 километр, а там говорят, что занятия перенесли, а мы то уже пробежали. Я девченочкой по 12-15 лет, мы 5 километров пробежали, а занятие отменено. Что бы не позвонить? А такого не было в голове ни у кого, это никому не нужно было. Прибегали, все замерзшие и обратно еще 5 километров. А кроме дерева, рыбалкой, охотой занимались? Охота была. Охотились на белку, охотились на лису. А во время войны, или даже может быть до войны была артель. Что это? Набирали людей в артель, они охотились, и вот эту пушнину отдавали государству, но не обработанную, потому что негде было. И вот Кенюшка, мой братец, перед тем как школу оканчивал, его же с 9 класса в армию взяли. Он поступил в артель, потому что за пушнину сахара давали. Он, чтобы немножко нас подкормить вступал в артель, а сам еще ребеночек был 9 класса. Ружье ему давали, не помню, было ли оно у него. Они еще ставили “сирюки”. В лес ходили, на лыжах ходили. а лыжи то самодельные, такие широкие, чтобы в снег не проваливались и ставили “сюрюки”. В них попадались белки, в них попадалась лиса. И вот была такая артель, они потом обрабатывали ее, пушнину, - шкурку снимали. И за это давали муку и сахар. Еще была артель - лесохимия называлась. Потом уже стали, как-то по науке обрабатывать их, чтобы эти бревна в печках вырабатывали смолу, дёгать - вот это называлась лесохимия. Но вот кто эти люди - ссыльные, присыльные, я не знаю, но жили они в лесу. == Часть 6\nА как мы в войну выжили? Я вот знаю, только про Иннокентия\u0026hellip; Да, его и Павла Михайловича забрали из школы и отправили воевать. Ну не совсем воевать\u0026hellip; Как выжили в войну? Колхоз - мужиков ведь всех забрали, двоюродные братья, которые у меня были мужья сестер. Все красивые, все высокие. кто пушниной занимался, кто лесом. У нас там сплавная была - сплавляли лес и отправляли в Архангельск. Рубили лес, собирали в пучки и отправляли в Архангельск на лесо-разработку - вот этим и занимались. До войны еще нагнали к нам много белорусов. Там когда в Белоруссии какую-то реорганизацию делали. Они жили хуторами, а их выгоняли, раскулачивали богатеньких. И к нам высылали этих людей и они занимались сплавом леса. У нас на квартире жили 5 девчонок. Почему на квартире?. У нас дом пустой был, мужиков нет, мы с мамой вдвоем уже остались. А им лет по 20. С самого начали их забрали? Иннокентия и дедушку? Нет, 43 год. А до 43-го? А что до 43-го? Евгений в Архангельске уже работал. Он работал на судоверфи начальником производственного отдела. То есть не затронуло никак? На Архангельске никак не отразилось? Нет, Архангельск бомбили. А мы же в деревнях, - ну бомбили и бомбили, нам то что. Жили плохо, есть было нечего, учились да учились. Очень мало зерна, очень мало муки. Все свое было? Или приходило из города? Все свое. Сами жито сеяли, ячмень то есть. Сами картошку, сами огурцы - этим мы жили. И все равно плохо было? Сажали ведь? Ну ничего, мы все равно конечно лучше жили, чем в городе. Муки мало, зерна мало. В эту муку мама добавляла картофельную шелуху и такое все. Но все равно лучше чем в городе. А так у нас молоко было, корова была у нас. Овцы были. Но нужно было из 5 овец 2 отдать в армию, на войну. Забивали их, а потом нужно было сдать 25 килограмм мяса, 15 килограмм масла - все квитанции у меня раньше были от мамы, они ко мне перешли, я их недавно выбросила. Еще 5 мешков картошки. == Часть 7\nЕще и денег надо было выплачивать. Ох господи. Одеваться не во что было. Но ничего, по сравнению с городом мы жили лучше. Молоко было свободное. Но сахара не было, мясо сдавали, масло сдавали, а с молока 12 кг масла. Корова когда отелится 3 месяца не доится, а надо было собрать масло умудриться. Через “сепарат” прогоняли молоко, сами “обрат” ели. “Обрат” - это обезжиренное молоко, а все это сдавали. Дядя Женя уже воевал, он вернулся по ранению. Зоюшка, сестра жила в Архангельске, работала на заводе. А с завода нельзя было уйти и опаздать на 5 минут. Если на 5 минут опаздаешь на работу, то сразу в тюрьму. Строго. Очень строго. А ей было 18 лет всего. Она жила с Евгением, а его в армию забрали. И она осталась одна, пришлось ей на завод пойти, гидролизный по выработке спирта. Она не самом заводе работала, она работала экскаваторщиком. Она сидела на экскаваторе и грузила щепу. Зимой, холод 30 градусом, а она сидит на металлическом сидении экскаватора. А с завода нельзя было уже уйти, она бы с удовольствием приехала. Вот она на недельку приедет, побудет, и недельку в дороге - нельзя было опоздать. Опоздаешь - в тюрьму посадят. А дядя Женя где он служил? А дядя Женя служил в “смерш”. Смерш что такое знаешь? Не сильно, разведывательное что-то. Это разведка. Так вот как он туда попал. Должны были отправить на фронт. Вот эти двоюродные братья, война же с финнами была еще, их забрали на финскую войну, они все там и погибли. Солдаты там же одевались в шинелечку и все. А холод, мороз. А офицерам давали белые полушубки. Это я к чему. Вот как офицер на фронте в белом полушубке - так в него и стреляют. Потом только опомнились, почему офицеры погибают? Ды потому что в полушубках все. Их убивали, и все братцы двоюродные там погибли, а мой Евгений, он с хитринкой был. Чтобы не попасть на финский фронт - он записался в смерш. Их надо было готовить, где-то он учился, а где учился, не знаю. Он настолько был засекреченный, он ничего не рассказывал. А мне так было интересно было все узнать, а он никак не рассказывал. И все ругал Иннокентия, вот пошел в армию, пошел в учебку - что он не мог куда-то записаться? Боже мой, кого ты ругаешь, парень только из школы, куда он должен был записаться. Женя то жил в городе. == Часть 8\nПотом его отправили на фронт. Он в Венгрии воевал, его ранили, и он во время войны вернулся домой. Его ведь в ногу ранили? У него был выбит тазобедренный сустав, и поэтому он был хромой. И вот тем, что он записался в смерш, этим он спас себя - я считаю. Он такой засекреченный был. Уже после, на пенсии был, и у них был сбор - собирали там разведчиков в Архангельске. Он бывало идет, он хромал, он же плохо ходил, и я ему говорю: \u0026ldquo;Давай, я тебя провожу?\u0026rdquo;. А он говорит: \u0026ldquo;Не надо, проводишь только до двери.\u0026rdquo; Это их слет такой был, он говорил:\u0026ldquo;Только до двери, чтоб ты туда не заходила!\u0026rdquo;. Мне уже смешно потом было, я ему: \u0026ldquo;Какие тут секреты? Смерш и смерш.\u0026rdquo; Ну и правда в смерше был, в Венгрии побывал, форсировал Днепр и по ранению он вернулся. А когда вернулся, он приехал домой, отдохнул недельку и вернулся в Архангельск. Он же был начальником производственного отдела, зачем он ухеал-то, он же техникум закончил, из деревни то совсем ничего\u0026hellip; Не знаю какую он школу там окончил, но его взяли в техникум. Сначала ремесленное училище окончил - табуреточки там сбивал, ему ведь шестнадцати еще не былою Его не брали на завод, потому что он не совершеннолетний. А нужно было зарабатывать, работать надо было. И вот мамины соседи, они поручились за него, чтобы его взяли на завод, ведь несовершенно летних нельзя было брать. Сказали, что мол \u0026ldquo;Хороший парень, возьмите.\u0026rdquo; И он табуретки сбивал, потом ремесленное училище, потом техникум, а потом, когда он уже переводился, он был начальником производственного отдела судоверфи. И там уже работал. Кенюшка в Грязовцах(плохо слышно) жил, в Вологодской области, полгода. Обучали его там. Письмо его оттуда - \u0026ldquo;треугольнички\u0026rdquo; у меня есть, он их посылал в деревню. Учебка там была, перед фронтом. И все шесть месяцев пообучали, и на фронт. А впроголодь они жили\u0026hellip; Из деревни, то он уезжал, хороший парень был. Пишет в письме: \u0026ldquo;Во мне сорок два килограмма\u0026hellip;\u0026rdquo; Парню уже сколько лет? И солдат, сорок два килограмма, это что ? Они там впроголодь жили. Мама посылала \u0026ldquo;копеечки\u0026rdquo;, которые насобирала ему. И он пишет: \u0026ldquo;Мама, я получил твои денежки\u0026hellip; Хоть сходил к забору, гороховых лепешек купил\u0026hellip;\u0026rdquo;. Там бабки хоть какие-то гороховые лепешки продавали. Он окончил это училище и его отправили на фронт и все\u0026hellip; Пулеметное гнездо\u0026hellip; А Павла Михайловича в саперы записали, а Кенюшку в пулеметчики. Вроде говорили под Ленинградом. И недавно Славик нашел книгу памяти в интернете и нашел Иннокентия. И там было написано, что он погиб где-то в Прибалтике. Но мы все время считали, что он погиб где-то под Ленинградом. Было извещение - \u0026ldquo;пропал без вести\u0026rdquo;. И Евгений пытался узнать, где он похоронен, и у него это извещение \u0026hellip; == Часть 9\nЕвгений, после ранения, побыл недельку в деревне и вернулся в Архангельск, на свою судоверфь работать. И потом уже много лет он был директором судоверфи. А судоверфь что делает? Суда строили. А дедушка, Павел Михайлович, как выжил? Опять по блату. Записали его в саперы, а у него брат уже полковник был. Какой брат? Алексей Михайлович, старший брат. Он на много старше был, даже чуть постарше Евгения. И он вернулся, еще война была, и он был уже подполковником. И помог своему младшему брату. И из саперов его отправили в училище, Ивановское Военно-Политическое училище, и поэтому он учился в училище. Он же потом замполит роты был. И поэтому он и спасся\u0026hellip; А наш Кенюшка так никому не нужне был. Он как выучился на пулеметчика, так его сразу на фронт и отправили. Вот твой дедушка, Павел Михайлович не был на фронте. Пока он учился до 50 года, война в 45 закончилась. А перед училищем он сержантом был где-то, где-то там командовал солдатами. А вот брат был Алексей Михайлович, значит отца его звали Михаил\u0026hellip;не знал я про брата. Да, и сестра была - Валентина. Она жила в Прибалтике, а потом когда на пенсию вышла, ее привезли сюда в Гатчину. Павел Михайлович ее туда перевез, она там жила и там умерла. Еще была старшая сестра Анна Михайловна, она была старше Алексея Михайловича. Она жила там с дочерью в Гатчине, и поэтому Валентину перевезли в Гатчину к Анне. То есть у дедушки был старший брат и две старшие сестры: Алексей, Валентина, Анна. Алексей Михайлович жил все время в Москве, он недавно умер только. Жил всю жизнь в Москве. Надо еще сказать, что он спас нашего Лёшу. Сережа служил у нас в Архангельске во флоте, по ремонту подводных лодок. Он наверное там подхватил радиации\u0026hellip; Он рассказывал, как они подъезжают на плавучей ремонтной станции, это все в Северодвинске, Сережа там служил, и делают ремонт подводной лодки. Он рассказывал, что с реакторами дело имел, никакой защиты нет, рукавицы да лом. И поэтому мне кажется у него детей не было\u0026hellip; Он умер, ему было 48 лет. == Часть 10\nЯ к чему это все веду - почему он спас Алексей Павловича. Вот он поступил в Политехнический после школы, первый курс закончил, экстренно весной заставили сдать экзамены весь первый курс и все, забрали их в армию, 150 человек, студентов. Приехали покупатели\u0026hellip; Какие покупатели\u0026hellip; С армии. Куда их должны были направить. Офицеры, их покупателями называют, за солдатами. Где вокзал Воронеж-2, там был призывной пункт, все стенами обнесено. Пока покупатели формируют, мы, мамы, бегаем вокруг забора и пытаемся понять куда наших ребят повезут. И вот покупатели выходят, офицеры, а мы их: \u0026ldquo;Куда ребят наших, куда ребят наших?\u0026rdquo; Все же студенты первого курса. Все 150 человек в вагоны загрузили и увезли. Их сформировали и строем на Воронеж-1 пошли. И мы бежим за нашими ребятками, за ротами. А мы то уже потом по секрету спрашиваем покупателей: \u0026ldquo;Куда наших ребят повезли?\u0026rdquo; Они и говорят: \u0026ldquo;Если они попадут в Фергану или в Самарканд, значит в Афганистан.\u0026rdquo; И наш Алексей Павлович загремел в Саморканд. Получаем письма от него, готовят их там. У меня закипело тут все, я подхватилась и полетела в Самарканд. Павел Михайлович купил билет, с билетами же было трудно. Я хотела хоть повидать его, послушать, что он расскажет. Билет же взяли через Москву, мне сказали, что из Внуково, а оказалось, что из Шереметьево. Я приехала во Внуково, а мня в самолет не сажают. Что делать то\u0026hellip; я на рейсовом автобусе вернулась в Москву. Села на автобус в Шереметьево, приехала, стала добиваться, чтобы меня на самолет посадили. Посадили меня на вечерний самолет. В самолете мне встретилась женщина, она тоже к сыну летела. Он у нее в Саморканде. == Часть 11\nЭтот сын какие-то связи там имеет. Прилетаю в Саморканд, аэропортик маленький, сараюшка какая-то, одноэтажный домик. А я то думала, приеду как в Москву, пережду в аэропорту,а с утра пойду разыскивать Лёну. Мне этаж женищина и говорит, что нельзя здесь оставаться, поедемте к нам. Они меня забрали к себе домой. Она сказала, что если я тут отстанусь, то меня потеряют, и никто больше меня не найдет. Мне нельзя здесь ночью быть. Я так благодарна им, они меня забрали домой, я у них переночевала. И утром ее сын своих офицеров подключил и узнал где нужная мне часть находится. И они меня отвезли. Они договорились с офицерами, чтобы мальчика отпустили. Договорились с квартирой ,чтобы меня устроить. Там рядом с этой ротой оказывается стоял дом. Жили в нем русские, и оказывается, они там давно уже живут. У них там сад большой, и хозяйка меня устроила к себе. Все благодаря этим ребяткам, а то бы я не знала как мне быть. И вот Лешу отпустили. А их рота была еще дежурная, им форму еще не выдавали парадную, чтобы выйти в город. И он в чем был, его в том и отпустили, благодаря вот этим вот ребятам. И я забрала его и мы пошли по городу. Сначала в квартиру, ему надо хоть умыться было, в порядок себя привести. Он и говорит: \u0026ldquo;А наша четырнадцатая рота идет добровольцем в Афганистан. Первая рота,как шла добровольцем, так мы тоже должны. Все должны написать заявление, что идем туда добровольцем. Я говорю: \u0026ldquo;Леша, не пиши заявление\u0026rdquo;. А как он может не писать заявление? Это же получается дезертир. На одну ночь его отпустили, на второй день ег о отпустили тольк выйти. Вот и все. На второй день я улетала оттуда. Прилетаю сюда, плачу, что делать, что делать\u0026hellip; А Павел Михайлович, он такой ды как, ды что\u0026hellip; А я ему: \u0026ldquo;Ну давай, Москва то у тебя есть, у тебя же брат полковник. Действуй!\u0026rdquo; Он сначала, позвонил, поговорил, а потом он вроде поехал туда. А Алексей Михайлович, он тоже такой: \u0026ldquo;Ды как я \u0026hellip; ды что \u0026hellip;мне не удобно, как это я буду за него просить\u0026rdquo;. А Ольга сидит, Ольга - это дочь его, она ровестница Леши., может постарше его говорит: \u0026ldquo;Если бы твой сынок попал туда ты бы побежал, а это племянник ,ты что не хочешь\u0026hellip;\u0026rdquo;. А Алексей Михайлович он скромный такой, а она ему: \u0026ldquo;Действуй!\u0026rdquo;. Ну и все, и как-то все там решилось. То ли он поговорил, он же в Министерстве Обороны работал в то время. Поговорил там с кем-то, кого-то в ресторна сводил. И туда в Самарканд пришла бумага, чтобы отправили его в Москву. Пять человек отправили в Москву. Я говорю: \u0026ldquo;Леша, как там все?\u0026rdquo;. А он говорит, что нам устроили экзамен, он же связистом был. Сидят офицеры, майоры\u0026hellip;. == Часть 12\nТы там что-то включаешь? Я записываю. Все секреты выдал!!! Это секретное дело-то. Я потом дам прочитать. Ну вот Алексей Михайлович помог. И пять человек отправили в Москву. Прилетают они, и через некоторое время у него \u0026ldquo;Боткина\u0026rdquo; и в Подольск его в госпиталь. Боткина? Желтуха это, болезнь. Из Самарканда все были больные. И вот в Подольске он лежит в госпитале, а я к нему езжу. Это уже легче. == Часть 13\nА чем дедушка занимался после армии? После того как его сократили. Хрущев, то все всех сокращал, армию то. И он в Воронеж сюда приехал в форме. Когда демобилизовали его, еще не разрешалось форму снимать, пока документы не придут сюда. Мы адрес дали куда документы должны были прислать. А адрес дали своих девочек, моих с работы, Архангельских. И мы сюда приехали и сразу на квартиру. А документы пришли через месяц, а мы только приехали. А как раз был август месяц, в политехе еще набор был, еще экзамены шли. И он не снимаю формы, пошел сдавать экзамены в политех. И сдал экзамены и его зачислили на вечерний факультет. И он стал рабатать на радиозаводе и учиться на вечернем. И работал он там главным инженером ,а потом на \u0026ldquo;АвтогенМаше\u0026rdquo; работал. У него была специальность инженер. == Часть 14\nЕще была Вера, это тетя моего отца. Ленивая такая была. Бабушка моя Ульяна она так их жалела, детей своих. А та не очень хозяйственная была. То есть у Ульяны был сын Григорий, дочь Вера, и сын Павел? Да. У Павла дети - Валя, Нина, и Коля. Но они уже не Волковы. Валя у нее фамилия Кобрина, Илья ее муж еврей. Во время войны Валя закончила мединцинский институт и ее как военнообязанную отправили в часть где-то там на севере. А вот этот Кобрин, не воевал, он где-то там на севере был. Она там с ним познакомилась. Он был Исаак Муфатьевич. Как? Исаак, а мы все его Илья называли. И вот они поженились. А война закончилась в 45 году и они оказались в Германии и 7 лет там жили. Столько добра оттуда понавывозили. Посылки посылали. А Нина в то время училась в Пед. институте, а Николай учился в Архангельске в судостроительном техникуме. Их надо было содержать. Родителей у них не было отец умер, мамы не было. В это время я тоже училась техникуме. И вот Нинке Валя без конца посылала посылки. Тогда а чулках не мечтали, а она их посылала, чулки фильдеперсовые. И она как вытащит целый узел таких чулок. Я к ним в гости приходила. А Коля в это время в техникуме учился, и они тряпки всякие продавали - за счет этого и жили. А вот хитрый Илья, потому что в 45 году он оказался в Германии, и прожив столько лет, и они оказались у нас в Воронеже проездом. И куда то они уехали в Казахстан что ли. Значит Терентий звали нашего предка? Ведь бабушку Ульяна Терентьевна? Ну да только имя, а кто он такой был неизвестно этот Терентий. Да вот у этой Веры была Нина, Гриша, Шура, Ира, Коля, Мария, аж шестеро их было, но все они какие-то непутевые были. Единственное Ира, она моя двоюродная сестра, мы с ней к бабушке ходили полы мыть, мы с ней были одного года. == Часть 15\nИ этот Илья был очень умный, окончил медицинский и в конце оказался профессором. Я помню его только десятилетним. Он очень умный был, и умер он всего два года назад, но очень рано, 60 лет еще не было. Жалко, у дедушки Паши древа не было. Я вот тольок помню, что у него отец был Михаил, он был отличный сапожник. Он вернулся когда с армии, он в армии этому научился, сапожничать, и это была целая профессия. Это он с первой мировой вернулся? Да, гражданская война. А вот отчество Михаила было Яковлевич, только это и знаю. И это только со слов мамы, или может быть еще кого. Бабушка, расскажи как вы с дедушкой ходили на танцы? Мы приезжали в отпуск только, он в отпуск и я в отпуск. Мы же в школе учились, их потом забрали в армию, а я уехала в техникум, и вот мы оба в отпуск приезжали. И мы встречались с ним бегали на танцы в деревянную церковь. Я помню ты говорила, что дедушка хорошо танцевал? Да, его в училище научили. Их учили танцевать, водили в театр, в филармонию. Тем более он замполит, он должен быть грамотным. Что касается Василия, я о нем мало чего знаю. Могу рассказать только со слов мамы. Он был бездельник. И эта Вера пошла в него. Вот Ульяночка - работящая, мой отец пошел в нее. Вот Василий был бездельник, \u0026ldquo;закладывал\u0026rdquo;, работал плохо. Поедет пилить\u0026hellip; Раньше ездили пилить лес таким большими вертикальными пилами. И вот наши работящие мужики ходили пилить. А пилили то особым образом, большими такими пилами. Бревно клали на страпила и двое, один внизу, один вверху, пилили. И наши мужики ходили так зарабатывали деньги. И он тоже ходил с ними, мама рассказывала, идут пилить и где-то его потеряют. И поэтому когда моя мама вышла замуж за Григория. У них был развалюшка дом, поэтому он начал строить, хозяйство подымать и лошадь купил и детей родили. == Часть 16\nА вот эта Ольга, осталась она? У них родилась одна доченька, Оленька, все ее как конфетку тискали. Оленька, помогла потому что она знает, что такое блат. Мы приезжали к ним, они нас не очень принимали. Они москвичи, они не любят гостей. Ну а мы проездом всегда, переночевали ночь и поехали в Архангельск. То есть у Ольги фамилия сменилась? Наверное, долго долго ей жениха искали, этой Ольге. Но были они все Волыхины изначально. Искали искали жениха, но потом нашли, знакомого какого-то. Мы когда приезжали, она в школе еще была, а позже когда приезжали, она уже взрослая, она все на юге да на юге. И поэтому взрослой я ее не видела. Поэтому я видела ее только школьницей. То есть где-то остались еще Волыхины? В Архангельске Волковы, а Волыхины\u0026hellip; То Валя в Прибалтике родила, Анна уехала в Гатчину, у Анны фамилия наверное Власова. У нее остались Зоя, мальчик Леня и Вовка был. Вот они жили в Гатчине. А что за Зоя? Зоя - это дочь Анны. Она закончила техникум, и когда Анне стало тяжело жить в деревне, она уехала к Зое. А у Зои фамилия - Белова. А мужа как зовут? И сколько им лет? Мне ровестники. Мы же с Зоей вместе закончили техникум. И школу вместе закончили. Вот я закончила школу и Зоя и еще парень Леня и уехали, а все остальные остались рубить лес. Никто из них школу не закончили. А Зоя Белова жила в Гатчине и вышла там замуж, а у Валентины детей не было. Когда у нее муж умер, она осталась одна, и Павел Михайлович съездил, и помог ей переехать в Гатчину к Анне. А кто-нибудь остался в Гатчине? Не знаю, Зоя, если жива. == Часть 17\nЗоя пару раз приезжала в Москву, но их там не любили москвичи. Они приедут, да уедут. Особенно, Зоя, да Полина Ивановна - это теща Алексея. Она такая с видом \u0026ldquo;че это вы приехали\u0026rdquo;. Единственное они хорошо Павла принимали. До женитьбы он когда первый год в Германии был, он купил шубку для Ольги и привез. И вот они его принимали, потому что он из Германии привез шубу. А когды мы приезжали, у нас денег мало было, особо подарков дорогих не возили, и они нас не очень любили. Я Ольге года три назад позвонила, когда в Москве всякие события были. Она сказала, что их квартиру снесли, и им дали трехкомнатную квартиру на стадионе \u0026hellip; Во-общем один раз была там в новой квартире, но они нас не очень жаловали. Приедешь, жмешься там, это ж надо было дорогие подарки везти, а мне нечего везти. (Дальше в дверь позвонила тетя Нина) ","permalink":"https://volyx.in/posts/2014-1-1-grandma-new-imported/","summary":"\u003cp\u003e= Бабушкин рассказ на кухне\u003c/p\u003e\n\u003cp\u003e== Часть 1\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eНу я ничего о них не могу сказать.  У меня составлено древо их, хоть и  небольшое.\u003c/li\u003e\n\u003cli\u003eСейчас пойдем посмотрим\u003c/li\u003e\n\u003cli\u003eЯ вам покажу. Но я их тоже никого не знаю \u0026hellip; только отца да деда, да и больше никого.\nЗнаю еще откуда свекровь, это ваша бабушка из\u0026hellip;. где Некрасовы все живут. Они Некрасовы за Двиной живут. Ты был же в деревне? Ты представляешь где они есть?\u003c/li\u003e\n\u003cli\u003eНе, не был.\u003c/li\u003e\n\u003cli\u003eТы разве никогда в деревне не был?\u0026hellip; Там же у нас Северная Двина она очень широкая река, очень большая\u0026hellip;\u003c/li\u003e\n\u003cli\u003eЯ очень хочу съездить, но я не знаю куда.\u003c/li\u003e\n\u003cli\u003eТеперь уже дом продали\u0026hellip; А там где отец жил, там вообще все развалилось, там уже никого нет, я имею ввиду, что деревня уже вся заросла травой, лесом. Очень жаль, что вы небыли. Я не знаю откуда эти Волыхины, не знаю\u0026hellip; да они веками там жили, так бог их знает\u0026hellip; Но, как раньше  говорили - было переселение с Западной Украины, не то что переселение \u0026hellip; они сами бежали оттуда, бежали в эти леса. Может кто-то был ссыльный, я не знаю. Но ссыльные они были в какие времена, времена революции, времена Сталина..(времена не Сталина, более ранние)\nУ нас там в основном сидели за это все,  там где Соловецкие острова, Соловецкий монастырь, там в основном заключенные. Я бывала там один раз, но это было\u0026hellip;\u003c/li\u003e\n\u003cli\u003eКак гость надеюсь?\u003c/li\u003e\n\u003cli\u003eНе как гость, у нас экскурсия была. Но все равно, помимо экскурсии у нас Зоя, Евгения жена,  она занималась туризмом, и она нас к группе устраивала, своих родственников. Я просто нелегально там была, но все равно мы ходили со всей группой. Но я что хочу сказать, вот казематы все эти я видела, как они там сидели. Но кто в основном сидели?\nЯ же тоже не очень хорошо все это знаю. Вы наверное по истории больше знаете.\nНо до этого же был монастырь, монастырь известный, там жили в основном монахи, и женщины там были. Я к чему это веду\u0026hellip; Моя тетя, мамина старшая сестра, она девочкой повредила себе ногу, она была почти инвалид. И ее как девочку отправили в этот монастырь, ее взяли на учебу. Ее научили там шить, научили ремеслу, и она все жизнь была очень хорошей портнихой, когда вернулась домой. Какие года это?\nЕсли моя мама, бабушка ваша, 1892 года рождения. Так это старшая сестра, она старше лет на 30 - их же было 5 сестер, моя мама была последней.\u003c/li\u003e\n\u003cli\u003eЕсли это 1860 год, это значит твоя бабушка застала крепостное право?\u003c/li\u003e\n\u003cli\u003eТам крепостного права не было. Это северные люди, были свободные люди от всего. Только их считали\u0026hellip; “царёвы люди”, они только подать платили царю, никаких помещиков, никаких фабрикантов не было. Они занимались своим ремеслом. За счет леса жили, вырабатывали дегать, вырабатывали смолы. А по Северной Двине ходили баржи, пароходики ходили. И они всю эту продукцию скупали.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e== Часть 2\u003c/p\u003e","title":"Бабушкин рассказ на кухне"}]